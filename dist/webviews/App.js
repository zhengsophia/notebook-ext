"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from2, except, desc) => {
  if (from2 && typeof from2 === "object" || typeof from2 === "function") {
    for (let key of __getOwnPropNames(from2))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// <define:process.env>
var define_process_env_default;
var init_define_process_env = __esm({
  "<define:process.env>"() {
    define_process_env_default = { TERM_PROGRAM: "vscode", NODE: "/usr/local/bin/node", GEM_HOME: "/Users/sophiazheng/.gem/ruby/3.1.3", INIT_CWD: "/Users/sophiazheng/Documents/GitHub/notebook-ext", TERM: "xterm-256color", SHELL: "/bin/zsh", HOMEBREW_REPOSITORY: "/opt/homebrew", TMPDIR: "/var/folders/vn/skw3dlhd3y79vqz8w4rvqf000000gn/T/", npm_config_global_prefix: "/Users/sophiazheng/.npm-global", TERM_PROGRAM_VERSION: "1.98.2", ORIGINAL_XDG_CURRENT_DESKTOP: "undefined", MallocNanoZone: "0", COLOR: "1", npm_config_noproxy: "", npm_config_local_prefix: "/Users/sophiazheng/Documents/GitHub/notebook-ext", USER: "sophiazheng", COMMAND_MODE: "unix2003", npm_package_engines_vscode: "^1.96.0", npm_config_globalconfig: "/Users/sophiazheng/.npm-global/etc/npmrc", SSH_AUTH_SOCK: "/private/tmp/com.apple.launchd.JltgYecijF/Listeners", __CF_USER_TEXT_ENCODING: "0x1F5:0x0:0x0", npm_execpath: "/usr/local/lib/node_modules/npm/bin/npm-cli.js", PYDEVD_DISABLE_FILE_VALIDATION: "1", PATH: "/Users/sophiazheng/Documents/GitHub/notebook-ext/node_modules/.bin:/Users/sophiazheng/Documents/GitHub/node_modules/.bin:/Users/sophiazheng/Documents/node_modules/.bin:/Users/sophiazheng/node_modules/.bin:/Users/node_modules/.bin:/node_modules/.bin:/usr/local/lib/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/Users/sophiazheng/Documents/GitHub/notebook-ext/node_modules/.bin:/Users/sophiazheng/Documents/GitHub/node_modules/.bin:/Users/sophiazheng/Documents/node_modules/.bin:/Users/sophiazheng/node_modules/.bin:/Users/node_modules/.bin:/node_modules/.bin:/usr/local/lib/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/Users/sophiazheng/.rbenv/shims:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Users/sophiazheng/.gem/ruby/3.1.3/bin:/Users/sophiazheng/.rubies/ruby-3.1.3/lib/ruby/gems/3.1.0/bin:/Users/sophiazheng/.rubies/ruby-3.1.3/bin:/Library/Frameworks/Python.framework/Versions/3.12/bin:/Library/Frameworks/Python.framework/Versions/3.11/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/Library/Frameworks/Python.framework/Versions/3.9/bin:/Users/sophiazheng/.local/bin:/Users/sophiazheng/.vscode/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts", _: "/usr/local/bin/node", npm_package_json: "/Users/sophiazheng/Documents/GitHub/notebook-ext/package.json", __CFBundleIdentifier: "com.microsoft.VSCode", npm_config_init_module: "/Users/sophiazheng/.npm-init.js", npm_config_userconfig: "/Users/sophiazheng/.npmrc", PWD: "/Users/sophiazheng/Documents/GitHub/notebook-ext", npm_command: "run-script", EDITOR: "vi", npm_lifecycle_event: "watch:webviews", LANG: "en_US.UTF-8", npm_package_name: "notebook-ext", BUNDLED_DEBUGPY_PATH: "/Users/sophiazheng/.vscode/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/libs/debugpy", VSCODE_GIT_ASKPASS_EXTRA_ARGS: "", XPC_FLAGS: "0x0", npm_config_npm_version: "10.8.2", RUBY_ENGINE: "ruby", RBENV_SHELL: "bash", npm_config_node_gyp: "/usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js", XPC_SERVICE_NAME: "0", npm_package_version: "0.0.1", VSCODE_DEBUGPY_ADAPTER_ENDPOINTS: "/Users/sophiazheng/.vscode/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/.noConfigDebugAdapterEndpoints/endpoint-8106f24c3e235b1f.txt", SHLVL: "3", HOME: "/Users/sophiazheng", VSCODE_GIT_ASKPASS_MAIN: "/Applications/Visual Studio Code.app/Contents/Resources/app/extensions/git/dist/askpass-main.js", GEM_ROOT: "/Users/sophiazheng/.rubies/ruby-3.1.3/lib/ruby/gems/3.1.0", HOMEBREW_PREFIX: "/opt/homebrew", LOGNAME: "sophiazheng", npm_config_cache: "/Users/sophiazheng/.npm", npm_lifecycle_script: "node esbuild.webviews.mjs --watch", VSCODE_GIT_IPC_HANDLE: "/var/folders/vn/skw3dlhd3y79vqz8w4rvqf000000gn/T/vscode-git-43e07d1bef.sock", GEM_PATH: "/Users/sophiazheng/.gem/ruby/3.1.3:/Users/sophiazheng/.rubies/ruby-3.1.3/lib/ruby/gems/3.1.0", RUBY_ROOT: "/Users/sophiazheng/.rubies/ruby-3.1.3", npm_config_user_agent: "npm/10.8.2 node/v20.17.0 darwin arm64 workspaces/false", VSCODE_GIT_ASKPASS_NODE: "/Applications/Visual Studio Code.app/Contents/Frameworks/Code Helper (Plugin).app/Contents/MacOS/Code Helper (Plugin)", GIT_ASKPASS: "/Applications/Visual Studio Code.app/Contents/Resources/app/extensions/git/dist/askpass.sh", INFOPATH: "/opt/homebrew/share/info:", HOMEBREW_CELLAR: "/opt/homebrew/Cellar", RUBYOPT: "", RUBY_VERSION: "3.1.3", COLORTERM: "truecolor", npm_config_prefix: "/Users/sophiazheng/.npm-global", npm_node_execpath: "/usr/local/bin/node" };
  }
});

// node_modules/react/cjs/react.production.js
var require_react_production = __commonJS({
  "node_modules/react/cjs/react.production.js"(exports2) {
    "use strict";
    init_define_process_env();
    var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element");
    var REACT_PORTAL_TYPE = Symbol.for("react.portal");
    var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
    var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
    var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    var REACT_CONSUMER_TYPE = Symbol.for("react.consumer");
    var REACT_CONTEXT_TYPE = Symbol.for("react.context");
    var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
    var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
    var REACT_MEMO_TYPE = Symbol.for("react.memo");
    var REACT_LAZY_TYPE = Symbol.for("react.lazy");
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    function getIteratorFn(maybeIterable) {
      if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
      maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
      return "function" === typeof maybeIterable ? maybeIterable : null;
    }
    var ReactNoopUpdateQueue = {
      isMounted: function() {
        return false;
      },
      enqueueForceUpdate: function() {
      },
      enqueueReplaceState: function() {
      },
      enqueueSetState: function() {
      }
    };
    var assign2 = Object.assign;
    var emptyObject = {};
    function Component(props, context, updater) {
      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;
    }
    Component.prototype.isReactComponent = {};
    Component.prototype.setState = function(partialState, callback) {
      if ("object" !== typeof partialState && "function" !== typeof partialState && null != partialState)
        throw Error(
          "takes an object of state variables to update or a function which returns an object of state variables."
        );
      this.updater.enqueueSetState(this, partialState, callback, "setState");
    };
    Component.prototype.forceUpdate = function(callback) {
      this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
    };
    function ComponentDummy() {
    }
    ComponentDummy.prototype = Component.prototype;
    function PureComponent(props, context, updater) {
      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;
    }
    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent;
    assign2(pureComponentPrototype, Component.prototype);
    pureComponentPrototype.isPureReactComponent = true;
    var isArrayImpl = Array.isArray;
    var ReactSharedInternals = { H: null, A: null, T: null, S: null, V: null };
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    function ReactElement(type, key, self2, source, owner, props) {
      self2 = props.ref;
      return {
        $$typeof: REACT_ELEMENT_TYPE,
        type,
        key,
        ref: void 0 !== self2 ? self2 : null,
        props
      };
    }
    function cloneAndReplaceKey(oldElement, newKey) {
      return ReactElement(
        oldElement.type,
        newKey,
        void 0,
        void 0,
        void 0,
        oldElement.props
      );
    }
    function isValidElement(object) {
      return "object" === typeof object && null !== object && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function escape(key) {
      var escaperLookup = { "=": "=0", ":": "=2" };
      return "$" + key.replace(/[=:]/g, function(match2) {
        return escaperLookup[match2];
      });
    }
    var userProvidedKeyEscapeRegex = /\/+/g;
    function getElementKey(element, index) {
      return "object" === typeof element && null !== element && null != element.key ? escape("" + element.key) : index.toString(36);
    }
    function noop$1() {
    }
    function resolveThenable(thenable) {
      switch (thenable.status) {
        case "fulfilled":
          return thenable.value;
        case "rejected":
          throw thenable.reason;
        default:
          switch ("string" === typeof thenable.status ? thenable.then(noop$1, noop$1) : (thenable.status = "pending", thenable.then(
            function(fulfilledValue) {
              "pending" === thenable.status && (thenable.status = "fulfilled", thenable.value = fulfilledValue);
            },
            function(error) {
              "pending" === thenable.status && (thenable.status = "rejected", thenable.reason = error);
            }
          )), thenable.status) {
            case "fulfilled":
              return thenable.value;
            case "rejected":
              throw thenable.reason;
          }
      }
      throw thenable;
    }
    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
      var type = typeof children;
      if ("undefined" === type || "boolean" === type) children = null;
      var invokeCallback = false;
      if (null === children) invokeCallback = true;
      else
        switch (type) {
          case "bigint":
          case "string":
          case "number":
            invokeCallback = true;
            break;
          case "object":
            switch (children.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                invokeCallback = true;
                break;
              case REACT_LAZY_TYPE:
                return invokeCallback = children._init, mapIntoArray(
                  invokeCallback(children._payload),
                  array,
                  escapedPrefix,
                  nameSoFar,
                  callback
                );
            }
        }
      if (invokeCallback)
        return callback = callback(children), invokeCallback = "" === nameSoFar ? "." + getElementKey(children, 0) : nameSoFar, isArrayImpl(callback) ? (escapedPrefix = "", null != invokeCallback && (escapedPrefix = invokeCallback.replace(userProvidedKeyEscapeRegex, "$&/") + "/"), mapIntoArray(callback, array, escapedPrefix, "", function(c) {
          return c;
        })) : null != callback && (isValidElement(callback) && (callback = cloneAndReplaceKey(
          callback,
          escapedPrefix + (null == callback.key || children && children.key === callback.key ? "" : ("" + callback.key).replace(
            userProvidedKeyEscapeRegex,
            "$&/"
          ) + "/") + invokeCallback
        )), array.push(callback)), 1;
      invokeCallback = 0;
      var nextNamePrefix = "" === nameSoFar ? "." : nameSoFar + ":";
      if (isArrayImpl(children))
        for (var i = 0; i < children.length; i++)
          nameSoFar = children[i], type = nextNamePrefix + getElementKey(nameSoFar, i), invokeCallback += mapIntoArray(
            nameSoFar,
            array,
            escapedPrefix,
            type,
            callback
          );
      else if (i = getIteratorFn(children), "function" === typeof i)
        for (children = i.call(children), i = 0; !(nameSoFar = children.next()).done; )
          nameSoFar = nameSoFar.value, type = nextNamePrefix + getElementKey(nameSoFar, i++), invokeCallback += mapIntoArray(
            nameSoFar,
            array,
            escapedPrefix,
            type,
            callback
          );
      else if ("object" === type) {
        if ("function" === typeof children.then)
          return mapIntoArray(
            resolveThenable(children),
            array,
            escapedPrefix,
            nameSoFar,
            callback
          );
        array = String(children);
        throw Error(
          "Objects are not valid as a React child (found: " + ("[object Object]" === array ? "object with keys {" + Object.keys(children).join(", ") + "}" : array) + "). If you meant to render a collection of children, use an array instead."
        );
      }
      return invokeCallback;
    }
    function mapChildren(children, func, context) {
      if (null == children) return children;
      var result = [], count = 0;
      mapIntoArray(children, result, "", "", function(child) {
        return func.call(context, child, count++);
      });
      return result;
    }
    function lazyInitializer(payload) {
      if (-1 === payload._status) {
        var ctor = payload._result;
        ctor = ctor();
        ctor.then(
          function(moduleObject) {
            if (0 === payload._status || -1 === payload._status)
              payload._status = 1, payload._result = moduleObject;
          },
          function(error) {
            if (0 === payload._status || -1 === payload._status)
              payload._status = 2, payload._result = error;
          }
        );
        -1 === payload._status && (payload._status = 0, payload._result = ctor);
      }
      if (1 === payload._status) return payload._result.default;
      throw payload._result;
    }
    var reportGlobalError = "function" === typeof reportError ? reportError : function(error) {
      if ("object" === typeof window && "function" === typeof window.ErrorEvent) {
        var event = new window.ErrorEvent("error", {
          bubbles: true,
          cancelable: true,
          message: "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error),
          error
        });
        if (!window.dispatchEvent(event)) return;
      } else if ("object" === typeof process && "function" === typeof process.emit) {
        process.emit("uncaughtException", error);
        return;
      }
      console.error(error);
    };
    function noop() {
    }
    exports2.Children = {
      map: mapChildren,
      forEach: function(children, forEachFunc, forEachContext) {
        mapChildren(
          children,
          function() {
            forEachFunc.apply(this, arguments);
          },
          forEachContext
        );
      },
      count: function(children) {
        var n = 0;
        mapChildren(children, function() {
          n++;
        });
        return n;
      },
      toArray: function(children) {
        return mapChildren(children, function(child) {
          return child;
        }) || [];
      },
      only: function(children) {
        if (!isValidElement(children))
          throw Error(
            "React.Children.only expected to receive a single React element child."
          );
        return children;
      }
    };
    exports2.Component = Component;
    exports2.Fragment = REACT_FRAGMENT_TYPE;
    exports2.Profiler = REACT_PROFILER_TYPE;
    exports2.PureComponent = PureComponent;
    exports2.StrictMode = REACT_STRICT_MODE_TYPE;
    exports2.Suspense = REACT_SUSPENSE_TYPE;
    exports2.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = ReactSharedInternals;
    exports2.__COMPILER_RUNTIME = {
      __proto__: null,
      c: function(size) {
        return ReactSharedInternals.H.useMemoCache(size);
      }
    };
    exports2.cache = function(fn) {
      return function() {
        return fn.apply(null, arguments);
      };
    };
    exports2.cloneElement = function(element, config, children) {
      if (null === element || void 0 === element)
        throw Error(
          "The argument must be a React element, but you passed " + element + "."
        );
      var props = assign2({}, element.props), key = element.key, owner = void 0;
      if (null != config)
        for (propName in void 0 !== config.ref && (owner = void 0), void 0 !== config.key && (key = "" + config.key), config)
          !hasOwnProperty.call(config, propName) || "key" === propName || "__self" === propName || "__source" === propName || "ref" === propName && void 0 === config.ref || (props[propName] = config[propName]);
      var propName = arguments.length - 2;
      if (1 === propName) props.children = children;
      else if (1 < propName) {
        for (var childArray = Array(propName), i = 0; i < propName; i++)
          childArray[i] = arguments[i + 2];
        props.children = childArray;
      }
      return ReactElement(element.type, key, void 0, void 0, owner, props);
    };
    exports2.createContext = function(defaultValue) {
      defaultValue = {
        $$typeof: REACT_CONTEXT_TYPE,
        _currentValue: defaultValue,
        _currentValue2: defaultValue,
        _threadCount: 0,
        Provider: null,
        Consumer: null
      };
      defaultValue.Provider = defaultValue;
      defaultValue.Consumer = {
        $$typeof: REACT_CONSUMER_TYPE,
        _context: defaultValue
      };
      return defaultValue;
    };
    exports2.createElement = function(type, config, children) {
      var propName, props = {}, key = null;
      if (null != config)
        for (propName in void 0 !== config.key && (key = "" + config.key), config)
          hasOwnProperty.call(config, propName) && "key" !== propName && "__self" !== propName && "__source" !== propName && (props[propName] = config[propName]);
      var childrenLength = arguments.length - 2;
      if (1 === childrenLength) props.children = children;
      else if (1 < childrenLength) {
        for (var childArray = Array(childrenLength), i = 0; i < childrenLength; i++)
          childArray[i] = arguments[i + 2];
        props.children = childArray;
      }
      if (type && type.defaultProps)
        for (propName in childrenLength = type.defaultProps, childrenLength)
          void 0 === props[propName] && (props[propName] = childrenLength[propName]);
      return ReactElement(type, key, void 0, void 0, null, props);
    };
    exports2.createRef = function() {
      return { current: null };
    };
    exports2.forwardRef = function(render) {
      return { $$typeof: REACT_FORWARD_REF_TYPE, render };
    };
    exports2.isValidElement = isValidElement;
    exports2.lazy = function(ctor) {
      return {
        $$typeof: REACT_LAZY_TYPE,
        _payload: { _status: -1, _result: ctor },
        _init: lazyInitializer
      };
    };
    exports2.memo = function(type, compare) {
      return {
        $$typeof: REACT_MEMO_TYPE,
        type,
        compare: void 0 === compare ? null : compare
      };
    };
    exports2.startTransition = function(scope) {
      var prevTransition = ReactSharedInternals.T, currentTransition = {};
      ReactSharedInternals.T = currentTransition;
      try {
        var returnValue = scope(), onStartTransitionFinish = ReactSharedInternals.S;
        null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
        "object" === typeof returnValue && null !== returnValue && "function" === typeof returnValue.then && returnValue.then(noop, reportGlobalError);
      } catch (error) {
        reportGlobalError(error);
      } finally {
        ReactSharedInternals.T = prevTransition;
      }
    };
    exports2.unstable_useCacheRefresh = function() {
      return ReactSharedInternals.H.useCacheRefresh();
    };
    exports2.use = function(usable) {
      return ReactSharedInternals.H.use(usable);
    };
    exports2.useActionState = function(action, initialState, permalink) {
      return ReactSharedInternals.H.useActionState(action, initialState, permalink);
    };
    exports2.useCallback = function(callback, deps) {
      return ReactSharedInternals.H.useCallback(callback, deps);
    };
    exports2.useContext = function(Context) {
      return ReactSharedInternals.H.useContext(Context);
    };
    exports2.useDebugValue = function() {
    };
    exports2.useDeferredValue = function(value, initialValue) {
      return ReactSharedInternals.H.useDeferredValue(value, initialValue);
    };
    exports2.useEffect = function(create, createDeps, update) {
      var dispatcher = ReactSharedInternals.H;
      if ("function" === typeof update)
        throw Error(
          "useEffect CRUD overload is not enabled in this build of React."
        );
      return dispatcher.useEffect(create, createDeps);
    };
    exports2.useId = function() {
      return ReactSharedInternals.H.useId();
    };
    exports2.useImperativeHandle = function(ref, create, deps) {
      return ReactSharedInternals.H.useImperativeHandle(ref, create, deps);
    };
    exports2.useInsertionEffect = function(create, deps) {
      return ReactSharedInternals.H.useInsertionEffect(create, deps);
    };
    exports2.useLayoutEffect = function(create, deps) {
      return ReactSharedInternals.H.useLayoutEffect(create, deps);
    };
    exports2.useMemo = function(create, deps) {
      return ReactSharedInternals.H.useMemo(create, deps);
    };
    exports2.useOptimistic = function(passthrough, reducer) {
      return ReactSharedInternals.H.useOptimistic(passthrough, reducer);
    };
    exports2.useReducer = function(reducer, initialArg, init) {
      return ReactSharedInternals.H.useReducer(reducer, initialArg, init);
    };
    exports2.useRef = function(initialValue) {
      return ReactSharedInternals.H.useRef(initialValue);
    };
    exports2.useState = function(initialState) {
      return ReactSharedInternals.H.useState(initialState);
    };
    exports2.useSyncExternalStore = function(subscribe, getSnapshot, getServerSnapshot) {
      return ReactSharedInternals.H.useSyncExternalStore(
        subscribe,
        getSnapshot,
        getServerSnapshot
      );
    };
    exports2.useTransition = function() {
      return ReactSharedInternals.H.useTransition();
    };
    exports2.version = "19.1.0";
  }
});

// node_modules/react/cjs/react.development.js
var require_react_development = __commonJS({
  "node_modules/react/cjs/react.development.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    "production" !== define_process_env_default.NODE_ENV && function() {
      function defineDeprecationWarning(methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
          get: function() {
            console.warn(
              "%s(...) is deprecated in plain JavaScript React classes. %s",
              info[0],
              info[1]
            );
          }
        });
      }
      function getIteratorFn(maybeIterable) {
        if (null === maybeIterable || "object" !== typeof maybeIterable)
          return null;
        maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
        return "function" === typeof maybeIterable ? maybeIterable : null;
      }
      function warnNoop(publicInstance, callerName) {
        publicInstance = (publicInstance = publicInstance.constructor) && (publicInstance.displayName || publicInstance.name) || "ReactClass";
        var warningKey = publicInstance + "." + callerName;
        didWarnStateUpdateForUnmountedComponent[warningKey] || (console.error(
          "Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.",
          callerName,
          publicInstance
        ), didWarnStateUpdateForUnmountedComponent[warningKey] = true);
      }
      function Component(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      function ComponentDummy() {
      }
      function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        try {
          testStringCoercion(value);
          var JSCompiler_inline_result = false;
        } catch (e) {
          JSCompiler_inline_result = true;
        }
        if (JSCompiler_inline_result) {
          JSCompiler_inline_result = console;
          var JSCompiler_temp_const = JSCompiler_inline_result.error;
          var JSCompiler_inline_result$jscomp$0 = "function" === typeof Symbol && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          JSCompiler_temp_const.call(
            JSCompiler_inline_result,
            "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
            JSCompiler_inline_result$jscomp$0
          );
          return testStringCoercion(value);
        }
      }
      function getComponentNameFromType(type) {
        if (null == type) return null;
        if ("function" === typeof type)
          return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
        if ("string" === typeof type) return type;
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
          case REACT_ACTIVITY_TYPE:
            return "Activity";
        }
        if ("object" === typeof type)
          switch ("number" === typeof type.tag && console.error(
            "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
          ), type.$$typeof) {
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_CONTEXT_TYPE:
              return (type.displayName || "Context") + ".Provider";
            case REACT_CONSUMER_TYPE:
              return (type._context.displayName || "Context") + ".Consumer";
            case REACT_FORWARD_REF_TYPE:
              var innerType = type.render;
              type = type.displayName;
              type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
              return type;
            case REACT_MEMO_TYPE:
              return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE:
              innerType = type._payload;
              type = type._init;
              try {
                return getComponentNameFromType(type(innerType));
              } catch (x) {
              }
          }
        return null;
      }
      function getTaskName(type) {
        if (type === REACT_FRAGMENT_TYPE) return "<>";
        if ("object" === typeof type && null !== type && type.$$typeof === REACT_LAZY_TYPE)
          return "<...>";
        try {
          var name = getComponentNameFromType(type);
          return name ? "<" + name + ">" : "<...>";
        } catch (x) {
          return "<...>";
        }
      }
      function getOwner() {
        var dispatcher = ReactSharedInternals.A;
        return null === dispatcher ? null : dispatcher.getOwner();
      }
      function UnknownOwner() {
        return Error("react-stack-top-frame");
      }
      function hasValidKey(config) {
        if (hasOwnProperty.call(config, "key")) {
          var getter = Object.getOwnPropertyDescriptor(config, "key").get;
          if (getter && getter.isReactWarning) return false;
        }
        return void 0 !== config.key;
      }
      function defineKeyPropWarningGetter(props, displayName) {
        function warnAboutAccessingKey() {
          specialPropKeyWarningShown || (specialPropKeyWarningShown = true, console.error(
            "%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)",
            displayName
          ));
        }
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, "key", {
          get: warnAboutAccessingKey,
          configurable: true
        });
      }
      function elementRefGetterWithDeprecationWarning() {
        var componentName = getComponentNameFromType(this.type);
        didWarnAboutElementRef[componentName] || (didWarnAboutElementRef[componentName] = true, console.error(
          "Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."
        ));
        componentName = this.props.ref;
        return void 0 !== componentName ? componentName : null;
      }
      function ReactElement(type, key, self2, source, owner, props, debugStack, debugTask) {
        self2 = props.ref;
        type = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          props,
          _owner: owner
        };
        null !== (void 0 !== self2 ? self2 : null) ? Object.defineProperty(type, "ref", {
          enumerable: false,
          get: elementRefGetterWithDeprecationWarning
        }) : Object.defineProperty(type, "ref", { enumerable: false, value: null });
        type._store = {};
        Object.defineProperty(type._store, "validated", {
          configurable: false,
          enumerable: false,
          writable: true,
          value: 0
        });
        Object.defineProperty(type, "_debugInfo", {
          configurable: false,
          enumerable: false,
          writable: true,
          value: null
        });
        Object.defineProperty(type, "_debugStack", {
          configurable: false,
          enumerable: false,
          writable: true,
          value: debugStack
        });
        Object.defineProperty(type, "_debugTask", {
          configurable: false,
          enumerable: false,
          writable: true,
          value: debugTask
        });
        Object.freeze && (Object.freeze(type.props), Object.freeze(type));
        return type;
      }
      function cloneAndReplaceKey(oldElement, newKey) {
        newKey = ReactElement(
          oldElement.type,
          newKey,
          void 0,
          void 0,
          oldElement._owner,
          oldElement.props,
          oldElement._debugStack,
          oldElement._debugTask
        );
        oldElement._store && (newKey._store.validated = oldElement._store.validated);
        return newKey;
      }
      function isValidElement(object) {
        return "object" === typeof object && null !== object && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      function escape(key) {
        var escaperLookup = { "=": "=0", ":": "=2" };
        return "$" + key.replace(/[=:]/g, function(match2) {
          return escaperLookup[match2];
        });
      }
      function getElementKey(element, index) {
        return "object" === typeof element && null !== element && null != element.key ? (checkKeyStringCoercion(element.key), escape("" + element.key)) : index.toString(36);
      }
      function noop$1() {
      }
      function resolveThenable(thenable) {
        switch (thenable.status) {
          case "fulfilled":
            return thenable.value;
          case "rejected":
            throw thenable.reason;
          default:
            switch ("string" === typeof thenable.status ? thenable.then(noop$1, noop$1) : (thenable.status = "pending", thenable.then(
              function(fulfilledValue) {
                "pending" === thenable.status && (thenable.status = "fulfilled", thenable.value = fulfilledValue);
              },
              function(error) {
                "pending" === thenable.status && (thenable.status = "rejected", thenable.reason = error);
              }
            )), thenable.status) {
              case "fulfilled":
                return thenable.value;
              case "rejected":
                throw thenable.reason;
            }
        }
        throw thenable;
      }
      function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if ("undefined" === type || "boolean" === type) children = null;
        var invokeCallback = false;
        if (null === children) invokeCallback = true;
        else
          switch (type) {
            case "bigint":
            case "string":
            case "number":
              invokeCallback = true;
              break;
            case "object":
              switch (children.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  invokeCallback = true;
                  break;
                case REACT_LAZY_TYPE:
                  return invokeCallback = children._init, mapIntoArray(
                    invokeCallback(children._payload),
                    array,
                    escapedPrefix,
                    nameSoFar,
                    callback
                  );
              }
          }
        if (invokeCallback) {
          invokeCallback = children;
          callback = callback(invokeCallback);
          var childKey = "" === nameSoFar ? "." + getElementKey(invokeCallback, 0) : nameSoFar;
          isArrayImpl(callback) ? (escapedPrefix = "", null != childKey && (escapedPrefix = childKey.replace(userProvidedKeyEscapeRegex, "$&/") + "/"), mapIntoArray(callback, array, escapedPrefix, "", function(c) {
            return c;
          })) : null != callback && (isValidElement(callback) && (null != callback.key && (invokeCallback && invokeCallback.key === callback.key || checkKeyStringCoercion(callback.key)), escapedPrefix = cloneAndReplaceKey(
            callback,
            escapedPrefix + (null == callback.key || invokeCallback && invokeCallback.key === callback.key ? "" : ("" + callback.key).replace(
              userProvidedKeyEscapeRegex,
              "$&/"
            ) + "/") + childKey
          ), "" !== nameSoFar && null != invokeCallback && isValidElement(invokeCallback) && null == invokeCallback.key && invokeCallback._store && !invokeCallback._store.validated && (escapedPrefix._store.validated = 2), callback = escapedPrefix), array.push(callback));
          return 1;
        }
        invokeCallback = 0;
        childKey = "" === nameSoFar ? "." : nameSoFar + ":";
        if (isArrayImpl(children))
          for (var i = 0; i < children.length; i++)
            nameSoFar = children[i], type = childKey + getElementKey(nameSoFar, i), invokeCallback += mapIntoArray(
              nameSoFar,
              array,
              escapedPrefix,
              type,
              callback
            );
        else if (i = getIteratorFn(children), "function" === typeof i)
          for (i === children.entries && (didWarnAboutMaps || console.warn(
            "Using Maps as children is not supported. Use an array of keyed ReactElements instead."
          ), didWarnAboutMaps = true), children = i.call(children), i = 0; !(nameSoFar = children.next()).done; )
            nameSoFar = nameSoFar.value, type = childKey + getElementKey(nameSoFar, i++), invokeCallback += mapIntoArray(
              nameSoFar,
              array,
              escapedPrefix,
              type,
              callback
            );
        else if ("object" === type) {
          if ("function" === typeof children.then)
            return mapIntoArray(
              resolveThenable(children),
              array,
              escapedPrefix,
              nameSoFar,
              callback
            );
          array = String(children);
          throw Error(
            "Objects are not valid as a React child (found: " + ("[object Object]" === array ? "object with keys {" + Object.keys(children).join(", ") + "}" : array) + "). If you meant to render a collection of children, use an array instead."
          );
        }
        return invokeCallback;
      }
      function mapChildren(children, func, context) {
        if (null == children) return children;
        var result = [], count = 0;
        mapIntoArray(children, result, "", "", function(child) {
          return func.call(context, child, count++);
        });
        return result;
      }
      function lazyInitializer(payload) {
        if (-1 === payload._status) {
          var ctor = payload._result;
          ctor = ctor();
          ctor.then(
            function(moduleObject) {
              if (0 === payload._status || -1 === payload._status)
                payload._status = 1, payload._result = moduleObject;
            },
            function(error) {
              if (0 === payload._status || -1 === payload._status)
                payload._status = 2, payload._result = error;
            }
          );
          -1 === payload._status && (payload._status = 0, payload._result = ctor);
        }
        if (1 === payload._status)
          return ctor = payload._result, void 0 === ctor && console.error(
            "lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?",
            ctor
          ), "default" in ctor || console.error(
            "lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))",
            ctor
          ), ctor.default;
        throw payload._result;
      }
      function resolveDispatcher() {
        var dispatcher = ReactSharedInternals.H;
        null === dispatcher && console.error(
          "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."
        );
        return dispatcher;
      }
      function noop() {
      }
      function enqueueTask(task) {
        if (null === enqueueTaskImpl)
          try {
            var requireString = ("require" + Math.random()).slice(0, 7);
            enqueueTaskImpl = (module2 && module2[requireString]).call(
              module2,
              "timers"
            ).setImmediate;
          } catch (_err) {
            enqueueTaskImpl = function(callback) {
              false === didWarnAboutMessageChannel && (didWarnAboutMessageChannel = true, "undefined" === typeof MessageChannel && console.error(
                "This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."
              ));
              var channel = new MessageChannel();
              channel.port1.onmessage = callback;
              channel.port2.postMessage(void 0);
            };
          }
        return enqueueTaskImpl(task);
      }
      function aggregateErrors(errors) {
        return 1 < errors.length && "function" === typeof AggregateError ? new AggregateError(errors) : errors[0];
      }
      function popActScope(prevActQueue, prevActScopeDepth) {
        prevActScopeDepth !== actScopeDepth - 1 && console.error(
          "You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. "
        );
        actScopeDepth = prevActScopeDepth;
      }
      function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
        var queue = ReactSharedInternals.actQueue;
        if (null !== queue)
          if (0 !== queue.length)
            try {
              flushActQueue(queue);
              enqueueTask(function() {
                return recursivelyFlushAsyncActWork(returnValue, resolve, reject);
              });
              return;
            } catch (error) {
              ReactSharedInternals.thrownErrors.push(error);
            }
          else ReactSharedInternals.actQueue = null;
        0 < ReactSharedInternals.thrownErrors.length ? (queue = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, reject(queue)) : resolve(returnValue);
      }
      function flushActQueue(queue) {
        if (!isFlushing) {
          isFlushing = true;
          var i = 0;
          try {
            for (; i < queue.length; i++) {
              var callback = queue[i];
              do {
                ReactSharedInternals.didUsePromise = false;
                var continuation = callback(false);
                if (null !== continuation) {
                  if (ReactSharedInternals.didUsePromise) {
                    queue[i] = callback;
                    queue.splice(0, i);
                    return;
                  }
                  callback = continuation;
                } else break;
              } while (1);
            }
            queue.length = 0;
          } catch (error) {
            queue.splice(0, i + 1), ReactSharedInternals.thrownErrors.push(error);
          } finally {
            isFlushing = false;
          }
        }
      }
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
      var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      Symbol.for("react.provider");
      var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_ACTIVITY_TYPE = Symbol.for("react.activity"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, didWarnStateUpdateForUnmountedComponent = {}, ReactNoopUpdateQueue = {
        isMounted: function() {
          return false;
        },
        enqueueForceUpdate: function(publicInstance) {
          warnNoop(publicInstance, "forceUpdate");
        },
        enqueueReplaceState: function(publicInstance) {
          warnNoop(publicInstance, "replaceState");
        },
        enqueueSetState: function(publicInstance) {
          warnNoop(publicInstance, "setState");
        }
      }, assign2 = Object.assign, emptyObject = {};
      Object.freeze(emptyObject);
      Component.prototype.isReactComponent = {};
      Component.prototype.setState = function(partialState, callback) {
        if ("object" !== typeof partialState && "function" !== typeof partialState && null != partialState)
          throw Error(
            "takes an object of state variables to update or a function which returns an object of state variables."
          );
        this.updater.enqueueSetState(this, partialState, callback, "setState");
      };
      Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
      };
      var deprecatedAPIs = {
        isMounted: [
          "isMounted",
          "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."
        ],
        replaceState: [
          "replaceState",
          "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."
        ]
      }, fnName;
      for (fnName in deprecatedAPIs)
        deprecatedAPIs.hasOwnProperty(fnName) && defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
      ComponentDummy.prototype = Component.prototype;
      deprecatedAPIs = PureComponent.prototype = new ComponentDummy();
      deprecatedAPIs.constructor = PureComponent;
      assign2(deprecatedAPIs, Component.prototype);
      deprecatedAPIs.isPureReactComponent = true;
      var isArrayImpl = Array.isArray, REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"), ReactSharedInternals = {
        H: null,
        A: null,
        T: null,
        S: null,
        V: null,
        actQueue: null,
        isBatchingLegacy: false,
        didScheduleLegacyUpdate: false,
        didUsePromise: false,
        thrownErrors: [],
        getCurrentStack: null,
        recentlyCreatedOwnerStacks: 0
      }, hasOwnProperty = Object.prototype.hasOwnProperty, createTask = console.createTask ? console.createTask : function() {
        return null;
      };
      deprecatedAPIs = {
        "react-stack-bottom-frame": function(callStackForError) {
          return callStackForError();
        }
      };
      var specialPropKeyWarningShown, didWarnAboutOldJSXRuntime;
      var didWarnAboutElementRef = {};
      var unknownOwnerDebugStack = deprecatedAPIs["react-stack-bottom-frame"].bind(deprecatedAPIs, UnknownOwner)();
      var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));
      var didWarnAboutMaps = false, userProvidedKeyEscapeRegex = /\/+/g, reportGlobalError = "function" === typeof reportError ? reportError : function(error) {
        if ("object" === typeof window && "function" === typeof window.ErrorEvent) {
          var event = new window.ErrorEvent("error", {
            bubbles: true,
            cancelable: true,
            message: "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error),
            error
          });
          if (!window.dispatchEvent(event)) return;
        } else if ("object" === typeof process && "function" === typeof process.emit) {
          process.emit("uncaughtException", error);
          return;
        }
        console.error(error);
      }, didWarnAboutMessageChannel = false, enqueueTaskImpl = null, actScopeDepth = 0, didWarnNoAwaitAct = false, isFlushing = false, queueSeveralMicrotasks = "function" === typeof queueMicrotask ? function(callback) {
        queueMicrotask(function() {
          return queueMicrotask(callback);
        });
      } : enqueueTask;
      deprecatedAPIs = Object.freeze({
        __proto__: null,
        c: function(size) {
          return resolveDispatcher().useMemoCache(size);
        }
      });
      exports2.Children = {
        map: mapChildren,
        forEach: function(children, forEachFunc, forEachContext) {
          mapChildren(
            children,
            function() {
              forEachFunc.apply(this, arguments);
            },
            forEachContext
          );
        },
        count: function(children) {
          var n = 0;
          mapChildren(children, function() {
            n++;
          });
          return n;
        },
        toArray: function(children) {
          return mapChildren(children, function(child) {
            return child;
          }) || [];
        },
        only: function(children) {
          if (!isValidElement(children))
            throw Error(
              "React.Children.only expected to receive a single React element child."
            );
          return children;
        }
      };
      exports2.Component = Component;
      exports2.Fragment = REACT_FRAGMENT_TYPE;
      exports2.Profiler = REACT_PROFILER_TYPE;
      exports2.PureComponent = PureComponent;
      exports2.StrictMode = REACT_STRICT_MODE_TYPE;
      exports2.Suspense = REACT_SUSPENSE_TYPE;
      exports2.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = ReactSharedInternals;
      exports2.__COMPILER_RUNTIME = deprecatedAPIs;
      exports2.act = function(callback) {
        var prevActQueue = ReactSharedInternals.actQueue, prevActScopeDepth = actScopeDepth;
        actScopeDepth++;
        var queue = ReactSharedInternals.actQueue = null !== prevActQueue ? prevActQueue : [], didAwaitActCall = false;
        try {
          var result = callback();
        } catch (error) {
          ReactSharedInternals.thrownErrors.push(error);
        }
        if (0 < ReactSharedInternals.thrownErrors.length)
          throw popActScope(prevActQueue, prevActScopeDepth), callback = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, callback;
        if (null !== result && "object" === typeof result && "function" === typeof result.then) {
          var thenable = result;
          queueSeveralMicrotasks(function() {
            didAwaitActCall || didWarnNoAwaitAct || (didWarnNoAwaitAct = true, console.error(
              "You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"
            ));
          });
          return {
            then: function(resolve, reject) {
              didAwaitActCall = true;
              thenable.then(
                function(returnValue) {
                  popActScope(prevActQueue, prevActScopeDepth);
                  if (0 === prevActScopeDepth) {
                    try {
                      flushActQueue(queue), enqueueTask(function() {
                        return recursivelyFlushAsyncActWork(
                          returnValue,
                          resolve,
                          reject
                        );
                      });
                    } catch (error$0) {
                      ReactSharedInternals.thrownErrors.push(error$0);
                    }
                    if (0 < ReactSharedInternals.thrownErrors.length) {
                      var _thrownError = aggregateErrors(
                        ReactSharedInternals.thrownErrors
                      );
                      ReactSharedInternals.thrownErrors.length = 0;
                      reject(_thrownError);
                    }
                  } else resolve(returnValue);
                },
                function(error) {
                  popActScope(prevActQueue, prevActScopeDepth);
                  0 < ReactSharedInternals.thrownErrors.length ? (error = aggregateErrors(
                    ReactSharedInternals.thrownErrors
                  ), ReactSharedInternals.thrownErrors.length = 0, reject(error)) : reject(error);
                }
              );
            }
          };
        }
        var returnValue$jscomp$0 = result;
        popActScope(prevActQueue, prevActScopeDepth);
        0 === prevActScopeDepth && (flushActQueue(queue), 0 !== queue.length && queueSeveralMicrotasks(function() {
          didAwaitActCall || didWarnNoAwaitAct || (didWarnNoAwaitAct = true, console.error(
            "A component suspended inside an `act` scope, but the `act` call was not awaited. When testing React components that depend on asynchronous data, you must await the result:\n\nawait act(() => ...)"
          ));
        }), ReactSharedInternals.actQueue = null);
        if (0 < ReactSharedInternals.thrownErrors.length)
          throw callback = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, callback;
        return {
          then: function(resolve, reject) {
            didAwaitActCall = true;
            0 === prevActScopeDepth ? (ReactSharedInternals.actQueue = queue, enqueueTask(function() {
              return recursivelyFlushAsyncActWork(
                returnValue$jscomp$0,
                resolve,
                reject
              );
            })) : resolve(returnValue$jscomp$0);
          }
        };
      };
      exports2.cache = function(fn) {
        return function() {
          return fn.apply(null, arguments);
        };
      };
      exports2.captureOwnerStack = function() {
        var getCurrentStack = ReactSharedInternals.getCurrentStack;
        return null === getCurrentStack ? null : getCurrentStack();
      };
      exports2.cloneElement = function(element, config, children) {
        if (null === element || void 0 === element)
          throw Error(
            "The argument must be a React element, but you passed " + element + "."
          );
        var props = assign2({}, element.props), key = element.key, owner = element._owner;
        if (null != config) {
          var JSCompiler_inline_result;
          a: {
            if (hasOwnProperty.call(config, "ref") && (JSCompiler_inline_result = Object.getOwnPropertyDescriptor(
              config,
              "ref"
            ).get) && JSCompiler_inline_result.isReactWarning) {
              JSCompiler_inline_result = false;
              break a;
            }
            JSCompiler_inline_result = void 0 !== config.ref;
          }
          JSCompiler_inline_result && (owner = getOwner());
          hasValidKey(config) && (checkKeyStringCoercion(config.key), key = "" + config.key);
          for (propName in config)
            !hasOwnProperty.call(config, propName) || "key" === propName || "__self" === propName || "__source" === propName || "ref" === propName && void 0 === config.ref || (props[propName] = config[propName]);
        }
        var propName = arguments.length - 2;
        if (1 === propName) props.children = children;
        else if (1 < propName) {
          JSCompiler_inline_result = Array(propName);
          for (var i = 0; i < propName; i++)
            JSCompiler_inline_result[i] = arguments[i + 2];
          props.children = JSCompiler_inline_result;
        }
        props = ReactElement(
          element.type,
          key,
          void 0,
          void 0,
          owner,
          props,
          element._debugStack,
          element._debugTask
        );
        for (key = 2; key < arguments.length; key++)
          owner = arguments[key], isValidElement(owner) && owner._store && (owner._store.validated = 1);
        return props;
      };
      exports2.createContext = function(defaultValue) {
        defaultValue = {
          $$typeof: REACT_CONTEXT_TYPE,
          _currentValue: defaultValue,
          _currentValue2: defaultValue,
          _threadCount: 0,
          Provider: null,
          Consumer: null
        };
        defaultValue.Provider = defaultValue;
        defaultValue.Consumer = {
          $$typeof: REACT_CONSUMER_TYPE,
          _context: defaultValue
        };
        defaultValue._currentRenderer = null;
        defaultValue._currentRenderer2 = null;
        return defaultValue;
      };
      exports2.createElement = function(type, config, children) {
        for (var i = 2; i < arguments.length; i++) {
          var node2 = arguments[i];
          isValidElement(node2) && node2._store && (node2._store.validated = 1);
        }
        i = {};
        node2 = null;
        if (null != config)
          for (propName in didWarnAboutOldJSXRuntime || !("__self" in config) || "key" in config || (didWarnAboutOldJSXRuntime = true, console.warn(
            "Your app (or one of its dependencies) is using an outdated JSX transform. Update to the modern JSX transform for faster performance: https://react.dev/link/new-jsx-transform"
          )), hasValidKey(config) && (checkKeyStringCoercion(config.key), node2 = "" + config.key), config)
            hasOwnProperty.call(config, propName) && "key" !== propName && "__self" !== propName && "__source" !== propName && (i[propName] = config[propName]);
        var childrenLength = arguments.length - 2;
        if (1 === childrenLength) i.children = children;
        else if (1 < childrenLength) {
          for (var childArray = Array(childrenLength), _i = 0; _i < childrenLength; _i++)
            childArray[_i] = arguments[_i + 2];
          Object.freeze && Object.freeze(childArray);
          i.children = childArray;
        }
        if (type && type.defaultProps)
          for (propName in childrenLength = type.defaultProps, childrenLength)
            void 0 === i[propName] && (i[propName] = childrenLength[propName]);
        node2 && defineKeyPropWarningGetter(
          i,
          "function" === typeof type ? type.displayName || type.name || "Unknown" : type
        );
        var propName = 1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
        return ReactElement(
          type,
          node2,
          void 0,
          void 0,
          getOwner(),
          i,
          propName ? Error("react-stack-top-frame") : unknownOwnerDebugStack,
          propName ? createTask(getTaskName(type)) : unknownOwnerDebugTask
        );
      };
      exports2.createRef = function() {
        var refObject = { current: null };
        Object.seal(refObject);
        return refObject;
      };
      exports2.forwardRef = function(render) {
        null != render && render.$$typeof === REACT_MEMO_TYPE ? console.error(
          "forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))."
        ) : "function" !== typeof render ? console.error(
          "forwardRef requires a render function but was given %s.",
          null === render ? "null" : typeof render
        ) : 0 !== render.length && 2 !== render.length && console.error(
          "forwardRef render functions accept exactly two parameters: props and ref. %s",
          1 === render.length ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined."
        );
        null != render && null != render.defaultProps && console.error(
          "forwardRef render functions do not support defaultProps. Did you accidentally pass a React component?"
        );
        var elementType = { $$typeof: REACT_FORWARD_REF_TYPE, render }, ownName;
        Object.defineProperty(elementType, "displayName", {
          enumerable: false,
          configurable: true,
          get: function() {
            return ownName;
          },
          set: function(name) {
            ownName = name;
            render.name || render.displayName || (Object.defineProperty(render, "name", { value: name }), render.displayName = name);
          }
        });
        return elementType;
      };
      exports2.isValidElement = isValidElement;
      exports2.lazy = function(ctor) {
        return {
          $$typeof: REACT_LAZY_TYPE,
          _payload: { _status: -1, _result: ctor },
          _init: lazyInitializer
        };
      };
      exports2.memo = function(type, compare) {
        null == type && console.error(
          "memo: The first argument must be a component. Instead received: %s",
          null === type ? "null" : typeof type
        );
        compare = {
          $$typeof: REACT_MEMO_TYPE,
          type,
          compare: void 0 === compare ? null : compare
        };
        var ownName;
        Object.defineProperty(compare, "displayName", {
          enumerable: false,
          configurable: true,
          get: function() {
            return ownName;
          },
          set: function(name) {
            ownName = name;
            type.name || type.displayName || (Object.defineProperty(type, "name", { value: name }), type.displayName = name);
          }
        });
        return compare;
      };
      exports2.startTransition = function(scope) {
        var prevTransition = ReactSharedInternals.T, currentTransition = {};
        ReactSharedInternals.T = currentTransition;
        currentTransition._updatedFibers = /* @__PURE__ */ new Set();
        try {
          var returnValue = scope(), onStartTransitionFinish = ReactSharedInternals.S;
          null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
          "object" === typeof returnValue && null !== returnValue && "function" === typeof returnValue.then && returnValue.then(noop, reportGlobalError);
        } catch (error) {
          reportGlobalError(error);
        } finally {
          null === prevTransition && currentTransition._updatedFibers && (scope = currentTransition._updatedFibers.size, currentTransition._updatedFibers.clear(), 10 < scope && console.warn(
            "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."
          )), ReactSharedInternals.T = prevTransition;
        }
      };
      exports2.unstable_useCacheRefresh = function() {
        return resolveDispatcher().useCacheRefresh();
      };
      exports2.use = function(usable) {
        return resolveDispatcher().use(usable);
      };
      exports2.useActionState = function(action, initialState, permalink) {
        return resolveDispatcher().useActionState(
          action,
          initialState,
          permalink
        );
      };
      exports2.useCallback = function(callback, deps) {
        return resolveDispatcher().useCallback(callback, deps);
      };
      exports2.useContext = function(Context) {
        var dispatcher = resolveDispatcher();
        Context.$$typeof === REACT_CONSUMER_TYPE && console.error(
          "Calling useContext(Context.Consumer) is not supported and will cause bugs. Did you mean to call useContext(Context) instead?"
        );
        return dispatcher.useContext(Context);
      };
      exports2.useDebugValue = function(value, formatterFn) {
        return resolveDispatcher().useDebugValue(value, formatterFn);
      };
      exports2.useDeferredValue = function(value, initialValue) {
        return resolveDispatcher().useDeferredValue(value, initialValue);
      };
      exports2.useEffect = function(create, createDeps, update) {
        null == create && console.warn(
          "React Hook useEffect requires an effect callback. Did you forget to pass a callback to the hook?"
        );
        var dispatcher = resolveDispatcher();
        if ("function" === typeof update)
          throw Error(
            "useEffect CRUD overload is not enabled in this build of React."
          );
        return dispatcher.useEffect(create, createDeps);
      };
      exports2.useId = function() {
        return resolveDispatcher().useId();
      };
      exports2.useImperativeHandle = function(ref, create, deps) {
        return resolveDispatcher().useImperativeHandle(ref, create, deps);
      };
      exports2.useInsertionEffect = function(create, deps) {
        null == create && console.warn(
          "React Hook useInsertionEffect requires an effect callback. Did you forget to pass a callback to the hook?"
        );
        return resolveDispatcher().useInsertionEffect(create, deps);
      };
      exports2.useLayoutEffect = function(create, deps) {
        null == create && console.warn(
          "React Hook useLayoutEffect requires an effect callback. Did you forget to pass a callback to the hook?"
        );
        return resolveDispatcher().useLayoutEffect(create, deps);
      };
      exports2.useMemo = function(create, deps) {
        return resolveDispatcher().useMemo(create, deps);
      };
      exports2.useOptimistic = function(passthrough, reducer) {
        return resolveDispatcher().useOptimistic(passthrough, reducer);
      };
      exports2.useReducer = function(reducer, initialArg, init) {
        return resolveDispatcher().useReducer(reducer, initialArg, init);
      };
      exports2.useRef = function(initialValue) {
        return resolveDispatcher().useRef(initialValue);
      };
      exports2.useState = function(initialState) {
        return resolveDispatcher().useState(initialState);
      };
      exports2.useSyncExternalStore = function(subscribe, getSnapshot, getServerSnapshot) {
        return resolveDispatcher().useSyncExternalStore(
          subscribe,
          getSnapshot,
          getServerSnapshot
        );
      };
      exports2.useTransition = function() {
        return resolveDispatcher().useTransition();
      };
      exports2.version = "19.1.0";
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
    }();
  }
});

// node_modules/react/index.js
var require_react = __commonJS({
  "node_modules/react/index.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    if (define_process_env_default.NODE_ENV === "production") {
      module2.exports = require_react_production();
    } else {
      module2.exports = require_react_development();
    }
  }
});

// node_modules/scheduler/cjs/scheduler.production.js
var require_scheduler_production = __commonJS({
  "node_modules/scheduler/cjs/scheduler.production.js"(exports2) {
    "use strict";
    init_define_process_env();
    function push(heap, node2) {
      var index = heap.length;
      heap.push(node2);
      a: for (; 0 < index; ) {
        var parentIndex = index - 1 >>> 1, parent = heap[parentIndex];
        if (0 < compare(parent, node2))
          heap[parentIndex] = node2, heap[index] = parent, index = parentIndex;
        else break a;
      }
    }
    function peek2(heap) {
      return 0 === heap.length ? null : heap[0];
    }
    function pop(heap) {
      if (0 === heap.length) return null;
      var first = heap[0], last = heap.pop();
      if (last !== first) {
        heap[0] = last;
        a: for (var index = 0, length2 = heap.length, halfLength = length2 >>> 1; index < halfLength; ) {
          var leftIndex = 2 * (index + 1) - 1, left = heap[leftIndex], rightIndex = leftIndex + 1, right = heap[rightIndex];
          if (0 > compare(left, last))
            rightIndex < length2 && 0 > compare(right, left) ? (heap[index] = right, heap[rightIndex] = last, index = rightIndex) : (heap[index] = left, heap[leftIndex] = last, index = leftIndex);
          else if (rightIndex < length2 && 0 > compare(right, last))
            heap[index] = right, heap[rightIndex] = last, index = rightIndex;
          else break a;
        }
      }
      return first;
    }
    function compare(a, b) {
      var diff = a.sortIndex - b.sortIndex;
      return 0 !== diff ? diff : a.id - b.id;
    }
    exports2.unstable_now = void 0;
    if ("object" === typeof performance && "function" === typeof performance.now) {
      localPerformance = performance;
      exports2.unstable_now = function() {
        return localPerformance.now();
      };
    } else {
      localDate = Date, initialTime = localDate.now();
      exports2.unstable_now = function() {
        return localDate.now() - initialTime;
      };
    }
    var localPerformance;
    var localDate;
    var initialTime;
    var taskQueue = [];
    var timerQueue = [];
    var taskIdCounter = 1;
    var currentTask = null;
    var currentPriorityLevel = 3;
    var isPerformingWork = false;
    var isHostCallbackScheduled = false;
    var isHostTimeoutScheduled = false;
    var needsPaint = false;
    var localSetTimeout = "function" === typeof setTimeout ? setTimeout : null;
    var localClearTimeout = "function" === typeof clearTimeout ? clearTimeout : null;
    var localSetImmediate = "undefined" !== typeof setImmediate ? setImmediate : null;
    function advanceTimers(currentTime) {
      for (var timer = peek2(timerQueue); null !== timer; ) {
        if (null === timer.callback) pop(timerQueue);
        else if (timer.startTime <= currentTime)
          pop(timerQueue), timer.sortIndex = timer.expirationTime, push(taskQueue, timer);
        else break;
        timer = peek2(timerQueue);
      }
    }
    function handleTimeout(currentTime) {
      isHostTimeoutScheduled = false;
      advanceTimers(currentTime);
      if (!isHostCallbackScheduled)
        if (null !== peek2(taskQueue))
          isHostCallbackScheduled = true, isMessageLoopRunning || (isMessageLoopRunning = true, schedulePerformWorkUntilDeadline());
        else {
          var firstTimer = peek2(timerQueue);
          null !== firstTimer && requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
        }
    }
    var isMessageLoopRunning = false;
    var taskTimeoutID = -1;
    var frameInterval = 5;
    var startTime = -1;
    function shouldYieldToHost() {
      return needsPaint ? true : exports2.unstable_now() - startTime < frameInterval ? false : true;
    }
    function performWorkUntilDeadline() {
      needsPaint = false;
      if (isMessageLoopRunning) {
        var currentTime = exports2.unstable_now();
        startTime = currentTime;
        var hasMoreWork = true;
        try {
          a: {
            isHostCallbackScheduled = false;
            isHostTimeoutScheduled && (isHostTimeoutScheduled = false, localClearTimeout(taskTimeoutID), taskTimeoutID = -1);
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              b: {
                advanceTimers(currentTime);
                for (currentTask = peek2(taskQueue); null !== currentTask && !(currentTask.expirationTime > currentTime && shouldYieldToHost()); ) {
                  var callback = currentTask.callback;
                  if ("function" === typeof callback) {
                    currentTask.callback = null;
                    currentPriorityLevel = currentTask.priorityLevel;
                    var continuationCallback = callback(
                      currentTask.expirationTime <= currentTime
                    );
                    currentTime = exports2.unstable_now();
                    if ("function" === typeof continuationCallback) {
                      currentTask.callback = continuationCallback;
                      advanceTimers(currentTime);
                      hasMoreWork = true;
                      break b;
                    }
                    currentTask === peek2(taskQueue) && pop(taskQueue);
                    advanceTimers(currentTime);
                  } else pop(taskQueue);
                  currentTask = peek2(taskQueue);
                }
                if (null !== currentTask) hasMoreWork = true;
                else {
                  var firstTimer = peek2(timerQueue);
                  null !== firstTimer && requestHostTimeout(
                    handleTimeout,
                    firstTimer.startTime - currentTime
                  );
                  hasMoreWork = false;
                }
              }
              break a;
            } finally {
              currentTask = null, currentPriorityLevel = previousPriorityLevel, isPerformingWork = false;
            }
            hasMoreWork = void 0;
          }
        } finally {
          hasMoreWork ? schedulePerformWorkUntilDeadline() : isMessageLoopRunning = false;
        }
      }
    }
    var schedulePerformWorkUntilDeadline;
    if ("function" === typeof localSetImmediate)
      schedulePerformWorkUntilDeadline = function() {
        localSetImmediate(performWorkUntilDeadline);
      };
    else if ("undefined" !== typeof MessageChannel) {
      channel = new MessageChannel(), port = channel.port2;
      channel.port1.onmessage = performWorkUntilDeadline;
      schedulePerformWorkUntilDeadline = function() {
        port.postMessage(null);
      };
    } else
      schedulePerformWorkUntilDeadline = function() {
        localSetTimeout(performWorkUntilDeadline, 0);
      };
    var channel;
    var port;
    function requestHostTimeout(callback, ms) {
      taskTimeoutID = localSetTimeout(function() {
        callback(exports2.unstable_now());
      }, ms);
    }
    exports2.unstable_IdlePriority = 5;
    exports2.unstable_ImmediatePriority = 1;
    exports2.unstable_LowPriority = 4;
    exports2.unstable_NormalPriority = 3;
    exports2.unstable_Profiling = null;
    exports2.unstable_UserBlockingPriority = 2;
    exports2.unstable_cancelCallback = function(task) {
      task.callback = null;
    };
    exports2.unstable_forceFrameRate = function(fps) {
      0 > fps || 125 < fps ? console.error(
        "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
      ) : frameInterval = 0 < fps ? Math.floor(1e3 / fps) : 5;
    };
    exports2.unstable_getCurrentPriorityLevel = function() {
      return currentPriorityLevel;
    };
    exports2.unstable_next = function(eventHandler) {
      switch (currentPriorityLevel) {
        case 1:
        case 2:
        case 3:
          var priorityLevel = 3;
          break;
        default:
          priorityLevel = currentPriorityLevel;
      }
      var previousPriorityLevel = currentPriorityLevel;
      currentPriorityLevel = priorityLevel;
      try {
        return eventHandler();
      } finally {
        currentPriorityLevel = previousPriorityLevel;
      }
    };
    exports2.unstable_requestPaint = function() {
      needsPaint = true;
    };
    exports2.unstable_runWithPriority = function(priorityLevel, eventHandler) {
      switch (priorityLevel) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          priorityLevel = 3;
      }
      var previousPriorityLevel = currentPriorityLevel;
      currentPriorityLevel = priorityLevel;
      try {
        return eventHandler();
      } finally {
        currentPriorityLevel = previousPriorityLevel;
      }
    };
    exports2.unstable_scheduleCallback = function(priorityLevel, callback, options) {
      var currentTime = exports2.unstable_now();
      "object" === typeof options && null !== options ? (options = options.delay, options = "number" === typeof options && 0 < options ? currentTime + options : currentTime) : options = currentTime;
      switch (priorityLevel) {
        case 1:
          var timeout = -1;
          break;
        case 2:
          timeout = 250;
          break;
        case 5:
          timeout = 1073741823;
          break;
        case 4:
          timeout = 1e4;
          break;
        default:
          timeout = 5e3;
      }
      timeout = options + timeout;
      priorityLevel = {
        id: taskIdCounter++,
        callback,
        priorityLevel,
        startTime: options,
        expirationTime: timeout,
        sortIndex: -1
      };
      options > currentTime ? (priorityLevel.sortIndex = options, push(timerQueue, priorityLevel), null === peek2(taskQueue) && priorityLevel === peek2(timerQueue) && (isHostTimeoutScheduled ? (localClearTimeout(taskTimeoutID), taskTimeoutID = -1) : isHostTimeoutScheduled = true, requestHostTimeout(handleTimeout, options - currentTime))) : (priorityLevel.sortIndex = timeout, push(taskQueue, priorityLevel), isHostCallbackScheduled || isPerformingWork || (isHostCallbackScheduled = true, isMessageLoopRunning || (isMessageLoopRunning = true, schedulePerformWorkUntilDeadline())));
      return priorityLevel;
    };
    exports2.unstable_shouldYield = shouldYieldToHost;
    exports2.unstable_wrapCallback = function(callback) {
      var parentPriorityLevel = currentPriorityLevel;
      return function() {
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = parentPriorityLevel;
        try {
          return callback.apply(this, arguments);
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      };
    };
  }
});

// node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS({
  "node_modules/scheduler/cjs/scheduler.development.js"(exports2) {
    "use strict";
    init_define_process_env();
    "production" !== define_process_env_default.NODE_ENV && function() {
      function performWorkUntilDeadline() {
        needsPaint = false;
        if (isMessageLoopRunning) {
          var currentTime = exports2.unstable_now();
          startTime = currentTime;
          var hasMoreWork = true;
          try {
            a: {
              isHostCallbackScheduled = false;
              isHostTimeoutScheduled && (isHostTimeoutScheduled = false, localClearTimeout(taskTimeoutID), taskTimeoutID = -1);
              isPerformingWork = true;
              var previousPriorityLevel = currentPriorityLevel;
              try {
                b: {
                  advanceTimers(currentTime);
                  for (currentTask = peek2(taskQueue); null !== currentTask && !(currentTask.expirationTime > currentTime && shouldYieldToHost()); ) {
                    var callback = currentTask.callback;
                    if ("function" === typeof callback) {
                      currentTask.callback = null;
                      currentPriorityLevel = currentTask.priorityLevel;
                      var continuationCallback = callback(
                        currentTask.expirationTime <= currentTime
                      );
                      currentTime = exports2.unstable_now();
                      if ("function" === typeof continuationCallback) {
                        currentTask.callback = continuationCallback;
                        advanceTimers(currentTime);
                        hasMoreWork = true;
                        break b;
                      }
                      currentTask === peek2(taskQueue) && pop(taskQueue);
                      advanceTimers(currentTime);
                    } else pop(taskQueue);
                    currentTask = peek2(taskQueue);
                  }
                  if (null !== currentTask) hasMoreWork = true;
                  else {
                    var firstTimer = peek2(timerQueue);
                    null !== firstTimer && requestHostTimeout(
                      handleTimeout,
                      firstTimer.startTime - currentTime
                    );
                    hasMoreWork = false;
                  }
                }
                break a;
              } finally {
                currentTask = null, currentPriorityLevel = previousPriorityLevel, isPerformingWork = false;
              }
              hasMoreWork = void 0;
            }
          } finally {
            hasMoreWork ? schedulePerformWorkUntilDeadline() : isMessageLoopRunning = false;
          }
        }
      }
      function push(heap, node2) {
        var index = heap.length;
        heap.push(node2);
        a: for (; 0 < index; ) {
          var parentIndex = index - 1 >>> 1, parent = heap[parentIndex];
          if (0 < compare(parent, node2))
            heap[parentIndex] = node2, heap[index] = parent, index = parentIndex;
          else break a;
        }
      }
      function peek2(heap) {
        return 0 === heap.length ? null : heap[0];
      }
      function pop(heap) {
        if (0 === heap.length) return null;
        var first = heap[0], last = heap.pop();
        if (last !== first) {
          heap[0] = last;
          a: for (var index = 0, length2 = heap.length, halfLength = length2 >>> 1; index < halfLength; ) {
            var leftIndex = 2 * (index + 1) - 1, left = heap[leftIndex], rightIndex = leftIndex + 1, right = heap[rightIndex];
            if (0 > compare(left, last))
              rightIndex < length2 && 0 > compare(right, left) ? (heap[index] = right, heap[rightIndex] = last, index = rightIndex) : (heap[index] = left, heap[leftIndex] = last, index = leftIndex);
            else if (rightIndex < length2 && 0 > compare(right, last))
              heap[index] = right, heap[rightIndex] = last, index = rightIndex;
            else break a;
          }
        }
        return first;
      }
      function compare(a, b) {
        var diff = a.sortIndex - b.sortIndex;
        return 0 !== diff ? diff : a.id - b.id;
      }
      function advanceTimers(currentTime) {
        for (var timer = peek2(timerQueue); null !== timer; ) {
          if (null === timer.callback) pop(timerQueue);
          else if (timer.startTime <= currentTime)
            pop(timerQueue), timer.sortIndex = timer.expirationTime, push(taskQueue, timer);
          else break;
          timer = peek2(timerQueue);
        }
      }
      function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled)
          if (null !== peek2(taskQueue))
            isHostCallbackScheduled = true, isMessageLoopRunning || (isMessageLoopRunning = true, schedulePerformWorkUntilDeadline());
          else {
            var firstTimer = peek2(timerQueue);
            null !== firstTimer && requestHostTimeout(
              handleTimeout,
              firstTimer.startTime - currentTime
            );
          }
      }
      function shouldYieldToHost() {
        return needsPaint ? true : exports2.unstable_now() - startTime < frameInterval ? false : true;
      }
      function requestHostTimeout(callback, ms) {
        taskTimeoutID = localSetTimeout(function() {
          callback(exports2.unstable_now());
        }, ms);
      }
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
      exports2.unstable_now = void 0;
      if ("object" === typeof performance && "function" === typeof performance.now) {
        var localPerformance = performance;
        exports2.unstable_now = function() {
          return localPerformance.now();
        };
      } else {
        var localDate = Date, initialTime = localDate.now();
        exports2.unstable_now = function() {
          return localDate.now() - initialTime;
        };
      }
      var taskQueue = [], timerQueue = [], taskIdCounter = 1, currentTask = null, currentPriorityLevel = 3, isPerformingWork = false, isHostCallbackScheduled = false, isHostTimeoutScheduled = false, needsPaint = false, localSetTimeout = "function" === typeof setTimeout ? setTimeout : null, localClearTimeout = "function" === typeof clearTimeout ? clearTimeout : null, localSetImmediate = "undefined" !== typeof setImmediate ? setImmediate : null, isMessageLoopRunning = false, taskTimeoutID = -1, frameInterval = 5, startTime = -1;
      if ("function" === typeof localSetImmediate)
        var schedulePerformWorkUntilDeadline = function() {
          localSetImmediate(performWorkUntilDeadline);
        };
      else if ("undefined" !== typeof MessageChannel) {
        var channel = new MessageChannel(), port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        schedulePerformWorkUntilDeadline = function() {
          port.postMessage(null);
        };
      } else
        schedulePerformWorkUntilDeadline = function() {
          localSetTimeout(performWorkUntilDeadline, 0);
        };
      exports2.unstable_IdlePriority = 5;
      exports2.unstable_ImmediatePriority = 1;
      exports2.unstable_LowPriority = 4;
      exports2.unstable_NormalPriority = 3;
      exports2.unstable_Profiling = null;
      exports2.unstable_UserBlockingPriority = 2;
      exports2.unstable_cancelCallback = function(task) {
        task.callback = null;
      };
      exports2.unstable_forceFrameRate = function(fps) {
        0 > fps || 125 < fps ? console.error(
          "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
        ) : frameInterval = 0 < fps ? Math.floor(1e3 / fps) : 5;
      };
      exports2.unstable_getCurrentPriorityLevel = function() {
        return currentPriorityLevel;
      };
      exports2.unstable_next = function(eventHandler) {
        switch (currentPriorityLevel) {
          case 1:
          case 2:
          case 3:
            var priorityLevel = 3;
            break;
          default:
            priorityLevel = currentPriorityLevel;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      };
      exports2.unstable_requestPaint = function() {
        needsPaint = true;
      };
      exports2.unstable_runWithPriority = function(priorityLevel, eventHandler) {
        switch (priorityLevel) {
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
            break;
          default:
            priorityLevel = 3;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      };
      exports2.unstable_scheduleCallback = function(priorityLevel, callback, options) {
        var currentTime = exports2.unstable_now();
        "object" === typeof options && null !== options ? (options = options.delay, options = "number" === typeof options && 0 < options ? currentTime + options : currentTime) : options = currentTime;
        switch (priorityLevel) {
          case 1:
            var timeout = -1;
            break;
          case 2:
            timeout = 250;
            break;
          case 5:
            timeout = 1073741823;
            break;
          case 4:
            timeout = 1e4;
            break;
          default:
            timeout = 5e3;
        }
        timeout = options + timeout;
        priorityLevel = {
          id: taskIdCounter++,
          callback,
          priorityLevel,
          startTime: options,
          expirationTime: timeout,
          sortIndex: -1
        };
        options > currentTime ? (priorityLevel.sortIndex = options, push(timerQueue, priorityLevel), null === peek2(taskQueue) && priorityLevel === peek2(timerQueue) && (isHostTimeoutScheduled ? (localClearTimeout(taskTimeoutID), taskTimeoutID = -1) : isHostTimeoutScheduled = true, requestHostTimeout(handleTimeout, options - currentTime))) : (priorityLevel.sortIndex = timeout, push(taskQueue, priorityLevel), isHostCallbackScheduled || isPerformingWork || (isHostCallbackScheduled = true, isMessageLoopRunning || (isMessageLoopRunning = true, schedulePerformWorkUntilDeadline())));
        return priorityLevel;
      };
      exports2.unstable_shouldYield = shouldYieldToHost;
      exports2.unstable_wrapCallback = function(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = parentPriorityLevel;
          try {
            return callback.apply(this, arguments);
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        };
      };
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
    }();
  }
});

// node_modules/scheduler/index.js
var require_scheduler = __commonJS({
  "node_modules/scheduler/index.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    if (define_process_env_default.NODE_ENV === "production") {
      module2.exports = require_scheduler_production();
    } else {
      module2.exports = require_scheduler_development();
    }
  }
});

// node_modules/react-dom/cjs/react-dom.production.js
var require_react_dom_production = __commonJS({
  "node_modules/react-dom/cjs/react-dom.production.js"(exports2) {
    "use strict";
    init_define_process_env();
    var React7 = require_react();
    function formatProdErrorMessage(code) {
      var url = "https://react.dev/errors/" + code;
      if (1 < arguments.length) {
        url += "?args[]=" + encodeURIComponent(arguments[1]);
        for (var i = 2; i < arguments.length; i++)
          url += "&args[]=" + encodeURIComponent(arguments[i]);
      }
      return "Minified React error #" + code + "; visit " + url + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
    }
    function noop() {
    }
    var Internals = {
      d: {
        f: noop,
        r: function() {
          throw Error(formatProdErrorMessage(522));
        },
        D: noop,
        C: noop,
        L: noop,
        m: noop,
        X: noop,
        S: noop,
        M: noop
      },
      p: 0,
      findDOMNode: null
    };
    var REACT_PORTAL_TYPE = Symbol.for("react.portal");
    function createPortal$1(children, containerInfo, implementation) {
      var key = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
      return {
        $$typeof: REACT_PORTAL_TYPE,
        key: null == key ? null : "" + key,
        children,
        containerInfo,
        implementation
      };
    }
    var ReactSharedInternals = React7.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
    function getCrossOriginStringAs(as, input) {
      if ("font" === as) return "";
      if ("string" === typeof input)
        return "use-credentials" === input ? input : "";
    }
    exports2.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = Internals;
    exports2.createPortal = function(children, container) {
      var key = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
      if (!container || 1 !== container.nodeType && 9 !== container.nodeType && 11 !== container.nodeType)
        throw Error(formatProdErrorMessage(299));
      return createPortal$1(children, container, null, key);
    };
    exports2.flushSync = function(fn) {
      var previousTransition = ReactSharedInternals.T, previousUpdatePriority = Internals.p;
      try {
        if (ReactSharedInternals.T = null, Internals.p = 2, fn) return fn();
      } finally {
        ReactSharedInternals.T = previousTransition, Internals.p = previousUpdatePriority, Internals.d.f();
      }
    };
    exports2.preconnect = function(href, options) {
      "string" === typeof href && (options ? (options = options.crossOrigin, options = "string" === typeof options ? "use-credentials" === options ? options : "" : void 0) : options = null, Internals.d.C(href, options));
    };
    exports2.prefetchDNS = function(href) {
      "string" === typeof href && Internals.d.D(href);
    };
    exports2.preinit = function(href, options) {
      if ("string" === typeof href && options && "string" === typeof options.as) {
        var as = options.as, crossOrigin = getCrossOriginStringAs(as, options.crossOrigin), integrity = "string" === typeof options.integrity ? options.integrity : void 0, fetchPriority = "string" === typeof options.fetchPriority ? options.fetchPriority : void 0;
        "style" === as ? Internals.d.S(
          href,
          "string" === typeof options.precedence ? options.precedence : void 0,
          {
            crossOrigin,
            integrity,
            fetchPriority
          }
        ) : "script" === as && Internals.d.X(href, {
          crossOrigin,
          integrity,
          fetchPriority,
          nonce: "string" === typeof options.nonce ? options.nonce : void 0
        });
      }
    };
    exports2.preinitModule = function(href, options) {
      if ("string" === typeof href)
        if ("object" === typeof options && null !== options) {
          if (null == options.as || "script" === options.as) {
            var crossOrigin = getCrossOriginStringAs(
              options.as,
              options.crossOrigin
            );
            Internals.d.M(href, {
              crossOrigin,
              integrity: "string" === typeof options.integrity ? options.integrity : void 0,
              nonce: "string" === typeof options.nonce ? options.nonce : void 0
            });
          }
        } else null == options && Internals.d.M(href);
    };
    exports2.preload = function(href, options) {
      if ("string" === typeof href && "object" === typeof options && null !== options && "string" === typeof options.as) {
        var as = options.as, crossOrigin = getCrossOriginStringAs(as, options.crossOrigin);
        Internals.d.L(href, as, {
          crossOrigin,
          integrity: "string" === typeof options.integrity ? options.integrity : void 0,
          nonce: "string" === typeof options.nonce ? options.nonce : void 0,
          type: "string" === typeof options.type ? options.type : void 0,
          fetchPriority: "string" === typeof options.fetchPriority ? options.fetchPriority : void 0,
          referrerPolicy: "string" === typeof options.referrerPolicy ? options.referrerPolicy : void 0,
          imageSrcSet: "string" === typeof options.imageSrcSet ? options.imageSrcSet : void 0,
          imageSizes: "string" === typeof options.imageSizes ? options.imageSizes : void 0,
          media: "string" === typeof options.media ? options.media : void 0
        });
      }
    };
    exports2.preloadModule = function(href, options) {
      if ("string" === typeof href)
        if (options) {
          var crossOrigin = getCrossOriginStringAs(options.as, options.crossOrigin);
          Internals.d.m(href, {
            as: "string" === typeof options.as && "script" !== options.as ? options.as : void 0,
            crossOrigin,
            integrity: "string" === typeof options.integrity ? options.integrity : void 0
          });
        } else Internals.d.m(href);
    };
    exports2.requestFormReset = function(form) {
      Internals.d.r(form);
    };
    exports2.unstable_batchedUpdates = function(fn, a) {
      return fn(a);
    };
    exports2.useFormState = function(action, initialState, permalink) {
      return ReactSharedInternals.H.useFormState(action, initialState, permalink);
    };
    exports2.useFormStatus = function() {
      return ReactSharedInternals.H.useHostTransitionStatus();
    };
    exports2.version = "19.1.0";
  }
});

// node_modules/react-dom/cjs/react-dom.development.js
var require_react_dom_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom.development.js"(exports2) {
    "use strict";
    init_define_process_env();
    "production" !== define_process_env_default.NODE_ENV && function() {
      function noop() {
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function createPortal$1(children, containerInfo, implementation) {
        var key = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
        try {
          testStringCoercion(key);
          var JSCompiler_inline_result = false;
        } catch (e) {
          JSCompiler_inline_result = true;
        }
        JSCompiler_inline_result && (console.error(
          "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
          "function" === typeof Symbol && Symbol.toStringTag && key[Symbol.toStringTag] || key.constructor.name || "Object"
        ), testStringCoercion(key));
        return {
          $$typeof: REACT_PORTAL_TYPE,
          key: null == key ? null : "" + key,
          children,
          containerInfo,
          implementation
        };
      }
      function getCrossOriginStringAs(as, input) {
        if ("font" === as) return "";
        if ("string" === typeof input)
          return "use-credentials" === input ? input : "";
      }
      function getValueDescriptorExpectingObjectForWarning(thing) {
        return null === thing ? "`null`" : void 0 === thing ? "`undefined`" : "" === thing ? "an empty string" : 'something with type "' + typeof thing + '"';
      }
      function getValueDescriptorExpectingEnumForWarning(thing) {
        return null === thing ? "`null`" : void 0 === thing ? "`undefined`" : "" === thing ? "an empty string" : "string" === typeof thing ? JSON.stringify(thing) : "number" === typeof thing ? "`" + thing + "`" : 'something with type "' + typeof thing + '"';
      }
      function resolveDispatcher() {
        var dispatcher = ReactSharedInternals.H;
        null === dispatcher && console.error(
          "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."
        );
        return dispatcher;
      }
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
      var React7 = require_react(), Internals = {
        d: {
          f: noop,
          r: function() {
            throw Error(
              "Invalid form element. requestFormReset must be passed a form that was rendered by React."
            );
          },
          D: noop,
          C: noop,
          L: noop,
          m: noop,
          X: noop,
          S: noop,
          M: noop
        },
        p: 0,
        findDOMNode: null
      }, REACT_PORTAL_TYPE = Symbol.for("react.portal"), ReactSharedInternals = React7.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
      "function" === typeof Map && null != Map.prototype && "function" === typeof Map.prototype.forEach && "function" === typeof Set && null != Set.prototype && "function" === typeof Set.prototype.clear && "function" === typeof Set.prototype.forEach || console.error(
        "React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"
      );
      exports2.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = Internals;
      exports2.createPortal = function(children, container) {
        var key = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
        if (!container || 1 !== container.nodeType && 9 !== container.nodeType && 11 !== container.nodeType)
          throw Error("Target container is not a DOM element.");
        return createPortal$1(children, container, null, key);
      };
      exports2.flushSync = function(fn) {
        var previousTransition = ReactSharedInternals.T, previousUpdatePriority = Internals.p;
        try {
          if (ReactSharedInternals.T = null, Internals.p = 2, fn)
            return fn();
        } finally {
          ReactSharedInternals.T = previousTransition, Internals.p = previousUpdatePriority, Internals.d.f() && console.error(
            "flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task."
          );
        }
      };
      exports2.preconnect = function(href, options) {
        "string" === typeof href && href ? null != options && "object" !== typeof options ? console.error(
          "ReactDOM.preconnect(): Expected the `options` argument (second) to be an object but encountered %s instead. The only supported option at this time is `crossOrigin` which accepts a string.",
          getValueDescriptorExpectingEnumForWarning(options)
        ) : null != options && "string" !== typeof options.crossOrigin && console.error(
          "ReactDOM.preconnect(): Expected the `crossOrigin` option (second argument) to be a string but encountered %s instead. Try removing this option or passing a string value instead.",
          getValueDescriptorExpectingObjectForWarning(options.crossOrigin)
        ) : console.error(
          "ReactDOM.preconnect(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",
          getValueDescriptorExpectingObjectForWarning(href)
        );
        "string" === typeof href && (options ? (options = options.crossOrigin, options = "string" === typeof options ? "use-credentials" === options ? options : "" : void 0) : options = null, Internals.d.C(href, options));
      };
      exports2.prefetchDNS = function(href) {
        if ("string" !== typeof href || !href)
          console.error(
            "ReactDOM.prefetchDNS(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",
            getValueDescriptorExpectingObjectForWarning(href)
          );
        else if (1 < arguments.length) {
          var options = arguments[1];
          "object" === typeof options && options.hasOwnProperty("crossOrigin") ? console.error(
            "ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. It looks like the you are attempting to set a crossOrigin property for this DNS lookup hint. Browsers do not perform DNS queries using CORS and setting this attribute on the resource hint has no effect. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.",
            getValueDescriptorExpectingEnumForWarning(options)
          ) : console.error(
            "ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.",
            getValueDescriptorExpectingEnumForWarning(options)
          );
        }
        "string" === typeof href && Internals.d.D(href);
      };
      exports2.preinit = function(href, options) {
        "string" === typeof href && href ? null == options || "object" !== typeof options ? console.error(
          "ReactDOM.preinit(): Expected the `options` argument (second) to be an object with an `as` property describing the type of resource to be preinitialized but encountered %s instead.",
          getValueDescriptorExpectingEnumForWarning(options)
        ) : "style" !== options.as && "script" !== options.as && console.error(
          'ReactDOM.preinit(): Expected the `as` property in the `options` argument (second) to contain a valid value describing the type of resource to be preinitialized but encountered %s instead. Valid values for `as` are "style" and "script".',
          getValueDescriptorExpectingEnumForWarning(options.as)
        ) : console.error(
          "ReactDOM.preinit(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",
          getValueDescriptorExpectingObjectForWarning(href)
        );
        if ("string" === typeof href && options && "string" === typeof options.as) {
          var as = options.as, crossOrigin = getCrossOriginStringAs(as, options.crossOrigin), integrity = "string" === typeof options.integrity ? options.integrity : void 0, fetchPriority = "string" === typeof options.fetchPriority ? options.fetchPriority : void 0;
          "style" === as ? Internals.d.S(
            href,
            "string" === typeof options.precedence ? options.precedence : void 0,
            {
              crossOrigin,
              integrity,
              fetchPriority
            }
          ) : "script" === as && Internals.d.X(href, {
            crossOrigin,
            integrity,
            fetchPriority,
            nonce: "string" === typeof options.nonce ? options.nonce : void 0
          });
        }
      };
      exports2.preinitModule = function(href, options) {
        var encountered = "";
        "string" === typeof href && href || (encountered += " The `href` argument encountered was " + getValueDescriptorExpectingObjectForWarning(href) + ".");
        void 0 !== options && "object" !== typeof options ? encountered += " The `options` argument encountered was " + getValueDescriptorExpectingObjectForWarning(options) + "." : options && "as" in options && "script" !== options.as && (encountered += " The `as` option encountered was " + getValueDescriptorExpectingEnumForWarning(options.as) + ".");
        if (encountered)
          console.error(
            "ReactDOM.preinitModule(): Expected up to two arguments, a non-empty `href` string and, optionally, an `options` object with a valid `as` property.%s",
            encountered
          );
        else
          switch (encountered = options && "string" === typeof options.as ? options.as : "script", encountered) {
            case "script":
              break;
            default:
              encountered = getValueDescriptorExpectingEnumForWarning(encountered), console.error(
                'ReactDOM.preinitModule(): Currently the only supported "as" type for this function is "script" but received "%s" instead. This warning was generated for `href` "%s". In the future other module types will be supported, aligning with the import-attributes proposal. Learn more here: (https://github.com/tc39/proposal-import-attributes)',
                encountered,
                href
              );
          }
        if ("string" === typeof href)
          if ("object" === typeof options && null !== options) {
            if (null == options.as || "script" === options.as)
              encountered = getCrossOriginStringAs(
                options.as,
                options.crossOrigin
              ), Internals.d.M(href, {
                crossOrigin: encountered,
                integrity: "string" === typeof options.integrity ? options.integrity : void 0,
                nonce: "string" === typeof options.nonce ? options.nonce : void 0
              });
          } else null == options && Internals.d.M(href);
      };
      exports2.preload = function(href, options) {
        var encountered = "";
        "string" === typeof href && href || (encountered += " The `href` argument encountered was " + getValueDescriptorExpectingObjectForWarning(href) + ".");
        null == options || "object" !== typeof options ? encountered += " The `options` argument encountered was " + getValueDescriptorExpectingObjectForWarning(options) + "." : "string" === typeof options.as && options.as || (encountered += " The `as` option encountered was " + getValueDescriptorExpectingObjectForWarning(options.as) + ".");
        encountered && console.error(
          'ReactDOM.preload(): Expected two arguments, a non-empty `href` string and an `options` object with an `as` property valid for a `<link rel="preload" as="..." />` tag.%s',
          encountered
        );
        if ("string" === typeof href && "object" === typeof options && null !== options && "string" === typeof options.as) {
          encountered = options.as;
          var crossOrigin = getCrossOriginStringAs(
            encountered,
            options.crossOrigin
          );
          Internals.d.L(href, encountered, {
            crossOrigin,
            integrity: "string" === typeof options.integrity ? options.integrity : void 0,
            nonce: "string" === typeof options.nonce ? options.nonce : void 0,
            type: "string" === typeof options.type ? options.type : void 0,
            fetchPriority: "string" === typeof options.fetchPriority ? options.fetchPriority : void 0,
            referrerPolicy: "string" === typeof options.referrerPolicy ? options.referrerPolicy : void 0,
            imageSrcSet: "string" === typeof options.imageSrcSet ? options.imageSrcSet : void 0,
            imageSizes: "string" === typeof options.imageSizes ? options.imageSizes : void 0,
            media: "string" === typeof options.media ? options.media : void 0
          });
        }
      };
      exports2.preloadModule = function(href, options) {
        var encountered = "";
        "string" === typeof href && href || (encountered += " The `href` argument encountered was " + getValueDescriptorExpectingObjectForWarning(href) + ".");
        void 0 !== options && "object" !== typeof options ? encountered += " The `options` argument encountered was " + getValueDescriptorExpectingObjectForWarning(options) + "." : options && "as" in options && "string" !== typeof options.as && (encountered += " The `as` option encountered was " + getValueDescriptorExpectingObjectForWarning(options.as) + ".");
        encountered && console.error(
          'ReactDOM.preloadModule(): Expected two arguments, a non-empty `href` string and, optionally, an `options` object with an `as` property valid for a `<link rel="modulepreload" as="..." />` tag.%s',
          encountered
        );
        "string" === typeof href && (options ? (encountered = getCrossOriginStringAs(
          options.as,
          options.crossOrigin
        ), Internals.d.m(href, {
          as: "string" === typeof options.as && "script" !== options.as ? options.as : void 0,
          crossOrigin: encountered,
          integrity: "string" === typeof options.integrity ? options.integrity : void 0
        })) : Internals.d.m(href));
      };
      exports2.requestFormReset = function(form) {
        Internals.d.r(form);
      };
      exports2.unstable_batchedUpdates = function(fn, a) {
        return fn(a);
      };
      exports2.useFormState = function(action, initialState, permalink) {
        return resolveDispatcher().useFormState(action, initialState, permalink);
      };
      exports2.useFormStatus = function() {
        return resolveDispatcher().useHostTransitionStatus();
      };
      exports2.version = "19.1.0";
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
    }();
  }
});

// node_modules/react-dom/index.js
var require_react_dom = __commonJS({
  "node_modules/react-dom/index.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    function checkDCE() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
        return;
      }
      if (define_process_env_default.NODE_ENV !== "production") {
        throw new Error("^_^");
      }
      try {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
      } catch (err) {
        console.error(err);
      }
    }
    if (define_process_env_default.NODE_ENV === "production") {
      checkDCE();
      module2.exports = require_react_dom_production();
    } else {
      module2.exports = require_react_dom_development();
    }
  }
});

// node_modules/react-dom/cjs/react-dom-client.production.js
var require_react_dom_client_production = __commonJS({
  "node_modules/react-dom/cjs/react-dom-client.production.js"(exports2) {
    "use strict";
    init_define_process_env();
    var Scheduler = require_scheduler();
    var React7 = require_react();
    var ReactDOM2 = require_react_dom();
    function formatProdErrorMessage(code) {
      var url = "https://react.dev/errors/" + code;
      if (1 < arguments.length) {
        url += "?args[]=" + encodeURIComponent(arguments[1]);
        for (var i = 2; i < arguments.length; i++)
          url += "&args[]=" + encodeURIComponent(arguments[i]);
      }
      return "Minified React error #" + code + "; visit " + url + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
    }
    function isValidContainer(node2) {
      return !(!node2 || 1 !== node2.nodeType && 9 !== node2.nodeType && 11 !== node2.nodeType);
    }
    function getNearestMountedFiber(fiber) {
      var node2 = fiber, nearestMounted = fiber;
      if (fiber.alternate) for (; node2.return; ) node2 = node2.return;
      else {
        fiber = node2;
        do
          node2 = fiber, 0 !== (node2.flags & 4098) && (nearestMounted = node2.return), fiber = node2.return;
        while (fiber);
      }
      return 3 === node2.tag ? nearestMounted : null;
    }
    function getSuspenseInstanceFromFiber(fiber) {
      if (13 === fiber.tag) {
        var suspenseState = fiber.memoizedState;
        null === suspenseState && (fiber = fiber.alternate, null !== fiber && (suspenseState = fiber.memoizedState));
        if (null !== suspenseState) return suspenseState.dehydrated;
      }
      return null;
    }
    function assertIsMounted(fiber) {
      if (getNearestMountedFiber(fiber) !== fiber)
        throw Error(formatProdErrorMessage(188));
    }
    function findCurrentFiberUsingSlowPath(fiber) {
      var alternate = fiber.alternate;
      if (!alternate) {
        alternate = getNearestMountedFiber(fiber);
        if (null === alternate) throw Error(formatProdErrorMessage(188));
        return alternate !== fiber ? null : fiber;
      }
      for (var a = fiber, b = alternate; ; ) {
        var parentA = a.return;
        if (null === parentA) break;
        var parentB = parentA.alternate;
        if (null === parentB) {
          b = parentA.return;
          if (null !== b) {
            a = b;
            continue;
          }
          break;
        }
        if (parentA.child === parentB.child) {
          for (parentB = parentA.child; parentB; ) {
            if (parentB === a) return assertIsMounted(parentA), fiber;
            if (parentB === b) return assertIsMounted(parentA), alternate;
            parentB = parentB.sibling;
          }
          throw Error(formatProdErrorMessage(188));
        }
        if (a.return !== b.return) a = parentA, b = parentB;
        else {
          for (var didFindChild = false, child$0 = parentA.child; child$0; ) {
            if (child$0 === a) {
              didFindChild = true;
              a = parentA;
              b = parentB;
              break;
            }
            if (child$0 === b) {
              didFindChild = true;
              b = parentA;
              a = parentB;
              break;
            }
            child$0 = child$0.sibling;
          }
          if (!didFindChild) {
            for (child$0 = parentB.child; child$0; ) {
              if (child$0 === a) {
                didFindChild = true;
                a = parentB;
                b = parentA;
                break;
              }
              if (child$0 === b) {
                didFindChild = true;
                b = parentB;
                a = parentA;
                break;
              }
              child$0 = child$0.sibling;
            }
            if (!didFindChild) throw Error(formatProdErrorMessage(189));
          }
        }
        if (a.alternate !== b) throw Error(formatProdErrorMessage(190));
      }
      if (3 !== a.tag) throw Error(formatProdErrorMessage(188));
      return a.stateNode.current === a ? fiber : alternate;
    }
    function findCurrentHostFiberImpl(node2) {
      var tag = node2.tag;
      if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return node2;
      for (node2 = node2.child; null !== node2; ) {
        tag = findCurrentHostFiberImpl(node2);
        if (null !== tag) return tag;
        node2 = node2.sibling;
      }
      return null;
    }
    var assign2 = Object.assign;
    var REACT_LEGACY_ELEMENT_TYPE = Symbol.for("react.element");
    var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element");
    var REACT_PORTAL_TYPE = Symbol.for("react.portal");
    var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
    var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
    var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
    var REACT_CONSUMER_TYPE = Symbol.for("react.consumer");
    var REACT_CONTEXT_TYPE = Symbol.for("react.context");
    var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
    var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
    var REACT_MEMO_TYPE = Symbol.for("react.memo");
    var REACT_LAZY_TYPE = Symbol.for("react.lazy");
    Symbol.for("react.scope");
    var REACT_ACTIVITY_TYPE = Symbol.for("react.activity");
    Symbol.for("react.legacy_hidden");
    Symbol.for("react.tracing_marker");
    var REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel");
    Symbol.for("react.view_transition");
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    function getIteratorFn(maybeIterable) {
      if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
      maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
      return "function" === typeof maybeIterable ? maybeIterable : null;
    }
    var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
    function getComponentNameFromType(type) {
      if (null == type) return null;
      if ("function" === typeof type)
        return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
      if ("string" === typeof type) return type;
      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return "Fragment";
        case REACT_PROFILER_TYPE:
          return "Profiler";
        case REACT_STRICT_MODE_TYPE:
          return "StrictMode";
        case REACT_SUSPENSE_TYPE:
          return "Suspense";
        case REACT_SUSPENSE_LIST_TYPE:
          return "SuspenseList";
        case REACT_ACTIVITY_TYPE:
          return "Activity";
      }
      if ("object" === typeof type)
        switch (type.$$typeof) {
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_CONTEXT_TYPE:
            return (type.displayName || "Context") + ".Provider";
          case REACT_CONSUMER_TYPE:
            return (type._context.displayName || "Context") + ".Consumer";
          case REACT_FORWARD_REF_TYPE:
            var innerType = type.render;
            type = type.displayName;
            type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
            return type;
          case REACT_MEMO_TYPE:
            return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
          case REACT_LAZY_TYPE:
            innerType = type._payload;
            type = type._init;
            try {
              return getComponentNameFromType(type(innerType));
            } catch (x) {
            }
        }
      return null;
    }
    var isArrayImpl = Array.isArray;
    var ReactSharedInternals = React7.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
    var ReactDOMSharedInternals = ReactDOM2.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
    var sharedNotPendingObject = {
      pending: false,
      data: null,
      method: null,
      action: null
    };
    var valueStack = [];
    var index = -1;
    function createCursor(defaultValue) {
      return { current: defaultValue };
    }
    function pop(cursor2) {
      0 > index || (cursor2.current = valueStack[index], valueStack[index] = null, index--);
    }
    function push(cursor2, value) {
      index++;
      valueStack[index] = cursor2.current;
      cursor2.current = value;
    }
    var contextStackCursor = createCursor(null);
    var contextFiberStackCursor = createCursor(null);
    var rootInstanceStackCursor = createCursor(null);
    var hostTransitionProviderCursor = createCursor(null);
    function pushHostContainer(fiber, nextRootInstance) {
      push(rootInstanceStackCursor, nextRootInstance);
      push(contextFiberStackCursor, fiber);
      push(contextStackCursor, null);
      switch (nextRootInstance.nodeType) {
        case 9:
        case 11:
          fiber = (fiber = nextRootInstance.documentElement) ? (fiber = fiber.namespaceURI) ? getOwnHostContext(fiber) : 0 : 0;
          break;
        default:
          if (fiber = nextRootInstance.tagName, nextRootInstance = nextRootInstance.namespaceURI)
            nextRootInstance = getOwnHostContext(nextRootInstance), fiber = getChildHostContextProd(nextRootInstance, fiber);
          else
            switch (fiber) {
              case "svg":
                fiber = 1;
                break;
              case "math":
                fiber = 2;
                break;
              default:
                fiber = 0;
            }
      }
      pop(contextStackCursor);
      push(contextStackCursor, fiber);
    }
    function popHostContainer() {
      pop(contextStackCursor);
      pop(contextFiberStackCursor);
      pop(rootInstanceStackCursor);
    }
    function pushHostContext(fiber) {
      null !== fiber.memoizedState && push(hostTransitionProviderCursor, fiber);
      var context = contextStackCursor.current;
      var JSCompiler_inline_result = getChildHostContextProd(context, fiber.type);
      context !== JSCompiler_inline_result && (push(contextFiberStackCursor, fiber), push(contextStackCursor, JSCompiler_inline_result));
    }
    function popHostContext(fiber) {
      contextFiberStackCursor.current === fiber && (pop(contextStackCursor), pop(contextFiberStackCursor));
      hostTransitionProviderCursor.current === fiber && (pop(hostTransitionProviderCursor), HostTransitionContext._currentValue = sharedNotPendingObject);
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var scheduleCallback$3 = Scheduler.unstable_scheduleCallback;
    var cancelCallback$1 = Scheduler.unstable_cancelCallback;
    var shouldYield = Scheduler.unstable_shouldYield;
    var requestPaint = Scheduler.unstable_requestPaint;
    var now = Scheduler.unstable_now;
    var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
    var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
    var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
    var NormalPriority$1 = Scheduler.unstable_NormalPriority;
    var LowPriority = Scheduler.unstable_LowPriority;
    var IdlePriority = Scheduler.unstable_IdlePriority;
    var log$1 = Scheduler.log;
    var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
    var rendererID = null;
    var injectedHook = null;
    function setIsStrictModeForDevtools(newIsStrictMode) {
      "function" === typeof log$1 && unstable_setDisableYieldValue(newIsStrictMode);
      if (injectedHook && "function" === typeof injectedHook.setStrictMode)
        try {
          injectedHook.setStrictMode(rendererID, newIsStrictMode);
        } catch (err) {
        }
    }
    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
    var log = Math.log;
    var LN2 = Math.LN2;
    function clz32Fallback(x) {
      x >>>= 0;
      return 0 === x ? 32 : 31 - (log(x) / LN2 | 0) | 0;
    }
    var nextTransitionLane = 256;
    var nextRetryLane = 4194304;
    function getHighestPriorityLanes(lanes) {
      var pendingSyncLanes = lanes & 42;
      if (0 !== pendingSyncLanes) return pendingSyncLanes;
      switch (lanes & -lanes) {
        case 1:
          return 1;
        case 2:
          return 2;
        case 4:
          return 4;
        case 8:
          return 8;
        case 16:
          return 16;
        case 32:
          return 32;
        case 64:
          return 64;
        case 128:
          return 128;
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return lanes & 4194048;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
          return lanes & 62914560;
        case 67108864:
          return 67108864;
        case 134217728:
          return 134217728;
        case 268435456:
          return 268435456;
        case 536870912:
          return 536870912;
        case 1073741824:
          return 0;
        default:
          return lanes;
      }
    }
    function getNextLanes(root2, wipLanes, rootHasPendingCommit) {
      var pendingLanes = root2.pendingLanes;
      if (0 === pendingLanes) return 0;
      var nextLanes = 0, suspendedLanes = root2.suspendedLanes, pingedLanes = root2.pingedLanes;
      root2 = root2.warmLanes;
      var nonIdlePendingLanes = pendingLanes & 134217727;
      0 !== nonIdlePendingLanes ? (pendingLanes = nonIdlePendingLanes & ~suspendedLanes, 0 !== pendingLanes ? nextLanes = getHighestPriorityLanes(pendingLanes) : (pingedLanes &= nonIdlePendingLanes, 0 !== pingedLanes ? nextLanes = getHighestPriorityLanes(pingedLanes) : rootHasPendingCommit || (rootHasPendingCommit = nonIdlePendingLanes & ~root2, 0 !== rootHasPendingCommit && (nextLanes = getHighestPriorityLanes(rootHasPendingCommit))))) : (nonIdlePendingLanes = pendingLanes & ~suspendedLanes, 0 !== nonIdlePendingLanes ? nextLanes = getHighestPriorityLanes(nonIdlePendingLanes) : 0 !== pingedLanes ? nextLanes = getHighestPriorityLanes(pingedLanes) : rootHasPendingCommit || (rootHasPendingCommit = pendingLanes & ~root2, 0 !== rootHasPendingCommit && (nextLanes = getHighestPriorityLanes(rootHasPendingCommit))));
      return 0 === nextLanes ? 0 : 0 !== wipLanes && wipLanes !== nextLanes && 0 === (wipLanes & suspendedLanes) && (suspendedLanes = nextLanes & -nextLanes, rootHasPendingCommit = wipLanes & -wipLanes, suspendedLanes >= rootHasPendingCommit || 32 === suspendedLanes && 0 !== (rootHasPendingCommit & 4194048)) ? wipLanes : nextLanes;
    }
    function checkIfRootIsPrerendering(root2, renderLanes2) {
      return 0 === (root2.pendingLanes & ~(root2.suspendedLanes & ~root2.pingedLanes) & renderLanes2);
    }
    function computeExpirationTime(lane, currentTime) {
      switch (lane) {
        case 1:
        case 2:
        case 4:
        case 8:
        case 64:
          return currentTime + 250;
        case 16:
        case 32:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return currentTime + 5e3;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
          return -1;
        case 67108864:
        case 134217728:
        case 268435456:
        case 536870912:
        case 1073741824:
          return -1;
        default:
          return -1;
      }
    }
    function claimNextTransitionLane() {
      var lane = nextTransitionLane;
      nextTransitionLane <<= 1;
      0 === (nextTransitionLane & 4194048) && (nextTransitionLane = 256);
      return lane;
    }
    function claimNextRetryLane() {
      var lane = nextRetryLane;
      nextRetryLane <<= 1;
      0 === (nextRetryLane & 62914560) && (nextRetryLane = 4194304);
      return lane;
    }
    function createLaneMap(initial) {
      for (var laneMap = [], i = 0; 31 > i; i++) laneMap.push(initial);
      return laneMap;
    }
    function markRootUpdated$1(root2, updateLane) {
      root2.pendingLanes |= updateLane;
      268435456 !== updateLane && (root2.suspendedLanes = 0, root2.pingedLanes = 0, root2.warmLanes = 0);
    }
    function markRootFinished(root2, finishedLanes, remainingLanes, spawnedLane, updatedLanes, suspendedRetryLanes) {
      var previouslyPendingLanes = root2.pendingLanes;
      root2.pendingLanes = remainingLanes;
      root2.suspendedLanes = 0;
      root2.pingedLanes = 0;
      root2.warmLanes = 0;
      root2.expiredLanes &= remainingLanes;
      root2.entangledLanes &= remainingLanes;
      root2.errorRecoveryDisabledLanes &= remainingLanes;
      root2.shellSuspendCounter = 0;
      var entanglements = root2.entanglements, expirationTimes = root2.expirationTimes, hiddenUpdates = root2.hiddenUpdates;
      for (remainingLanes = previouslyPendingLanes & ~remainingLanes; 0 < remainingLanes; ) {
        var index$5 = 31 - clz32(remainingLanes), lane = 1 << index$5;
        entanglements[index$5] = 0;
        expirationTimes[index$5] = -1;
        var hiddenUpdatesForLane = hiddenUpdates[index$5];
        if (null !== hiddenUpdatesForLane)
          for (hiddenUpdates[index$5] = null, index$5 = 0; index$5 < hiddenUpdatesForLane.length; index$5++) {
            var update = hiddenUpdatesForLane[index$5];
            null !== update && (update.lane &= -536870913);
          }
        remainingLanes &= ~lane;
      }
      0 !== spawnedLane && markSpawnedDeferredLane(root2, spawnedLane, 0);
      0 !== suspendedRetryLanes && 0 === updatedLanes && 0 !== root2.tag && (root2.suspendedLanes |= suspendedRetryLanes & ~(previouslyPendingLanes & ~finishedLanes));
    }
    function markSpawnedDeferredLane(root2, spawnedLane, entangledLanes) {
      root2.pendingLanes |= spawnedLane;
      root2.suspendedLanes &= ~spawnedLane;
      var spawnedLaneIndex = 31 - clz32(spawnedLane);
      root2.entangledLanes |= spawnedLane;
      root2.entanglements[spawnedLaneIndex] = root2.entanglements[spawnedLaneIndex] | 1073741824 | entangledLanes & 4194090;
    }
    function markRootEntangled(root2, entangledLanes) {
      var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
      for (root2 = root2.entanglements; rootEntangledLanes; ) {
        var index$6 = 31 - clz32(rootEntangledLanes), lane = 1 << index$6;
        lane & entangledLanes | root2[index$6] & entangledLanes && (root2[index$6] |= entangledLanes);
        rootEntangledLanes &= ~lane;
      }
    }
    function getBumpedLaneForHydrationByLane(lane) {
      switch (lane) {
        case 2:
          lane = 1;
          break;
        case 8:
          lane = 4;
          break;
        case 32:
          lane = 16;
          break;
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
          lane = 128;
          break;
        case 268435456:
          lane = 134217728;
          break;
        default:
          lane = 0;
      }
      return lane;
    }
    function lanesToEventPriority(lanes) {
      lanes &= -lanes;
      return 2 < lanes ? 8 < lanes ? 0 !== (lanes & 134217727) ? 32 : 268435456 : 8 : 2;
    }
    function resolveUpdatePriority() {
      var updatePriority = ReactDOMSharedInternals.p;
      if (0 !== updatePriority) return updatePriority;
      updatePriority = window.event;
      return void 0 === updatePriority ? 32 : getEventPriority(updatePriority.type);
    }
    function runWithPriority(priority, fn) {
      var previousPriority = ReactDOMSharedInternals.p;
      try {
        return ReactDOMSharedInternals.p = priority, fn();
      } finally {
        ReactDOMSharedInternals.p = previousPriority;
      }
    }
    var randomKey = Math.random().toString(36).slice(2);
    var internalInstanceKey = "__reactFiber$" + randomKey;
    var internalPropsKey = "__reactProps$" + randomKey;
    var internalContainerInstanceKey = "__reactContainer$" + randomKey;
    var internalEventHandlersKey = "__reactEvents$" + randomKey;
    var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
    var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
    var internalRootNodeResourcesKey = "__reactResources$" + randomKey;
    var internalHoistableMarker = "__reactMarker$" + randomKey;
    function detachDeletedInstance(node2) {
      delete node2[internalInstanceKey];
      delete node2[internalPropsKey];
      delete node2[internalEventHandlersKey];
      delete node2[internalEventHandlerListenersKey];
      delete node2[internalEventHandlesSetKey];
    }
    function getClosestInstanceFromNode(targetNode) {
      var targetInst = targetNode[internalInstanceKey];
      if (targetInst) return targetInst;
      for (var parentNode = targetNode.parentNode; parentNode; ) {
        if (targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey]) {
          parentNode = targetInst.alternate;
          if (null !== targetInst.child || null !== parentNode && null !== parentNode.child)
            for (targetNode = getParentSuspenseInstance(targetNode); null !== targetNode; ) {
              if (parentNode = targetNode[internalInstanceKey]) return parentNode;
              targetNode = getParentSuspenseInstance(targetNode);
            }
          return targetInst;
        }
        targetNode = parentNode;
        parentNode = targetNode.parentNode;
      }
      return null;
    }
    function getInstanceFromNode(node2) {
      if (node2 = node2[internalInstanceKey] || node2[internalContainerInstanceKey]) {
        var tag = node2.tag;
        if (5 === tag || 6 === tag || 13 === tag || 26 === tag || 27 === tag || 3 === tag)
          return node2;
      }
      return null;
    }
    function getNodeFromInstance(inst) {
      var tag = inst.tag;
      if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return inst.stateNode;
      throw Error(formatProdErrorMessage(33));
    }
    function getResourcesFromRoot(root2) {
      var resources = root2[internalRootNodeResourcesKey];
      resources || (resources = root2[internalRootNodeResourcesKey] = { hoistableStyles: /* @__PURE__ */ new Map(), hoistableScripts: /* @__PURE__ */ new Map() });
      return resources;
    }
    function markNodeAsHoistable(node2) {
      node2[internalHoistableMarker] = true;
    }
    var allNativeEvents = /* @__PURE__ */ new Set();
    var registrationNameDependencies = {};
    function registerTwoPhaseEvent(registrationName, dependencies) {
      registerDirectEvent(registrationName, dependencies);
      registerDirectEvent(registrationName + "Capture", dependencies);
    }
    function registerDirectEvent(registrationName, dependencies) {
      registrationNameDependencies[registrationName] = dependencies;
      for (registrationName = 0; registrationName < dependencies.length; registrationName++)
        allNativeEvents.add(dependencies[registrationName]);
    }
    var VALID_ATTRIBUTE_NAME_REGEX = RegExp(
      "^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
    );
    var illegalAttributeNameCache = {};
    var validatedAttributeNameCache = {};
    function isAttributeNameSafe(attributeName) {
      if (hasOwnProperty.call(validatedAttributeNameCache, attributeName))
        return true;
      if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) return false;
      if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName))
        return validatedAttributeNameCache[attributeName] = true;
      illegalAttributeNameCache[attributeName] = true;
      return false;
    }
    function setValueForAttribute(node2, name, value) {
      if (isAttributeNameSafe(name))
        if (null === value) node2.removeAttribute(name);
        else {
          switch (typeof value) {
            case "undefined":
            case "function":
            case "symbol":
              node2.removeAttribute(name);
              return;
            case "boolean":
              var prefix$8 = name.toLowerCase().slice(0, 5);
              if ("data-" !== prefix$8 && "aria-" !== prefix$8) {
                node2.removeAttribute(name);
                return;
              }
          }
          node2.setAttribute(name, "" + value);
        }
    }
    function setValueForKnownAttribute(node2, name, value) {
      if (null === value) node2.removeAttribute(name);
      else {
        switch (typeof value) {
          case "undefined":
          case "function":
          case "symbol":
          case "boolean":
            node2.removeAttribute(name);
            return;
        }
        node2.setAttribute(name, "" + value);
      }
    }
    function setValueForNamespacedAttribute(node2, namespace, name, value) {
      if (null === value) node2.removeAttribute(name);
      else {
        switch (typeof value) {
          case "undefined":
          case "function":
          case "symbol":
          case "boolean":
            node2.removeAttribute(name);
            return;
        }
        node2.setAttributeNS(namespace, name, "" + value);
      }
    }
    var prefix2;
    var suffix;
    function describeBuiltInComponentFrame(name) {
      if (void 0 === prefix2)
        try {
          throw Error();
        } catch (x) {
          var match2 = x.stack.trim().match(/\n( *(at )?)/);
          prefix2 = match2 && match2[1] || "";
          suffix = -1 < x.stack.indexOf("\n    at") ? " (<anonymous>)" : -1 < x.stack.indexOf("@") ? "@unknown:0:0" : "";
        }
      return "\n" + prefix2 + name + suffix;
    }
    var reentry = false;
    function describeNativeComponentFrame(fn, construct) {
      if (!fn || reentry) return "";
      reentry = true;
      var previousPrepareStackTrace = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      try {
        var RunInRootFrame = {
          DetermineComponentFrameRoot: function() {
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if ("object" === typeof Reflect && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    var control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x$9) {
                    control = x$9;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x$10) {
                  control = x$10;
                }
                (Fake = fn()) && "function" === typeof Fake.catch && Fake.catch(function() {
                });
              }
            } catch (sample) {
              if (sample && control && "string" === typeof sample.stack)
                return [sample.stack, control.stack];
            }
            return [null, null];
          }
        };
        RunInRootFrame.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
        var namePropDescriptor = Object.getOwnPropertyDescriptor(
          RunInRootFrame.DetermineComponentFrameRoot,
          "name"
        );
        namePropDescriptor && namePropDescriptor.configurable && Object.defineProperty(
          RunInRootFrame.DetermineComponentFrameRoot,
          "name",
          { value: "DetermineComponentFrameRoot" }
        );
        var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];
        if (sampleStack && controlStack) {
          var sampleLines = sampleStack.split("\n"), controlLines = controlStack.split("\n");
          for (namePropDescriptor = RunInRootFrame = 0; RunInRootFrame < sampleLines.length && !sampleLines[RunInRootFrame].includes("DetermineComponentFrameRoot"); )
            RunInRootFrame++;
          for (; namePropDescriptor < controlLines.length && !controlLines[namePropDescriptor].includes(
            "DetermineComponentFrameRoot"
          ); )
            namePropDescriptor++;
          if (RunInRootFrame === sampleLines.length || namePropDescriptor === controlLines.length)
            for (RunInRootFrame = sampleLines.length - 1, namePropDescriptor = controlLines.length - 1; 1 <= RunInRootFrame && 0 <= namePropDescriptor && sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]; )
              namePropDescriptor--;
          for (; 1 <= RunInRootFrame && 0 <= namePropDescriptor; RunInRootFrame--, namePropDescriptor--)
            if (sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]) {
              if (1 !== RunInRootFrame || 1 !== namePropDescriptor) {
                do
                  if (RunInRootFrame--, namePropDescriptor--, 0 > namePropDescriptor || sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]) {
                    var frame = "\n" + sampleLines[RunInRootFrame].replace(" at new ", " at ");
                    fn.displayName && frame.includes("<anonymous>") && (frame = frame.replace("<anonymous>", fn.displayName));
                    return frame;
                  }
                while (1 <= RunInRootFrame && 0 <= namePropDescriptor);
              }
              break;
            }
        }
      } finally {
        reentry = false, Error.prepareStackTrace = previousPrepareStackTrace;
      }
      return (previousPrepareStackTrace = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(previousPrepareStackTrace) : "";
    }
    function describeFiber(fiber) {
      switch (fiber.tag) {
        case 26:
        case 27:
        case 5:
          return describeBuiltInComponentFrame(fiber.type);
        case 16:
          return describeBuiltInComponentFrame("Lazy");
        case 13:
          return describeBuiltInComponentFrame("Suspense");
        case 19:
          return describeBuiltInComponentFrame("SuspenseList");
        case 0:
        case 15:
          return describeNativeComponentFrame(fiber.type, false);
        case 11:
          return describeNativeComponentFrame(fiber.type.render, false);
        case 1:
          return describeNativeComponentFrame(fiber.type, true);
        case 31:
          return describeBuiltInComponentFrame("Activity");
        default:
          return "";
      }
    }
    function getStackByFiberInDevAndProd(workInProgress2) {
      try {
        var info = "";
        do
          info += describeFiber(workInProgress2), workInProgress2 = workInProgress2.return;
        while (workInProgress2);
        return info;
      } catch (x) {
        return "\nError generating stack: " + x.message + "\n" + x.stack;
      }
    }
    function getToStringValue(value) {
      switch (typeof value) {
        case "bigint":
        case "boolean":
        case "number":
        case "string":
        case "undefined":
          return value;
        case "object":
          return value;
        default:
          return "";
      }
    }
    function isCheckable(elem) {
      var type = elem.type;
      return (elem = elem.nodeName) && "input" === elem.toLowerCase() && ("checkbox" === type || "radio" === type);
    }
    function trackValueOnNode(node2) {
      var valueField = isCheckable(node2) ? "checked" : "value", descriptor = Object.getOwnPropertyDescriptor(
        node2.constructor.prototype,
        valueField
      ), currentValue = "" + node2[valueField];
      if (!node2.hasOwnProperty(valueField) && "undefined" !== typeof descriptor && "function" === typeof descriptor.get && "function" === typeof descriptor.set) {
        var get = descriptor.get, set = descriptor.set;
        Object.defineProperty(node2, valueField, {
          configurable: true,
          get: function() {
            return get.call(this);
          },
          set: function(value) {
            currentValue = "" + value;
            set.call(this, value);
          }
        });
        Object.defineProperty(node2, valueField, {
          enumerable: descriptor.enumerable
        });
        return {
          getValue: function() {
            return currentValue;
          },
          setValue: function(value) {
            currentValue = "" + value;
          },
          stopTracking: function() {
            node2._valueTracker = null;
            delete node2[valueField];
          }
        };
      }
    }
    function track(node2) {
      node2._valueTracker || (node2._valueTracker = trackValueOnNode(node2));
    }
    function updateValueIfChanged(node2) {
      if (!node2) return false;
      var tracker = node2._valueTracker;
      if (!tracker) return true;
      var lastValue = tracker.getValue();
      var value = "";
      node2 && (value = isCheckable(node2) ? node2.checked ? "true" : "false" : node2.value);
      node2 = value;
      return node2 !== lastValue ? (tracker.setValue(node2), true) : false;
    }
    function getActiveElement(doc) {
      doc = doc || ("undefined" !== typeof document ? document : void 0);
      if ("undefined" === typeof doc) return null;
      try {
        return doc.activeElement || doc.body;
      } catch (e) {
        return doc.body;
      }
    }
    var escapeSelectorAttributeValueInsideDoubleQuotesRegex = /[\n"\\]/g;
    function escapeSelectorAttributeValueInsideDoubleQuotes(value) {
      return value.replace(
        escapeSelectorAttributeValueInsideDoubleQuotesRegex,
        function(ch) {
          return "\\" + ch.charCodeAt(0).toString(16) + " ";
        }
      );
    }
    function updateInput(element, value, defaultValue, lastDefaultValue, checked, defaultChecked, type, name) {
      element.name = "";
      null != type && "function" !== typeof type && "symbol" !== typeof type && "boolean" !== typeof type ? element.type = type : element.removeAttribute("type");
      if (null != value)
        if ("number" === type) {
          if (0 === value && "" === element.value || element.value != value)
            element.value = "" + getToStringValue(value);
        } else
          element.value !== "" + getToStringValue(value) && (element.value = "" + getToStringValue(value));
      else
        "submit" !== type && "reset" !== type || element.removeAttribute("value");
      null != value ? setDefaultValue(element, type, getToStringValue(value)) : null != defaultValue ? setDefaultValue(element, type, getToStringValue(defaultValue)) : null != lastDefaultValue && element.removeAttribute("value");
      null == checked && null != defaultChecked && (element.defaultChecked = !!defaultChecked);
      null != checked && (element.checked = checked && "function" !== typeof checked && "symbol" !== typeof checked);
      null != name && "function" !== typeof name && "symbol" !== typeof name && "boolean" !== typeof name ? element.name = "" + getToStringValue(name) : element.removeAttribute("name");
    }
    function initInput(element, value, defaultValue, checked, defaultChecked, type, name, isHydrating2) {
      null != type && "function" !== typeof type && "symbol" !== typeof type && "boolean" !== typeof type && (element.type = type);
      if (null != value || null != defaultValue) {
        if (!("submit" !== type && "reset" !== type || void 0 !== value && null !== value))
          return;
        defaultValue = null != defaultValue ? "" + getToStringValue(defaultValue) : "";
        value = null != value ? "" + getToStringValue(value) : defaultValue;
        isHydrating2 || value === element.value || (element.value = value);
        element.defaultValue = value;
      }
      checked = null != checked ? checked : defaultChecked;
      checked = "function" !== typeof checked && "symbol" !== typeof checked && !!checked;
      element.checked = isHydrating2 ? element.checked : !!checked;
      element.defaultChecked = !!checked;
      null != name && "function" !== typeof name && "symbol" !== typeof name && "boolean" !== typeof name && (element.name = name);
    }
    function setDefaultValue(node2, type, value) {
      "number" === type && getActiveElement(node2.ownerDocument) === node2 || node2.defaultValue === "" + value || (node2.defaultValue = "" + value);
    }
    function updateOptions(node2, multiple, propValue, setDefaultSelected) {
      node2 = node2.options;
      if (multiple) {
        multiple = {};
        for (var i = 0; i < propValue.length; i++)
          multiple["$" + propValue[i]] = true;
        for (propValue = 0; propValue < node2.length; propValue++)
          i = multiple.hasOwnProperty("$" + node2[propValue].value), node2[propValue].selected !== i && (node2[propValue].selected = i), i && setDefaultSelected && (node2[propValue].defaultSelected = true);
      } else {
        propValue = "" + getToStringValue(propValue);
        multiple = null;
        for (i = 0; i < node2.length; i++) {
          if (node2[i].value === propValue) {
            node2[i].selected = true;
            setDefaultSelected && (node2[i].defaultSelected = true);
            return;
          }
          null !== multiple || node2[i].disabled || (multiple = node2[i]);
        }
        null !== multiple && (multiple.selected = true);
      }
    }
    function updateTextarea(element, value, defaultValue) {
      if (null != value && (value = "" + getToStringValue(value), value !== element.value && (element.value = value), null == defaultValue)) {
        element.defaultValue !== value && (element.defaultValue = value);
        return;
      }
      element.defaultValue = null != defaultValue ? "" + getToStringValue(defaultValue) : "";
    }
    function initTextarea(element, value, defaultValue, children) {
      if (null == value) {
        if (null != children) {
          if (null != defaultValue) throw Error(formatProdErrorMessage(92));
          if (isArrayImpl(children)) {
            if (1 < children.length) throw Error(formatProdErrorMessage(93));
            children = children[0];
          }
          defaultValue = children;
        }
        null == defaultValue && (defaultValue = "");
        value = defaultValue;
      }
      defaultValue = getToStringValue(value);
      element.defaultValue = defaultValue;
      children = element.textContent;
      children === defaultValue && "" !== children && null !== children && (element.value = children);
    }
    function setTextContent(node2, text) {
      if (text) {
        var firstChild = node2.firstChild;
        if (firstChild && firstChild === node2.lastChild && 3 === firstChild.nodeType) {
          firstChild.nodeValue = text;
          return;
        }
      }
      node2.textContent = text;
    }
    var unitlessNumbers = new Set(
      "animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(
        " "
      )
    );
    function setValueForStyle(style2, styleName, value) {
      var isCustomProperty3 = 0 === styleName.indexOf("--");
      null == value || "boolean" === typeof value || "" === value ? isCustomProperty3 ? style2.setProperty(styleName, "") : "float" === styleName ? style2.cssFloat = "" : style2[styleName] = "" : isCustomProperty3 ? style2.setProperty(styleName, value) : "number" !== typeof value || 0 === value || unitlessNumbers.has(styleName) ? "float" === styleName ? style2.cssFloat = value : style2[styleName] = ("" + value).trim() : style2[styleName] = value + "px";
    }
    function setValueForStyles(node2, styles, prevStyles) {
      if (null != styles && "object" !== typeof styles)
        throw Error(formatProdErrorMessage(62));
      node2 = node2.style;
      if (null != prevStyles) {
        for (var styleName in prevStyles)
          !prevStyles.hasOwnProperty(styleName) || null != styles && styles.hasOwnProperty(styleName) || (0 === styleName.indexOf("--") ? node2.setProperty(styleName, "") : "float" === styleName ? node2.cssFloat = "" : node2[styleName] = "");
        for (var styleName$16 in styles)
          styleName = styles[styleName$16], styles.hasOwnProperty(styleName$16) && prevStyles[styleName$16] !== styleName && setValueForStyle(node2, styleName$16, styleName);
      } else
        for (var styleName$17 in styles)
          styles.hasOwnProperty(styleName$17) && setValueForStyle(node2, styleName$17, styles[styleName$17]);
    }
    function isCustomElement(tagName) {
      if (-1 === tagName.indexOf("-")) return false;
      switch (tagName) {
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          return false;
        default:
          return true;
      }
    }
    var aliases = /* @__PURE__ */ new Map([
      ["acceptCharset", "accept-charset"],
      ["htmlFor", "for"],
      ["httpEquiv", "http-equiv"],
      ["crossOrigin", "crossorigin"],
      ["accentHeight", "accent-height"],
      ["alignmentBaseline", "alignment-baseline"],
      ["arabicForm", "arabic-form"],
      ["baselineShift", "baseline-shift"],
      ["capHeight", "cap-height"],
      ["clipPath", "clip-path"],
      ["clipRule", "clip-rule"],
      ["colorInterpolation", "color-interpolation"],
      ["colorInterpolationFilters", "color-interpolation-filters"],
      ["colorProfile", "color-profile"],
      ["colorRendering", "color-rendering"],
      ["dominantBaseline", "dominant-baseline"],
      ["enableBackground", "enable-background"],
      ["fillOpacity", "fill-opacity"],
      ["fillRule", "fill-rule"],
      ["floodColor", "flood-color"],
      ["floodOpacity", "flood-opacity"],
      ["fontFamily", "font-family"],
      ["fontSize", "font-size"],
      ["fontSizeAdjust", "font-size-adjust"],
      ["fontStretch", "font-stretch"],
      ["fontStyle", "font-style"],
      ["fontVariant", "font-variant"],
      ["fontWeight", "font-weight"],
      ["glyphName", "glyph-name"],
      ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
      ["glyphOrientationVertical", "glyph-orientation-vertical"],
      ["horizAdvX", "horiz-adv-x"],
      ["horizOriginX", "horiz-origin-x"],
      ["imageRendering", "image-rendering"],
      ["letterSpacing", "letter-spacing"],
      ["lightingColor", "lighting-color"],
      ["markerEnd", "marker-end"],
      ["markerMid", "marker-mid"],
      ["markerStart", "marker-start"],
      ["overlinePosition", "overline-position"],
      ["overlineThickness", "overline-thickness"],
      ["paintOrder", "paint-order"],
      ["panose-1", "panose-1"],
      ["pointerEvents", "pointer-events"],
      ["renderingIntent", "rendering-intent"],
      ["shapeRendering", "shape-rendering"],
      ["stopColor", "stop-color"],
      ["stopOpacity", "stop-opacity"],
      ["strikethroughPosition", "strikethrough-position"],
      ["strikethroughThickness", "strikethrough-thickness"],
      ["strokeDasharray", "stroke-dasharray"],
      ["strokeDashoffset", "stroke-dashoffset"],
      ["strokeLinecap", "stroke-linecap"],
      ["strokeLinejoin", "stroke-linejoin"],
      ["strokeMiterlimit", "stroke-miterlimit"],
      ["strokeOpacity", "stroke-opacity"],
      ["strokeWidth", "stroke-width"],
      ["textAnchor", "text-anchor"],
      ["textDecoration", "text-decoration"],
      ["textRendering", "text-rendering"],
      ["transformOrigin", "transform-origin"],
      ["underlinePosition", "underline-position"],
      ["underlineThickness", "underline-thickness"],
      ["unicodeBidi", "unicode-bidi"],
      ["unicodeRange", "unicode-range"],
      ["unitsPerEm", "units-per-em"],
      ["vAlphabetic", "v-alphabetic"],
      ["vHanging", "v-hanging"],
      ["vIdeographic", "v-ideographic"],
      ["vMathematical", "v-mathematical"],
      ["vectorEffect", "vector-effect"],
      ["vertAdvY", "vert-adv-y"],
      ["vertOriginX", "vert-origin-x"],
      ["vertOriginY", "vert-origin-y"],
      ["wordSpacing", "word-spacing"],
      ["writingMode", "writing-mode"],
      ["xmlnsXlink", "xmlns:xlink"],
      ["xHeight", "x-height"]
    ]);
    var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;
    function sanitizeURL(url) {
      return isJavaScriptProtocol.test("" + url) ? "javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')" : url;
    }
    var currentReplayingEvent = null;
    function getEventTarget(nativeEvent) {
      nativeEvent = nativeEvent.target || nativeEvent.srcElement || window;
      nativeEvent.correspondingUseElement && (nativeEvent = nativeEvent.correspondingUseElement);
      return 3 === nativeEvent.nodeType ? nativeEvent.parentNode : nativeEvent;
    }
    var restoreTarget = null;
    var restoreQueue = null;
    function restoreStateOfTarget(target) {
      var internalInstance = getInstanceFromNode(target);
      if (internalInstance && (target = internalInstance.stateNode)) {
        var props = target[internalPropsKey] || null;
        a: switch (target = internalInstance.stateNode, internalInstance.type) {
          case "input":
            updateInput(
              target,
              props.value,
              props.defaultValue,
              props.defaultValue,
              props.checked,
              props.defaultChecked,
              props.type,
              props.name
            );
            internalInstance = props.name;
            if ("radio" === props.type && null != internalInstance) {
              for (props = target; props.parentNode; ) props = props.parentNode;
              props = props.querySelectorAll(
                'input[name="' + escapeSelectorAttributeValueInsideDoubleQuotes(
                  "" + internalInstance
                ) + '"][type="radio"]'
              );
              for (internalInstance = 0; internalInstance < props.length; internalInstance++) {
                var otherNode = props[internalInstance];
                if (otherNode !== target && otherNode.form === target.form) {
                  var otherProps = otherNode[internalPropsKey] || null;
                  if (!otherProps) throw Error(formatProdErrorMessage(90));
                  updateInput(
                    otherNode,
                    otherProps.value,
                    otherProps.defaultValue,
                    otherProps.defaultValue,
                    otherProps.checked,
                    otherProps.defaultChecked,
                    otherProps.type,
                    otherProps.name
                  );
                }
              }
              for (internalInstance = 0; internalInstance < props.length; internalInstance++)
                otherNode = props[internalInstance], otherNode.form === target.form && updateValueIfChanged(otherNode);
            }
            break a;
          case "textarea":
            updateTextarea(target, props.value, props.defaultValue);
            break a;
          case "select":
            internalInstance = props.value, null != internalInstance && updateOptions(target, !!props.multiple, internalInstance, false);
        }
      }
    }
    var isInsideEventHandler = false;
    function batchedUpdates$1(fn, a, b) {
      if (isInsideEventHandler) return fn(a, b);
      isInsideEventHandler = true;
      try {
        var JSCompiler_inline_result = fn(a);
        return JSCompiler_inline_result;
      } finally {
        if (isInsideEventHandler = false, null !== restoreTarget || null !== restoreQueue) {
          if (flushSyncWork$1(), restoreTarget && (a = restoreTarget, fn = restoreQueue, restoreQueue = restoreTarget = null, restoreStateOfTarget(a), fn))
            for (a = 0; a < fn.length; a++) restoreStateOfTarget(fn[a]);
        }
      }
    }
    function getListener(inst, registrationName) {
      var stateNode = inst.stateNode;
      if (null === stateNode) return null;
      var props = stateNode[internalPropsKey] || null;
      if (null === props) return null;
      stateNode = props[registrationName];
      a: switch (registrationName) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
        case "onMouseEnter":
          (props = !props.disabled) || (inst = inst.type, props = !("button" === inst || "input" === inst || "select" === inst || "textarea" === inst));
          inst = !props;
          break a;
        default:
          inst = false;
      }
      if (inst) return null;
      if (stateNode && "function" !== typeof stateNode)
        throw Error(
          formatProdErrorMessage(231, registrationName, typeof stateNode)
        );
      return stateNode;
    }
    var canUseDOM = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement);
    var passiveBrowserEventsSupported = false;
    if (canUseDOM)
      try {
        options = {};
        Object.defineProperty(options, "passive", {
          get: function() {
            passiveBrowserEventsSupported = true;
          }
        });
        window.addEventListener("test", options, options);
        window.removeEventListener("test", options, options);
      } catch (e) {
        passiveBrowserEventsSupported = false;
      }
    var options;
    var root = null;
    var startText = null;
    var fallbackText = null;
    function getData() {
      if (fallbackText) return fallbackText;
      var start, startValue = startText, startLength = startValue.length, end, endValue = "value" in root ? root.value : root.textContent, endLength = endValue.length;
      for (start = 0; start < startLength && startValue[start] === endValue[start]; start++) ;
      var minEnd = startLength - start;
      for (end = 1; end <= minEnd && startValue[startLength - end] === endValue[endLength - end]; end++) ;
      return fallbackText = endValue.slice(start, 1 < end ? 1 - end : void 0);
    }
    function getEventCharCode(nativeEvent) {
      var keyCode = nativeEvent.keyCode;
      "charCode" in nativeEvent ? (nativeEvent = nativeEvent.charCode, 0 === nativeEvent && 13 === keyCode && (nativeEvent = 13)) : nativeEvent = keyCode;
      10 === nativeEvent && (nativeEvent = 13);
      return 32 <= nativeEvent || 13 === nativeEvent ? nativeEvent : 0;
    }
    function functionThatReturnsTrue() {
      return true;
    }
    function functionThatReturnsFalse() {
      return false;
    }
    function createSyntheticEvent(Interface) {
      function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
        this._reactName = reactName;
        this._targetInst = targetInst;
        this.type = reactEventType;
        this.nativeEvent = nativeEvent;
        this.target = nativeEventTarget;
        this.currentTarget = null;
        for (var propName in Interface)
          Interface.hasOwnProperty(propName) && (reactName = Interface[propName], this[propName] = reactName ? reactName(nativeEvent) : nativeEvent[propName]);
        this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : false === nativeEvent.returnValue) ? functionThatReturnsTrue : functionThatReturnsFalse;
        this.isPropagationStopped = functionThatReturnsFalse;
        return this;
      }
      assign2(SyntheticBaseEvent.prototype, {
        preventDefault: function() {
          this.defaultPrevented = true;
          var event = this.nativeEvent;
          event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = false), this.isDefaultPrevented = functionThatReturnsTrue);
        },
        stopPropagation: function() {
          var event = this.nativeEvent;
          event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = true), this.isPropagationStopped = functionThatReturnsTrue);
        },
        persist: function() {
        },
        isPersistent: functionThatReturnsTrue
      });
      return SyntheticBaseEvent;
    }
    var EventInterface = {
      eventPhase: 0,
      bubbles: 0,
      cancelable: 0,
      timeStamp: function(event) {
        return event.timeStamp || Date.now();
      },
      defaultPrevented: 0,
      isTrusted: 0
    };
    var SyntheticEvent = createSyntheticEvent(EventInterface);
    var UIEventInterface = assign2({}, EventInterface, { view: 0, detail: 0 });
    var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
    var lastMovementX;
    var lastMovementY;
    var lastMouseEvent;
    var MouseEventInterface = assign2({}, UIEventInterface, {
      screenX: 0,
      screenY: 0,
      clientX: 0,
      clientY: 0,
      pageX: 0,
      pageY: 0,
      ctrlKey: 0,
      shiftKey: 0,
      altKey: 0,
      metaKey: 0,
      getModifierState: getEventModifierState,
      button: 0,
      buttons: 0,
      relatedTarget: function(event) {
        return void 0 === event.relatedTarget ? event.fromElement === event.srcElement ? event.toElement : event.fromElement : event.relatedTarget;
      },
      movementX: function(event) {
        if ("movementX" in event) return event.movementX;
        event !== lastMouseEvent && (lastMouseEvent && "mousemove" === event.type ? (lastMovementX = event.screenX - lastMouseEvent.screenX, lastMovementY = event.screenY - lastMouseEvent.screenY) : lastMovementY = lastMovementX = 0, lastMouseEvent = event);
        return lastMovementX;
      },
      movementY: function(event) {
        return "movementY" in event ? event.movementY : lastMovementY;
      }
    });
    var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
    var DragEventInterface = assign2({}, MouseEventInterface, { dataTransfer: 0 });
    var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
    var FocusEventInterface = assign2({}, UIEventInterface, { relatedTarget: 0 });
    var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
    var AnimationEventInterface = assign2({}, EventInterface, {
      animationName: 0,
      elapsedTime: 0,
      pseudoElement: 0
    });
    var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
    var ClipboardEventInterface = assign2({}, EventInterface, {
      clipboardData: function(event) {
        return "clipboardData" in event ? event.clipboardData : window.clipboardData;
      }
    });
    var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
    var CompositionEventInterface = assign2({}, EventInterface, { data: 0 });
    var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
    var normalizeKey = {
      Esc: "Escape",
      Spacebar: " ",
      Left: "ArrowLeft",
      Up: "ArrowUp",
      Right: "ArrowRight",
      Down: "ArrowDown",
      Del: "Delete",
      Win: "OS",
      Menu: "ContextMenu",
      Apps: "ContextMenu",
      Scroll: "ScrollLock",
      MozPrintableKey: "Unidentified"
    };
    var translateToKey = {
      8: "Backspace",
      9: "Tab",
      12: "Clear",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      19: "Pause",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      45: "Insert",
      46: "Delete",
      112: "F1",
      113: "F2",
      114: "F3",
      115: "F4",
      116: "F5",
      117: "F6",
      118: "F7",
      119: "F8",
      120: "F9",
      121: "F10",
      122: "F11",
      123: "F12",
      144: "NumLock",
      145: "ScrollLock",
      224: "Meta"
    };
    var modifierKeyToProp = {
      Alt: "altKey",
      Control: "ctrlKey",
      Meta: "metaKey",
      Shift: "shiftKey"
    };
    function modifierStateGetter(keyArg) {
      var nativeEvent = this.nativeEvent;
      return nativeEvent.getModifierState ? nativeEvent.getModifierState(keyArg) : (keyArg = modifierKeyToProp[keyArg]) ? !!nativeEvent[keyArg] : false;
    }
    function getEventModifierState() {
      return modifierStateGetter;
    }
    var KeyboardEventInterface = assign2({}, UIEventInterface, {
      key: function(nativeEvent) {
        if (nativeEvent.key) {
          var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
          if ("Unidentified" !== key) return key;
        }
        return "keypress" === nativeEvent.type ? (nativeEvent = getEventCharCode(nativeEvent), 13 === nativeEvent ? "Enter" : String.fromCharCode(nativeEvent)) : "keydown" === nativeEvent.type || "keyup" === nativeEvent.type ? translateToKey[nativeEvent.keyCode] || "Unidentified" : "";
      },
      code: 0,
      location: 0,
      ctrlKey: 0,
      shiftKey: 0,
      altKey: 0,
      metaKey: 0,
      repeat: 0,
      locale: 0,
      getModifierState: getEventModifierState,
      charCode: function(event) {
        return "keypress" === event.type ? getEventCharCode(event) : 0;
      },
      keyCode: function(event) {
        return "keydown" === event.type || "keyup" === event.type ? event.keyCode : 0;
      },
      which: function(event) {
        return "keypress" === event.type ? getEventCharCode(event) : "keydown" === event.type || "keyup" === event.type ? event.keyCode : 0;
      }
    });
    var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
    var PointerEventInterface = assign2({}, MouseEventInterface, {
      pointerId: 0,
      width: 0,
      height: 0,
      pressure: 0,
      tangentialPressure: 0,
      tiltX: 0,
      tiltY: 0,
      twist: 0,
      pointerType: 0,
      isPrimary: 0
    });
    var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
    var TouchEventInterface = assign2({}, UIEventInterface, {
      touches: 0,
      targetTouches: 0,
      changedTouches: 0,
      altKey: 0,
      metaKey: 0,
      ctrlKey: 0,
      shiftKey: 0,
      getModifierState: getEventModifierState
    });
    var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
    var TransitionEventInterface = assign2({}, EventInterface, {
      propertyName: 0,
      elapsedTime: 0,
      pseudoElement: 0
    });
    var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
    var WheelEventInterface = assign2({}, MouseEventInterface, {
      deltaX: function(event) {
        return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
      },
      deltaY: function(event) {
        return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
      },
      deltaZ: 0,
      deltaMode: 0
    });
    var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
    var ToggleEventInterface = assign2({}, EventInterface, {
      newState: 0,
      oldState: 0
    });
    var SyntheticToggleEvent = createSyntheticEvent(ToggleEventInterface);
    var END_KEYCODES = [9, 13, 27, 32];
    var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
    var documentMode = null;
    canUseDOM && "documentMode" in document && (documentMode = document.documentMode);
    var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
    var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && 8 < documentMode && 11 >= documentMode);
    var SPACEBAR_CHAR = String.fromCharCode(32);
    var hasSpaceKeypress = false;
    function isFallbackCompositionEnd(domEventName, nativeEvent) {
      switch (domEventName) {
        case "keyup":
          return -1 !== END_KEYCODES.indexOf(nativeEvent.keyCode);
        case "keydown":
          return 229 !== nativeEvent.keyCode;
        case "keypress":
        case "mousedown":
        case "focusout":
          return true;
        default:
          return false;
      }
    }
    function getDataFromCustomEvent(nativeEvent) {
      nativeEvent = nativeEvent.detail;
      return "object" === typeof nativeEvent && "data" in nativeEvent ? nativeEvent.data : null;
    }
    var isComposing = false;
    function getNativeBeforeInputChars(domEventName, nativeEvent) {
      switch (domEventName) {
        case "compositionend":
          return getDataFromCustomEvent(nativeEvent);
        case "keypress":
          if (32 !== nativeEvent.which) return null;
          hasSpaceKeypress = true;
          return SPACEBAR_CHAR;
        case "textInput":
          return domEventName = nativeEvent.data, domEventName === SPACEBAR_CHAR && hasSpaceKeypress ? null : domEventName;
        default:
          return null;
      }
    }
    function getFallbackBeforeInputChars(domEventName, nativeEvent) {
      if (isComposing)
        return "compositionend" === domEventName || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent) ? (domEventName = getData(), fallbackText = startText = root = null, isComposing = false, domEventName) : null;
      switch (domEventName) {
        case "paste":
          return null;
        case "keypress":
          if (!(nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) || nativeEvent.ctrlKey && nativeEvent.altKey) {
            if (nativeEvent.char && 1 < nativeEvent.char.length)
              return nativeEvent.char;
            if (nativeEvent.which) return String.fromCharCode(nativeEvent.which);
          }
          return null;
        case "compositionend":
          return useFallbackCompositionData && "ko" !== nativeEvent.locale ? null : nativeEvent.data;
        default:
          return null;
      }
    }
    var supportedInputTypes = {
      color: true,
      date: true,
      datetime: true,
      "datetime-local": true,
      email: true,
      month: true,
      number: true,
      password: true,
      range: true,
      search: true,
      tel: true,
      text: true,
      time: true,
      url: true,
      week: true
    };
    function isTextInputElement(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
      return "input" === nodeName ? !!supportedInputTypes[elem.type] : "textarea" === nodeName ? true : false;
    }
    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
      restoreTarget ? restoreQueue ? restoreQueue.push(target) : restoreQueue = [target] : restoreTarget = target;
      inst = accumulateTwoPhaseListeners(inst, "onChange");
      0 < inst.length && (nativeEvent = new SyntheticEvent(
        "onChange",
        "change",
        null,
        nativeEvent,
        target
      ), dispatchQueue.push({ event: nativeEvent, listeners: inst }));
    }
    var activeElement$1 = null;
    var activeElementInst$1 = null;
    function runEventInBatch(dispatchQueue) {
      processDispatchQueue(dispatchQueue, 0);
    }
    function getInstIfValueChanged(targetInst) {
      var targetNode = getNodeFromInstance(targetInst);
      if (updateValueIfChanged(targetNode)) return targetInst;
    }
    function getTargetInstForChangeEvent(domEventName, targetInst) {
      if ("change" === domEventName) return targetInst;
    }
    var isInputEventSupported = false;
    if (canUseDOM) {
      if (canUseDOM) {
        isSupported$jscomp$inline_417 = "oninput" in document;
        if (!isSupported$jscomp$inline_417) {
          element$jscomp$inline_418 = document.createElement("div");
          element$jscomp$inline_418.setAttribute("oninput", "return;");
          isSupported$jscomp$inline_417 = "function" === typeof element$jscomp$inline_418.oninput;
        }
        JSCompiler_inline_result$jscomp$282 = isSupported$jscomp$inline_417;
      } else JSCompiler_inline_result$jscomp$282 = false;
      isInputEventSupported = JSCompiler_inline_result$jscomp$282 && (!document.documentMode || 9 < document.documentMode);
    }
    var JSCompiler_inline_result$jscomp$282;
    var isSupported$jscomp$inline_417;
    var element$jscomp$inline_418;
    function stopWatchingForValueChange() {
      activeElement$1 && (activeElement$1.detachEvent("onpropertychange", handlePropertyChange), activeElementInst$1 = activeElement$1 = null);
    }
    function handlePropertyChange(nativeEvent) {
      if ("value" === nativeEvent.propertyName && getInstIfValueChanged(activeElementInst$1)) {
        var dispatchQueue = [];
        createAndAccumulateChangeEvent(
          dispatchQueue,
          activeElementInst$1,
          nativeEvent,
          getEventTarget(nativeEvent)
        );
        batchedUpdates$1(runEventInBatch, dispatchQueue);
      }
    }
    function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
      "focusin" === domEventName ? (stopWatchingForValueChange(), activeElement$1 = target, activeElementInst$1 = targetInst, activeElement$1.attachEvent("onpropertychange", handlePropertyChange)) : "focusout" === domEventName && stopWatchingForValueChange();
    }
    function getTargetInstForInputEventPolyfill(domEventName) {
      if ("selectionchange" === domEventName || "keyup" === domEventName || "keydown" === domEventName)
        return getInstIfValueChanged(activeElementInst$1);
    }
    function getTargetInstForClickEvent(domEventName, targetInst) {
      if ("click" === domEventName) return getInstIfValueChanged(targetInst);
    }
    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
      if ("input" === domEventName || "change" === domEventName)
        return getInstIfValueChanged(targetInst);
    }
    function is(x, y) {
      return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
    }
    var objectIs = "function" === typeof Object.is ? Object.is : is;
    function shallowEqual(objA, objB) {
      if (objectIs(objA, objB)) return true;
      if ("object" !== typeof objA || null === objA || "object" !== typeof objB || null === objB)
        return false;
      var keysA = Object.keys(objA), keysB = Object.keys(objB);
      if (keysA.length !== keysB.length) return false;
      for (keysB = 0; keysB < keysA.length; keysB++) {
        var currentKey = keysA[keysB];
        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey]))
          return false;
      }
      return true;
    }
    function getLeafNode(node2) {
      for (; node2 && node2.firstChild; ) node2 = node2.firstChild;
      return node2;
    }
    function getNodeForCharacterOffset(root2, offset) {
      var node2 = getLeafNode(root2);
      root2 = 0;
      for (var nodeEnd; node2; ) {
        if (3 === node2.nodeType) {
          nodeEnd = root2 + node2.textContent.length;
          if (root2 <= offset && nodeEnd >= offset)
            return { node: node2, offset: offset - root2 };
          root2 = nodeEnd;
        }
        a: {
          for (; node2; ) {
            if (node2.nextSibling) {
              node2 = node2.nextSibling;
              break a;
            }
            node2 = node2.parentNode;
          }
          node2 = void 0;
        }
        node2 = getLeafNode(node2);
      }
    }
    function containsNode(outerNode, innerNode) {
      return outerNode && innerNode ? outerNode === innerNode ? true : outerNode && 3 === outerNode.nodeType ? false : innerNode && 3 === innerNode.nodeType ? containsNode(outerNode, innerNode.parentNode) : "contains" in outerNode ? outerNode.contains(innerNode) : outerNode.compareDocumentPosition ? !!(outerNode.compareDocumentPosition(innerNode) & 16) : false : false;
    }
    function getActiveElementDeep(containerInfo) {
      containerInfo = null != containerInfo && null != containerInfo.ownerDocument && null != containerInfo.ownerDocument.defaultView ? containerInfo.ownerDocument.defaultView : window;
      for (var element = getActiveElement(containerInfo.document); element instanceof containerInfo.HTMLIFrameElement; ) {
        try {
          var JSCompiler_inline_result = "string" === typeof element.contentWindow.location.href;
        } catch (err) {
          JSCompiler_inline_result = false;
        }
        if (JSCompiler_inline_result) containerInfo = element.contentWindow;
        else break;
        element = getActiveElement(containerInfo.document);
      }
      return element;
    }
    function hasSelectionCapabilities(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName && ("input" === nodeName && ("text" === elem.type || "search" === elem.type || "tel" === elem.type || "url" === elem.type || "password" === elem.type) || "textarea" === nodeName || "true" === elem.contentEditable);
    }
    var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && 11 >= document.documentMode;
    var activeElement = null;
    var activeElementInst = null;
    var lastSelection = null;
    var mouseDown = false;
    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
      var doc = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget.document : 9 === nativeEventTarget.nodeType ? nativeEventTarget : nativeEventTarget.ownerDocument;
      mouseDown || null == activeElement || activeElement !== getActiveElement(doc) || (doc = activeElement, "selectionStart" in doc && hasSelectionCapabilities(doc) ? doc = { start: doc.selectionStart, end: doc.selectionEnd } : (doc = (doc.ownerDocument && doc.ownerDocument.defaultView || window).getSelection(), doc = {
        anchorNode: doc.anchorNode,
        anchorOffset: doc.anchorOffset,
        focusNode: doc.focusNode,
        focusOffset: doc.focusOffset
      }), lastSelection && shallowEqual(lastSelection, doc) || (lastSelection = doc, doc = accumulateTwoPhaseListeners(activeElementInst, "onSelect"), 0 < doc.length && (nativeEvent = new SyntheticEvent(
        "onSelect",
        "select",
        null,
        nativeEvent,
        nativeEventTarget
      ), dispatchQueue.push({ event: nativeEvent, listeners: doc }), nativeEvent.target = activeElement)));
    }
    function makePrefixMap(styleProp, eventName) {
      var prefixes = {};
      prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
      prefixes["Webkit" + styleProp] = "webkit" + eventName;
      prefixes["Moz" + styleProp] = "moz" + eventName;
      return prefixes;
    }
    var vendorPrefixes = {
      animationend: makePrefixMap("Animation", "AnimationEnd"),
      animationiteration: makePrefixMap("Animation", "AnimationIteration"),
      animationstart: makePrefixMap("Animation", "AnimationStart"),
      transitionrun: makePrefixMap("Transition", "TransitionRun"),
      transitionstart: makePrefixMap("Transition", "TransitionStart"),
      transitioncancel: makePrefixMap("Transition", "TransitionCancel"),
      transitionend: makePrefixMap("Transition", "TransitionEnd")
    };
    var prefixedEventNames = {};
    var style = {};
    canUseDOM && (style = document.createElement("div").style, "AnimationEvent" in window || (delete vendorPrefixes.animationend.animation, delete vendorPrefixes.animationiteration.animation, delete vendorPrefixes.animationstart.animation), "TransitionEvent" in window || delete vendorPrefixes.transitionend.transition);
    function getVendorPrefixedEventName(eventName) {
      if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
      if (!vendorPrefixes[eventName]) return eventName;
      var prefixMap = vendorPrefixes[eventName], styleProp;
      for (styleProp in prefixMap)
        if (prefixMap.hasOwnProperty(styleProp) && styleProp in style)
          return prefixedEventNames[eventName] = prefixMap[styleProp];
      return eventName;
    }
    var ANIMATION_END = getVendorPrefixedEventName("animationend");
    var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
    var ANIMATION_START = getVendorPrefixedEventName("animationstart");
    var TRANSITION_RUN = getVendorPrefixedEventName("transitionrun");
    var TRANSITION_START = getVendorPrefixedEventName("transitionstart");
    var TRANSITION_CANCEL = getVendorPrefixedEventName("transitioncancel");
    var TRANSITION_END = getVendorPrefixedEventName("transitionend");
    var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
    var simpleEventPluginEvents = "abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(
      " "
    );
    simpleEventPluginEvents.push("scrollEnd");
    function registerSimpleEvent(domEventName, reactName) {
      topLevelEventsToReactNames.set(domEventName, reactName);
      registerTwoPhaseEvent(reactName, [domEventName]);
    }
    var CapturedStacks = /* @__PURE__ */ new WeakMap();
    function createCapturedValueAtFiber(value, source) {
      if ("object" === typeof value && null !== value) {
        var existing = CapturedStacks.get(value);
        if (void 0 !== existing) return existing;
        source = {
          value,
          source,
          stack: getStackByFiberInDevAndProd(source)
        };
        CapturedStacks.set(value, source);
        return source;
      }
      return {
        value,
        source,
        stack: getStackByFiberInDevAndProd(source)
      };
    }
    var concurrentQueues = [];
    var concurrentQueuesIndex = 0;
    var concurrentlyUpdatedLanes = 0;
    function finishQueueingConcurrentUpdates() {
      for (var endIndex = concurrentQueuesIndex, i = concurrentlyUpdatedLanes = concurrentQueuesIndex = 0; i < endIndex; ) {
        var fiber = concurrentQueues[i];
        concurrentQueues[i++] = null;
        var queue = concurrentQueues[i];
        concurrentQueues[i++] = null;
        var update = concurrentQueues[i];
        concurrentQueues[i++] = null;
        var lane = concurrentQueues[i];
        concurrentQueues[i++] = null;
        if (null !== queue && null !== update) {
          var pending = queue.pending;
          null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
          queue.pending = update;
        }
        0 !== lane && markUpdateLaneFromFiberToRoot(fiber, update, lane);
      }
    }
    function enqueueUpdate$1(fiber, queue, update, lane) {
      concurrentQueues[concurrentQueuesIndex++] = fiber;
      concurrentQueues[concurrentQueuesIndex++] = queue;
      concurrentQueues[concurrentQueuesIndex++] = update;
      concurrentQueues[concurrentQueuesIndex++] = lane;
      concurrentlyUpdatedLanes |= lane;
      fiber.lanes |= lane;
      fiber = fiber.alternate;
      null !== fiber && (fiber.lanes |= lane);
    }
    function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
      enqueueUpdate$1(fiber, queue, update, lane);
      return getRootForUpdatedFiber(fiber);
    }
    function enqueueConcurrentRenderForLane(fiber, lane) {
      enqueueUpdate$1(fiber, null, null, lane);
      return getRootForUpdatedFiber(fiber);
    }
    function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {
      sourceFiber.lanes |= lane;
      var alternate = sourceFiber.alternate;
      null !== alternate && (alternate.lanes |= lane);
      for (var isHidden = false, parent = sourceFiber.return; null !== parent; )
        parent.childLanes |= lane, alternate = parent.alternate, null !== alternate && (alternate.childLanes |= lane), 22 === parent.tag && (sourceFiber = parent.stateNode, null === sourceFiber || sourceFiber._visibility & 1 || (isHidden = true)), sourceFiber = parent, parent = parent.return;
      return 3 === sourceFiber.tag ? (parent = sourceFiber.stateNode, isHidden && null !== update && (isHidden = 31 - clz32(lane), sourceFiber = parent.hiddenUpdates, alternate = sourceFiber[isHidden], null === alternate ? sourceFiber[isHidden] = [update] : alternate.push(update), update.lane = lane | 536870912), parent) : null;
    }
    function getRootForUpdatedFiber(sourceFiber) {
      if (50 < nestedUpdateCount)
        throw nestedUpdateCount = 0, rootWithNestedUpdates = null, Error(formatProdErrorMessage(185));
      for (var parent = sourceFiber.return; null !== parent; )
        sourceFiber = parent, parent = sourceFiber.return;
      return 3 === sourceFiber.tag ? sourceFiber.stateNode : null;
    }
    var emptyContextObject = {};
    function FiberNode(tag, pendingProps, key, mode) {
      this.tag = tag;
      this.key = key;
      this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
      this.index = 0;
      this.refCleanup = this.ref = null;
      this.pendingProps = pendingProps;
      this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
      this.mode = mode;
      this.subtreeFlags = this.flags = 0;
      this.deletions = null;
      this.childLanes = this.lanes = 0;
      this.alternate = null;
    }
    function createFiberImplClass(tag, pendingProps, key, mode) {
      return new FiberNode(tag, pendingProps, key, mode);
    }
    function shouldConstruct(Component) {
      Component = Component.prototype;
      return !(!Component || !Component.isReactComponent);
    }
    function createWorkInProgress(current, pendingProps) {
      var workInProgress2 = current.alternate;
      null === workInProgress2 ? (workInProgress2 = createFiberImplClass(
        current.tag,
        pendingProps,
        current.key,
        current.mode
      ), workInProgress2.elementType = current.elementType, workInProgress2.type = current.type, workInProgress2.stateNode = current.stateNode, workInProgress2.alternate = current, current.alternate = workInProgress2) : (workInProgress2.pendingProps = pendingProps, workInProgress2.type = current.type, workInProgress2.flags = 0, workInProgress2.subtreeFlags = 0, workInProgress2.deletions = null);
      workInProgress2.flags = current.flags & 65011712;
      workInProgress2.childLanes = current.childLanes;
      workInProgress2.lanes = current.lanes;
      workInProgress2.child = current.child;
      workInProgress2.memoizedProps = current.memoizedProps;
      workInProgress2.memoizedState = current.memoizedState;
      workInProgress2.updateQueue = current.updateQueue;
      pendingProps = current.dependencies;
      workInProgress2.dependencies = null === pendingProps ? null : { lanes: pendingProps.lanes, firstContext: pendingProps.firstContext };
      workInProgress2.sibling = current.sibling;
      workInProgress2.index = current.index;
      workInProgress2.ref = current.ref;
      workInProgress2.refCleanup = current.refCleanup;
      return workInProgress2;
    }
    function resetWorkInProgress(workInProgress2, renderLanes2) {
      workInProgress2.flags &= 65011714;
      var current = workInProgress2.alternate;
      null === current ? (workInProgress2.childLanes = 0, workInProgress2.lanes = renderLanes2, workInProgress2.child = null, workInProgress2.subtreeFlags = 0, workInProgress2.memoizedProps = null, workInProgress2.memoizedState = null, workInProgress2.updateQueue = null, workInProgress2.dependencies = null, workInProgress2.stateNode = null) : (workInProgress2.childLanes = current.childLanes, workInProgress2.lanes = current.lanes, workInProgress2.child = current.child, workInProgress2.subtreeFlags = 0, workInProgress2.deletions = null, workInProgress2.memoizedProps = current.memoizedProps, workInProgress2.memoizedState = current.memoizedState, workInProgress2.updateQueue = current.updateQueue, workInProgress2.type = current.type, renderLanes2 = current.dependencies, workInProgress2.dependencies = null === renderLanes2 ? null : {
        lanes: renderLanes2.lanes,
        firstContext: renderLanes2.firstContext
      });
      return workInProgress2;
    }
    function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
      var fiberTag = 0;
      owner = type;
      if ("function" === typeof type) shouldConstruct(type) && (fiberTag = 1);
      else if ("string" === typeof type)
        fiberTag = isHostHoistableType(
          type,
          pendingProps,
          contextStackCursor.current
        ) ? 26 : "html" === type || "head" === type || "body" === type ? 27 : 5;
      else
        a: switch (type) {
          case REACT_ACTIVITY_TYPE:
            return type = createFiberImplClass(31, pendingProps, key, mode), type.elementType = REACT_ACTIVITY_TYPE, type.lanes = lanes, type;
          case REACT_FRAGMENT_TYPE:
            return createFiberFromFragment(pendingProps.children, mode, lanes, key);
          case REACT_STRICT_MODE_TYPE:
            fiberTag = 8;
            mode |= 24;
            break;
          case REACT_PROFILER_TYPE:
            return type = createFiberImplClass(12, pendingProps, key, mode | 2), type.elementType = REACT_PROFILER_TYPE, type.lanes = lanes, type;
          case REACT_SUSPENSE_TYPE:
            return type = createFiberImplClass(13, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_TYPE, type.lanes = lanes, type;
          case REACT_SUSPENSE_LIST_TYPE:
            return type = createFiberImplClass(19, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_LIST_TYPE, type.lanes = lanes, type;
          default:
            if ("object" === typeof type && null !== type)
              switch (type.$$typeof) {
                case REACT_PROVIDER_TYPE:
                case REACT_CONTEXT_TYPE:
                  fiberTag = 10;
                  break a;
                case REACT_CONSUMER_TYPE:
                  fiberTag = 9;
                  break a;
                case REACT_FORWARD_REF_TYPE:
                  fiberTag = 11;
                  break a;
                case REACT_MEMO_TYPE:
                  fiberTag = 14;
                  break a;
                case REACT_LAZY_TYPE:
                  fiberTag = 16;
                  owner = null;
                  break a;
              }
            fiberTag = 29;
            pendingProps = Error(
              formatProdErrorMessage(130, null === type ? "null" : typeof type, "")
            );
            owner = null;
        }
      key = createFiberImplClass(fiberTag, pendingProps, key, mode);
      key.elementType = type;
      key.type = owner;
      key.lanes = lanes;
      return key;
    }
    function createFiberFromFragment(elements, mode, lanes, key) {
      elements = createFiberImplClass(7, elements, key, mode);
      elements.lanes = lanes;
      return elements;
    }
    function createFiberFromText(content, mode, lanes) {
      content = createFiberImplClass(6, content, null, mode);
      content.lanes = lanes;
      return content;
    }
    function createFiberFromPortal(portal, mode, lanes) {
      mode = createFiberImplClass(
        4,
        null !== portal.children ? portal.children : [],
        portal.key,
        mode
      );
      mode.lanes = lanes;
      mode.stateNode = {
        containerInfo: portal.containerInfo,
        pendingChildren: null,
        implementation: portal.implementation
      };
      return mode;
    }
    var forkStack = [];
    var forkStackIndex = 0;
    var treeForkProvider = null;
    var treeForkCount = 0;
    var idStack = [];
    var idStackIndex = 0;
    var treeContextProvider = null;
    var treeContextId = 1;
    var treeContextOverflow = "";
    function pushTreeFork(workInProgress2, totalChildren) {
      forkStack[forkStackIndex++] = treeForkCount;
      forkStack[forkStackIndex++] = treeForkProvider;
      treeForkProvider = workInProgress2;
      treeForkCount = totalChildren;
    }
    function pushTreeId(workInProgress2, totalChildren, index2) {
      idStack[idStackIndex++] = treeContextId;
      idStack[idStackIndex++] = treeContextOverflow;
      idStack[idStackIndex++] = treeContextProvider;
      treeContextProvider = workInProgress2;
      var baseIdWithLeadingBit = treeContextId;
      workInProgress2 = treeContextOverflow;
      var baseLength = 32 - clz32(baseIdWithLeadingBit) - 1;
      baseIdWithLeadingBit &= ~(1 << baseLength);
      index2 += 1;
      var length2 = 32 - clz32(totalChildren) + baseLength;
      if (30 < length2) {
        var numberOfOverflowBits = baseLength - baseLength % 5;
        length2 = (baseIdWithLeadingBit & (1 << numberOfOverflowBits) - 1).toString(32);
        baseIdWithLeadingBit >>= numberOfOverflowBits;
        baseLength -= numberOfOverflowBits;
        treeContextId = 1 << 32 - clz32(totalChildren) + baseLength | index2 << baseLength | baseIdWithLeadingBit;
        treeContextOverflow = length2 + workInProgress2;
      } else
        treeContextId = 1 << length2 | index2 << baseLength | baseIdWithLeadingBit, treeContextOverflow = workInProgress2;
    }
    function pushMaterializedTreeId(workInProgress2) {
      null !== workInProgress2.return && (pushTreeFork(workInProgress2, 1), pushTreeId(workInProgress2, 1, 0));
    }
    function popTreeContext(workInProgress2) {
      for (; workInProgress2 === treeForkProvider; )
        treeForkProvider = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null, treeForkCount = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null;
      for (; workInProgress2 === treeContextProvider; )
        treeContextProvider = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextOverflow = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextId = idStack[--idStackIndex], idStack[idStackIndex] = null;
    }
    var hydrationParentFiber = null;
    var nextHydratableInstance = null;
    var isHydrating = false;
    var hydrationErrors = null;
    var rootOrSingletonContext = false;
    var HydrationMismatchException = Error(formatProdErrorMessage(519));
    function throwOnHydrationMismatch(fiber) {
      var error = Error(formatProdErrorMessage(418, ""));
      queueHydrationError(createCapturedValueAtFiber(error, fiber));
      throw HydrationMismatchException;
    }
    function prepareToHydrateHostInstance(fiber) {
      var instance = fiber.stateNode, type = fiber.type, props = fiber.memoizedProps;
      instance[internalInstanceKey] = fiber;
      instance[internalPropsKey] = props;
      switch (type) {
        case "dialog":
          listenToNonDelegatedEvent("cancel", instance);
          listenToNonDelegatedEvent("close", instance);
          break;
        case "iframe":
        case "object":
        case "embed":
          listenToNonDelegatedEvent("load", instance);
          break;
        case "video":
        case "audio":
          for (type = 0; type < mediaEventTypes.length; type++)
            listenToNonDelegatedEvent(mediaEventTypes[type], instance);
          break;
        case "source":
          listenToNonDelegatedEvent("error", instance);
          break;
        case "img":
        case "image":
        case "link":
          listenToNonDelegatedEvent("error", instance);
          listenToNonDelegatedEvent("load", instance);
          break;
        case "details":
          listenToNonDelegatedEvent("toggle", instance);
          break;
        case "input":
          listenToNonDelegatedEvent("invalid", instance);
          initInput(
            instance,
            props.value,
            props.defaultValue,
            props.checked,
            props.defaultChecked,
            props.type,
            props.name,
            true
          );
          track(instance);
          break;
        case "select":
          listenToNonDelegatedEvent("invalid", instance);
          break;
        case "textarea":
          listenToNonDelegatedEvent("invalid", instance), initTextarea(instance, props.value, props.defaultValue, props.children), track(instance);
      }
      type = props.children;
      "string" !== typeof type && "number" !== typeof type && "bigint" !== typeof type || instance.textContent === "" + type || true === props.suppressHydrationWarning || checkForUnmatchedText(instance.textContent, type) ? (null != props.popover && (listenToNonDelegatedEvent("beforetoggle", instance), listenToNonDelegatedEvent("toggle", instance)), null != props.onScroll && listenToNonDelegatedEvent("scroll", instance), null != props.onScrollEnd && listenToNonDelegatedEvent("scrollend", instance), null != props.onClick && (instance.onclick = noop$1), instance = true) : instance = false;
      instance || throwOnHydrationMismatch(fiber);
    }
    function popToNextHostParent(fiber) {
      for (hydrationParentFiber = fiber.return; hydrationParentFiber; )
        switch (hydrationParentFiber.tag) {
          case 5:
          case 13:
            rootOrSingletonContext = false;
            return;
          case 27:
          case 3:
            rootOrSingletonContext = true;
            return;
          default:
            hydrationParentFiber = hydrationParentFiber.return;
        }
    }
    function popHydrationState(fiber) {
      if (fiber !== hydrationParentFiber) return false;
      if (!isHydrating) return popToNextHostParent(fiber), isHydrating = true, false;
      var tag = fiber.tag, JSCompiler_temp;
      if (JSCompiler_temp = 3 !== tag && 27 !== tag) {
        if (JSCompiler_temp = 5 === tag)
          JSCompiler_temp = fiber.type, JSCompiler_temp = !("form" !== JSCompiler_temp && "button" !== JSCompiler_temp) || shouldSetTextContent(fiber.type, fiber.memoizedProps);
        JSCompiler_temp = !JSCompiler_temp;
      }
      JSCompiler_temp && nextHydratableInstance && throwOnHydrationMismatch(fiber);
      popToNextHostParent(fiber);
      if (13 === tag) {
        fiber = fiber.memoizedState;
        fiber = null !== fiber ? fiber.dehydrated : null;
        if (!fiber) throw Error(formatProdErrorMessage(317));
        a: {
          fiber = fiber.nextSibling;
          for (tag = 0; fiber; ) {
            if (8 === fiber.nodeType)
              if (JSCompiler_temp = fiber.data, "/$" === JSCompiler_temp) {
                if (0 === tag) {
                  nextHydratableInstance = getNextHydratable(fiber.nextSibling);
                  break a;
                }
                tag--;
              } else
                "$" !== JSCompiler_temp && "$!" !== JSCompiler_temp && "$?" !== JSCompiler_temp || tag++;
            fiber = fiber.nextSibling;
          }
          nextHydratableInstance = null;
        }
      } else
        27 === tag ? (tag = nextHydratableInstance, isSingletonScope(fiber.type) ? (fiber = previousHydratableOnEnteringScopedSingleton, previousHydratableOnEnteringScopedSingleton = null, nextHydratableInstance = fiber) : nextHydratableInstance = tag) : nextHydratableInstance = hydrationParentFiber ? getNextHydratable(fiber.stateNode.nextSibling) : null;
      return true;
    }
    function resetHydrationState() {
      nextHydratableInstance = hydrationParentFiber = null;
      isHydrating = false;
    }
    function upgradeHydrationErrorsToRecoverable() {
      var queuedErrors = hydrationErrors;
      null !== queuedErrors && (null === workInProgressRootRecoverableErrors ? workInProgressRootRecoverableErrors = queuedErrors : workInProgressRootRecoverableErrors.push.apply(
        workInProgressRootRecoverableErrors,
        queuedErrors
      ), hydrationErrors = null);
      return queuedErrors;
    }
    function queueHydrationError(error) {
      null === hydrationErrors ? hydrationErrors = [error] : hydrationErrors.push(error);
    }
    var valueCursor = createCursor(null);
    var currentlyRenderingFiber$1 = null;
    var lastContextDependency = null;
    function pushProvider(providerFiber, context, nextValue) {
      push(valueCursor, context._currentValue);
      context._currentValue = nextValue;
    }
    function popProvider(context) {
      context._currentValue = valueCursor.current;
      pop(valueCursor);
    }
    function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
      for (; null !== parent; ) {
        var alternate = parent.alternate;
        (parent.childLanes & renderLanes2) !== renderLanes2 ? (parent.childLanes |= renderLanes2, null !== alternate && (alternate.childLanes |= renderLanes2)) : null !== alternate && (alternate.childLanes & renderLanes2) !== renderLanes2 && (alternate.childLanes |= renderLanes2);
        if (parent === propagationRoot) break;
        parent = parent.return;
      }
    }
    function propagateContextChanges(workInProgress2, contexts, renderLanes2, forcePropagateEntireTree) {
      var fiber = workInProgress2.child;
      null !== fiber && (fiber.return = workInProgress2);
      for (; null !== fiber; ) {
        var list = fiber.dependencies;
        if (null !== list) {
          var nextFiber = fiber.child;
          list = list.firstContext;
          a: for (; null !== list; ) {
            var dependency = list;
            list = fiber;
            for (var i = 0; i < contexts.length; i++)
              if (dependency.context === contexts[i]) {
                list.lanes |= renderLanes2;
                dependency = list.alternate;
                null !== dependency && (dependency.lanes |= renderLanes2);
                scheduleContextWorkOnParentPath(
                  list.return,
                  renderLanes2,
                  workInProgress2
                );
                forcePropagateEntireTree || (nextFiber = null);
                break a;
              }
            list = dependency.next;
          }
        } else if (18 === fiber.tag) {
          nextFiber = fiber.return;
          if (null === nextFiber) throw Error(formatProdErrorMessage(341));
          nextFiber.lanes |= renderLanes2;
          list = nextFiber.alternate;
          null !== list && (list.lanes |= renderLanes2);
          scheduleContextWorkOnParentPath(nextFiber, renderLanes2, workInProgress2);
          nextFiber = null;
        } else nextFiber = fiber.child;
        if (null !== nextFiber) nextFiber.return = fiber;
        else
          for (nextFiber = fiber; null !== nextFiber; ) {
            if (nextFiber === workInProgress2) {
              nextFiber = null;
              break;
            }
            fiber = nextFiber.sibling;
            if (null !== fiber) {
              fiber.return = nextFiber.return;
              nextFiber = fiber;
              break;
            }
            nextFiber = nextFiber.return;
          }
        fiber = nextFiber;
      }
    }
    function propagateParentContextChanges(current, workInProgress2, renderLanes2, forcePropagateEntireTree) {
      current = null;
      for (var parent = workInProgress2, isInsidePropagationBailout = false; null !== parent; ) {
        if (!isInsidePropagationBailout) {
          if (0 !== (parent.flags & 524288)) isInsidePropagationBailout = true;
          else if (0 !== (parent.flags & 262144)) break;
        }
        if (10 === parent.tag) {
          var currentParent = parent.alternate;
          if (null === currentParent) throw Error(formatProdErrorMessage(387));
          currentParent = currentParent.memoizedProps;
          if (null !== currentParent) {
            var context = parent.type;
            objectIs(parent.pendingProps.value, currentParent.value) || (null !== current ? current.push(context) : current = [context]);
          }
        } else if (parent === hostTransitionProviderCursor.current) {
          currentParent = parent.alternate;
          if (null === currentParent) throw Error(formatProdErrorMessage(387));
          currentParent.memoizedState.memoizedState !== parent.memoizedState.memoizedState && (null !== current ? current.push(HostTransitionContext) : current = [HostTransitionContext]);
        }
        parent = parent.return;
      }
      null !== current && propagateContextChanges(
        workInProgress2,
        current,
        renderLanes2,
        forcePropagateEntireTree
      );
      workInProgress2.flags |= 262144;
    }
    function checkIfContextChanged(currentDependencies) {
      for (currentDependencies = currentDependencies.firstContext; null !== currentDependencies; ) {
        if (!objectIs(
          currentDependencies.context._currentValue,
          currentDependencies.memoizedValue
        ))
          return true;
        currentDependencies = currentDependencies.next;
      }
      return false;
    }
    function prepareToReadContext(workInProgress2) {
      currentlyRenderingFiber$1 = workInProgress2;
      lastContextDependency = null;
      workInProgress2 = workInProgress2.dependencies;
      null !== workInProgress2 && (workInProgress2.firstContext = null);
    }
    function readContext(context) {
      return readContextForConsumer(currentlyRenderingFiber$1, context);
    }
    function readContextDuringReconciliation(consumer, context) {
      null === currentlyRenderingFiber$1 && prepareToReadContext(consumer);
      return readContextForConsumer(consumer, context);
    }
    function readContextForConsumer(consumer, context) {
      var value = context._currentValue;
      context = { context, memoizedValue: value, next: null };
      if (null === lastContextDependency) {
        if (null === consumer) throw Error(formatProdErrorMessage(308));
        lastContextDependency = context;
        consumer.dependencies = { lanes: 0, firstContext: context };
        consumer.flags |= 524288;
      } else lastContextDependency = lastContextDependency.next = context;
      return value;
    }
    var AbortControllerLocal = "undefined" !== typeof AbortController ? AbortController : function() {
      var listeners = [], signal = this.signal = {
        aborted: false,
        addEventListener: function(type, listener) {
          listeners.push(listener);
        }
      };
      this.abort = function() {
        signal.aborted = true;
        listeners.forEach(function(listener) {
          return listener();
        });
      };
    };
    var scheduleCallback$2 = Scheduler.unstable_scheduleCallback;
    var NormalPriority = Scheduler.unstable_NormalPriority;
    var CacheContext = {
      $$typeof: REACT_CONTEXT_TYPE,
      Consumer: null,
      Provider: null,
      _currentValue: null,
      _currentValue2: null,
      _threadCount: 0
    };
    function createCache3() {
      return {
        controller: new AbortControllerLocal(),
        data: /* @__PURE__ */ new Map(),
        refCount: 0
      };
    }
    function releaseCache(cache) {
      cache.refCount--;
      0 === cache.refCount && scheduleCallback$2(NormalPriority, function() {
        cache.controller.abort();
      });
    }
    var currentEntangledListeners = null;
    var currentEntangledPendingCount = 0;
    var currentEntangledLane = 0;
    var currentEntangledActionThenable = null;
    function entangleAsyncAction(transition, thenable) {
      if (null === currentEntangledListeners) {
        var entangledListeners = currentEntangledListeners = [];
        currentEntangledPendingCount = 0;
        currentEntangledLane = requestTransitionLane();
        currentEntangledActionThenable = {
          status: "pending",
          value: void 0,
          then: function(resolve) {
            entangledListeners.push(resolve);
          }
        };
      }
      currentEntangledPendingCount++;
      thenable.then(pingEngtangledActionScope, pingEngtangledActionScope);
      return thenable;
    }
    function pingEngtangledActionScope() {
      if (0 === --currentEntangledPendingCount && null !== currentEntangledListeners) {
        null !== currentEntangledActionThenable && (currentEntangledActionThenable.status = "fulfilled");
        var listeners = currentEntangledListeners;
        currentEntangledListeners = null;
        currentEntangledLane = 0;
        currentEntangledActionThenable = null;
        for (var i = 0; i < listeners.length; i++) (0, listeners[i])();
      }
    }
    function chainThenableValue(thenable, result) {
      var listeners = [], thenableWithOverride = {
        status: "pending",
        value: null,
        reason: null,
        then: function(resolve) {
          listeners.push(resolve);
        }
      };
      thenable.then(
        function() {
          thenableWithOverride.status = "fulfilled";
          thenableWithOverride.value = result;
          for (var i = 0; i < listeners.length; i++) (0, listeners[i])(result);
        },
        function(error) {
          thenableWithOverride.status = "rejected";
          thenableWithOverride.reason = error;
          for (error = 0; error < listeners.length; error++)
            (0, listeners[error])(void 0);
        }
      );
      return thenableWithOverride;
    }
    var prevOnStartTransitionFinish = ReactSharedInternals.S;
    ReactSharedInternals.S = function(transition, returnValue) {
      "object" === typeof returnValue && null !== returnValue && "function" === typeof returnValue.then && entangleAsyncAction(transition, returnValue);
      null !== prevOnStartTransitionFinish && prevOnStartTransitionFinish(transition, returnValue);
    };
    var resumedCache = createCursor(null);
    function peekCacheFromPool() {
      var cacheResumedFromPreviousRender = resumedCache.current;
      return null !== cacheResumedFromPreviousRender ? cacheResumedFromPreviousRender : workInProgressRoot.pooledCache;
    }
    function pushTransition(offscreenWorkInProgress, prevCachePool) {
      null === prevCachePool ? push(resumedCache, resumedCache.current) : push(resumedCache, prevCachePool.pool);
    }
    function getSuspendedCache() {
      var cacheFromPool = peekCacheFromPool();
      return null === cacheFromPool ? null : { parent: CacheContext._currentValue, pool: cacheFromPool };
    }
    var SuspenseException = Error(formatProdErrorMessage(460));
    var SuspenseyCommitException = Error(formatProdErrorMessage(474));
    var SuspenseActionException = Error(formatProdErrorMessage(542));
    var noopSuspenseyCommitThenable = { then: function() {
    } };
    function isThenableResolved(thenable) {
      thenable = thenable.status;
      return "fulfilled" === thenable || "rejected" === thenable;
    }
    function noop$3() {
    }
    function trackUsedThenable(thenableState2, thenable, index2) {
      index2 = thenableState2[index2];
      void 0 === index2 ? thenableState2.push(thenable) : index2 !== thenable && (thenable.then(noop$3, noop$3), thenable = index2);
      switch (thenable.status) {
        case "fulfilled":
          return thenable.value;
        case "rejected":
          throw thenableState2 = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState2), thenableState2;
        default:
          if ("string" === typeof thenable.status) thenable.then(noop$3, noop$3);
          else {
            thenableState2 = workInProgressRoot;
            if (null !== thenableState2 && 100 < thenableState2.shellSuspendCounter)
              throw Error(formatProdErrorMessage(482));
            thenableState2 = thenable;
            thenableState2.status = "pending";
            thenableState2.then(
              function(fulfilledValue) {
                if ("pending" === thenable.status) {
                  var fulfilledThenable = thenable;
                  fulfilledThenable.status = "fulfilled";
                  fulfilledThenable.value = fulfilledValue;
                }
              },
              function(error) {
                if ("pending" === thenable.status) {
                  var rejectedThenable = thenable;
                  rejectedThenable.status = "rejected";
                  rejectedThenable.reason = error;
                }
              }
            );
          }
          switch (thenable.status) {
            case "fulfilled":
              return thenable.value;
            case "rejected":
              throw thenableState2 = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState2), thenableState2;
          }
          suspendedThenable = thenable;
          throw SuspenseException;
      }
    }
    var suspendedThenable = null;
    function getSuspendedThenable() {
      if (null === suspendedThenable) throw Error(formatProdErrorMessage(459));
      var thenable = suspendedThenable;
      suspendedThenable = null;
      return thenable;
    }
    function checkIfUseWrappedInAsyncCatch(rejectedReason) {
      if (rejectedReason === SuspenseException || rejectedReason === SuspenseActionException)
        throw Error(formatProdErrorMessage(483));
    }
    var hasForceUpdate = false;
    function initializeUpdateQueue(fiber) {
      fiber.updateQueue = {
        baseState: fiber.memoizedState,
        firstBaseUpdate: null,
        lastBaseUpdate: null,
        shared: { pending: null, lanes: 0, hiddenCallbacks: null },
        callbacks: null
      };
    }
    function cloneUpdateQueue(current, workInProgress2) {
      current = current.updateQueue;
      workInProgress2.updateQueue === current && (workInProgress2.updateQueue = {
        baseState: current.baseState,
        firstBaseUpdate: current.firstBaseUpdate,
        lastBaseUpdate: current.lastBaseUpdate,
        shared: current.shared,
        callbacks: null
      });
    }
    function createUpdate(lane) {
      return { lane, tag: 0, payload: null, callback: null, next: null };
    }
    function enqueueUpdate(fiber, update, lane) {
      var updateQueue = fiber.updateQueue;
      if (null === updateQueue) return null;
      updateQueue = updateQueue.shared;
      if (0 !== (executionContext & 2)) {
        var pending = updateQueue.pending;
        null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
        updateQueue.pending = update;
        update = getRootForUpdatedFiber(fiber);
        markUpdateLaneFromFiberToRoot(fiber, null, lane);
        return update;
      }
      enqueueUpdate$1(fiber, updateQueue, update, lane);
      return getRootForUpdatedFiber(fiber);
    }
    function entangleTransitions(root2, fiber, lane) {
      fiber = fiber.updateQueue;
      if (null !== fiber && (fiber = fiber.shared, 0 !== (lane & 4194048))) {
        var queueLanes = fiber.lanes;
        queueLanes &= root2.pendingLanes;
        lane |= queueLanes;
        fiber.lanes = lane;
        markRootEntangled(root2, lane);
      }
    }
    function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
      var queue = workInProgress2.updateQueue, current = workInProgress2.alternate;
      if (null !== current && (current = current.updateQueue, queue === current)) {
        var newFirst = null, newLast = null;
        queue = queue.firstBaseUpdate;
        if (null !== queue) {
          do {
            var clone = {
              lane: queue.lane,
              tag: queue.tag,
              payload: queue.payload,
              callback: null,
              next: null
            };
            null === newLast ? newFirst = newLast = clone : newLast = newLast.next = clone;
            queue = queue.next;
          } while (null !== queue);
          null === newLast ? newFirst = newLast = capturedUpdate : newLast = newLast.next = capturedUpdate;
        } else newFirst = newLast = capturedUpdate;
        queue = {
          baseState: current.baseState,
          firstBaseUpdate: newFirst,
          lastBaseUpdate: newLast,
          shared: current.shared,
          callbacks: current.callbacks
        };
        workInProgress2.updateQueue = queue;
        return;
      }
      workInProgress2 = queue.lastBaseUpdate;
      null === workInProgress2 ? queue.firstBaseUpdate = capturedUpdate : workInProgress2.next = capturedUpdate;
      queue.lastBaseUpdate = capturedUpdate;
    }
    var didReadFromEntangledAsyncAction = false;
    function suspendIfUpdateReadFromEntangledAsyncAction() {
      if (didReadFromEntangledAsyncAction) {
        var entangledActionThenable = currentEntangledActionThenable;
        if (null !== entangledActionThenable) throw entangledActionThenable;
      }
    }
    function processUpdateQueue(workInProgress$jscomp$0, props, instance$jscomp$0, renderLanes2) {
      didReadFromEntangledAsyncAction = false;
      var queue = workInProgress$jscomp$0.updateQueue;
      hasForceUpdate = false;
      var firstBaseUpdate = queue.firstBaseUpdate, lastBaseUpdate = queue.lastBaseUpdate, pendingQueue = queue.shared.pending;
      if (null !== pendingQueue) {
        queue.shared.pending = null;
        var lastPendingUpdate = pendingQueue, firstPendingUpdate = lastPendingUpdate.next;
        lastPendingUpdate.next = null;
        null === lastBaseUpdate ? firstBaseUpdate = firstPendingUpdate : lastBaseUpdate.next = firstPendingUpdate;
        lastBaseUpdate = lastPendingUpdate;
        var current = workInProgress$jscomp$0.alternate;
        null !== current && (current = current.updateQueue, pendingQueue = current.lastBaseUpdate, pendingQueue !== lastBaseUpdate && (null === pendingQueue ? current.firstBaseUpdate = firstPendingUpdate : pendingQueue.next = firstPendingUpdate, current.lastBaseUpdate = lastPendingUpdate));
      }
      if (null !== firstBaseUpdate) {
        var newState = queue.baseState;
        lastBaseUpdate = 0;
        current = firstPendingUpdate = lastPendingUpdate = null;
        pendingQueue = firstBaseUpdate;
        do {
          var updateLane = pendingQueue.lane & -536870913, isHiddenUpdate = updateLane !== pendingQueue.lane;
          if (isHiddenUpdate ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes2 & updateLane) === updateLane) {
            0 !== updateLane && updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction = true);
            null !== current && (current = current.next = {
              lane: 0,
              tag: pendingQueue.tag,
              payload: pendingQueue.payload,
              callback: null,
              next: null
            });
            a: {
              var workInProgress2 = workInProgress$jscomp$0, update = pendingQueue;
              updateLane = props;
              var instance = instance$jscomp$0;
              switch (update.tag) {
                case 1:
                  workInProgress2 = update.payload;
                  if ("function" === typeof workInProgress2) {
                    newState = workInProgress2.call(instance, newState, updateLane);
                    break a;
                  }
                  newState = workInProgress2;
                  break a;
                case 3:
                  workInProgress2.flags = workInProgress2.flags & -65537 | 128;
                case 0:
                  workInProgress2 = update.payload;
                  updateLane = "function" === typeof workInProgress2 ? workInProgress2.call(instance, newState, updateLane) : workInProgress2;
                  if (null === updateLane || void 0 === updateLane) break a;
                  newState = assign2({}, newState, updateLane);
                  break a;
                case 2:
                  hasForceUpdate = true;
              }
            }
            updateLane = pendingQueue.callback;
            null !== updateLane && (workInProgress$jscomp$0.flags |= 64, isHiddenUpdate && (workInProgress$jscomp$0.flags |= 8192), isHiddenUpdate = queue.callbacks, null === isHiddenUpdate ? queue.callbacks = [updateLane] : isHiddenUpdate.push(updateLane));
          } else
            isHiddenUpdate = {
              lane: updateLane,
              tag: pendingQueue.tag,
              payload: pendingQueue.payload,
              callback: pendingQueue.callback,
              next: null
            }, null === current ? (firstPendingUpdate = current = isHiddenUpdate, lastPendingUpdate = newState) : current = current.next = isHiddenUpdate, lastBaseUpdate |= updateLane;
          pendingQueue = pendingQueue.next;
          if (null === pendingQueue)
            if (pendingQueue = queue.shared.pending, null === pendingQueue)
              break;
            else
              isHiddenUpdate = pendingQueue, pendingQueue = isHiddenUpdate.next, isHiddenUpdate.next = null, queue.lastBaseUpdate = isHiddenUpdate, queue.shared.pending = null;
        } while (1);
        null === current && (lastPendingUpdate = newState);
        queue.baseState = lastPendingUpdate;
        queue.firstBaseUpdate = firstPendingUpdate;
        queue.lastBaseUpdate = current;
        null === firstBaseUpdate && (queue.shared.lanes = 0);
        workInProgressRootSkippedLanes |= lastBaseUpdate;
        workInProgress$jscomp$0.lanes = lastBaseUpdate;
        workInProgress$jscomp$0.memoizedState = newState;
      }
    }
    function callCallback(callback, context) {
      if ("function" !== typeof callback)
        throw Error(formatProdErrorMessage(191, callback));
      callback.call(context);
    }
    function commitCallbacks(updateQueue, context) {
      var callbacks = updateQueue.callbacks;
      if (null !== callbacks)
        for (updateQueue.callbacks = null, updateQueue = 0; updateQueue < callbacks.length; updateQueue++)
          callCallback(callbacks[updateQueue], context);
    }
    var currentTreeHiddenStackCursor = createCursor(null);
    var prevEntangledRenderLanesCursor = createCursor(0);
    function pushHiddenContext(fiber, context) {
      fiber = entangledRenderLanes;
      push(prevEntangledRenderLanesCursor, fiber);
      push(currentTreeHiddenStackCursor, context);
      entangledRenderLanes = fiber | context.baseLanes;
    }
    function reuseHiddenContextOnStack() {
      push(prevEntangledRenderLanesCursor, entangledRenderLanes);
      push(currentTreeHiddenStackCursor, currentTreeHiddenStackCursor.current);
    }
    function popHiddenContext() {
      entangledRenderLanes = prevEntangledRenderLanesCursor.current;
      pop(currentTreeHiddenStackCursor);
      pop(prevEntangledRenderLanesCursor);
    }
    var renderLanes = 0;
    var currentlyRenderingFiber = null;
    var currentHook = null;
    var workInProgressHook = null;
    var didScheduleRenderPhaseUpdate = false;
    var didScheduleRenderPhaseUpdateDuringThisPass = false;
    var shouldDoubleInvokeUserFnsInHooksDEV = false;
    var localIdCounter = 0;
    var thenableIndexCounter$1 = 0;
    var thenableState$1 = null;
    var globalClientIdCounter = 0;
    function throwInvalidHookError() {
      throw Error(formatProdErrorMessage(321));
    }
    function areHookInputsEqual(nextDeps, prevDeps) {
      if (null === prevDeps) return false;
      for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++)
        if (!objectIs(nextDeps[i], prevDeps[i])) return false;
      return true;
    }
    function renderWithHooks(current, workInProgress2, Component, props, secondArg, nextRenderLanes) {
      renderLanes = nextRenderLanes;
      currentlyRenderingFiber = workInProgress2;
      workInProgress2.memoizedState = null;
      workInProgress2.updateQueue = null;
      workInProgress2.lanes = 0;
      ReactSharedInternals.H = null === current || null === current.memoizedState ? HooksDispatcherOnMount : HooksDispatcherOnUpdate;
      shouldDoubleInvokeUserFnsInHooksDEV = false;
      nextRenderLanes = Component(props, secondArg);
      shouldDoubleInvokeUserFnsInHooksDEV = false;
      didScheduleRenderPhaseUpdateDuringThisPass && (nextRenderLanes = renderWithHooksAgain(
        workInProgress2,
        Component,
        props,
        secondArg
      ));
      finishRenderingHooks(current);
      return nextRenderLanes;
    }
    function finishRenderingHooks(current) {
      ReactSharedInternals.H = ContextOnlyDispatcher;
      var didRenderTooFewHooks = null !== currentHook && null !== currentHook.next;
      renderLanes = 0;
      workInProgressHook = currentHook = currentlyRenderingFiber = null;
      didScheduleRenderPhaseUpdate = false;
      thenableIndexCounter$1 = 0;
      thenableState$1 = null;
      if (didRenderTooFewHooks) throw Error(formatProdErrorMessage(300));
      null === current || didReceiveUpdate || (current = current.dependencies, null !== current && checkIfContextChanged(current) && (didReceiveUpdate = true));
    }
    function renderWithHooksAgain(workInProgress2, Component, props, secondArg) {
      currentlyRenderingFiber = workInProgress2;
      var numberOfReRenders = 0;
      do {
        didScheduleRenderPhaseUpdateDuringThisPass && (thenableState$1 = null);
        thenableIndexCounter$1 = 0;
        didScheduleRenderPhaseUpdateDuringThisPass = false;
        if (25 <= numberOfReRenders) throw Error(formatProdErrorMessage(301));
        numberOfReRenders += 1;
        workInProgressHook = currentHook = null;
        if (null != workInProgress2.updateQueue) {
          var children = workInProgress2.updateQueue;
          children.lastEffect = null;
          children.events = null;
          children.stores = null;
          null != children.memoCache && (children.memoCache.index = 0);
        }
        ReactSharedInternals.H = HooksDispatcherOnRerender;
        children = Component(props, secondArg);
      } while (didScheduleRenderPhaseUpdateDuringThisPass);
      return children;
    }
    function TransitionAwareHostComponent() {
      var dispatcher = ReactSharedInternals.H, maybeThenable = dispatcher.useState()[0];
      maybeThenable = "function" === typeof maybeThenable.then ? useThenable(maybeThenable) : maybeThenable;
      dispatcher = dispatcher.useState()[0];
      (null !== currentHook ? currentHook.memoizedState : null) !== dispatcher && (currentlyRenderingFiber.flags |= 1024);
      return maybeThenable;
    }
    function checkDidRenderIdHook() {
      var didRenderIdHook = 0 !== localIdCounter;
      localIdCounter = 0;
      return didRenderIdHook;
    }
    function bailoutHooks(current, workInProgress2, lanes) {
      workInProgress2.updateQueue = current.updateQueue;
      workInProgress2.flags &= -2053;
      current.lanes &= ~lanes;
    }
    function resetHooksOnUnwind(workInProgress2) {
      if (didScheduleRenderPhaseUpdate) {
        for (workInProgress2 = workInProgress2.memoizedState; null !== workInProgress2; ) {
          var queue = workInProgress2.queue;
          null !== queue && (queue.pending = null);
          workInProgress2 = workInProgress2.next;
        }
        didScheduleRenderPhaseUpdate = false;
      }
      renderLanes = 0;
      workInProgressHook = currentHook = currentlyRenderingFiber = null;
      didScheduleRenderPhaseUpdateDuringThisPass = false;
      thenableIndexCounter$1 = localIdCounter = 0;
      thenableState$1 = null;
    }
    function mountWorkInProgressHook() {
      var hook = {
        memoizedState: null,
        baseState: null,
        baseQueue: null,
        queue: null,
        next: null
      };
      null === workInProgressHook ? currentlyRenderingFiber.memoizedState = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook;
      return workInProgressHook;
    }
    function updateWorkInProgressHook() {
      if (null === currentHook) {
        var nextCurrentHook = currentlyRenderingFiber.alternate;
        nextCurrentHook = null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;
      } else nextCurrentHook = currentHook.next;
      var nextWorkInProgressHook = null === workInProgressHook ? currentlyRenderingFiber.memoizedState : workInProgressHook.next;
      if (null !== nextWorkInProgressHook)
        workInProgressHook = nextWorkInProgressHook, currentHook = nextCurrentHook;
      else {
        if (null === nextCurrentHook) {
          if (null === currentlyRenderingFiber.alternate)
            throw Error(formatProdErrorMessage(467));
          throw Error(formatProdErrorMessage(310));
        }
        currentHook = nextCurrentHook;
        nextCurrentHook = {
          memoizedState: currentHook.memoizedState,
          baseState: currentHook.baseState,
          baseQueue: currentHook.baseQueue,
          queue: currentHook.queue,
          next: null
        };
        null === workInProgressHook ? currentlyRenderingFiber.memoizedState = workInProgressHook = nextCurrentHook : workInProgressHook = workInProgressHook.next = nextCurrentHook;
      }
      return workInProgressHook;
    }
    function createFunctionComponentUpdateQueue() {
      return { lastEffect: null, events: null, stores: null, memoCache: null };
    }
    function useThenable(thenable) {
      var index2 = thenableIndexCounter$1;
      thenableIndexCounter$1 += 1;
      null === thenableState$1 && (thenableState$1 = []);
      thenable = trackUsedThenable(thenableState$1, thenable, index2);
      index2 = currentlyRenderingFiber;
      null === (null === workInProgressHook ? index2.memoizedState : workInProgressHook.next) && (index2 = index2.alternate, ReactSharedInternals.H = null === index2 || null === index2.memoizedState ? HooksDispatcherOnMount : HooksDispatcherOnUpdate);
      return thenable;
    }
    function use(usable) {
      if (null !== usable && "object" === typeof usable) {
        if ("function" === typeof usable.then) return useThenable(usable);
        if (usable.$$typeof === REACT_CONTEXT_TYPE) return readContext(usable);
      }
      throw Error(formatProdErrorMessage(438, String(usable)));
    }
    function useMemoCache(size) {
      var memoCache = null, updateQueue = currentlyRenderingFiber.updateQueue;
      null !== updateQueue && (memoCache = updateQueue.memoCache);
      if (null == memoCache) {
        var current = currentlyRenderingFiber.alternate;
        null !== current && (current = current.updateQueue, null !== current && (current = current.memoCache, null != current && (memoCache = {
          data: current.data.map(function(array) {
            return array.slice();
          }),
          index: 0
        })));
      }
      null == memoCache && (memoCache = { data: [], index: 0 });
      null === updateQueue && (updateQueue = createFunctionComponentUpdateQueue(), currentlyRenderingFiber.updateQueue = updateQueue);
      updateQueue.memoCache = memoCache;
      updateQueue = memoCache.data[memoCache.index];
      if (void 0 === updateQueue)
        for (updateQueue = memoCache.data[memoCache.index] = Array(size), current = 0; current < size; current++)
          updateQueue[current] = REACT_MEMO_CACHE_SENTINEL;
      memoCache.index++;
      return updateQueue;
    }
    function basicStateReducer(state, action) {
      return "function" === typeof action ? action(state) : action;
    }
    function updateReducer(reducer) {
      var hook = updateWorkInProgressHook();
      return updateReducerImpl(hook, currentHook, reducer);
    }
    function updateReducerImpl(hook, current, reducer) {
      var queue = hook.queue;
      if (null === queue) throw Error(formatProdErrorMessage(311));
      queue.lastRenderedReducer = reducer;
      var baseQueue = hook.baseQueue, pendingQueue = queue.pending;
      if (null !== pendingQueue) {
        if (null !== baseQueue) {
          var baseFirst = baseQueue.next;
          baseQueue.next = pendingQueue.next;
          pendingQueue.next = baseFirst;
        }
        current.baseQueue = baseQueue = pendingQueue;
        queue.pending = null;
      }
      pendingQueue = hook.baseState;
      if (null === baseQueue) hook.memoizedState = pendingQueue;
      else {
        current = baseQueue.next;
        var newBaseQueueFirst = baseFirst = null, newBaseQueueLast = null, update = current, didReadFromEntangledAsyncAction$32 = false;
        do {
          var updateLane = update.lane & -536870913;
          if (updateLane !== update.lane ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes & updateLane) === updateLane) {
            var revertLane = update.revertLane;
            if (0 === revertLane)
              null !== newBaseQueueLast && (newBaseQueueLast = newBaseQueueLast.next = {
                lane: 0,
                revertLane: 0,
                action: update.action,
                hasEagerState: update.hasEagerState,
                eagerState: update.eagerState,
                next: null
              }), updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction$32 = true);
            else if ((renderLanes & revertLane) === revertLane) {
              update = update.next;
              revertLane === currentEntangledLane && (didReadFromEntangledAsyncAction$32 = true);
              continue;
            } else
              updateLane = {
                lane: 0,
                revertLane: update.revertLane,
                action: update.action,
                hasEagerState: update.hasEagerState,
                eagerState: update.eagerState,
                next: null
              }, null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = updateLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = updateLane, currentlyRenderingFiber.lanes |= revertLane, workInProgressRootSkippedLanes |= revertLane;
            updateLane = update.action;
            shouldDoubleInvokeUserFnsInHooksDEV && reducer(pendingQueue, updateLane);
            pendingQueue = update.hasEagerState ? update.eagerState : reducer(pendingQueue, updateLane);
          } else
            revertLane = {
              lane: updateLane,
              revertLane: update.revertLane,
              action: update.action,
              hasEagerState: update.hasEagerState,
              eagerState: update.eagerState,
              next: null
            }, null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = revertLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = revertLane, currentlyRenderingFiber.lanes |= updateLane, workInProgressRootSkippedLanes |= updateLane;
          update = update.next;
        } while (null !== update && update !== current);
        null === newBaseQueueLast ? baseFirst = pendingQueue : newBaseQueueLast.next = newBaseQueueFirst;
        if (!objectIs(pendingQueue, hook.memoizedState) && (didReceiveUpdate = true, didReadFromEntangledAsyncAction$32 && (reducer = currentEntangledActionThenable, null !== reducer)))
          throw reducer;
        hook.memoizedState = pendingQueue;
        hook.baseState = baseFirst;
        hook.baseQueue = newBaseQueueLast;
        queue.lastRenderedState = pendingQueue;
      }
      null === baseQueue && (queue.lanes = 0);
      return [hook.memoizedState, queue.dispatch];
    }
    function rerenderReducer(reducer) {
      var hook = updateWorkInProgressHook(), queue = hook.queue;
      if (null === queue) throw Error(formatProdErrorMessage(311));
      queue.lastRenderedReducer = reducer;
      var dispatch = queue.dispatch, lastRenderPhaseUpdate = queue.pending, newState = hook.memoizedState;
      if (null !== lastRenderPhaseUpdate) {
        queue.pending = null;
        var update = lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
        do
          newState = reducer(newState, update.action), update = update.next;
        while (update !== lastRenderPhaseUpdate);
        objectIs(newState, hook.memoizedState) || (didReceiveUpdate = true);
        hook.memoizedState = newState;
        null === hook.baseQueue && (hook.baseState = newState);
        queue.lastRenderedState = newState;
      }
      return [newState, dispatch];
    }
    function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
      var fiber = currentlyRenderingFiber, hook = updateWorkInProgressHook(), isHydrating$jscomp$0 = isHydrating;
      if (isHydrating$jscomp$0) {
        if (void 0 === getServerSnapshot) throw Error(formatProdErrorMessage(407));
        getServerSnapshot = getServerSnapshot();
      } else getServerSnapshot = getSnapshot();
      var snapshotChanged = !objectIs(
        (currentHook || hook).memoizedState,
        getServerSnapshot
      );
      snapshotChanged && (hook.memoizedState = getServerSnapshot, didReceiveUpdate = true);
      hook = hook.queue;
      var create = subscribeToStore.bind(null, fiber, hook, subscribe);
      updateEffectImpl(2048, 8, create, [subscribe]);
      if (hook.getSnapshot !== getSnapshot || snapshotChanged || null !== workInProgressHook && workInProgressHook.memoizedState.tag & 1) {
        fiber.flags |= 2048;
        pushSimpleEffect(
          9,
          createEffectInstance(),
          updateStoreInstance.bind(
            null,
            fiber,
            hook,
            getServerSnapshot,
            getSnapshot
          ),
          null
        );
        if (null === workInProgressRoot) throw Error(formatProdErrorMessage(349));
        isHydrating$jscomp$0 || 0 !== (renderLanes & 124) || pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot);
      }
      return getServerSnapshot;
    }
    function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
      fiber.flags |= 16384;
      fiber = { getSnapshot, value: renderedSnapshot };
      getSnapshot = currentlyRenderingFiber.updateQueue;
      null === getSnapshot ? (getSnapshot = createFunctionComponentUpdateQueue(), currentlyRenderingFiber.updateQueue = getSnapshot, getSnapshot.stores = [fiber]) : (renderedSnapshot = getSnapshot.stores, null === renderedSnapshot ? getSnapshot.stores = [fiber] : renderedSnapshot.push(fiber));
    }
    function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
      inst.value = nextSnapshot;
      inst.getSnapshot = getSnapshot;
      checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
    }
    function subscribeToStore(fiber, inst, subscribe) {
      return subscribe(function() {
        checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
      });
    }
    function checkIfSnapshotChanged(inst) {
      var latestGetSnapshot = inst.getSnapshot;
      inst = inst.value;
      try {
        var nextValue = latestGetSnapshot();
        return !objectIs(inst, nextValue);
      } catch (error) {
        return true;
      }
    }
    function forceStoreRerender(fiber) {
      var root2 = enqueueConcurrentRenderForLane(fiber, 2);
      null !== root2 && scheduleUpdateOnFiber(root2, fiber, 2);
    }
    function mountStateImpl(initialState) {
      var hook = mountWorkInProgressHook();
      if ("function" === typeof initialState) {
        var initialStateInitializer = initialState;
        initialState = initialStateInitializer();
        if (shouldDoubleInvokeUserFnsInHooksDEV) {
          setIsStrictModeForDevtools(true);
          try {
            initialStateInitializer();
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
      }
      hook.memoizedState = hook.baseState = initialState;
      hook.queue = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: basicStateReducer,
        lastRenderedState: initialState
      };
      return hook;
    }
    function updateOptimisticImpl(hook, current, passthrough, reducer) {
      hook.baseState = passthrough;
      return updateReducerImpl(
        hook,
        currentHook,
        "function" === typeof reducer ? reducer : basicStateReducer
      );
    }
    function dispatchActionState(fiber, actionQueue, setPendingState, setState, payload) {
      if (isRenderPhaseUpdate(fiber)) throw Error(formatProdErrorMessage(485));
      fiber = actionQueue.action;
      if (null !== fiber) {
        var actionNode = {
          payload,
          action: fiber,
          next: null,
          isTransition: true,
          status: "pending",
          value: null,
          reason: null,
          listeners: [],
          then: function(listener) {
            actionNode.listeners.push(listener);
          }
        };
        null !== ReactSharedInternals.T ? setPendingState(true) : actionNode.isTransition = false;
        setState(actionNode);
        setPendingState = actionQueue.pending;
        null === setPendingState ? (actionNode.next = actionQueue.pending = actionNode, runActionStateAction(actionQueue, actionNode)) : (actionNode.next = setPendingState.next, actionQueue.pending = setPendingState.next = actionNode);
      }
    }
    function runActionStateAction(actionQueue, node2) {
      var action = node2.action, payload = node2.payload, prevState = actionQueue.state;
      if (node2.isTransition) {
        var prevTransition = ReactSharedInternals.T, currentTransition = {};
        ReactSharedInternals.T = currentTransition;
        try {
          var returnValue = action(prevState, payload), onStartTransitionFinish = ReactSharedInternals.S;
          null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
          handleActionReturnValue(actionQueue, node2, returnValue);
        } catch (error) {
          onActionError(actionQueue, node2, error);
        } finally {
          ReactSharedInternals.T = prevTransition;
        }
      } else
        try {
          prevTransition = action(prevState, payload), handleActionReturnValue(actionQueue, node2, prevTransition);
        } catch (error$38) {
          onActionError(actionQueue, node2, error$38);
        }
    }
    function handleActionReturnValue(actionQueue, node2, returnValue) {
      null !== returnValue && "object" === typeof returnValue && "function" === typeof returnValue.then ? returnValue.then(
        function(nextState) {
          onActionSuccess(actionQueue, node2, nextState);
        },
        function(error) {
          return onActionError(actionQueue, node2, error);
        }
      ) : onActionSuccess(actionQueue, node2, returnValue);
    }
    function onActionSuccess(actionQueue, actionNode, nextState) {
      actionNode.status = "fulfilled";
      actionNode.value = nextState;
      notifyActionListeners(actionNode);
      actionQueue.state = nextState;
      actionNode = actionQueue.pending;
      null !== actionNode && (nextState = actionNode.next, nextState === actionNode ? actionQueue.pending = null : (nextState = nextState.next, actionNode.next = nextState, runActionStateAction(actionQueue, nextState)));
    }
    function onActionError(actionQueue, actionNode, error) {
      var last = actionQueue.pending;
      actionQueue.pending = null;
      if (null !== last) {
        last = last.next;
        do
          actionNode.status = "rejected", actionNode.reason = error, notifyActionListeners(actionNode), actionNode = actionNode.next;
        while (actionNode !== last);
      }
      actionQueue.action = null;
    }
    function notifyActionListeners(actionNode) {
      actionNode = actionNode.listeners;
      for (var i = 0; i < actionNode.length; i++) (0, actionNode[i])();
    }
    function actionStateReducer(oldState, newState) {
      return newState;
    }
    function mountActionState(action, initialStateProp) {
      if (isHydrating) {
        var ssrFormState = workInProgressRoot.formState;
        if (null !== ssrFormState) {
          a: {
            var JSCompiler_inline_result = currentlyRenderingFiber;
            if (isHydrating) {
              if (nextHydratableInstance) {
                b: {
                  var JSCompiler_inline_result$jscomp$0 = nextHydratableInstance;
                  for (var inRootOrSingleton = rootOrSingletonContext; 8 !== JSCompiler_inline_result$jscomp$0.nodeType; ) {
                    if (!inRootOrSingleton) {
                      JSCompiler_inline_result$jscomp$0 = null;
                      break b;
                    }
                    JSCompiler_inline_result$jscomp$0 = getNextHydratable(
                      JSCompiler_inline_result$jscomp$0.nextSibling
                    );
                    if (null === JSCompiler_inline_result$jscomp$0) {
                      JSCompiler_inline_result$jscomp$0 = null;
                      break b;
                    }
                  }
                  inRootOrSingleton = JSCompiler_inline_result$jscomp$0.data;
                  JSCompiler_inline_result$jscomp$0 = "F!" === inRootOrSingleton || "F" === inRootOrSingleton ? JSCompiler_inline_result$jscomp$0 : null;
                }
                if (JSCompiler_inline_result$jscomp$0) {
                  nextHydratableInstance = getNextHydratable(
                    JSCompiler_inline_result$jscomp$0.nextSibling
                  );
                  JSCompiler_inline_result = "F!" === JSCompiler_inline_result$jscomp$0.data;
                  break a;
                }
              }
              throwOnHydrationMismatch(JSCompiler_inline_result);
            }
            JSCompiler_inline_result = false;
          }
          JSCompiler_inline_result && (initialStateProp = ssrFormState[0]);
        }
      }
      ssrFormState = mountWorkInProgressHook();
      ssrFormState.memoizedState = ssrFormState.baseState = initialStateProp;
      JSCompiler_inline_result = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: actionStateReducer,
        lastRenderedState: initialStateProp
      };
      ssrFormState.queue = JSCompiler_inline_result;
      ssrFormState = dispatchSetState.bind(
        null,
        currentlyRenderingFiber,
        JSCompiler_inline_result
      );
      JSCompiler_inline_result.dispatch = ssrFormState;
      JSCompiler_inline_result = mountStateImpl(false);
      inRootOrSingleton = dispatchOptimisticSetState.bind(
        null,
        currentlyRenderingFiber,
        false,
        JSCompiler_inline_result.queue
      );
      JSCompiler_inline_result = mountWorkInProgressHook();
      JSCompiler_inline_result$jscomp$0 = {
        state: initialStateProp,
        dispatch: null,
        action,
        pending: null
      };
      JSCompiler_inline_result.queue = JSCompiler_inline_result$jscomp$0;
      ssrFormState = dispatchActionState.bind(
        null,
        currentlyRenderingFiber,
        JSCompiler_inline_result$jscomp$0,
        inRootOrSingleton,
        ssrFormState
      );
      JSCompiler_inline_result$jscomp$0.dispatch = ssrFormState;
      JSCompiler_inline_result.memoizedState = action;
      return [initialStateProp, ssrFormState, false];
    }
    function updateActionState(action) {
      var stateHook = updateWorkInProgressHook();
      return updateActionStateImpl(stateHook, currentHook, action);
    }
    function updateActionStateImpl(stateHook, currentStateHook, action) {
      currentStateHook = updateReducerImpl(
        stateHook,
        currentStateHook,
        actionStateReducer
      )[0];
      stateHook = updateReducer(basicStateReducer)[0];
      if ("object" === typeof currentStateHook && null !== currentStateHook && "function" === typeof currentStateHook.then)
        try {
          var state = useThenable(currentStateHook);
        } catch (x) {
          if (x === SuspenseException) throw SuspenseActionException;
          throw x;
        }
      else state = currentStateHook;
      currentStateHook = updateWorkInProgressHook();
      var actionQueue = currentStateHook.queue, dispatch = actionQueue.dispatch;
      action !== currentStateHook.memoizedState && (currentlyRenderingFiber.flags |= 2048, pushSimpleEffect(
        9,
        createEffectInstance(),
        actionStateActionEffect.bind(null, actionQueue, action),
        null
      ));
      return [state, dispatch, stateHook];
    }
    function actionStateActionEffect(actionQueue, action) {
      actionQueue.action = action;
    }
    function rerenderActionState(action) {
      var stateHook = updateWorkInProgressHook(), currentStateHook = currentHook;
      if (null !== currentStateHook)
        return updateActionStateImpl(stateHook, currentStateHook, action);
      updateWorkInProgressHook();
      stateHook = stateHook.memoizedState;
      currentStateHook = updateWorkInProgressHook();
      var dispatch = currentStateHook.queue.dispatch;
      currentStateHook.memoizedState = action;
      return [stateHook, dispatch, false];
    }
    function pushSimpleEffect(tag, inst, create, createDeps) {
      tag = { tag, create, deps: createDeps, inst, next: null };
      inst = currentlyRenderingFiber.updateQueue;
      null === inst && (inst = createFunctionComponentUpdateQueue(), currentlyRenderingFiber.updateQueue = inst);
      create = inst.lastEffect;
      null === create ? inst.lastEffect = tag.next = tag : (createDeps = create.next, create.next = tag, tag.next = createDeps, inst.lastEffect = tag);
      return tag;
    }
    function createEffectInstance() {
      return { destroy: void 0, resource: void 0 };
    }
    function updateRef() {
      return updateWorkInProgressHook().memoizedState;
    }
    function mountEffectImpl(fiberFlags, hookFlags, create, createDeps) {
      var hook = mountWorkInProgressHook();
      createDeps = void 0 === createDeps ? null : createDeps;
      currentlyRenderingFiber.flags |= fiberFlags;
      hook.memoizedState = pushSimpleEffect(
        1 | hookFlags,
        createEffectInstance(),
        create,
        createDeps
      );
    }
    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
      var hook = updateWorkInProgressHook();
      deps = void 0 === deps ? null : deps;
      var inst = hook.memoizedState.inst;
      null !== currentHook && null !== deps && areHookInputsEqual(deps, currentHook.memoizedState.deps) ? hook.memoizedState = pushSimpleEffect(hookFlags, inst, create, deps) : (currentlyRenderingFiber.flags |= fiberFlags, hook.memoizedState = pushSimpleEffect(
        1 | hookFlags,
        inst,
        create,
        deps
      ));
    }
    function mountEffect(create, createDeps) {
      mountEffectImpl(8390656, 8, create, createDeps);
    }
    function updateEffect(create, createDeps) {
      updateEffectImpl(2048, 8, create, createDeps);
    }
    function updateInsertionEffect(create, deps) {
      return updateEffectImpl(4, 2, create, deps);
    }
    function updateLayoutEffect(create, deps) {
      return updateEffectImpl(4, 4, create, deps);
    }
    function imperativeHandleEffect(create, ref) {
      if ("function" === typeof ref) {
        create = create();
        var refCleanup = ref(create);
        return function() {
          "function" === typeof refCleanup ? refCleanup() : ref(null);
        };
      }
      if (null !== ref && void 0 !== ref)
        return create = create(), ref.current = create, function() {
          ref.current = null;
        };
    }
    function updateImperativeHandle(ref, create, deps) {
      deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
      updateEffectImpl(4, 4, imperativeHandleEffect.bind(null, create, ref), deps);
    }
    function mountDebugValue() {
    }
    function updateCallback(callback, deps) {
      var hook = updateWorkInProgressHook();
      deps = void 0 === deps ? null : deps;
      var prevState = hook.memoizedState;
      if (null !== deps && areHookInputsEqual(deps, prevState[1]))
        return prevState[0];
      hook.memoizedState = [callback, deps];
      return callback;
    }
    function updateMemo(nextCreate, deps) {
      var hook = updateWorkInProgressHook();
      deps = void 0 === deps ? null : deps;
      var prevState = hook.memoizedState;
      if (null !== deps && areHookInputsEqual(deps, prevState[1]))
        return prevState[0];
      prevState = nextCreate();
      if (shouldDoubleInvokeUserFnsInHooksDEV) {
        setIsStrictModeForDevtools(true);
        try {
          nextCreate();
        } finally {
          setIsStrictModeForDevtools(false);
        }
      }
      hook.memoizedState = [prevState, deps];
      return prevState;
    }
    function mountDeferredValueImpl(hook, value, initialValue) {
      if (void 0 === initialValue || 0 !== (renderLanes & 1073741824))
        return hook.memoizedState = value;
      hook.memoizedState = initialValue;
      hook = requestDeferredLane();
      currentlyRenderingFiber.lanes |= hook;
      workInProgressRootSkippedLanes |= hook;
      return initialValue;
    }
    function updateDeferredValueImpl(hook, prevValue, value, initialValue) {
      if (objectIs(value, prevValue)) return value;
      if (null !== currentTreeHiddenStackCursor.current)
        return hook = mountDeferredValueImpl(hook, value, initialValue), objectIs(hook, prevValue) || (didReceiveUpdate = true), hook;
      if (0 === (renderLanes & 42))
        return didReceiveUpdate = true, hook.memoizedState = value;
      hook = requestDeferredLane();
      currentlyRenderingFiber.lanes |= hook;
      workInProgressRootSkippedLanes |= hook;
      return prevValue;
    }
    function startTransition(fiber, queue, pendingState, finishedState, callback) {
      var previousPriority = ReactDOMSharedInternals.p;
      ReactDOMSharedInternals.p = 0 !== previousPriority && 8 > previousPriority ? previousPriority : 8;
      var prevTransition = ReactSharedInternals.T, currentTransition = {};
      ReactSharedInternals.T = currentTransition;
      dispatchOptimisticSetState(fiber, false, queue, pendingState);
      try {
        var returnValue = callback(), onStartTransitionFinish = ReactSharedInternals.S;
        null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
        if (null !== returnValue && "object" === typeof returnValue && "function" === typeof returnValue.then) {
          var thenableForFinishedState = chainThenableValue(
            returnValue,
            finishedState
          );
          dispatchSetStateInternal(
            fiber,
            queue,
            thenableForFinishedState,
            requestUpdateLane(fiber)
          );
        } else
          dispatchSetStateInternal(
            fiber,
            queue,
            finishedState,
            requestUpdateLane(fiber)
          );
      } catch (error) {
        dispatchSetStateInternal(
          fiber,
          queue,
          { then: function() {
          }, status: "rejected", reason: error },
          requestUpdateLane()
        );
      } finally {
        ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition;
      }
    }
    function noop$2() {
    }
    function startHostTransition(formFiber, pendingState, action, formData) {
      if (5 !== formFiber.tag) throw Error(formatProdErrorMessage(476));
      var queue = ensureFormComponentIsStateful(formFiber).queue;
      startTransition(
        formFiber,
        queue,
        pendingState,
        sharedNotPendingObject,
        null === action ? noop$2 : function() {
          requestFormReset$1(formFiber);
          return action(formData);
        }
      );
    }
    function ensureFormComponentIsStateful(formFiber) {
      var existingStateHook = formFiber.memoizedState;
      if (null !== existingStateHook) return existingStateHook;
      existingStateHook = {
        memoizedState: sharedNotPendingObject,
        baseState: sharedNotPendingObject,
        baseQueue: null,
        queue: {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: basicStateReducer,
          lastRenderedState: sharedNotPendingObject
        },
        next: null
      };
      var initialResetState = {};
      existingStateHook.next = {
        memoizedState: initialResetState,
        baseState: initialResetState,
        baseQueue: null,
        queue: {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: basicStateReducer,
          lastRenderedState: initialResetState
        },
        next: null
      };
      formFiber.memoizedState = existingStateHook;
      formFiber = formFiber.alternate;
      null !== formFiber && (formFiber.memoizedState = existingStateHook);
      return existingStateHook;
    }
    function requestFormReset$1(formFiber) {
      var resetStateQueue = ensureFormComponentIsStateful(formFiber).next.queue;
      dispatchSetStateInternal(formFiber, resetStateQueue, {}, requestUpdateLane());
    }
    function useHostTransitionStatus() {
      return readContext(HostTransitionContext);
    }
    function updateId() {
      return updateWorkInProgressHook().memoizedState;
    }
    function updateRefresh() {
      return updateWorkInProgressHook().memoizedState;
    }
    function refreshCache(fiber) {
      for (var provider = fiber.return; null !== provider; ) {
        switch (provider.tag) {
          case 24:
          case 3:
            var lane = requestUpdateLane();
            fiber = createUpdate(lane);
            var root$41 = enqueueUpdate(provider, fiber, lane);
            null !== root$41 && (scheduleUpdateOnFiber(root$41, provider, lane), entangleTransitions(root$41, provider, lane));
            provider = { cache: createCache3() };
            fiber.payload = provider;
            return;
        }
        provider = provider.return;
      }
    }
    function dispatchReducerAction(fiber, queue, action) {
      var lane = requestUpdateLane();
      action = {
        lane,
        revertLane: 0,
        action,
        hasEagerState: false,
        eagerState: null,
        next: null
      };
      isRenderPhaseUpdate(fiber) ? enqueueRenderPhaseUpdate(queue, action) : (action = enqueueConcurrentHookUpdate(fiber, queue, action, lane), null !== action && (scheduleUpdateOnFiber(action, fiber, lane), entangleTransitionUpdate(action, queue, lane)));
    }
    function dispatchSetState(fiber, queue, action) {
      var lane = requestUpdateLane();
      dispatchSetStateInternal(fiber, queue, action, lane);
    }
    function dispatchSetStateInternal(fiber, queue, action, lane) {
      var update = {
        lane,
        revertLane: 0,
        action,
        hasEagerState: false,
        eagerState: null,
        next: null
      };
      if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
      else {
        var alternate = fiber.alternate;
        if (0 === fiber.lanes && (null === alternate || 0 === alternate.lanes) && (alternate = queue.lastRenderedReducer, null !== alternate))
          try {
            var currentState = queue.lastRenderedState, eagerState = alternate(currentState, action);
            update.hasEagerState = true;
            update.eagerState = eagerState;
            if (objectIs(eagerState, currentState))
              return enqueueUpdate$1(fiber, queue, update, 0), null === workInProgressRoot && finishQueueingConcurrentUpdates(), false;
          } catch (error) {
          } finally {
          }
        action = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
        if (null !== action)
          return scheduleUpdateOnFiber(action, fiber, lane), entangleTransitionUpdate(action, queue, lane), true;
      }
      return false;
    }
    function dispatchOptimisticSetState(fiber, throwIfDuringRender, queue, action) {
      action = {
        lane: 2,
        revertLane: requestTransitionLane(),
        action,
        hasEagerState: false,
        eagerState: null,
        next: null
      };
      if (isRenderPhaseUpdate(fiber)) {
        if (throwIfDuringRender) throw Error(formatProdErrorMessage(479));
      } else
        throwIfDuringRender = enqueueConcurrentHookUpdate(
          fiber,
          queue,
          action,
          2
        ), null !== throwIfDuringRender && scheduleUpdateOnFiber(throwIfDuringRender, fiber, 2);
    }
    function isRenderPhaseUpdate(fiber) {
      var alternate = fiber.alternate;
      return fiber === currentlyRenderingFiber || null !== alternate && alternate === currentlyRenderingFiber;
    }
    function enqueueRenderPhaseUpdate(queue, update) {
      didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
      var pending = queue.pending;
      null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
      queue.pending = update;
    }
    function entangleTransitionUpdate(root2, queue, lane) {
      if (0 !== (lane & 4194048)) {
        var queueLanes = queue.lanes;
        queueLanes &= root2.pendingLanes;
        lane |= queueLanes;
        queue.lanes = lane;
        markRootEntangled(root2, lane);
      }
    }
    var ContextOnlyDispatcher = {
      readContext,
      use,
      useCallback: throwInvalidHookError,
      useContext: throwInvalidHookError,
      useEffect: throwInvalidHookError,
      useImperativeHandle: throwInvalidHookError,
      useLayoutEffect: throwInvalidHookError,
      useInsertionEffect: throwInvalidHookError,
      useMemo: throwInvalidHookError,
      useReducer: throwInvalidHookError,
      useRef: throwInvalidHookError,
      useState: throwInvalidHookError,
      useDebugValue: throwInvalidHookError,
      useDeferredValue: throwInvalidHookError,
      useTransition: throwInvalidHookError,
      useSyncExternalStore: throwInvalidHookError,
      useId: throwInvalidHookError,
      useHostTransitionStatus: throwInvalidHookError,
      useFormState: throwInvalidHookError,
      useActionState: throwInvalidHookError,
      useOptimistic: throwInvalidHookError,
      useMemoCache: throwInvalidHookError,
      useCacheRefresh: throwInvalidHookError
    };
    var HooksDispatcherOnMount = {
      readContext,
      use,
      useCallback: function(callback, deps) {
        mountWorkInProgressHook().memoizedState = [
          callback,
          void 0 === deps ? null : deps
        ];
        return callback;
      },
      useContext: readContext,
      useEffect: mountEffect,
      useImperativeHandle: function(ref, create, deps) {
        deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
        mountEffectImpl(
          4194308,
          4,
          imperativeHandleEffect.bind(null, create, ref),
          deps
        );
      },
      useLayoutEffect: function(create, deps) {
        return mountEffectImpl(4194308, 4, create, deps);
      },
      useInsertionEffect: function(create, deps) {
        mountEffectImpl(4, 2, create, deps);
      },
      useMemo: function(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        deps = void 0 === deps ? null : deps;
        var nextValue = nextCreate();
        if (shouldDoubleInvokeUserFnsInHooksDEV) {
          setIsStrictModeForDevtools(true);
          try {
            nextCreate();
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
        hook.memoizedState = [nextValue, deps];
        return nextValue;
      },
      useReducer: function(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        if (void 0 !== init) {
          var initialState = init(initialArg);
          if (shouldDoubleInvokeUserFnsInHooksDEV) {
            setIsStrictModeForDevtools(true);
            try {
              init(initialArg);
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
        } else initialState = initialArg;
        hook.memoizedState = hook.baseState = initialState;
        reducer = {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: reducer,
          lastRenderedState: initialState
        };
        hook.queue = reducer;
        reducer = reducer.dispatch = dispatchReducerAction.bind(
          null,
          currentlyRenderingFiber,
          reducer
        );
        return [hook.memoizedState, reducer];
      },
      useRef: function(initialValue) {
        var hook = mountWorkInProgressHook();
        initialValue = { current: initialValue };
        return hook.memoizedState = initialValue;
      },
      useState: function(initialState) {
        initialState = mountStateImpl(initialState);
        var queue = initialState.queue, dispatch = dispatchSetState.bind(null, currentlyRenderingFiber, queue);
        queue.dispatch = dispatch;
        return [initialState.memoizedState, dispatch];
      },
      useDebugValue: mountDebugValue,
      useDeferredValue: function(value, initialValue) {
        var hook = mountWorkInProgressHook();
        return mountDeferredValueImpl(hook, value, initialValue);
      },
      useTransition: function() {
        var stateHook = mountStateImpl(false);
        stateHook = startTransition.bind(
          null,
          currentlyRenderingFiber,
          stateHook.queue,
          true,
          false
        );
        mountWorkInProgressHook().memoizedState = stateHook;
        return [false, stateHook];
      },
      useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber, hook = mountWorkInProgressHook();
        if (isHydrating) {
          if (void 0 === getServerSnapshot)
            throw Error(formatProdErrorMessage(407));
          getServerSnapshot = getServerSnapshot();
        } else {
          getServerSnapshot = getSnapshot();
          if (null === workInProgressRoot)
            throw Error(formatProdErrorMessage(349));
          0 !== (workInProgressRootRenderLanes & 124) || pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot);
        }
        hook.memoizedState = getServerSnapshot;
        var inst = { value: getServerSnapshot, getSnapshot };
        hook.queue = inst;
        mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [
          subscribe
        ]);
        fiber.flags |= 2048;
        pushSimpleEffect(
          9,
          createEffectInstance(),
          updateStoreInstance.bind(
            null,
            fiber,
            inst,
            getServerSnapshot,
            getSnapshot
          ),
          null
        );
        return getServerSnapshot;
      },
      useId: function() {
        var hook = mountWorkInProgressHook(), identifierPrefix = workInProgressRoot.identifierPrefix;
        if (isHydrating) {
          var JSCompiler_inline_result = treeContextOverflow;
          var idWithLeadingBit = treeContextId;
          JSCompiler_inline_result = (idWithLeadingBit & ~(1 << 32 - clz32(idWithLeadingBit) - 1)).toString(32) + JSCompiler_inline_result;
          identifierPrefix = "\xAB" + identifierPrefix + "R" + JSCompiler_inline_result;
          JSCompiler_inline_result = localIdCounter++;
          0 < JSCompiler_inline_result && (identifierPrefix += "H" + JSCompiler_inline_result.toString(32));
          identifierPrefix += "\xBB";
        } else
          JSCompiler_inline_result = globalClientIdCounter++, identifierPrefix = "\xAB" + identifierPrefix + "r" + JSCompiler_inline_result.toString(32) + "\xBB";
        return hook.memoizedState = identifierPrefix;
      },
      useHostTransitionStatus,
      useFormState: mountActionState,
      useActionState: mountActionState,
      useOptimistic: function(passthrough) {
        var hook = mountWorkInProgressHook();
        hook.memoizedState = hook.baseState = passthrough;
        var queue = {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: null,
          lastRenderedState: null
        };
        hook.queue = queue;
        hook = dispatchOptimisticSetState.bind(
          null,
          currentlyRenderingFiber,
          true,
          queue
        );
        queue.dispatch = hook;
        return [passthrough, hook];
      },
      useMemoCache,
      useCacheRefresh: function() {
        return mountWorkInProgressHook().memoizedState = refreshCache.bind(
          null,
          currentlyRenderingFiber
        );
      }
    };
    var HooksDispatcherOnUpdate = {
      readContext,
      use,
      useCallback: updateCallback,
      useContext: readContext,
      useEffect: updateEffect,
      useImperativeHandle: updateImperativeHandle,
      useInsertionEffect: updateInsertionEffect,
      useLayoutEffect: updateLayoutEffect,
      useMemo: updateMemo,
      useReducer: updateReducer,
      useRef: updateRef,
      useState: function() {
        return updateReducer(basicStateReducer);
      },
      useDebugValue: mountDebugValue,
      useDeferredValue: function(value, initialValue) {
        var hook = updateWorkInProgressHook();
        return updateDeferredValueImpl(
          hook,
          currentHook.memoizedState,
          value,
          initialValue
        );
      },
      useTransition: function() {
        var booleanOrThenable = updateReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
        return [
          "boolean" === typeof booleanOrThenable ? booleanOrThenable : useThenable(booleanOrThenable),
          start
        ];
      },
      useSyncExternalStore: updateSyncExternalStore,
      useId: updateId,
      useHostTransitionStatus,
      useFormState: updateActionState,
      useActionState: updateActionState,
      useOptimistic: function(passthrough, reducer) {
        var hook = updateWorkInProgressHook();
        return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
      },
      useMemoCache,
      useCacheRefresh: updateRefresh
    };
    var HooksDispatcherOnRerender = {
      readContext,
      use,
      useCallback: updateCallback,
      useContext: readContext,
      useEffect: updateEffect,
      useImperativeHandle: updateImperativeHandle,
      useInsertionEffect: updateInsertionEffect,
      useLayoutEffect: updateLayoutEffect,
      useMemo: updateMemo,
      useReducer: rerenderReducer,
      useRef: updateRef,
      useState: function() {
        return rerenderReducer(basicStateReducer);
      },
      useDebugValue: mountDebugValue,
      useDeferredValue: function(value, initialValue) {
        var hook = updateWorkInProgressHook();
        return null === currentHook ? mountDeferredValueImpl(hook, value, initialValue) : updateDeferredValueImpl(
          hook,
          currentHook.memoizedState,
          value,
          initialValue
        );
      },
      useTransition: function() {
        var booleanOrThenable = rerenderReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
        return [
          "boolean" === typeof booleanOrThenable ? booleanOrThenable : useThenable(booleanOrThenable),
          start
        ];
      },
      useSyncExternalStore: updateSyncExternalStore,
      useId: updateId,
      useHostTransitionStatus,
      useFormState: rerenderActionState,
      useActionState: rerenderActionState,
      useOptimistic: function(passthrough, reducer) {
        var hook = updateWorkInProgressHook();
        if (null !== currentHook)
          return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
        hook.baseState = passthrough;
        return [passthrough, hook.queue.dispatch];
      },
      useMemoCache,
      useCacheRefresh: updateRefresh
    };
    var thenableState = null;
    var thenableIndexCounter = 0;
    function unwrapThenable(thenable) {
      var index2 = thenableIndexCounter;
      thenableIndexCounter += 1;
      null === thenableState && (thenableState = []);
      return trackUsedThenable(thenableState, thenable, index2);
    }
    function coerceRef(workInProgress2, element) {
      element = element.props.ref;
      workInProgress2.ref = void 0 !== element ? element : null;
    }
    function throwOnInvalidObjectType(returnFiber, newChild) {
      if (newChild.$$typeof === REACT_LEGACY_ELEMENT_TYPE)
        throw Error(formatProdErrorMessage(525));
      returnFiber = Object.prototype.toString.call(newChild);
      throw Error(
        formatProdErrorMessage(
          31,
          "[object Object]" === returnFiber ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : returnFiber
        )
      );
    }
    function resolveLazy(lazyType) {
      var init = lazyType._init;
      return init(lazyType._payload);
    }
    function createChildReconciler(shouldTrackSideEffects) {
      function deleteChild(returnFiber, childToDelete) {
        if (shouldTrackSideEffects) {
          var deletions = returnFiber.deletions;
          null === deletions ? (returnFiber.deletions = [childToDelete], returnFiber.flags |= 16) : deletions.push(childToDelete);
        }
      }
      function deleteRemainingChildren(returnFiber, currentFirstChild) {
        if (!shouldTrackSideEffects) return null;
        for (; null !== currentFirstChild; )
          deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
        return null;
      }
      function mapRemainingChildren(currentFirstChild) {
        for (var existingChildren = /* @__PURE__ */ new Map(); null !== currentFirstChild; )
          null !== currentFirstChild.key ? existingChildren.set(currentFirstChild.key, currentFirstChild) : existingChildren.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
        return existingChildren;
      }
      function useFiber(fiber, pendingProps) {
        fiber = createWorkInProgress(fiber, pendingProps);
        fiber.index = 0;
        fiber.sibling = null;
        return fiber;
      }
      function placeChild(newFiber, lastPlacedIndex, newIndex) {
        newFiber.index = newIndex;
        if (!shouldTrackSideEffects)
          return newFiber.flags |= 1048576, lastPlacedIndex;
        newIndex = newFiber.alternate;
        if (null !== newIndex)
          return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.flags |= 67108866, lastPlacedIndex) : newIndex;
        newFiber.flags |= 67108866;
        return lastPlacedIndex;
      }
      function placeSingleChild(newFiber) {
        shouldTrackSideEffects && null === newFiber.alternate && (newFiber.flags |= 67108866);
        return newFiber;
      }
      function updateTextNode(returnFiber, current, textContent, lanes) {
        if (null === current || 6 !== current.tag)
          return current = createFiberFromText(textContent, returnFiber.mode, lanes), current.return = returnFiber, current;
        current = useFiber(current, textContent);
        current.return = returnFiber;
        return current;
      }
      function updateElement(returnFiber, current, element, lanes) {
        var elementType = element.type;
        if (elementType === REACT_FRAGMENT_TYPE)
          return updateFragment(
            returnFiber,
            current,
            element.props.children,
            lanes,
            element.key
          );
        if (null !== current && (current.elementType === elementType || "object" === typeof elementType && null !== elementType && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type))
          return current = useFiber(current, element.props), coerceRef(current, element), current.return = returnFiber, current;
        current = createFiberFromTypeAndProps(
          element.type,
          element.key,
          element.props,
          null,
          returnFiber.mode,
          lanes
        );
        coerceRef(current, element);
        current.return = returnFiber;
        return current;
      }
      function updatePortal(returnFiber, current, portal, lanes) {
        if (null === current || 4 !== current.tag || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation)
          return current = createFiberFromPortal(portal, returnFiber.mode, lanes), current.return = returnFiber, current;
        current = useFiber(current, portal.children || []);
        current.return = returnFiber;
        return current;
      }
      function updateFragment(returnFiber, current, fragment, lanes, key) {
        if (null === current || 7 !== current.tag)
          return current = createFiberFromFragment(
            fragment,
            returnFiber.mode,
            lanes,
            key
          ), current.return = returnFiber, current;
        current = useFiber(current, fragment);
        current.return = returnFiber;
        return current;
      }
      function createChild(returnFiber, newChild, lanes) {
        if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild)
          return newChild = createFiberFromText(
            "" + newChild,
            returnFiber.mode,
            lanes
          ), newChild.return = returnFiber, newChild;
        if ("object" === typeof newChild && null !== newChild) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              return lanes = createFiberFromTypeAndProps(
                newChild.type,
                newChild.key,
                newChild.props,
                null,
                returnFiber.mode,
                lanes
              ), coerceRef(lanes, newChild), lanes.return = returnFiber, lanes;
            case REACT_PORTAL_TYPE:
              return newChild = createFiberFromPortal(
                newChild,
                returnFiber.mode,
                lanes
              ), newChild.return = returnFiber, newChild;
            case REACT_LAZY_TYPE:
              var init = newChild._init;
              newChild = init(newChild._payload);
              return createChild(returnFiber, newChild, lanes);
          }
          if (isArrayImpl(newChild) || getIteratorFn(newChild))
            return newChild = createFiberFromFragment(
              newChild,
              returnFiber.mode,
              lanes,
              null
            ), newChild.return = returnFiber, newChild;
          if ("function" === typeof newChild.then)
            return createChild(returnFiber, unwrapThenable(newChild), lanes);
          if (newChild.$$typeof === REACT_CONTEXT_TYPE)
            return createChild(
              returnFiber,
              readContextDuringReconciliation(returnFiber, newChild),
              lanes
            );
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        return null;
      }
      function updateSlot(returnFiber, oldFiber, newChild, lanes) {
        var key = null !== oldFiber ? oldFiber.key : null;
        if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild)
          return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
        if ("object" === typeof newChild && null !== newChild) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              return newChild.key === key ? updateElement(returnFiber, oldFiber, newChild, lanes) : null;
            case REACT_PORTAL_TYPE:
              return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, lanes) : null;
            case REACT_LAZY_TYPE:
              return key = newChild._init, newChild = key(newChild._payload), updateSlot(returnFiber, oldFiber, newChild, lanes);
          }
          if (isArrayImpl(newChild) || getIteratorFn(newChild))
            return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, lanes, null);
          if ("function" === typeof newChild.then)
            return updateSlot(
              returnFiber,
              oldFiber,
              unwrapThenable(newChild),
              lanes
            );
          if (newChild.$$typeof === REACT_CONTEXT_TYPE)
            return updateSlot(
              returnFiber,
              oldFiber,
              readContextDuringReconciliation(returnFiber, newChild),
              lanes
            );
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        return null;
      }
      function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
        if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild)
          return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, lanes);
        if ("object" === typeof newChild && null !== newChild) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              return existingChildren = existingChildren.get(
                null === newChild.key ? newIdx : newChild.key
              ) || null, updateElement(returnFiber, existingChildren, newChild, lanes);
            case REACT_PORTAL_TYPE:
              return existingChildren = existingChildren.get(
                null === newChild.key ? newIdx : newChild.key
              ) || null, updatePortal(returnFiber, existingChildren, newChild, lanes);
            case REACT_LAZY_TYPE:
              var init = newChild._init;
              newChild = init(newChild._payload);
              return updateFromMap(
                existingChildren,
                returnFiber,
                newIdx,
                newChild,
                lanes
              );
          }
          if (isArrayImpl(newChild) || getIteratorFn(newChild))
            return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, lanes, null);
          if ("function" === typeof newChild.then)
            return updateFromMap(
              existingChildren,
              returnFiber,
              newIdx,
              unwrapThenable(newChild),
              lanes
            );
          if (newChild.$$typeof === REACT_CONTEXT_TYPE)
            return updateFromMap(
              existingChildren,
              returnFiber,
              newIdx,
              readContextDuringReconciliation(returnFiber, newChild),
              lanes
            );
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        return null;
      }
      function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
        for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
          oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
          var newFiber = updateSlot(
            returnFiber,
            oldFiber,
            newChildren[newIdx],
            lanes
          );
          if (null === newFiber) {
            null === oldFiber && (oldFiber = nextOldFiber);
            break;
          }
          shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
          currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
          null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }
        if (newIdx === newChildren.length)
          return deleteRemainingChildren(returnFiber, oldFiber), isHydrating && pushTreeFork(returnFiber, newIdx), resultingFirstChild;
        if (null === oldFiber) {
          for (; newIdx < newChildren.length; newIdx++)
            oldFiber = createChild(returnFiber, newChildren[newIdx], lanes), null !== oldFiber && (currentFirstChild = placeChild(
              oldFiber,
              currentFirstChild,
              newIdx
            ), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
          isHydrating && pushTreeFork(returnFiber, newIdx);
          return resultingFirstChild;
        }
        for (oldFiber = mapRemainingChildren(oldFiber); newIdx < newChildren.length; newIdx++)
          nextOldFiber = updateFromMap(
            oldFiber,
            returnFiber,
            newIdx,
            newChildren[newIdx],
            lanes
          ), null !== nextOldFiber && (shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(
            null === nextOldFiber.key ? newIdx : nextOldFiber.key
          ), currentFirstChild = placeChild(
            nextOldFiber,
            currentFirstChild,
            newIdx
          ), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
        shouldTrackSideEffects && oldFiber.forEach(function(child) {
          return deleteChild(returnFiber, child);
        });
        isHydrating && pushTreeFork(returnFiber, newIdx);
        return resultingFirstChild;
      }
      function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildren, lanes) {
        if (null == newChildren) throw Error(formatProdErrorMessage(151));
        for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, step = newChildren.next(); null !== oldFiber && !step.done; newIdx++, step = newChildren.next()) {
          oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
          var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
          if (null === newFiber) {
            null === oldFiber && (oldFiber = nextOldFiber);
            break;
          }
          shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
          currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
          null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }
        if (step.done)
          return deleteRemainingChildren(returnFiber, oldFiber), isHydrating && pushTreeFork(returnFiber, newIdx), resultingFirstChild;
        if (null === oldFiber) {
          for (; !step.done; newIdx++, step = newChildren.next())
            step = createChild(returnFiber, step.value, lanes), null !== step && (currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = step : previousNewFiber.sibling = step, previousNewFiber = step);
          isHydrating && pushTreeFork(returnFiber, newIdx);
          return resultingFirstChild;
        }
        for (oldFiber = mapRemainingChildren(oldFiber); !step.done; newIdx++, step = newChildren.next())
          step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, lanes), null !== step && (shouldTrackSideEffects && null !== step.alternate && oldFiber.delete(null === step.key ? newIdx : step.key), currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = step : previousNewFiber.sibling = step, previousNewFiber = step);
        shouldTrackSideEffects && oldFiber.forEach(function(child) {
          return deleteChild(returnFiber, child);
        });
        isHydrating && pushTreeFork(returnFiber, newIdx);
        return resultingFirstChild;
      }
      function reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes) {
        "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key && (newChild = newChild.props.children);
        if ("object" === typeof newChild && null !== newChild) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              a: {
                for (var key = newChild.key; null !== currentFirstChild; ) {
                  if (currentFirstChild.key === key) {
                    key = newChild.type;
                    if (key === REACT_FRAGMENT_TYPE) {
                      if (7 === currentFirstChild.tag) {
                        deleteRemainingChildren(
                          returnFiber,
                          currentFirstChild.sibling
                        );
                        lanes = useFiber(
                          currentFirstChild,
                          newChild.props.children
                        );
                        lanes.return = returnFiber;
                        returnFiber = lanes;
                        break a;
                      }
                    } else if (currentFirstChild.elementType === key || "object" === typeof key && null !== key && key.$$typeof === REACT_LAZY_TYPE && resolveLazy(key) === currentFirstChild.type) {
                      deleteRemainingChildren(
                        returnFiber,
                        currentFirstChild.sibling
                      );
                      lanes = useFiber(currentFirstChild, newChild.props);
                      coerceRef(lanes, newChild);
                      lanes.return = returnFiber;
                      returnFiber = lanes;
                      break a;
                    }
                    deleteRemainingChildren(returnFiber, currentFirstChild);
                    break;
                  } else deleteChild(returnFiber, currentFirstChild);
                  currentFirstChild = currentFirstChild.sibling;
                }
                newChild.type === REACT_FRAGMENT_TYPE ? (lanes = createFiberFromFragment(
                  newChild.props.children,
                  returnFiber.mode,
                  lanes,
                  newChild.key
                ), lanes.return = returnFiber, returnFiber = lanes) : (lanes = createFiberFromTypeAndProps(
                  newChild.type,
                  newChild.key,
                  newChild.props,
                  null,
                  returnFiber.mode,
                  lanes
                ), coerceRef(lanes, newChild), lanes.return = returnFiber, returnFiber = lanes);
              }
              return placeSingleChild(returnFiber);
            case REACT_PORTAL_TYPE:
              a: {
                for (key = newChild.key; null !== currentFirstChild; ) {
                  if (currentFirstChild.key === key)
                    if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                      deleteRemainingChildren(
                        returnFiber,
                        currentFirstChild.sibling
                      );
                      lanes = useFiber(currentFirstChild, newChild.children || []);
                      lanes.return = returnFiber;
                      returnFiber = lanes;
                      break a;
                    } else {
                      deleteRemainingChildren(returnFiber, currentFirstChild);
                      break;
                    }
                  else deleteChild(returnFiber, currentFirstChild);
                  currentFirstChild = currentFirstChild.sibling;
                }
                lanes = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                lanes.return = returnFiber;
                returnFiber = lanes;
              }
              return placeSingleChild(returnFiber);
            case REACT_LAZY_TYPE:
              return key = newChild._init, newChild = key(newChild._payload), reconcileChildFibersImpl(
                returnFiber,
                currentFirstChild,
                newChild,
                lanes
              );
          }
          if (isArrayImpl(newChild))
            return reconcileChildrenArray(
              returnFiber,
              currentFirstChild,
              newChild,
              lanes
            );
          if (getIteratorFn(newChild)) {
            key = getIteratorFn(newChild);
            if ("function" !== typeof key) throw Error(formatProdErrorMessage(150));
            newChild = key.call(newChild);
            return reconcileChildrenIterator(
              returnFiber,
              currentFirstChild,
              newChild,
              lanes
            );
          }
          if ("function" === typeof newChild.then)
            return reconcileChildFibersImpl(
              returnFiber,
              currentFirstChild,
              unwrapThenable(newChild),
              lanes
            );
          if (newChild.$$typeof === REACT_CONTEXT_TYPE)
            return reconcileChildFibersImpl(
              returnFiber,
              currentFirstChild,
              readContextDuringReconciliation(returnFiber, newChild),
              lanes
            );
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        return "string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild ? (newChild = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), lanes = useFiber(currentFirstChild, newChild), lanes.return = returnFiber, returnFiber = lanes) : (deleteRemainingChildren(returnFiber, currentFirstChild), lanes = createFiberFromText(newChild, returnFiber.mode, lanes), lanes.return = returnFiber, returnFiber = lanes), placeSingleChild(returnFiber)) : deleteRemainingChildren(returnFiber, currentFirstChild);
      }
      return function(returnFiber, currentFirstChild, newChild, lanes) {
        try {
          thenableIndexCounter = 0;
          var firstChildFiber = reconcileChildFibersImpl(
            returnFiber,
            currentFirstChild,
            newChild,
            lanes
          );
          thenableState = null;
          return firstChildFiber;
        } catch (x) {
          if (x === SuspenseException || x === SuspenseActionException) throw x;
          var fiber = createFiberImplClass(29, x, null, returnFiber.mode);
          fiber.lanes = lanes;
          fiber.return = returnFiber;
          return fiber;
        } finally {
        }
      };
    }
    var reconcileChildFibers = createChildReconciler(true);
    var mountChildFibers = createChildReconciler(false);
    var suspenseHandlerStackCursor = createCursor(null);
    var shellBoundary = null;
    function pushPrimaryTreeSuspenseHandler(handler) {
      var current = handler.alternate;
      push(suspenseStackCursor, suspenseStackCursor.current & 1);
      push(suspenseHandlerStackCursor, handler);
      null === shellBoundary && (null === current || null !== currentTreeHiddenStackCursor.current ? shellBoundary = handler : null !== current.memoizedState && (shellBoundary = handler));
    }
    function pushOffscreenSuspenseHandler(fiber) {
      if (22 === fiber.tag) {
        if (push(suspenseStackCursor, suspenseStackCursor.current), push(suspenseHandlerStackCursor, fiber), null === shellBoundary) {
          var current = fiber.alternate;
          null !== current && null !== current.memoizedState && (shellBoundary = fiber);
        }
      } else reuseSuspenseHandlerOnStack(fiber);
    }
    function reuseSuspenseHandlerOnStack() {
      push(suspenseStackCursor, suspenseStackCursor.current);
      push(suspenseHandlerStackCursor, suspenseHandlerStackCursor.current);
    }
    function popSuspenseHandler(fiber) {
      pop(suspenseHandlerStackCursor);
      shellBoundary === fiber && (shellBoundary = null);
      pop(suspenseStackCursor);
    }
    var suspenseStackCursor = createCursor(0);
    function findFirstSuspended(row) {
      for (var node2 = row; null !== node2; ) {
        if (13 === node2.tag) {
          var state = node2.memoizedState;
          if (null !== state && (state = state.dehydrated, null === state || "$?" === state.data || isSuspenseInstanceFallback(state)))
            return node2;
        } else if (19 === node2.tag && void 0 !== node2.memoizedProps.revealOrder) {
          if (0 !== (node2.flags & 128)) return node2;
        } else if (null !== node2.child) {
          node2.child.return = node2;
          node2 = node2.child;
          continue;
        }
        if (node2 === row) break;
        for (; null === node2.sibling; ) {
          if (null === node2.return || node2.return === row) return null;
          node2 = node2.return;
        }
        node2.sibling.return = node2.return;
        node2 = node2.sibling;
      }
      return null;
    }
    function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
      ctor = workInProgress2.memoizedState;
      getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);
      getDerivedStateFromProps = null === getDerivedStateFromProps || void 0 === getDerivedStateFromProps ? ctor : assign2({}, ctor, getDerivedStateFromProps);
      workInProgress2.memoizedState = getDerivedStateFromProps;
      0 === workInProgress2.lanes && (workInProgress2.updateQueue.baseState = getDerivedStateFromProps);
    }
    var classComponentUpdater = {
      enqueueSetState: function(inst, payload, callback) {
        inst = inst._reactInternals;
        var lane = requestUpdateLane(), update = createUpdate(lane);
        update.payload = payload;
        void 0 !== callback && null !== callback && (update.callback = callback);
        payload = enqueueUpdate(inst, update, lane);
        null !== payload && (scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
      },
      enqueueReplaceState: function(inst, payload, callback) {
        inst = inst._reactInternals;
        var lane = requestUpdateLane(), update = createUpdate(lane);
        update.tag = 1;
        update.payload = payload;
        void 0 !== callback && null !== callback && (update.callback = callback);
        payload = enqueueUpdate(inst, update, lane);
        null !== payload && (scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
      },
      enqueueForceUpdate: function(inst, callback) {
        inst = inst._reactInternals;
        var lane = requestUpdateLane(), update = createUpdate(lane);
        update.tag = 2;
        void 0 !== callback && null !== callback && (update.callback = callback);
        callback = enqueueUpdate(inst, update, lane);
        null !== callback && (scheduleUpdateOnFiber(callback, inst, lane), entangleTransitions(callback, inst, lane));
      }
    };
    function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
      workInProgress2 = workInProgress2.stateNode;
      return "function" === typeof workInProgress2.shouldComponentUpdate ? workInProgress2.shouldComponentUpdate(newProps, newState, nextContext) : ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : true;
    }
    function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
      workInProgress2 = instance.state;
      "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, nextContext);
      "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
      instance.state !== workInProgress2 && classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
    }
    function resolveClassComponentProps(Component, baseProps) {
      var newProps = baseProps;
      if ("ref" in baseProps) {
        newProps = {};
        for (var propName in baseProps)
          "ref" !== propName && (newProps[propName] = baseProps[propName]);
      }
      if (Component = Component.defaultProps) {
        newProps === baseProps && (newProps = assign2({}, newProps));
        for (var propName$73 in Component)
          void 0 === newProps[propName$73] && (newProps[propName$73] = Component[propName$73]);
      }
      return newProps;
    }
    var reportGlobalError = "function" === typeof reportError ? reportError : function(error) {
      if ("object" === typeof window && "function" === typeof window.ErrorEvent) {
        var event = new window.ErrorEvent("error", {
          bubbles: true,
          cancelable: true,
          message: "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error),
          error
        });
        if (!window.dispatchEvent(event)) return;
      } else if ("object" === typeof process && "function" === typeof process.emit) {
        process.emit("uncaughtException", error);
        return;
      }
      console.error(error);
    };
    function defaultOnUncaughtError(error) {
      reportGlobalError(error);
    }
    function defaultOnCaughtError(error) {
      console.error(error);
    }
    function defaultOnRecoverableError(error) {
      reportGlobalError(error);
    }
    function logUncaughtError(root2, errorInfo) {
      try {
        var onUncaughtError = root2.onUncaughtError;
        onUncaughtError(errorInfo.value, { componentStack: errorInfo.stack });
      } catch (e$74) {
        setTimeout(function() {
          throw e$74;
        });
      }
    }
    function logCaughtError(root2, boundary, errorInfo) {
      try {
        var onCaughtError = root2.onCaughtError;
        onCaughtError(errorInfo.value, {
          componentStack: errorInfo.stack,
          errorBoundary: 1 === boundary.tag ? boundary.stateNode : null
        });
      } catch (e$75) {
        setTimeout(function() {
          throw e$75;
        });
      }
    }
    function createRootErrorUpdate(root2, errorInfo, lane) {
      lane = createUpdate(lane);
      lane.tag = 3;
      lane.payload = { element: null };
      lane.callback = function() {
        logUncaughtError(root2, errorInfo);
      };
      return lane;
    }
    function createClassErrorUpdate(lane) {
      lane = createUpdate(lane);
      lane.tag = 3;
      return lane;
    }
    function initializeClassErrorUpdate(update, root2, fiber, errorInfo) {
      var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
      if ("function" === typeof getDerivedStateFromError) {
        var error = errorInfo.value;
        update.payload = function() {
          return getDerivedStateFromError(error);
        };
        update.callback = function() {
          logCaughtError(root2, fiber, errorInfo);
        };
      }
      var inst = fiber.stateNode;
      null !== inst && "function" === typeof inst.componentDidCatch && (update.callback = function() {
        logCaughtError(root2, fiber, errorInfo);
        "function" !== typeof getDerivedStateFromError && (null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([this]) : legacyErrorBoundariesThatAlreadyFailed.add(this));
        var stack = errorInfo.stack;
        this.componentDidCatch(errorInfo.value, {
          componentStack: null !== stack ? stack : ""
        });
      });
    }
    function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
      sourceFiber.flags |= 32768;
      if (null !== value && "object" === typeof value && "function" === typeof value.then) {
        returnFiber = sourceFiber.alternate;
        null !== returnFiber && propagateParentContextChanges(
          returnFiber,
          sourceFiber,
          rootRenderLanes,
          true
        );
        sourceFiber = suspenseHandlerStackCursor.current;
        if (null !== sourceFiber) {
          switch (sourceFiber.tag) {
            case 13:
              return null === shellBoundary ? renderDidSuspendDelayIfPossible() : null === sourceFiber.alternate && 0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 3), sourceFiber.flags &= -257, sourceFiber.flags |= 65536, sourceFiber.lanes = rootRenderLanes, value === noopSuspenseyCommitThenable ? sourceFiber.flags |= 16384 : (returnFiber = sourceFiber.updateQueue, null === returnFiber ? sourceFiber.updateQueue = /* @__PURE__ */ new Set([value]) : returnFiber.add(value), attachPingListener(root2, value, rootRenderLanes)), false;
            case 22:
              return sourceFiber.flags |= 65536, value === noopSuspenseyCommitThenable ? sourceFiber.flags |= 16384 : (returnFiber = sourceFiber.updateQueue, null === returnFiber ? (returnFiber = {
                transitions: null,
                markerInstances: null,
                retryQueue: /* @__PURE__ */ new Set([value])
              }, sourceFiber.updateQueue = returnFiber) : (sourceFiber = returnFiber.retryQueue, null === sourceFiber ? returnFiber.retryQueue = /* @__PURE__ */ new Set([value]) : sourceFiber.add(value)), attachPingListener(root2, value, rootRenderLanes)), false;
          }
          throw Error(formatProdErrorMessage(435, sourceFiber.tag));
        }
        attachPingListener(root2, value, rootRenderLanes);
        renderDidSuspendDelayIfPossible();
        return false;
      }
      if (isHydrating)
        return returnFiber = suspenseHandlerStackCursor.current, null !== returnFiber ? (0 === (returnFiber.flags & 65536) && (returnFiber.flags |= 256), returnFiber.flags |= 65536, returnFiber.lanes = rootRenderLanes, value !== HydrationMismatchException && (root2 = Error(formatProdErrorMessage(422), { cause: value }), queueHydrationError(createCapturedValueAtFiber(root2, sourceFiber)))) : (value !== HydrationMismatchException && (returnFiber = Error(formatProdErrorMessage(423), {
          cause: value
        }), queueHydrationError(
          createCapturedValueAtFiber(returnFiber, sourceFiber)
        )), root2 = root2.current.alternate, root2.flags |= 65536, rootRenderLanes &= -rootRenderLanes, root2.lanes |= rootRenderLanes, value = createCapturedValueAtFiber(value, sourceFiber), rootRenderLanes = createRootErrorUpdate(
          root2.stateNode,
          value,
          rootRenderLanes
        ), enqueueCapturedUpdate(root2, rootRenderLanes), 4 !== workInProgressRootExitStatus && (workInProgressRootExitStatus = 2)), false;
      var wrapperError = Error(formatProdErrorMessage(520), { cause: value });
      wrapperError = createCapturedValueAtFiber(wrapperError, sourceFiber);
      null === workInProgressRootConcurrentErrors ? workInProgressRootConcurrentErrors = [wrapperError] : workInProgressRootConcurrentErrors.push(wrapperError);
      4 !== workInProgressRootExitStatus && (workInProgressRootExitStatus = 2);
      if (null === returnFiber) return true;
      value = createCapturedValueAtFiber(value, sourceFiber);
      sourceFiber = returnFiber;
      do {
        switch (sourceFiber.tag) {
          case 3:
            return sourceFiber.flags |= 65536, root2 = rootRenderLanes & -rootRenderLanes, sourceFiber.lanes |= root2, root2 = createRootErrorUpdate(sourceFiber.stateNode, value, root2), enqueueCapturedUpdate(sourceFiber, root2), false;
          case 1:
            if (returnFiber = sourceFiber.type, wrapperError = sourceFiber.stateNode, 0 === (sourceFiber.flags & 128) && ("function" === typeof returnFiber.getDerivedStateFromError || null !== wrapperError && "function" === typeof wrapperError.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(wrapperError))))
              return sourceFiber.flags |= 65536, rootRenderLanes &= -rootRenderLanes, sourceFiber.lanes |= rootRenderLanes, rootRenderLanes = createClassErrorUpdate(rootRenderLanes), initializeClassErrorUpdate(
                rootRenderLanes,
                root2,
                sourceFiber,
                value
              ), enqueueCapturedUpdate(sourceFiber, rootRenderLanes), false;
        }
        sourceFiber = sourceFiber.return;
      } while (null !== sourceFiber);
      return false;
    }
    var SelectiveHydrationException = Error(formatProdErrorMessage(461));
    var didReceiveUpdate = false;
    function reconcileChildren(current, workInProgress2, nextChildren, renderLanes2) {
      workInProgress2.child = null === current ? mountChildFibers(workInProgress2, null, nextChildren, renderLanes2) : reconcileChildFibers(
        workInProgress2,
        current.child,
        nextChildren,
        renderLanes2
      );
    }
    function updateForwardRef(current, workInProgress2, Component, nextProps, renderLanes2) {
      Component = Component.render;
      var ref = workInProgress2.ref;
      if ("ref" in nextProps) {
        var propsWithoutRef = {};
        for (var key in nextProps)
          "ref" !== key && (propsWithoutRef[key] = nextProps[key]);
      } else propsWithoutRef = nextProps;
      prepareToReadContext(workInProgress2);
      nextProps = renderWithHooks(
        current,
        workInProgress2,
        Component,
        propsWithoutRef,
        ref,
        renderLanes2
      );
      key = checkDidRenderIdHook();
      if (null !== current && !didReceiveUpdate)
        return bailoutHooks(current, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current, workInProgress2, renderLanes2);
      isHydrating && key && pushMaterializedTreeId(workInProgress2);
      workInProgress2.flags |= 1;
      reconcileChildren(current, workInProgress2, nextProps, renderLanes2);
      return workInProgress2.child;
    }
    function updateMemoComponent(current, workInProgress2, Component, nextProps, renderLanes2) {
      if (null === current) {
        var type = Component.type;
        if ("function" === typeof type && !shouldConstruct(type) && void 0 === type.defaultProps && null === Component.compare)
          return workInProgress2.tag = 15, workInProgress2.type = type, updateSimpleMemoComponent(
            current,
            workInProgress2,
            type,
            nextProps,
            renderLanes2
          );
        current = createFiberFromTypeAndProps(
          Component.type,
          null,
          nextProps,
          workInProgress2,
          workInProgress2.mode,
          renderLanes2
        );
        current.ref = workInProgress2.ref;
        current.return = workInProgress2;
        return workInProgress2.child = current;
      }
      type = current.child;
      if (!checkScheduledUpdateOrContext(current, renderLanes2)) {
        var prevProps = type.memoizedProps;
        Component = Component.compare;
        Component = null !== Component ? Component : shallowEqual;
        if (Component(prevProps, nextProps) && current.ref === workInProgress2.ref)
          return bailoutOnAlreadyFinishedWork(current, workInProgress2, renderLanes2);
      }
      workInProgress2.flags |= 1;
      current = createWorkInProgress(type, nextProps);
      current.ref = workInProgress2.ref;
      current.return = workInProgress2;
      return workInProgress2.child = current;
    }
    function updateSimpleMemoComponent(current, workInProgress2, Component, nextProps, renderLanes2) {
      if (null !== current) {
        var prevProps = current.memoizedProps;
        if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress2.ref)
          if (didReceiveUpdate = false, workInProgress2.pendingProps = nextProps = prevProps, checkScheduledUpdateOrContext(current, renderLanes2))
            0 !== (current.flags & 131072) && (didReceiveUpdate = true);
          else
            return workInProgress2.lanes = current.lanes, bailoutOnAlreadyFinishedWork(current, workInProgress2, renderLanes2);
      }
      return updateFunctionComponent(
        current,
        workInProgress2,
        Component,
        nextProps,
        renderLanes2
      );
    }
    function updateOffscreenComponent(current, workInProgress2, renderLanes2) {
      var nextProps = workInProgress2.pendingProps, nextChildren = nextProps.children, prevState = null !== current ? current.memoizedState : null;
      if ("hidden" === nextProps.mode) {
        if (0 !== (workInProgress2.flags & 128)) {
          nextProps = null !== prevState ? prevState.baseLanes | renderLanes2 : renderLanes2;
          if (null !== current) {
            nextChildren = workInProgress2.child = current.child;
            for (prevState = 0; null !== nextChildren; )
              prevState = prevState | nextChildren.lanes | nextChildren.childLanes, nextChildren = nextChildren.sibling;
            workInProgress2.childLanes = prevState & ~nextProps;
          } else workInProgress2.childLanes = 0, workInProgress2.child = null;
          return deferHiddenOffscreenComponent(
            current,
            workInProgress2,
            nextProps,
            renderLanes2
          );
        }
        if (0 !== (renderLanes2 & 536870912))
          workInProgress2.memoizedState = { baseLanes: 0, cachePool: null }, null !== current && pushTransition(
            workInProgress2,
            null !== prevState ? prevState.cachePool : null
          ), null !== prevState ? pushHiddenContext(workInProgress2, prevState) : reuseHiddenContextOnStack(), pushOffscreenSuspenseHandler(workInProgress2);
        else
          return workInProgress2.lanes = workInProgress2.childLanes = 536870912, deferHiddenOffscreenComponent(
            current,
            workInProgress2,
            null !== prevState ? prevState.baseLanes | renderLanes2 : renderLanes2,
            renderLanes2
          );
      } else
        null !== prevState ? (pushTransition(workInProgress2, prevState.cachePool), pushHiddenContext(workInProgress2, prevState), reuseSuspenseHandlerOnStack(workInProgress2), workInProgress2.memoizedState = null) : (null !== current && pushTransition(workInProgress2, null), reuseHiddenContextOnStack(), reuseSuspenseHandlerOnStack(workInProgress2));
      reconcileChildren(current, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function deferHiddenOffscreenComponent(current, workInProgress2, nextBaseLanes, renderLanes2) {
      var JSCompiler_inline_result = peekCacheFromPool();
      JSCompiler_inline_result = null === JSCompiler_inline_result ? null : { parent: CacheContext._currentValue, pool: JSCompiler_inline_result };
      workInProgress2.memoizedState = {
        baseLanes: nextBaseLanes,
        cachePool: JSCompiler_inline_result
      };
      null !== current && pushTransition(workInProgress2, null);
      reuseHiddenContextOnStack();
      pushOffscreenSuspenseHandler(workInProgress2);
      null !== current && propagateParentContextChanges(current, workInProgress2, renderLanes2, true);
      return null;
    }
    function markRef(current, workInProgress2) {
      var ref = workInProgress2.ref;
      if (null === ref)
        null !== current && null !== current.ref && (workInProgress2.flags |= 4194816);
      else {
        if ("function" !== typeof ref && "object" !== typeof ref)
          throw Error(formatProdErrorMessage(284));
        if (null === current || current.ref !== ref)
          workInProgress2.flags |= 4194816;
      }
    }
    function updateFunctionComponent(current, workInProgress2, Component, nextProps, renderLanes2) {
      prepareToReadContext(workInProgress2);
      Component = renderWithHooks(
        current,
        workInProgress2,
        Component,
        nextProps,
        void 0,
        renderLanes2
      );
      nextProps = checkDidRenderIdHook();
      if (null !== current && !didReceiveUpdate)
        return bailoutHooks(current, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current, workInProgress2, renderLanes2);
      isHydrating && nextProps && pushMaterializedTreeId(workInProgress2);
      workInProgress2.flags |= 1;
      reconcileChildren(current, workInProgress2, Component, renderLanes2);
      return workInProgress2.child;
    }
    function replayFunctionComponent(current, workInProgress2, nextProps, Component, secondArg, renderLanes2) {
      prepareToReadContext(workInProgress2);
      workInProgress2.updateQueue = null;
      nextProps = renderWithHooksAgain(
        workInProgress2,
        Component,
        nextProps,
        secondArg
      );
      finishRenderingHooks(current);
      Component = checkDidRenderIdHook();
      if (null !== current && !didReceiveUpdate)
        return bailoutHooks(current, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current, workInProgress2, renderLanes2);
      isHydrating && Component && pushMaterializedTreeId(workInProgress2);
      workInProgress2.flags |= 1;
      reconcileChildren(current, workInProgress2, nextProps, renderLanes2);
      return workInProgress2.child;
    }
    function updateClassComponent(current, workInProgress2, Component, nextProps, renderLanes2) {
      prepareToReadContext(workInProgress2);
      if (null === workInProgress2.stateNode) {
        var context = emptyContextObject, contextType = Component.contextType;
        "object" === typeof contextType && null !== contextType && (context = readContext(contextType));
        context = new Component(nextProps, context);
        workInProgress2.memoizedState = null !== context.state && void 0 !== context.state ? context.state : null;
        context.updater = classComponentUpdater;
        workInProgress2.stateNode = context;
        context._reactInternals = workInProgress2;
        context = workInProgress2.stateNode;
        context.props = nextProps;
        context.state = workInProgress2.memoizedState;
        context.refs = {};
        initializeUpdateQueue(workInProgress2);
        contextType = Component.contextType;
        context.context = "object" === typeof contextType && null !== contextType ? readContext(contextType) : emptyContextObject;
        context.state = workInProgress2.memoizedState;
        contextType = Component.getDerivedStateFromProps;
        "function" === typeof contextType && (applyDerivedStateFromProps(
          workInProgress2,
          Component,
          contextType,
          nextProps
        ), context.state = workInProgress2.memoizedState);
        "function" === typeof Component.getDerivedStateFromProps || "function" === typeof context.getSnapshotBeforeUpdate || "function" !== typeof context.UNSAFE_componentWillMount && "function" !== typeof context.componentWillMount || (contextType = context.state, "function" === typeof context.componentWillMount && context.componentWillMount(), "function" === typeof context.UNSAFE_componentWillMount && context.UNSAFE_componentWillMount(), contextType !== context.state && classComponentUpdater.enqueueReplaceState(context, context.state, null), processUpdateQueue(workInProgress2, nextProps, context, renderLanes2), suspendIfUpdateReadFromEntangledAsyncAction(), context.state = workInProgress2.memoizedState);
        "function" === typeof context.componentDidMount && (workInProgress2.flags |= 4194308);
        nextProps = true;
      } else if (null === current) {
        context = workInProgress2.stateNode;
        var unresolvedOldProps = workInProgress2.memoizedProps, oldProps = resolveClassComponentProps(Component, unresolvedOldProps);
        context.props = oldProps;
        var oldContext = context.context, contextType$jscomp$0 = Component.contextType;
        contextType = emptyContextObject;
        "object" === typeof contextType$jscomp$0 && null !== contextType$jscomp$0 && (contextType = readContext(contextType$jscomp$0));
        var getDerivedStateFromProps = Component.getDerivedStateFromProps;
        contextType$jscomp$0 = "function" === typeof getDerivedStateFromProps || "function" === typeof context.getSnapshotBeforeUpdate;
        unresolvedOldProps = workInProgress2.pendingProps !== unresolvedOldProps;
        contextType$jscomp$0 || "function" !== typeof context.UNSAFE_componentWillReceiveProps && "function" !== typeof context.componentWillReceiveProps || (unresolvedOldProps || oldContext !== contextType) && callComponentWillReceiveProps(
          workInProgress2,
          context,
          nextProps,
          contextType
        );
        hasForceUpdate = false;
        var oldState = workInProgress2.memoizedState;
        context.state = oldState;
        processUpdateQueue(workInProgress2, nextProps, context, renderLanes2);
        suspendIfUpdateReadFromEntangledAsyncAction();
        oldContext = workInProgress2.memoizedState;
        unresolvedOldProps || oldState !== oldContext || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(
          workInProgress2,
          Component,
          getDerivedStateFromProps,
          nextProps
        ), oldContext = workInProgress2.memoizedState), (oldProps = hasForceUpdate || checkShouldComponentUpdate(
          workInProgress2,
          Component,
          oldProps,
          nextProps,
          oldState,
          oldContext,
          contextType
        )) ? (contextType$jscomp$0 || "function" !== typeof context.UNSAFE_componentWillMount && "function" !== typeof context.componentWillMount || ("function" === typeof context.componentWillMount && context.componentWillMount(), "function" === typeof context.UNSAFE_componentWillMount && context.UNSAFE_componentWillMount()), "function" === typeof context.componentDidMount && (workInProgress2.flags |= 4194308)) : ("function" === typeof context.componentDidMount && (workInProgress2.flags |= 4194308), workInProgress2.memoizedProps = nextProps, workInProgress2.memoizedState = oldContext), context.props = nextProps, context.state = oldContext, context.context = contextType, nextProps = oldProps) : ("function" === typeof context.componentDidMount && (workInProgress2.flags |= 4194308), nextProps = false);
      } else {
        context = workInProgress2.stateNode;
        cloneUpdateQueue(current, workInProgress2);
        contextType = workInProgress2.memoizedProps;
        contextType$jscomp$0 = resolveClassComponentProps(Component, contextType);
        context.props = contextType$jscomp$0;
        getDerivedStateFromProps = workInProgress2.pendingProps;
        oldState = context.context;
        oldContext = Component.contextType;
        oldProps = emptyContextObject;
        "object" === typeof oldContext && null !== oldContext && (oldProps = readContext(oldContext));
        unresolvedOldProps = Component.getDerivedStateFromProps;
        (oldContext = "function" === typeof unresolvedOldProps || "function" === typeof context.getSnapshotBeforeUpdate) || "function" !== typeof context.UNSAFE_componentWillReceiveProps && "function" !== typeof context.componentWillReceiveProps || (contextType !== getDerivedStateFromProps || oldState !== oldProps) && callComponentWillReceiveProps(
          workInProgress2,
          context,
          nextProps,
          oldProps
        );
        hasForceUpdate = false;
        oldState = workInProgress2.memoizedState;
        context.state = oldState;
        processUpdateQueue(workInProgress2, nextProps, context, renderLanes2);
        suspendIfUpdateReadFromEntangledAsyncAction();
        var newState = workInProgress2.memoizedState;
        contextType !== getDerivedStateFromProps || oldState !== newState || hasForceUpdate || null !== current && null !== current.dependencies && checkIfContextChanged(current.dependencies) ? ("function" === typeof unresolvedOldProps && (applyDerivedStateFromProps(
          workInProgress2,
          Component,
          unresolvedOldProps,
          nextProps
        ), newState = workInProgress2.memoizedState), (contextType$jscomp$0 = hasForceUpdate || checkShouldComponentUpdate(
          workInProgress2,
          Component,
          contextType$jscomp$0,
          nextProps,
          oldState,
          newState,
          oldProps
        ) || null !== current && null !== current.dependencies && checkIfContextChanged(current.dependencies)) ? (oldContext || "function" !== typeof context.UNSAFE_componentWillUpdate && "function" !== typeof context.componentWillUpdate || ("function" === typeof context.componentWillUpdate && context.componentWillUpdate(nextProps, newState, oldProps), "function" === typeof context.UNSAFE_componentWillUpdate && context.UNSAFE_componentWillUpdate(
          nextProps,
          newState,
          oldProps
        )), "function" === typeof context.componentDidUpdate && (workInProgress2.flags |= 4), "function" === typeof context.getSnapshotBeforeUpdate && (workInProgress2.flags |= 1024)) : ("function" !== typeof context.componentDidUpdate || contextType === current.memoizedProps && oldState === current.memoizedState || (workInProgress2.flags |= 4), "function" !== typeof context.getSnapshotBeforeUpdate || contextType === current.memoizedProps && oldState === current.memoizedState || (workInProgress2.flags |= 1024), workInProgress2.memoizedProps = nextProps, workInProgress2.memoizedState = newState), context.props = nextProps, context.state = newState, context.context = oldProps, nextProps = contextType$jscomp$0) : ("function" !== typeof context.componentDidUpdate || contextType === current.memoizedProps && oldState === current.memoizedState || (workInProgress2.flags |= 4), "function" !== typeof context.getSnapshotBeforeUpdate || contextType === current.memoizedProps && oldState === current.memoizedState || (workInProgress2.flags |= 1024), nextProps = false);
      }
      context = nextProps;
      markRef(current, workInProgress2);
      nextProps = 0 !== (workInProgress2.flags & 128);
      context || nextProps ? (context = workInProgress2.stateNode, Component = nextProps && "function" !== typeof Component.getDerivedStateFromError ? null : context.render(), workInProgress2.flags |= 1, null !== current && nextProps ? (workInProgress2.child = reconcileChildFibers(
        workInProgress2,
        current.child,
        null,
        renderLanes2
      ), workInProgress2.child = reconcileChildFibers(
        workInProgress2,
        null,
        Component,
        renderLanes2
      )) : reconcileChildren(current, workInProgress2, Component, renderLanes2), workInProgress2.memoizedState = context.state, current = workInProgress2.child) : current = bailoutOnAlreadyFinishedWork(
        current,
        workInProgress2,
        renderLanes2
      );
      return current;
    }
    function mountHostRootWithoutHydrating(current, workInProgress2, nextChildren, renderLanes2) {
      resetHydrationState();
      workInProgress2.flags |= 256;
      reconcileChildren(current, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    var SUSPENDED_MARKER = {
      dehydrated: null,
      treeContext: null,
      retryLane: 0,
      hydrationErrors: null
    };
    function mountSuspenseOffscreenState(renderLanes2) {
      return { baseLanes: renderLanes2, cachePool: getSuspendedCache() };
    }
    function getRemainingWorkInPrimaryTree(current, primaryTreeDidDefer, renderLanes2) {
      current = null !== current ? current.childLanes & ~renderLanes2 : 0;
      primaryTreeDidDefer && (current |= workInProgressDeferredLane);
      return current;
    }
    function updateSuspenseComponent(current, workInProgress2, renderLanes2) {
      var nextProps = workInProgress2.pendingProps, showFallback = false, didSuspend = 0 !== (workInProgress2.flags & 128), JSCompiler_temp;
      (JSCompiler_temp = didSuspend) || (JSCompiler_temp = null !== current && null === current.memoizedState ? false : 0 !== (suspenseStackCursor.current & 2));
      JSCompiler_temp && (showFallback = true, workInProgress2.flags &= -129);
      JSCompiler_temp = 0 !== (workInProgress2.flags & 32);
      workInProgress2.flags &= -33;
      if (null === current) {
        if (isHydrating) {
          showFallback ? pushPrimaryTreeSuspenseHandler(workInProgress2) : reuseSuspenseHandlerOnStack(workInProgress2);
          if (isHydrating) {
            var nextInstance = nextHydratableInstance, JSCompiler_temp$jscomp$0;
            if (JSCompiler_temp$jscomp$0 = nextInstance) {
              c: {
                JSCompiler_temp$jscomp$0 = nextInstance;
                for (nextInstance = rootOrSingletonContext; 8 !== JSCompiler_temp$jscomp$0.nodeType; ) {
                  if (!nextInstance) {
                    nextInstance = null;
                    break c;
                  }
                  JSCompiler_temp$jscomp$0 = getNextHydratable(
                    JSCompiler_temp$jscomp$0.nextSibling
                  );
                  if (null === JSCompiler_temp$jscomp$0) {
                    nextInstance = null;
                    break c;
                  }
                }
                nextInstance = JSCompiler_temp$jscomp$0;
              }
              null !== nextInstance ? (workInProgress2.memoizedState = {
                dehydrated: nextInstance,
                treeContext: null !== treeContextProvider ? { id: treeContextId, overflow: treeContextOverflow } : null,
                retryLane: 536870912,
                hydrationErrors: null
              }, JSCompiler_temp$jscomp$0 = createFiberImplClass(
                18,
                null,
                null,
                0
              ), JSCompiler_temp$jscomp$0.stateNode = nextInstance, JSCompiler_temp$jscomp$0.return = workInProgress2, workInProgress2.child = JSCompiler_temp$jscomp$0, hydrationParentFiber = workInProgress2, nextHydratableInstance = null, JSCompiler_temp$jscomp$0 = true) : JSCompiler_temp$jscomp$0 = false;
            }
            JSCompiler_temp$jscomp$0 || throwOnHydrationMismatch(workInProgress2);
          }
          nextInstance = workInProgress2.memoizedState;
          if (null !== nextInstance && (nextInstance = nextInstance.dehydrated, null !== nextInstance))
            return isSuspenseInstanceFallback(nextInstance) ? workInProgress2.lanes = 32 : workInProgress2.lanes = 536870912, null;
          popSuspenseHandler(workInProgress2);
        }
        nextInstance = nextProps.children;
        nextProps = nextProps.fallback;
        if (showFallback)
          return reuseSuspenseHandlerOnStack(workInProgress2), showFallback = workInProgress2.mode, nextInstance = mountWorkInProgressOffscreenFiber(
            { mode: "hidden", children: nextInstance },
            showFallback
          ), nextProps = createFiberFromFragment(
            nextProps,
            showFallback,
            renderLanes2,
            null
          ), nextInstance.return = workInProgress2, nextProps.return = workInProgress2, nextInstance.sibling = nextProps, workInProgress2.child = nextInstance, showFallback = workInProgress2.child, showFallback.memoizedState = mountSuspenseOffscreenState(renderLanes2), showFallback.childLanes = getRemainingWorkInPrimaryTree(
            current,
            JSCompiler_temp,
            renderLanes2
          ), workInProgress2.memoizedState = SUSPENDED_MARKER, nextProps;
        pushPrimaryTreeSuspenseHandler(workInProgress2);
        return mountSuspensePrimaryChildren(workInProgress2, nextInstance);
      }
      JSCompiler_temp$jscomp$0 = current.memoizedState;
      if (null !== JSCompiler_temp$jscomp$0 && (nextInstance = JSCompiler_temp$jscomp$0.dehydrated, null !== nextInstance)) {
        if (didSuspend)
          workInProgress2.flags & 256 ? (pushPrimaryTreeSuspenseHandler(workInProgress2), workInProgress2.flags &= -257, workInProgress2 = retrySuspenseComponentWithoutHydrating(
            current,
            workInProgress2,
            renderLanes2
          )) : null !== workInProgress2.memoizedState ? (reuseSuspenseHandlerOnStack(workInProgress2), workInProgress2.child = current.child, workInProgress2.flags |= 128, workInProgress2 = null) : (reuseSuspenseHandlerOnStack(workInProgress2), showFallback = nextProps.fallback, nextInstance = workInProgress2.mode, nextProps = mountWorkInProgressOffscreenFiber(
            { mode: "visible", children: nextProps.children },
            nextInstance
          ), showFallback = createFiberFromFragment(
            showFallback,
            nextInstance,
            renderLanes2,
            null
          ), showFallback.flags |= 2, nextProps.return = workInProgress2, showFallback.return = workInProgress2, nextProps.sibling = showFallback, workInProgress2.child = nextProps, reconcileChildFibers(
            workInProgress2,
            current.child,
            null,
            renderLanes2
          ), nextProps = workInProgress2.child, nextProps.memoizedState = mountSuspenseOffscreenState(renderLanes2), nextProps.childLanes = getRemainingWorkInPrimaryTree(
            current,
            JSCompiler_temp,
            renderLanes2
          ), workInProgress2.memoizedState = SUSPENDED_MARKER, workInProgress2 = showFallback);
        else if (pushPrimaryTreeSuspenseHandler(workInProgress2), isSuspenseInstanceFallback(nextInstance)) {
          JSCompiler_temp = nextInstance.nextSibling && nextInstance.nextSibling.dataset;
          if (JSCompiler_temp) var digest = JSCompiler_temp.dgst;
          JSCompiler_temp = digest;
          nextProps = Error(formatProdErrorMessage(419));
          nextProps.stack = "";
          nextProps.digest = JSCompiler_temp;
          queueHydrationError({ value: nextProps, source: null, stack: null });
          workInProgress2 = retrySuspenseComponentWithoutHydrating(
            current,
            workInProgress2,
            renderLanes2
          );
        } else if (didReceiveUpdate || propagateParentContextChanges(current, workInProgress2, renderLanes2, false), JSCompiler_temp = 0 !== (renderLanes2 & current.childLanes), didReceiveUpdate || JSCompiler_temp) {
          JSCompiler_temp = workInProgressRoot;
          if (null !== JSCompiler_temp && (nextProps = renderLanes2 & -renderLanes2, nextProps = 0 !== (nextProps & 42) ? 1 : getBumpedLaneForHydrationByLane(nextProps), nextProps = 0 !== (nextProps & (JSCompiler_temp.suspendedLanes | renderLanes2)) ? 0 : nextProps, 0 !== nextProps && nextProps !== JSCompiler_temp$jscomp$0.retryLane))
            throw JSCompiler_temp$jscomp$0.retryLane = nextProps, enqueueConcurrentRenderForLane(current, nextProps), scheduleUpdateOnFiber(JSCompiler_temp, current, nextProps), SelectiveHydrationException;
          "$?" === nextInstance.data || renderDidSuspendDelayIfPossible();
          workInProgress2 = retrySuspenseComponentWithoutHydrating(
            current,
            workInProgress2,
            renderLanes2
          );
        } else
          "$?" === nextInstance.data ? (workInProgress2.flags |= 192, workInProgress2.child = current.child, workInProgress2 = null) : (current = JSCompiler_temp$jscomp$0.treeContext, nextHydratableInstance = getNextHydratable(
            nextInstance.nextSibling
          ), hydrationParentFiber = workInProgress2, isHydrating = true, hydrationErrors = null, rootOrSingletonContext = false, null !== current && (idStack[idStackIndex++] = treeContextId, idStack[idStackIndex++] = treeContextOverflow, idStack[idStackIndex++] = treeContextProvider, treeContextId = current.id, treeContextOverflow = current.overflow, treeContextProvider = workInProgress2), workInProgress2 = mountSuspensePrimaryChildren(
            workInProgress2,
            nextProps.children
          ), workInProgress2.flags |= 4096);
        return workInProgress2;
      }
      if (showFallback)
        return reuseSuspenseHandlerOnStack(workInProgress2), showFallback = nextProps.fallback, nextInstance = workInProgress2.mode, JSCompiler_temp$jscomp$0 = current.child, digest = JSCompiler_temp$jscomp$0.sibling, nextProps = createWorkInProgress(JSCompiler_temp$jscomp$0, {
          mode: "hidden",
          children: nextProps.children
        }), nextProps.subtreeFlags = JSCompiler_temp$jscomp$0.subtreeFlags & 65011712, null !== digest ? showFallback = createWorkInProgress(digest, showFallback) : (showFallback = createFiberFromFragment(
          showFallback,
          nextInstance,
          renderLanes2,
          null
        ), showFallback.flags |= 2), showFallback.return = workInProgress2, nextProps.return = workInProgress2, nextProps.sibling = showFallback, workInProgress2.child = nextProps, nextProps = showFallback, showFallback = workInProgress2.child, nextInstance = current.child.memoizedState, null === nextInstance ? nextInstance = mountSuspenseOffscreenState(renderLanes2) : (JSCompiler_temp$jscomp$0 = nextInstance.cachePool, null !== JSCompiler_temp$jscomp$0 ? (digest = CacheContext._currentValue, JSCompiler_temp$jscomp$0 = JSCompiler_temp$jscomp$0.parent !== digest ? { parent: digest, pool: digest } : JSCompiler_temp$jscomp$0) : JSCompiler_temp$jscomp$0 = getSuspendedCache(), nextInstance = {
          baseLanes: nextInstance.baseLanes | renderLanes2,
          cachePool: JSCompiler_temp$jscomp$0
        }), showFallback.memoizedState = nextInstance, showFallback.childLanes = getRemainingWorkInPrimaryTree(
          current,
          JSCompiler_temp,
          renderLanes2
        ), workInProgress2.memoizedState = SUSPENDED_MARKER, nextProps;
      pushPrimaryTreeSuspenseHandler(workInProgress2);
      renderLanes2 = current.child;
      current = renderLanes2.sibling;
      renderLanes2 = createWorkInProgress(renderLanes2, {
        mode: "visible",
        children: nextProps.children
      });
      renderLanes2.return = workInProgress2;
      renderLanes2.sibling = null;
      null !== current && (JSCompiler_temp = workInProgress2.deletions, null === JSCompiler_temp ? (workInProgress2.deletions = [current], workInProgress2.flags |= 16) : JSCompiler_temp.push(current));
      workInProgress2.child = renderLanes2;
      workInProgress2.memoizedState = null;
      return renderLanes2;
    }
    function mountSuspensePrimaryChildren(workInProgress2, primaryChildren) {
      primaryChildren = mountWorkInProgressOffscreenFiber(
        { mode: "visible", children: primaryChildren },
        workInProgress2.mode
      );
      primaryChildren.return = workInProgress2;
      return workInProgress2.child = primaryChildren;
    }
    function mountWorkInProgressOffscreenFiber(offscreenProps, mode) {
      offscreenProps = createFiberImplClass(22, offscreenProps, null, mode);
      offscreenProps.lanes = 0;
      offscreenProps.stateNode = {
        _visibility: 1,
        _pendingMarkers: null,
        _retryCache: null,
        _transitions: null
      };
      return offscreenProps;
    }
    function retrySuspenseComponentWithoutHydrating(current, workInProgress2, renderLanes2) {
      reconcileChildFibers(workInProgress2, current.child, null, renderLanes2);
      current = mountSuspensePrimaryChildren(
        workInProgress2,
        workInProgress2.pendingProps.children
      );
      current.flags |= 2;
      workInProgress2.memoizedState = null;
      return current;
    }
    function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
      fiber.lanes |= renderLanes2;
      var alternate = fiber.alternate;
      null !== alternate && (alternate.lanes |= renderLanes2);
      scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
    }
    function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
      var renderState = workInProgress2.memoizedState;
      null === renderState ? workInProgress2.memoizedState = {
        isBackwards,
        rendering: null,
        renderingStartTime: 0,
        last: lastContentRow,
        tail,
        tailMode
      } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.renderingStartTime = 0, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailMode = tailMode);
    }
    function updateSuspenseListComponent(current, workInProgress2, renderLanes2) {
      var nextProps = workInProgress2.pendingProps, revealOrder = nextProps.revealOrder, tailMode = nextProps.tail;
      reconcileChildren(current, workInProgress2, nextProps.children, renderLanes2);
      nextProps = suspenseStackCursor.current;
      if (0 !== (nextProps & 2))
        nextProps = nextProps & 1 | 2, workInProgress2.flags |= 128;
      else {
        if (null !== current && 0 !== (current.flags & 128))
          a: for (current = workInProgress2.child; null !== current; ) {
            if (13 === current.tag)
              null !== current.memoizedState && scheduleSuspenseWorkOnFiber(current, renderLanes2, workInProgress2);
            else if (19 === current.tag)
              scheduleSuspenseWorkOnFiber(current, renderLanes2, workInProgress2);
            else if (null !== current.child) {
              current.child.return = current;
              current = current.child;
              continue;
            }
            if (current === workInProgress2) break a;
            for (; null === current.sibling; ) {
              if (null === current.return || current.return === workInProgress2)
                break a;
              current = current.return;
            }
            current.sibling.return = current.return;
            current = current.sibling;
          }
        nextProps &= 1;
      }
      push(suspenseStackCursor, nextProps);
      switch (revealOrder) {
        case "forwards":
          renderLanes2 = workInProgress2.child;
          for (revealOrder = null; null !== renderLanes2; )
            current = renderLanes2.alternate, null !== current && null === findFirstSuspended(current) && (revealOrder = renderLanes2), renderLanes2 = renderLanes2.sibling;
          renderLanes2 = revealOrder;
          null === renderLanes2 ? (revealOrder = workInProgress2.child, workInProgress2.child = null) : (revealOrder = renderLanes2.sibling, renderLanes2.sibling = null);
          initSuspenseListRenderState(
            workInProgress2,
            false,
            revealOrder,
            renderLanes2,
            tailMode
          );
          break;
        case "backwards":
          renderLanes2 = null;
          revealOrder = workInProgress2.child;
          for (workInProgress2.child = null; null !== revealOrder; ) {
            current = revealOrder.alternate;
            if (null !== current && null === findFirstSuspended(current)) {
              workInProgress2.child = revealOrder;
              break;
            }
            current = revealOrder.sibling;
            revealOrder.sibling = renderLanes2;
            renderLanes2 = revealOrder;
            revealOrder = current;
          }
          initSuspenseListRenderState(
            workInProgress2,
            true,
            renderLanes2,
            null,
            tailMode
          );
          break;
        case "together":
          initSuspenseListRenderState(workInProgress2, false, null, null, void 0);
          break;
        default:
          workInProgress2.memoizedState = null;
      }
      return workInProgress2.child;
    }
    function bailoutOnAlreadyFinishedWork(current, workInProgress2, renderLanes2) {
      null !== current && (workInProgress2.dependencies = current.dependencies);
      workInProgressRootSkippedLanes |= workInProgress2.lanes;
      if (0 === (renderLanes2 & workInProgress2.childLanes))
        if (null !== current) {
          if (propagateParentContextChanges(
            current,
            workInProgress2,
            renderLanes2,
            false
          ), 0 === (renderLanes2 & workInProgress2.childLanes))
            return null;
        } else return null;
      if (null !== current && workInProgress2.child !== current.child)
        throw Error(formatProdErrorMessage(153));
      if (null !== workInProgress2.child) {
        current = workInProgress2.child;
        renderLanes2 = createWorkInProgress(current, current.pendingProps);
        workInProgress2.child = renderLanes2;
        for (renderLanes2.return = workInProgress2; null !== current.sibling; )
          current = current.sibling, renderLanes2 = renderLanes2.sibling = createWorkInProgress(current, current.pendingProps), renderLanes2.return = workInProgress2;
        renderLanes2.sibling = null;
      }
      return workInProgress2.child;
    }
    function checkScheduledUpdateOrContext(current, renderLanes2) {
      if (0 !== (current.lanes & renderLanes2)) return true;
      current = current.dependencies;
      return null !== current && checkIfContextChanged(current) ? true : false;
    }
    function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress2, renderLanes2) {
      switch (workInProgress2.tag) {
        case 3:
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          pushProvider(workInProgress2, CacheContext, current.memoizedState.cache);
          resetHydrationState();
          break;
        case 27:
        case 5:
          pushHostContext(workInProgress2);
          break;
        case 4:
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          break;
        case 10:
          pushProvider(
            workInProgress2,
            workInProgress2.type,
            workInProgress2.memoizedProps.value
          );
          break;
        case 13:
          var state = workInProgress2.memoizedState;
          if (null !== state) {
            if (null !== state.dehydrated)
              return pushPrimaryTreeSuspenseHandler(workInProgress2), workInProgress2.flags |= 128, null;
            if (0 !== (renderLanes2 & workInProgress2.child.childLanes))
              return updateSuspenseComponent(current, workInProgress2, renderLanes2);
            pushPrimaryTreeSuspenseHandler(workInProgress2);
            current = bailoutOnAlreadyFinishedWork(
              current,
              workInProgress2,
              renderLanes2
            );
            return null !== current ? current.sibling : null;
          }
          pushPrimaryTreeSuspenseHandler(workInProgress2);
          break;
        case 19:
          var didSuspendBefore = 0 !== (current.flags & 128);
          state = 0 !== (renderLanes2 & workInProgress2.childLanes);
          state || (propagateParentContextChanges(
            current,
            workInProgress2,
            renderLanes2,
            false
          ), state = 0 !== (renderLanes2 & workInProgress2.childLanes));
          if (didSuspendBefore) {
            if (state)
              return updateSuspenseListComponent(
                current,
                workInProgress2,
                renderLanes2
              );
            workInProgress2.flags |= 128;
          }
          didSuspendBefore = workInProgress2.memoizedState;
          null !== didSuspendBefore && (didSuspendBefore.rendering = null, didSuspendBefore.tail = null, didSuspendBefore.lastEffect = null);
          push(suspenseStackCursor, suspenseStackCursor.current);
          if (state) break;
          else return null;
        case 22:
        case 23:
          return workInProgress2.lanes = 0, updateOffscreenComponent(current, workInProgress2, renderLanes2);
        case 24:
          pushProvider(workInProgress2, CacheContext, current.memoizedState.cache);
      }
      return bailoutOnAlreadyFinishedWork(current, workInProgress2, renderLanes2);
    }
    function beginWork(current, workInProgress2, renderLanes2) {
      if (null !== current)
        if (current.memoizedProps !== workInProgress2.pendingProps)
          didReceiveUpdate = true;
        else {
          if (!checkScheduledUpdateOrContext(current, renderLanes2) && 0 === (workInProgress2.flags & 128))
            return didReceiveUpdate = false, attemptEarlyBailoutIfNoScheduledUpdate(
              current,
              workInProgress2,
              renderLanes2
            );
          didReceiveUpdate = 0 !== (current.flags & 131072) ? true : false;
        }
      else
        didReceiveUpdate = false, isHydrating && 0 !== (workInProgress2.flags & 1048576) && pushTreeId(workInProgress2, treeForkCount, workInProgress2.index);
      workInProgress2.lanes = 0;
      switch (workInProgress2.tag) {
        case 16:
          a: {
            current = workInProgress2.pendingProps;
            var lazyComponent = workInProgress2.elementType, init = lazyComponent._init;
            lazyComponent = init(lazyComponent._payload);
            workInProgress2.type = lazyComponent;
            if ("function" === typeof lazyComponent)
              shouldConstruct(lazyComponent) ? (current = resolveClassComponentProps(lazyComponent, current), workInProgress2.tag = 1, workInProgress2 = updateClassComponent(
                null,
                workInProgress2,
                lazyComponent,
                current,
                renderLanes2
              )) : (workInProgress2.tag = 0, workInProgress2 = updateFunctionComponent(
                null,
                workInProgress2,
                lazyComponent,
                current,
                renderLanes2
              ));
            else {
              if (void 0 !== lazyComponent && null !== lazyComponent) {
                if (init = lazyComponent.$$typeof, init === REACT_FORWARD_REF_TYPE) {
                  workInProgress2.tag = 11;
                  workInProgress2 = updateForwardRef(
                    null,
                    workInProgress2,
                    lazyComponent,
                    current,
                    renderLanes2
                  );
                  break a;
                } else if (init === REACT_MEMO_TYPE) {
                  workInProgress2.tag = 14;
                  workInProgress2 = updateMemoComponent(
                    null,
                    workInProgress2,
                    lazyComponent,
                    current,
                    renderLanes2
                  );
                  break a;
                }
              }
              workInProgress2 = getComponentNameFromType(lazyComponent) || lazyComponent;
              throw Error(formatProdErrorMessage(306, workInProgress2, ""));
            }
          }
          return workInProgress2;
        case 0:
          return updateFunctionComponent(
            current,
            workInProgress2,
            workInProgress2.type,
            workInProgress2.pendingProps,
            renderLanes2
          );
        case 1:
          return lazyComponent = workInProgress2.type, init = resolveClassComponentProps(
            lazyComponent,
            workInProgress2.pendingProps
          ), updateClassComponent(
            current,
            workInProgress2,
            lazyComponent,
            init,
            renderLanes2
          );
        case 3:
          a: {
            pushHostContainer(
              workInProgress2,
              workInProgress2.stateNode.containerInfo
            );
            if (null === current) throw Error(formatProdErrorMessage(387));
            lazyComponent = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            init = prevState.element;
            cloneUpdateQueue(current, workInProgress2);
            processUpdateQueue(workInProgress2, lazyComponent, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            lazyComponent = nextState.cache;
            pushProvider(workInProgress2, CacheContext, lazyComponent);
            lazyComponent !== prevState.cache && propagateContextChanges(
              workInProgress2,
              [CacheContext],
              renderLanes2,
              true
            );
            suspendIfUpdateReadFromEntangledAsyncAction();
            lazyComponent = nextState.element;
            if (prevState.isDehydrated)
              if (prevState = {
                element: lazyComponent,
                isDehydrated: false,
                cache: nextState.cache
              }, workInProgress2.updateQueue.baseState = prevState, workInProgress2.memoizedState = prevState, workInProgress2.flags & 256) {
                workInProgress2 = mountHostRootWithoutHydrating(
                  current,
                  workInProgress2,
                  lazyComponent,
                  renderLanes2
                );
                break a;
              } else if (lazyComponent !== init) {
                init = createCapturedValueAtFiber(
                  Error(formatProdErrorMessage(424)),
                  workInProgress2
                );
                queueHydrationError(init);
                workInProgress2 = mountHostRootWithoutHydrating(
                  current,
                  workInProgress2,
                  lazyComponent,
                  renderLanes2
                );
                break a;
              } else {
                current = workInProgress2.stateNode.containerInfo;
                switch (current.nodeType) {
                  case 9:
                    current = current.body;
                    break;
                  default:
                    current = "HTML" === current.nodeName ? current.ownerDocument.body : current;
                }
                nextHydratableInstance = getNextHydratable(current.firstChild);
                hydrationParentFiber = workInProgress2;
                isHydrating = true;
                hydrationErrors = null;
                rootOrSingletonContext = true;
                renderLanes2 = mountChildFibers(
                  workInProgress2,
                  null,
                  lazyComponent,
                  renderLanes2
                );
                for (workInProgress2.child = renderLanes2; renderLanes2; )
                  renderLanes2.flags = renderLanes2.flags & -3 | 4096, renderLanes2 = renderLanes2.sibling;
              }
            else {
              resetHydrationState();
              if (lazyComponent === init) {
                workInProgress2 = bailoutOnAlreadyFinishedWork(
                  current,
                  workInProgress2,
                  renderLanes2
                );
                break a;
              }
              reconcileChildren(
                current,
                workInProgress2,
                lazyComponent,
                renderLanes2
              );
            }
            workInProgress2 = workInProgress2.child;
          }
          return workInProgress2;
        case 26:
          return markRef(current, workInProgress2), null === current ? (renderLanes2 = getResource(
            workInProgress2.type,
            null,
            workInProgress2.pendingProps,
            null
          )) ? workInProgress2.memoizedState = renderLanes2 : isHydrating || (renderLanes2 = workInProgress2.type, current = workInProgress2.pendingProps, lazyComponent = getOwnerDocumentFromRootContainer(
            rootInstanceStackCursor.current
          ).createElement(renderLanes2), lazyComponent[internalInstanceKey] = workInProgress2, lazyComponent[internalPropsKey] = current, setInitialProperties(lazyComponent, renderLanes2, current), markNodeAsHoistable(lazyComponent), workInProgress2.stateNode = lazyComponent) : workInProgress2.memoizedState = getResource(
            workInProgress2.type,
            current.memoizedProps,
            workInProgress2.pendingProps,
            current.memoizedState
          ), null;
        case 27:
          return pushHostContext(workInProgress2), null === current && isHydrating && (lazyComponent = workInProgress2.stateNode = resolveSingletonInstance(
            workInProgress2.type,
            workInProgress2.pendingProps,
            rootInstanceStackCursor.current
          ), hydrationParentFiber = workInProgress2, rootOrSingletonContext = true, init = nextHydratableInstance, isSingletonScope(workInProgress2.type) ? (previousHydratableOnEnteringScopedSingleton = init, nextHydratableInstance = getNextHydratable(
            lazyComponent.firstChild
          )) : nextHydratableInstance = init), reconcileChildren(
            current,
            workInProgress2,
            workInProgress2.pendingProps.children,
            renderLanes2
          ), markRef(current, workInProgress2), null === current && (workInProgress2.flags |= 4194304), workInProgress2.child;
        case 5:
          if (null === current && isHydrating) {
            if (init = lazyComponent = nextHydratableInstance)
              lazyComponent = canHydrateInstance(
                lazyComponent,
                workInProgress2.type,
                workInProgress2.pendingProps,
                rootOrSingletonContext
              ), null !== lazyComponent ? (workInProgress2.stateNode = lazyComponent, hydrationParentFiber = workInProgress2, nextHydratableInstance = getNextHydratable(
                lazyComponent.firstChild
              ), rootOrSingletonContext = false, init = true) : init = false;
            init || throwOnHydrationMismatch(workInProgress2);
          }
          pushHostContext(workInProgress2);
          init = workInProgress2.type;
          prevState = workInProgress2.pendingProps;
          nextState = null !== current ? current.memoizedProps : null;
          lazyComponent = prevState.children;
          shouldSetTextContent(init, prevState) ? lazyComponent = null : null !== nextState && shouldSetTextContent(init, nextState) && (workInProgress2.flags |= 32);
          null !== workInProgress2.memoizedState && (init = renderWithHooks(
            current,
            workInProgress2,
            TransitionAwareHostComponent,
            null,
            null,
            renderLanes2
          ), HostTransitionContext._currentValue = init);
          markRef(current, workInProgress2);
          reconcileChildren(current, workInProgress2, lazyComponent, renderLanes2);
          return workInProgress2.child;
        case 6:
          if (null === current && isHydrating) {
            if (current = renderLanes2 = nextHydratableInstance)
              renderLanes2 = canHydrateTextInstance(
                renderLanes2,
                workInProgress2.pendingProps,
                rootOrSingletonContext
              ), null !== renderLanes2 ? (workInProgress2.stateNode = renderLanes2, hydrationParentFiber = workInProgress2, nextHydratableInstance = null, current = true) : current = false;
            current || throwOnHydrationMismatch(workInProgress2);
          }
          return null;
        case 13:
          return updateSuspenseComponent(current, workInProgress2, renderLanes2);
        case 4:
          return pushHostContainer(
            workInProgress2,
            workInProgress2.stateNode.containerInfo
          ), lazyComponent = workInProgress2.pendingProps, null === current ? workInProgress2.child = reconcileChildFibers(
            workInProgress2,
            null,
            lazyComponent,
            renderLanes2
          ) : reconcileChildren(
            current,
            workInProgress2,
            lazyComponent,
            renderLanes2
          ), workInProgress2.child;
        case 11:
          return updateForwardRef(
            current,
            workInProgress2,
            workInProgress2.type,
            workInProgress2.pendingProps,
            renderLanes2
          );
        case 7:
          return reconcileChildren(
            current,
            workInProgress2,
            workInProgress2.pendingProps,
            renderLanes2
          ), workInProgress2.child;
        case 8:
          return reconcileChildren(
            current,
            workInProgress2,
            workInProgress2.pendingProps.children,
            renderLanes2
          ), workInProgress2.child;
        case 12:
          return reconcileChildren(
            current,
            workInProgress2,
            workInProgress2.pendingProps.children,
            renderLanes2
          ), workInProgress2.child;
        case 10:
          return lazyComponent = workInProgress2.pendingProps, pushProvider(workInProgress2, workInProgress2.type, lazyComponent.value), reconcileChildren(
            current,
            workInProgress2,
            lazyComponent.children,
            renderLanes2
          ), workInProgress2.child;
        case 9:
          return init = workInProgress2.type._context, lazyComponent = workInProgress2.pendingProps.children, prepareToReadContext(workInProgress2), init = readContext(init), lazyComponent = lazyComponent(init), workInProgress2.flags |= 1, reconcileChildren(current, workInProgress2, lazyComponent, renderLanes2), workInProgress2.child;
        case 14:
          return updateMemoComponent(
            current,
            workInProgress2,
            workInProgress2.type,
            workInProgress2.pendingProps,
            renderLanes2
          );
        case 15:
          return updateSimpleMemoComponent(
            current,
            workInProgress2,
            workInProgress2.type,
            workInProgress2.pendingProps,
            renderLanes2
          );
        case 19:
          return updateSuspenseListComponent(current, workInProgress2, renderLanes2);
        case 31:
          return lazyComponent = workInProgress2.pendingProps, renderLanes2 = workInProgress2.mode, lazyComponent = {
            mode: lazyComponent.mode,
            children: lazyComponent.children
          }, null === current ? (renderLanes2 = mountWorkInProgressOffscreenFiber(
            lazyComponent,
            renderLanes2
          ), renderLanes2.ref = workInProgress2.ref, workInProgress2.child = renderLanes2, renderLanes2.return = workInProgress2, workInProgress2 = renderLanes2) : (renderLanes2 = createWorkInProgress(current.child, lazyComponent), renderLanes2.ref = workInProgress2.ref, workInProgress2.child = renderLanes2, renderLanes2.return = workInProgress2, workInProgress2 = renderLanes2), workInProgress2;
        case 22:
          return updateOffscreenComponent(current, workInProgress2, renderLanes2);
        case 24:
          return prepareToReadContext(workInProgress2), lazyComponent = readContext(CacheContext), null === current ? (init = peekCacheFromPool(), null === init && (init = workInProgressRoot, prevState = createCache3(), init.pooledCache = prevState, prevState.refCount++, null !== prevState && (init.pooledCacheLanes |= renderLanes2), init = prevState), workInProgress2.memoizedState = {
            parent: lazyComponent,
            cache: init
          }, initializeUpdateQueue(workInProgress2), pushProvider(workInProgress2, CacheContext, init)) : (0 !== (current.lanes & renderLanes2) && (cloneUpdateQueue(current, workInProgress2), processUpdateQueue(workInProgress2, null, null, renderLanes2), suspendIfUpdateReadFromEntangledAsyncAction()), init = current.memoizedState, prevState = workInProgress2.memoizedState, init.parent !== lazyComponent ? (init = { parent: lazyComponent, cache: lazyComponent }, workInProgress2.memoizedState = init, 0 === workInProgress2.lanes && (workInProgress2.memoizedState = workInProgress2.updateQueue.baseState = init), pushProvider(workInProgress2, CacheContext, lazyComponent)) : (lazyComponent = prevState.cache, pushProvider(workInProgress2, CacheContext, lazyComponent), lazyComponent !== init.cache && propagateContextChanges(
            workInProgress2,
            [CacheContext],
            renderLanes2,
            true
          ))), reconcileChildren(
            current,
            workInProgress2,
            workInProgress2.pendingProps.children,
            renderLanes2
          ), workInProgress2.child;
        case 29:
          throw workInProgress2.pendingProps;
      }
      throw Error(formatProdErrorMessage(156, workInProgress2.tag));
    }
    function markUpdate(workInProgress2) {
      workInProgress2.flags |= 4;
    }
    function preloadResourceAndSuspendIfNeeded(workInProgress2, resource) {
      if ("stylesheet" !== resource.type || 0 !== (resource.state.loading & 4))
        workInProgress2.flags &= -16777217;
      else if (workInProgress2.flags |= 16777216, !preloadResource(resource)) {
        resource = suspenseHandlerStackCursor.current;
        if (null !== resource && ((workInProgressRootRenderLanes & 4194048) === workInProgressRootRenderLanes ? null !== shellBoundary : (workInProgressRootRenderLanes & 62914560) !== workInProgressRootRenderLanes && 0 === (workInProgressRootRenderLanes & 536870912) || resource !== shellBoundary))
          throw suspendedThenable = noopSuspenseyCommitThenable, SuspenseyCommitException;
        workInProgress2.flags |= 8192;
      }
    }
    function scheduleRetryEffect(workInProgress2, retryQueue) {
      null !== retryQueue && (workInProgress2.flags |= 4);
      workInProgress2.flags & 16384 && (retryQueue = 22 !== workInProgress2.tag ? claimNextRetryLane() : 536870912, workInProgress2.lanes |= retryQueue, workInProgressSuspendedRetryLanes |= retryQueue);
    }
    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
      if (!isHydrating)
        switch (renderState.tailMode) {
          case "hidden":
            hasRenderedATailFallback = renderState.tail;
            for (var lastTailNode = null; null !== hasRenderedATailFallback; )
              null !== hasRenderedATailFallback.alternate && (lastTailNode = hasRenderedATailFallback), hasRenderedATailFallback = hasRenderedATailFallback.sibling;
            null === lastTailNode ? renderState.tail = null : lastTailNode.sibling = null;
            break;
          case "collapsed":
            lastTailNode = renderState.tail;
            for (var lastTailNode$113 = null; null !== lastTailNode; )
              null !== lastTailNode.alternate && (lastTailNode$113 = lastTailNode), lastTailNode = lastTailNode.sibling;
            null === lastTailNode$113 ? hasRenderedATailFallback || null === renderState.tail ? renderState.tail = null : renderState.tail.sibling = null : lastTailNode$113.sibling = null;
        }
    }
    function bubbleProperties(completedWork) {
      var didBailout = null !== completedWork.alternate && completedWork.alternate.child === completedWork.child, newChildLanes = 0, subtreeFlags = 0;
      if (didBailout)
        for (var child$114 = completedWork.child; null !== child$114; )
          newChildLanes |= child$114.lanes | child$114.childLanes, subtreeFlags |= child$114.subtreeFlags & 65011712, subtreeFlags |= child$114.flags & 65011712, child$114.return = completedWork, child$114 = child$114.sibling;
      else
        for (child$114 = completedWork.child; null !== child$114; )
          newChildLanes |= child$114.lanes | child$114.childLanes, subtreeFlags |= child$114.subtreeFlags, subtreeFlags |= child$114.flags, child$114.return = completedWork, child$114 = child$114.sibling;
      completedWork.subtreeFlags |= subtreeFlags;
      completedWork.childLanes = newChildLanes;
      return didBailout;
    }
    function completeWork(current, workInProgress2, renderLanes2) {
      var newProps = workInProgress2.pendingProps;
      popTreeContext(workInProgress2);
      switch (workInProgress2.tag) {
        case 31:
        case 16:
        case 15:
        case 0:
        case 11:
        case 7:
        case 8:
        case 12:
        case 9:
        case 14:
          return bubbleProperties(workInProgress2), null;
        case 1:
          return bubbleProperties(workInProgress2), null;
        case 3:
          renderLanes2 = workInProgress2.stateNode;
          newProps = null;
          null !== current && (newProps = current.memoizedState.cache);
          workInProgress2.memoizedState.cache !== newProps && (workInProgress2.flags |= 2048);
          popProvider(CacheContext);
          popHostContainer();
          renderLanes2.pendingContext && (renderLanes2.context = renderLanes2.pendingContext, renderLanes2.pendingContext = null);
          if (null === current || null === current.child)
            popHydrationState(workInProgress2) ? markUpdate(workInProgress2) : null === current || current.memoizedState.isDehydrated && 0 === (workInProgress2.flags & 256) || (workInProgress2.flags |= 1024, upgradeHydrationErrorsToRecoverable());
          bubbleProperties(workInProgress2);
          return null;
        case 26:
          return renderLanes2 = workInProgress2.memoizedState, null === current ? (markUpdate(workInProgress2), null !== renderLanes2 ? (bubbleProperties(workInProgress2), preloadResourceAndSuspendIfNeeded(workInProgress2, renderLanes2)) : (bubbleProperties(workInProgress2), workInProgress2.flags &= -16777217)) : renderLanes2 ? renderLanes2 !== current.memoizedState ? (markUpdate(workInProgress2), bubbleProperties(workInProgress2), preloadResourceAndSuspendIfNeeded(workInProgress2, renderLanes2)) : (bubbleProperties(workInProgress2), workInProgress2.flags &= -16777217) : (current.memoizedProps !== newProps && markUpdate(workInProgress2), bubbleProperties(workInProgress2), workInProgress2.flags &= -16777217), null;
        case 27:
          popHostContext(workInProgress2);
          renderLanes2 = rootInstanceStackCursor.current;
          var type = workInProgress2.type;
          if (null !== current && null != workInProgress2.stateNode)
            current.memoizedProps !== newProps && markUpdate(workInProgress2);
          else {
            if (!newProps) {
              if (null === workInProgress2.stateNode)
                throw Error(formatProdErrorMessage(166));
              bubbleProperties(workInProgress2);
              return null;
            }
            current = contextStackCursor.current;
            popHydrationState(workInProgress2) ? prepareToHydrateHostInstance(workInProgress2, current) : (current = resolveSingletonInstance(type, newProps, renderLanes2), workInProgress2.stateNode = current, markUpdate(workInProgress2));
          }
          bubbleProperties(workInProgress2);
          return null;
        case 5:
          popHostContext(workInProgress2);
          renderLanes2 = workInProgress2.type;
          if (null !== current && null != workInProgress2.stateNode)
            current.memoizedProps !== newProps && markUpdate(workInProgress2);
          else {
            if (!newProps) {
              if (null === workInProgress2.stateNode)
                throw Error(formatProdErrorMessage(166));
              bubbleProperties(workInProgress2);
              return null;
            }
            current = contextStackCursor.current;
            if (popHydrationState(workInProgress2))
              prepareToHydrateHostInstance(workInProgress2, current);
            else {
              type = getOwnerDocumentFromRootContainer(
                rootInstanceStackCursor.current
              );
              switch (current) {
                case 1:
                  current = type.createElementNS(
                    "http://www.w3.org/2000/svg",
                    renderLanes2
                  );
                  break;
                case 2:
                  current = type.createElementNS(
                    "http://www.w3.org/1998/Math/MathML",
                    renderLanes2
                  );
                  break;
                default:
                  switch (renderLanes2) {
                    case "svg":
                      current = type.createElementNS(
                        "http://www.w3.org/2000/svg",
                        renderLanes2
                      );
                      break;
                    case "math":
                      current = type.createElementNS(
                        "http://www.w3.org/1998/Math/MathML",
                        renderLanes2
                      );
                      break;
                    case "script":
                      current = type.createElement("div");
                      current.innerHTML = "<script></script>";
                      current = current.removeChild(current.firstChild);
                      break;
                    case "select":
                      current = "string" === typeof newProps.is ? type.createElement("select", { is: newProps.is }) : type.createElement("select");
                      newProps.multiple ? current.multiple = true : newProps.size && (current.size = newProps.size);
                      break;
                    default:
                      current = "string" === typeof newProps.is ? type.createElement(renderLanes2, { is: newProps.is }) : type.createElement(renderLanes2);
                  }
              }
              current[internalInstanceKey] = workInProgress2;
              current[internalPropsKey] = newProps;
              a: for (type = workInProgress2.child; null !== type; ) {
                if (5 === type.tag || 6 === type.tag)
                  current.appendChild(type.stateNode);
                else if (4 !== type.tag && 27 !== type.tag && null !== type.child) {
                  type.child.return = type;
                  type = type.child;
                  continue;
                }
                if (type === workInProgress2) break a;
                for (; null === type.sibling; ) {
                  if (null === type.return || type.return === workInProgress2)
                    break a;
                  type = type.return;
                }
                type.sibling.return = type.return;
                type = type.sibling;
              }
              workInProgress2.stateNode = current;
              a: switch (setInitialProperties(current, renderLanes2, newProps), renderLanes2) {
                case "button":
                case "input":
                case "select":
                case "textarea":
                  current = !!newProps.autoFocus;
                  break a;
                case "img":
                  current = true;
                  break a;
                default:
                  current = false;
              }
              current && markUpdate(workInProgress2);
            }
          }
          bubbleProperties(workInProgress2);
          workInProgress2.flags &= -16777217;
          return null;
        case 6:
          if (current && null != workInProgress2.stateNode)
            current.memoizedProps !== newProps && markUpdate(workInProgress2);
          else {
            if ("string" !== typeof newProps && null === workInProgress2.stateNode)
              throw Error(formatProdErrorMessage(166));
            current = rootInstanceStackCursor.current;
            if (popHydrationState(workInProgress2)) {
              current = workInProgress2.stateNode;
              renderLanes2 = workInProgress2.memoizedProps;
              newProps = null;
              type = hydrationParentFiber;
              if (null !== type)
                switch (type.tag) {
                  case 27:
                  case 5:
                    newProps = type.memoizedProps;
                }
              current[internalInstanceKey] = workInProgress2;
              current = current.nodeValue === renderLanes2 || null !== newProps && true === newProps.suppressHydrationWarning || checkForUnmatchedText(current.nodeValue, renderLanes2) ? true : false;
              current || throwOnHydrationMismatch(workInProgress2);
            } else
              current = getOwnerDocumentFromRootContainer(current).createTextNode(
                newProps
              ), current[internalInstanceKey] = workInProgress2, workInProgress2.stateNode = current;
          }
          bubbleProperties(workInProgress2);
          return null;
        case 13:
          newProps = workInProgress2.memoizedState;
          if (null === current || null !== current.memoizedState && null !== current.memoizedState.dehydrated) {
            type = popHydrationState(workInProgress2);
            if (null !== newProps && null !== newProps.dehydrated) {
              if (null === current) {
                if (!type) throw Error(formatProdErrorMessage(318));
                type = workInProgress2.memoizedState;
                type = null !== type ? type.dehydrated : null;
                if (!type) throw Error(formatProdErrorMessage(317));
                type[internalInstanceKey] = workInProgress2;
              } else
                resetHydrationState(), 0 === (workInProgress2.flags & 128) && (workInProgress2.memoizedState = null), workInProgress2.flags |= 4;
              bubbleProperties(workInProgress2);
              type = false;
            } else
              type = upgradeHydrationErrorsToRecoverable(), null !== current && null !== current.memoizedState && (current.memoizedState.hydrationErrors = type), type = true;
            if (!type) {
              if (workInProgress2.flags & 256)
                return popSuspenseHandler(workInProgress2), workInProgress2;
              popSuspenseHandler(workInProgress2);
              return null;
            }
          }
          popSuspenseHandler(workInProgress2);
          if (0 !== (workInProgress2.flags & 128))
            return workInProgress2.lanes = renderLanes2, workInProgress2;
          renderLanes2 = null !== newProps;
          current = null !== current && null !== current.memoizedState;
          if (renderLanes2) {
            newProps = workInProgress2.child;
            type = null;
            null !== newProps.alternate && null !== newProps.alternate.memoizedState && null !== newProps.alternate.memoizedState.cachePool && (type = newProps.alternate.memoizedState.cachePool.pool);
            var cache$127 = null;
            null !== newProps.memoizedState && null !== newProps.memoizedState.cachePool && (cache$127 = newProps.memoizedState.cachePool.pool);
            cache$127 !== type && (newProps.flags |= 2048);
          }
          renderLanes2 !== current && renderLanes2 && (workInProgress2.child.flags |= 8192);
          scheduleRetryEffect(workInProgress2, workInProgress2.updateQueue);
          bubbleProperties(workInProgress2);
          return null;
        case 4:
          return popHostContainer(), null === current && listenToAllSupportedEvents(workInProgress2.stateNode.containerInfo), bubbleProperties(workInProgress2), null;
        case 10:
          return popProvider(workInProgress2.type), bubbleProperties(workInProgress2), null;
        case 19:
          pop(suspenseStackCursor);
          type = workInProgress2.memoizedState;
          if (null === type) return bubbleProperties(workInProgress2), null;
          newProps = 0 !== (workInProgress2.flags & 128);
          cache$127 = type.rendering;
          if (null === cache$127)
            if (newProps) cutOffTailIfNeeded(type, false);
            else {
              if (0 !== workInProgressRootExitStatus || null !== current && 0 !== (current.flags & 128))
                for (current = workInProgress2.child; null !== current; ) {
                  cache$127 = findFirstSuspended(current);
                  if (null !== cache$127) {
                    workInProgress2.flags |= 128;
                    cutOffTailIfNeeded(type, false);
                    current = cache$127.updateQueue;
                    workInProgress2.updateQueue = current;
                    scheduleRetryEffect(workInProgress2, current);
                    workInProgress2.subtreeFlags = 0;
                    current = renderLanes2;
                    for (renderLanes2 = workInProgress2.child; null !== renderLanes2; )
                      resetWorkInProgress(renderLanes2, current), renderLanes2 = renderLanes2.sibling;
                    push(
                      suspenseStackCursor,
                      suspenseStackCursor.current & 1 | 2
                    );
                    return workInProgress2.child;
                  }
                  current = current.sibling;
                }
              null !== type.tail && now() > workInProgressRootRenderTargetTime && (workInProgress2.flags |= 128, newProps = true, cutOffTailIfNeeded(type, false), workInProgress2.lanes = 4194304);
            }
          else {
            if (!newProps)
              if (current = findFirstSuspended(cache$127), null !== current) {
                if (workInProgress2.flags |= 128, newProps = true, current = current.updateQueue, workInProgress2.updateQueue = current, scheduleRetryEffect(workInProgress2, current), cutOffTailIfNeeded(type, true), null === type.tail && "hidden" === type.tailMode && !cache$127.alternate && !isHydrating)
                  return bubbleProperties(workInProgress2), null;
              } else
                2 * now() - type.renderingStartTime > workInProgressRootRenderTargetTime && 536870912 !== renderLanes2 && (workInProgress2.flags |= 128, newProps = true, cutOffTailIfNeeded(type, false), workInProgress2.lanes = 4194304);
            type.isBackwards ? (cache$127.sibling = workInProgress2.child, workInProgress2.child = cache$127) : (current = type.last, null !== current ? current.sibling = cache$127 : workInProgress2.child = cache$127, type.last = cache$127);
          }
          if (null !== type.tail)
            return workInProgress2 = type.tail, type.rendering = workInProgress2, type.tail = workInProgress2.sibling, type.renderingStartTime = now(), workInProgress2.sibling = null, current = suspenseStackCursor.current, push(suspenseStackCursor, newProps ? current & 1 | 2 : current & 1), workInProgress2;
          bubbleProperties(workInProgress2);
          return null;
        case 22:
        case 23:
          return popSuspenseHandler(workInProgress2), popHiddenContext(), newProps = null !== workInProgress2.memoizedState, null !== current ? null !== current.memoizedState !== newProps && (workInProgress2.flags |= 8192) : newProps && (workInProgress2.flags |= 8192), newProps ? 0 !== (renderLanes2 & 536870912) && 0 === (workInProgress2.flags & 128) && (bubbleProperties(workInProgress2), workInProgress2.subtreeFlags & 6 && (workInProgress2.flags |= 8192)) : bubbleProperties(workInProgress2), renderLanes2 = workInProgress2.updateQueue, null !== renderLanes2 && scheduleRetryEffect(workInProgress2, renderLanes2.retryQueue), renderLanes2 = null, null !== current && null !== current.memoizedState && null !== current.memoizedState.cachePool && (renderLanes2 = current.memoizedState.cachePool.pool), newProps = null, null !== workInProgress2.memoizedState && null !== workInProgress2.memoizedState.cachePool && (newProps = workInProgress2.memoizedState.cachePool.pool), newProps !== renderLanes2 && (workInProgress2.flags |= 2048), null !== current && pop(resumedCache), null;
        case 24:
          return renderLanes2 = null, null !== current && (renderLanes2 = current.memoizedState.cache), workInProgress2.memoizedState.cache !== renderLanes2 && (workInProgress2.flags |= 2048), popProvider(CacheContext), bubbleProperties(workInProgress2), null;
        case 25:
          return null;
        case 30:
          return null;
      }
      throw Error(formatProdErrorMessage(156, workInProgress2.tag));
    }
    function unwindWork(current, workInProgress2) {
      popTreeContext(workInProgress2);
      switch (workInProgress2.tag) {
        case 1:
          return current = workInProgress2.flags, current & 65536 ? (workInProgress2.flags = current & -65537 | 128, workInProgress2) : null;
        case 3:
          return popProvider(CacheContext), popHostContainer(), current = workInProgress2.flags, 0 !== (current & 65536) && 0 === (current & 128) ? (workInProgress2.flags = current & -65537 | 128, workInProgress2) : null;
        case 26:
        case 27:
        case 5:
          return popHostContext(workInProgress2), null;
        case 13:
          popSuspenseHandler(workInProgress2);
          current = workInProgress2.memoizedState;
          if (null !== current && null !== current.dehydrated) {
            if (null === workInProgress2.alternate)
              throw Error(formatProdErrorMessage(340));
            resetHydrationState();
          }
          current = workInProgress2.flags;
          return current & 65536 ? (workInProgress2.flags = current & -65537 | 128, workInProgress2) : null;
        case 19:
          return pop(suspenseStackCursor), null;
        case 4:
          return popHostContainer(), null;
        case 10:
          return popProvider(workInProgress2.type), null;
        case 22:
        case 23:
          return popSuspenseHandler(workInProgress2), popHiddenContext(), null !== current && pop(resumedCache), current = workInProgress2.flags, current & 65536 ? (workInProgress2.flags = current & -65537 | 128, workInProgress2) : null;
        case 24:
          return popProvider(CacheContext), null;
        case 25:
          return null;
        default:
          return null;
      }
    }
    function unwindInterruptedWork(current, interruptedWork) {
      popTreeContext(interruptedWork);
      switch (interruptedWork.tag) {
        case 3:
          popProvider(CacheContext);
          popHostContainer();
          break;
        case 26:
        case 27:
        case 5:
          popHostContext(interruptedWork);
          break;
        case 4:
          popHostContainer();
          break;
        case 13:
          popSuspenseHandler(interruptedWork);
          break;
        case 19:
          pop(suspenseStackCursor);
          break;
        case 10:
          popProvider(interruptedWork.type);
          break;
        case 22:
        case 23:
          popSuspenseHandler(interruptedWork);
          popHiddenContext();
          null !== current && pop(resumedCache);
          break;
        case 24:
          popProvider(CacheContext);
      }
    }
    function commitHookEffectListMount(flags, finishedWork) {
      try {
        var updateQueue = finishedWork.updateQueue, lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
        if (null !== lastEffect) {
          var firstEffect = lastEffect.next;
          updateQueue = firstEffect;
          do {
            if ((updateQueue.tag & flags) === flags) {
              lastEffect = void 0;
              var create = updateQueue.create, inst = updateQueue.inst;
              lastEffect = create();
              inst.destroy = lastEffect;
            }
            updateQueue = updateQueue.next;
          } while (updateQueue !== firstEffect);
        }
      } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
      }
    }
    function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor$jscomp$0) {
      try {
        var updateQueue = finishedWork.updateQueue, lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
        if (null !== lastEffect) {
          var firstEffect = lastEffect.next;
          updateQueue = firstEffect;
          do {
            if ((updateQueue.tag & flags) === flags) {
              var inst = updateQueue.inst, destroy = inst.destroy;
              if (void 0 !== destroy) {
                inst.destroy = void 0;
                lastEffect = finishedWork;
                var nearestMountedAncestor = nearestMountedAncestor$jscomp$0, destroy_ = destroy;
                try {
                  destroy_();
                } catch (error) {
                  captureCommitPhaseError(
                    lastEffect,
                    nearestMountedAncestor,
                    error
                  );
                }
              }
            }
            updateQueue = updateQueue.next;
          } while (updateQueue !== firstEffect);
        }
      } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
      }
    }
    function commitClassCallbacks(finishedWork) {
      var updateQueue = finishedWork.updateQueue;
      if (null !== updateQueue) {
        var instance = finishedWork.stateNode;
        try {
          commitCallbacks(updateQueue, instance);
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
      }
    }
    function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {
      instance.props = resolveClassComponentProps(
        current.type,
        current.memoizedProps
      );
      instance.state = current.memoizedState;
      try {
        instance.componentWillUnmount();
      } catch (error) {
        captureCommitPhaseError(current, nearestMountedAncestor, error);
      }
    }
    function safelyAttachRef(current, nearestMountedAncestor) {
      try {
        var ref = current.ref;
        if (null !== ref) {
          switch (current.tag) {
            case 26:
            case 27:
            case 5:
              var instanceToUse = current.stateNode;
              break;
            case 30:
              instanceToUse = current.stateNode;
              break;
            default:
              instanceToUse = current.stateNode;
          }
          "function" === typeof ref ? current.refCleanup = ref(instanceToUse) : ref.current = instanceToUse;
        }
      } catch (error) {
        captureCommitPhaseError(current, nearestMountedAncestor, error);
      }
    }
    function safelyDetachRef(current, nearestMountedAncestor) {
      var ref = current.ref, refCleanup = current.refCleanup;
      if (null !== ref)
        if ("function" === typeof refCleanup)
          try {
            refCleanup();
          } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error);
          } finally {
            current.refCleanup = null, current = current.alternate, null != current && (current.refCleanup = null);
          }
        else if ("function" === typeof ref)
          try {
            ref(null);
          } catch (error$143) {
            captureCommitPhaseError(current, nearestMountedAncestor, error$143);
          }
        else ref.current = null;
    }
    function commitHostMount(finishedWork) {
      var type = finishedWork.type, props = finishedWork.memoizedProps, instance = finishedWork.stateNode;
      try {
        a: switch (type) {
          case "button":
          case "input":
          case "select":
          case "textarea":
            props.autoFocus && instance.focus();
            break a;
          case "img":
            props.src ? instance.src = props.src : props.srcSet && (instance.srcset = props.srcSet);
        }
      } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
      }
    }
    function commitHostUpdate(finishedWork, newProps, oldProps) {
      try {
        var domElement = finishedWork.stateNode;
        updateProperties(domElement, finishedWork.type, oldProps, newProps);
        domElement[internalPropsKey] = newProps;
      } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
      }
    }
    function isHostParent(fiber) {
      return 5 === fiber.tag || 3 === fiber.tag || 26 === fiber.tag || 27 === fiber.tag && isSingletonScope(fiber.type) || 4 === fiber.tag;
    }
    function getHostSibling(fiber) {
      a: for (; ; ) {
        for (; null === fiber.sibling; ) {
          if (null === fiber.return || isHostParent(fiber.return)) return null;
          fiber = fiber.return;
        }
        fiber.sibling.return = fiber.return;
        for (fiber = fiber.sibling; 5 !== fiber.tag && 6 !== fiber.tag && 18 !== fiber.tag; ) {
          if (27 === fiber.tag && isSingletonScope(fiber.type)) continue a;
          if (fiber.flags & 2) continue a;
          if (null === fiber.child || 4 === fiber.tag) continue a;
          else fiber.child.return = fiber, fiber = fiber.child;
        }
        if (!(fiber.flags & 2)) return fiber.stateNode;
      }
    }
    function insertOrAppendPlacementNodeIntoContainer(node2, before, parent) {
      var tag = node2.tag;
      if (5 === tag || 6 === tag)
        node2 = node2.stateNode, before ? (9 === parent.nodeType ? parent.body : "HTML" === parent.nodeName ? parent.ownerDocument.body : parent).insertBefore(node2, before) : (before = 9 === parent.nodeType ? parent.body : "HTML" === parent.nodeName ? parent.ownerDocument.body : parent, before.appendChild(node2), parent = parent._reactRootContainer, null !== parent && void 0 !== parent || null !== before.onclick || (before.onclick = noop$1));
      else if (4 !== tag && (27 === tag && isSingletonScope(node2.type) && (parent = node2.stateNode, before = null), node2 = node2.child, null !== node2))
        for (insertOrAppendPlacementNodeIntoContainer(node2, before, parent), node2 = node2.sibling; null !== node2; )
          insertOrAppendPlacementNodeIntoContainer(node2, before, parent), node2 = node2.sibling;
    }
    function insertOrAppendPlacementNode(node2, before, parent) {
      var tag = node2.tag;
      if (5 === tag || 6 === tag)
        node2 = node2.stateNode, before ? parent.insertBefore(node2, before) : parent.appendChild(node2);
      else if (4 !== tag && (27 === tag && isSingletonScope(node2.type) && (parent = node2.stateNode), node2 = node2.child, null !== node2))
        for (insertOrAppendPlacementNode(node2, before, parent), node2 = node2.sibling; null !== node2; )
          insertOrAppendPlacementNode(node2, before, parent), node2 = node2.sibling;
    }
    function commitHostSingletonAcquisition(finishedWork) {
      var singleton = finishedWork.stateNode, props = finishedWork.memoizedProps;
      try {
        for (var type = finishedWork.type, attributes = singleton.attributes; attributes.length; )
          singleton.removeAttributeNode(attributes[0]);
        setInitialProperties(singleton, type, props);
        singleton[internalInstanceKey] = finishedWork;
        singleton[internalPropsKey] = props;
      } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
      }
    }
    var offscreenSubtreeIsHidden = false;
    var offscreenSubtreeWasHidden = false;
    var needsFormReset = false;
    var PossiblyWeakSet = "function" === typeof WeakSet ? WeakSet : Set;
    var nextEffect = null;
    function commitBeforeMutationEffects(root2, firstChild) {
      root2 = root2.containerInfo;
      eventsEnabled = _enabled;
      root2 = getActiveElementDeep(root2);
      if (hasSelectionCapabilities(root2)) {
        if ("selectionStart" in root2)
          var JSCompiler_temp = {
            start: root2.selectionStart,
            end: root2.selectionEnd
          };
        else
          a: {
            JSCompiler_temp = (JSCompiler_temp = root2.ownerDocument) && JSCompiler_temp.defaultView || window;
            var selection = JSCompiler_temp.getSelection && JSCompiler_temp.getSelection();
            if (selection && 0 !== selection.rangeCount) {
              JSCompiler_temp = selection.anchorNode;
              var anchorOffset = selection.anchorOffset, focusNode = selection.focusNode;
              selection = selection.focusOffset;
              try {
                JSCompiler_temp.nodeType, focusNode.nodeType;
              } catch (e$20) {
                JSCompiler_temp = null;
                break a;
              }
              var length2 = 0, start = -1, end = -1, indexWithinAnchor = 0, indexWithinFocus = 0, node2 = root2, parentNode = null;
              b: for (; ; ) {
                for (var next2; ; ) {
                  node2 !== JSCompiler_temp || 0 !== anchorOffset && 3 !== node2.nodeType || (start = length2 + anchorOffset);
                  node2 !== focusNode || 0 !== selection && 3 !== node2.nodeType || (end = length2 + selection);
                  3 === node2.nodeType && (length2 += node2.nodeValue.length);
                  if (null === (next2 = node2.firstChild)) break;
                  parentNode = node2;
                  node2 = next2;
                }
                for (; ; ) {
                  if (node2 === root2) break b;
                  parentNode === JSCompiler_temp && ++indexWithinAnchor === anchorOffset && (start = length2);
                  parentNode === focusNode && ++indexWithinFocus === selection && (end = length2);
                  if (null !== (next2 = node2.nextSibling)) break;
                  node2 = parentNode;
                  parentNode = node2.parentNode;
                }
                node2 = next2;
              }
              JSCompiler_temp = -1 === start || -1 === end ? null : { start, end };
            } else JSCompiler_temp = null;
          }
        JSCompiler_temp = JSCompiler_temp || { start: 0, end: 0 };
      } else JSCompiler_temp = null;
      selectionInformation = { focusedElem: root2, selectionRange: JSCompiler_temp };
      _enabled = false;
      for (nextEffect = firstChild; null !== nextEffect; )
        if (firstChild = nextEffect, root2 = firstChild.child, 0 !== (firstChild.subtreeFlags & 1024) && null !== root2)
          root2.return = firstChild, nextEffect = root2;
        else
          for (; null !== nextEffect; ) {
            firstChild = nextEffect;
            focusNode = firstChild.alternate;
            root2 = firstChild.flags;
            switch (firstChild.tag) {
              case 0:
                break;
              case 11:
              case 15:
                break;
              case 1:
                if (0 !== (root2 & 1024) && null !== focusNode) {
                  root2 = void 0;
                  JSCompiler_temp = firstChild;
                  anchorOffset = focusNode.memoizedProps;
                  focusNode = focusNode.memoizedState;
                  selection = JSCompiler_temp.stateNode;
                  try {
                    var resolvedPrevProps = resolveClassComponentProps(
                      JSCompiler_temp.type,
                      anchorOffset,
                      JSCompiler_temp.elementType === JSCompiler_temp.type
                    );
                    root2 = selection.getSnapshotBeforeUpdate(
                      resolvedPrevProps,
                      focusNode
                    );
                    selection.__reactInternalSnapshotBeforeUpdate = root2;
                  } catch (error) {
                    captureCommitPhaseError(
                      JSCompiler_temp,
                      JSCompiler_temp.return,
                      error
                    );
                  }
                }
                break;
              case 3:
                if (0 !== (root2 & 1024)) {
                  if (root2 = firstChild.stateNode.containerInfo, JSCompiler_temp = root2.nodeType, 9 === JSCompiler_temp)
                    clearContainerSparingly(root2);
                  else if (1 === JSCompiler_temp)
                    switch (root2.nodeName) {
                      case "HEAD":
                      case "HTML":
                      case "BODY":
                        clearContainerSparingly(root2);
                        break;
                      default:
                        root2.textContent = "";
                    }
                }
                break;
              case 5:
              case 26:
              case 27:
              case 6:
              case 4:
              case 17:
                break;
              default:
                if (0 !== (root2 & 1024)) throw Error(formatProdErrorMessage(163));
            }
            root2 = firstChild.sibling;
            if (null !== root2) {
              root2.return = firstChild.return;
              nextEffect = root2;
              break;
            }
            nextEffect = firstChild.return;
          }
    }
    function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork) {
      var flags = finishedWork.flags;
      switch (finishedWork.tag) {
        case 0:
        case 11:
        case 15:
          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
          flags & 4 && commitHookEffectListMount(5, finishedWork);
          break;
        case 1:
          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
          if (flags & 4)
            if (finishedRoot = finishedWork.stateNode, null === current)
              try {
                finishedRoot.componentDidMount();
              } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
              }
            else {
              var prevProps = resolveClassComponentProps(
                finishedWork.type,
                current.memoizedProps
              );
              current = current.memoizedState;
              try {
                finishedRoot.componentDidUpdate(
                  prevProps,
                  current,
                  finishedRoot.__reactInternalSnapshotBeforeUpdate
                );
              } catch (error$142) {
                captureCommitPhaseError(
                  finishedWork,
                  finishedWork.return,
                  error$142
                );
              }
            }
          flags & 64 && commitClassCallbacks(finishedWork);
          flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
          break;
        case 3:
          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
          if (flags & 64 && (finishedRoot = finishedWork.updateQueue, null !== finishedRoot)) {
            current = null;
            if (null !== finishedWork.child)
              switch (finishedWork.child.tag) {
                case 27:
                case 5:
                  current = finishedWork.child.stateNode;
                  break;
                case 1:
                  current = finishedWork.child.stateNode;
              }
            try {
              commitCallbacks(finishedRoot, current);
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }
          break;
        case 27:
          null === current && flags & 4 && commitHostSingletonAcquisition(finishedWork);
        case 26:
        case 5:
          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
          null === current && flags & 4 && commitHostMount(finishedWork);
          flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
          break;
        case 12:
          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
          break;
        case 13:
          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
          flags & 4 && commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
          flags & 64 && (finishedRoot = finishedWork.memoizedState, null !== finishedRoot && (finishedRoot = finishedRoot.dehydrated, null !== finishedRoot && (finishedWork = retryDehydratedSuspenseBoundary.bind(
            null,
            finishedWork
          ), registerSuspenseInstanceRetry(finishedRoot, finishedWork))));
          break;
        case 22:
          flags = null !== finishedWork.memoizedState || offscreenSubtreeIsHidden;
          if (!flags) {
            current = null !== current && null !== current.memoizedState || offscreenSubtreeWasHidden;
            prevProps = offscreenSubtreeIsHidden;
            var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
            offscreenSubtreeIsHidden = flags;
            (offscreenSubtreeWasHidden = current) && !prevOffscreenSubtreeWasHidden ? recursivelyTraverseReappearLayoutEffects(
              finishedRoot,
              finishedWork,
              0 !== (finishedWork.subtreeFlags & 8772)
            ) : recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            offscreenSubtreeIsHidden = prevProps;
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
          }
          break;
        case 30:
          break;
        default:
          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
      }
    }
    function detachFiberAfterEffects(fiber) {
      var alternate = fiber.alternate;
      null !== alternate && (fiber.alternate = null, detachFiberAfterEffects(alternate));
      fiber.child = null;
      fiber.deletions = null;
      fiber.sibling = null;
      5 === fiber.tag && (alternate = fiber.stateNode, null !== alternate && detachDeletedInstance(alternate));
      fiber.stateNode = null;
      fiber.return = null;
      fiber.dependencies = null;
      fiber.memoizedProps = null;
      fiber.memoizedState = null;
      fiber.pendingProps = null;
      fiber.stateNode = null;
      fiber.updateQueue = null;
    }
    var hostParent = null;
    var hostParentIsContainer = false;
    function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
      for (parent = parent.child; null !== parent; )
        commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, parent), parent = parent.sibling;
    }
    function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
      if (injectedHook && "function" === typeof injectedHook.onCommitFiberUnmount)
        try {
          injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);
        } catch (err) {
        }
      switch (deletedFiber.tag) {
        case 26:
          offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
          recursivelyTraverseDeletionEffects(
            finishedRoot,
            nearestMountedAncestor,
            deletedFiber
          );
          deletedFiber.memoizedState ? deletedFiber.memoizedState.count-- : deletedFiber.stateNode && (deletedFiber = deletedFiber.stateNode, deletedFiber.parentNode.removeChild(deletedFiber));
          break;
        case 27:
          offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
          var prevHostParent = hostParent, prevHostParentIsContainer = hostParentIsContainer;
          isSingletonScope(deletedFiber.type) && (hostParent = deletedFiber.stateNode, hostParentIsContainer = false);
          recursivelyTraverseDeletionEffects(
            finishedRoot,
            nearestMountedAncestor,
            deletedFiber
          );
          releaseSingletonInstance(deletedFiber.stateNode);
          hostParent = prevHostParent;
          hostParentIsContainer = prevHostParentIsContainer;
          break;
        case 5:
          offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
        case 6:
          prevHostParent = hostParent;
          prevHostParentIsContainer = hostParentIsContainer;
          hostParent = null;
          recursivelyTraverseDeletionEffects(
            finishedRoot,
            nearestMountedAncestor,
            deletedFiber
          );
          hostParent = prevHostParent;
          hostParentIsContainer = prevHostParentIsContainer;
          if (null !== hostParent)
            if (hostParentIsContainer)
              try {
                (9 === hostParent.nodeType ? hostParent.body : "HTML" === hostParent.nodeName ? hostParent.ownerDocument.body : hostParent).removeChild(deletedFiber.stateNode);
              } catch (error) {
                captureCommitPhaseError(
                  deletedFiber,
                  nearestMountedAncestor,
                  error
                );
              }
            else
              try {
                hostParent.removeChild(deletedFiber.stateNode);
              } catch (error) {
                captureCommitPhaseError(
                  deletedFiber,
                  nearestMountedAncestor,
                  error
                );
              }
          break;
        case 18:
          null !== hostParent && (hostParentIsContainer ? (finishedRoot = hostParent, clearSuspenseBoundary(
            9 === finishedRoot.nodeType ? finishedRoot.body : "HTML" === finishedRoot.nodeName ? finishedRoot.ownerDocument.body : finishedRoot,
            deletedFiber.stateNode
          ), retryIfBlockedOn(finishedRoot)) : clearSuspenseBoundary(hostParent, deletedFiber.stateNode));
          break;
        case 4:
          prevHostParent = hostParent;
          prevHostParentIsContainer = hostParentIsContainer;
          hostParent = deletedFiber.stateNode.containerInfo;
          hostParentIsContainer = true;
          recursivelyTraverseDeletionEffects(
            finishedRoot,
            nearestMountedAncestor,
            deletedFiber
          );
          hostParent = prevHostParent;
          hostParentIsContainer = prevHostParentIsContainer;
          break;
        case 0:
        case 11:
        case 14:
        case 15:
          offscreenSubtreeWasHidden || commitHookEffectListUnmount(2, deletedFiber, nearestMountedAncestor);
          offscreenSubtreeWasHidden || commitHookEffectListUnmount(4, deletedFiber, nearestMountedAncestor);
          recursivelyTraverseDeletionEffects(
            finishedRoot,
            nearestMountedAncestor,
            deletedFiber
          );
          break;
        case 1:
          offscreenSubtreeWasHidden || (safelyDetachRef(deletedFiber, nearestMountedAncestor), prevHostParent = deletedFiber.stateNode, "function" === typeof prevHostParent.componentWillUnmount && safelyCallComponentWillUnmount(
            deletedFiber,
            nearestMountedAncestor,
            prevHostParent
          ));
          recursivelyTraverseDeletionEffects(
            finishedRoot,
            nearestMountedAncestor,
            deletedFiber
          );
          break;
        case 21:
          recursivelyTraverseDeletionEffects(
            finishedRoot,
            nearestMountedAncestor,
            deletedFiber
          );
          break;
        case 22:
          offscreenSubtreeWasHidden = (prevHostParent = offscreenSubtreeWasHidden) || null !== deletedFiber.memoizedState;
          recursivelyTraverseDeletionEffects(
            finishedRoot,
            nearestMountedAncestor,
            deletedFiber
          );
          offscreenSubtreeWasHidden = prevHostParent;
          break;
        default:
          recursivelyTraverseDeletionEffects(
            finishedRoot,
            nearestMountedAncestor,
            deletedFiber
          );
      }
    }
    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
      if (null === finishedWork.memoizedState && (finishedRoot = finishedWork.alternate, null !== finishedRoot && (finishedRoot = finishedRoot.memoizedState, null !== finishedRoot && (finishedRoot = finishedRoot.dehydrated, null !== finishedRoot))))
        try {
          retryIfBlockedOn(finishedRoot);
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
    }
    function getRetryCache(finishedWork) {
      switch (finishedWork.tag) {
        case 13:
        case 19:
          var retryCache = finishedWork.stateNode;
          null === retryCache && (retryCache = finishedWork.stateNode = new PossiblyWeakSet());
          return retryCache;
        case 22:
          return finishedWork = finishedWork.stateNode, retryCache = finishedWork._retryCache, null === retryCache && (retryCache = finishedWork._retryCache = new PossiblyWeakSet()), retryCache;
        default:
          throw Error(formatProdErrorMessage(435, finishedWork.tag));
      }
    }
    function attachSuspenseRetryListeners(finishedWork, wakeables) {
      var retryCache = getRetryCache(finishedWork);
      wakeables.forEach(function(wakeable) {
        var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
        retryCache.has(wakeable) || (retryCache.add(wakeable), wakeable.then(retry, retry));
      });
    }
    function recursivelyTraverseMutationEffects(root$jscomp$0, parentFiber) {
      var deletions = parentFiber.deletions;
      if (null !== deletions)
        for (var i = 0; i < deletions.length; i++) {
          var childToDelete = deletions[i], root2 = root$jscomp$0, returnFiber = parentFiber, parent = returnFiber;
          a: for (; null !== parent; ) {
            switch (parent.tag) {
              case 27:
                if (isSingletonScope(parent.type)) {
                  hostParent = parent.stateNode;
                  hostParentIsContainer = false;
                  break a;
                }
                break;
              case 5:
                hostParent = parent.stateNode;
                hostParentIsContainer = false;
                break a;
              case 3:
              case 4:
                hostParent = parent.stateNode.containerInfo;
                hostParentIsContainer = true;
                break a;
            }
            parent = parent.return;
          }
          if (null === hostParent) throw Error(formatProdErrorMessage(160));
          commitDeletionEffectsOnFiber(root2, returnFiber, childToDelete);
          hostParent = null;
          hostParentIsContainer = false;
          root2 = childToDelete.alternate;
          null !== root2 && (root2.return = null);
          childToDelete.return = null;
        }
      if (parentFiber.subtreeFlags & 13878)
        for (parentFiber = parentFiber.child; null !== parentFiber; )
          commitMutationEffectsOnFiber(parentFiber, root$jscomp$0), parentFiber = parentFiber.sibling;
    }
    var currentHoistableRoot = null;
    function commitMutationEffectsOnFiber(finishedWork, root2) {
      var current = finishedWork.alternate, flags = finishedWork.flags;
      switch (finishedWork.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          flags & 4 && (commitHookEffectListUnmount(3, finishedWork, finishedWork.return), commitHookEffectListMount(3, finishedWork), commitHookEffectListUnmount(5, finishedWork, finishedWork.return));
          break;
        case 1:
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
          flags & 64 && offscreenSubtreeIsHidden && (finishedWork = finishedWork.updateQueue, null !== finishedWork && (flags = finishedWork.callbacks, null !== flags && (current = finishedWork.shared.hiddenCallbacks, finishedWork.shared.hiddenCallbacks = null === current ? flags : current.concat(flags))));
          break;
        case 26:
          var hoistableRoot = currentHoistableRoot;
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
          if (flags & 4) {
            var currentResource = null !== current ? current.memoizedState : null;
            flags = finishedWork.memoizedState;
            if (null === current)
              if (null === flags)
                if (null === finishedWork.stateNode) {
                  a: {
                    flags = finishedWork.type;
                    current = finishedWork.memoizedProps;
                    hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
                    b: switch (flags) {
                      case "title":
                        currentResource = hoistableRoot.getElementsByTagName("title")[0];
                        if (!currentResource || currentResource[internalHoistableMarker] || currentResource[internalInstanceKey] || "http://www.w3.org/2000/svg" === currentResource.namespaceURI || currentResource.hasAttribute("itemprop"))
                          currentResource = hoistableRoot.createElement(flags), hoistableRoot.head.insertBefore(
                            currentResource,
                            hoistableRoot.querySelector("head > title")
                          );
                        setInitialProperties(currentResource, flags, current);
                        currentResource[internalInstanceKey] = finishedWork;
                        markNodeAsHoistable(currentResource);
                        flags = currentResource;
                        break a;
                      case "link":
                        var maybeNodes = getHydratableHoistableCache(
                          "link",
                          "href",
                          hoistableRoot
                        ).get(flags + (current.href || ""));
                        if (maybeNodes) {
                          for (var i = 0; i < maybeNodes.length; i++)
                            if (currentResource = maybeNodes[i], currentResource.getAttribute("href") === (null == current.href || "" === current.href ? null : current.href) && currentResource.getAttribute("rel") === (null == current.rel ? null : current.rel) && currentResource.getAttribute("title") === (null == current.title ? null : current.title) && currentResource.getAttribute("crossorigin") === (null == current.crossOrigin ? null : current.crossOrigin)) {
                              maybeNodes.splice(i, 1);
                              break b;
                            }
                        }
                        currentResource = hoistableRoot.createElement(flags);
                        setInitialProperties(currentResource, flags, current);
                        hoistableRoot.head.appendChild(currentResource);
                        break;
                      case "meta":
                        if (maybeNodes = getHydratableHoistableCache(
                          "meta",
                          "content",
                          hoistableRoot
                        ).get(flags + (current.content || ""))) {
                          for (i = 0; i < maybeNodes.length; i++)
                            if (currentResource = maybeNodes[i], currentResource.getAttribute("content") === (null == current.content ? null : "" + current.content) && currentResource.getAttribute("name") === (null == current.name ? null : current.name) && currentResource.getAttribute("property") === (null == current.property ? null : current.property) && currentResource.getAttribute("http-equiv") === (null == current.httpEquiv ? null : current.httpEquiv) && currentResource.getAttribute("charset") === (null == current.charSet ? null : current.charSet)) {
                              maybeNodes.splice(i, 1);
                              break b;
                            }
                        }
                        currentResource = hoistableRoot.createElement(flags);
                        setInitialProperties(currentResource, flags, current);
                        hoistableRoot.head.appendChild(currentResource);
                        break;
                      default:
                        throw Error(formatProdErrorMessage(468, flags));
                    }
                    currentResource[internalInstanceKey] = finishedWork;
                    markNodeAsHoistable(currentResource);
                    flags = currentResource;
                  }
                  finishedWork.stateNode = flags;
                } else
                  mountHoistable(
                    hoistableRoot,
                    finishedWork.type,
                    finishedWork.stateNode
                  );
              else
                finishedWork.stateNode = acquireResource(
                  hoistableRoot,
                  flags,
                  finishedWork.memoizedProps
                );
            else
              currentResource !== flags ? (null === currentResource ? null !== current.stateNode && (current = current.stateNode, current.parentNode.removeChild(current)) : currentResource.count--, null === flags ? mountHoistable(
                hoistableRoot,
                finishedWork.type,
                finishedWork.stateNode
              ) : acquireResource(
                hoistableRoot,
                flags,
                finishedWork.memoizedProps
              )) : null === flags && null !== finishedWork.stateNode && commitHostUpdate(
                finishedWork,
                finishedWork.memoizedProps,
                current.memoizedProps
              );
          }
          break;
        case 27:
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
          null !== current && flags & 4 && commitHostUpdate(
            finishedWork,
            finishedWork.memoizedProps,
            current.memoizedProps
          );
          break;
        case 5:
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
          if (finishedWork.flags & 32) {
            hoistableRoot = finishedWork.stateNode;
            try {
              setTextContent(hoistableRoot, "");
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }
          flags & 4 && null != finishedWork.stateNode && (hoistableRoot = finishedWork.memoizedProps, commitHostUpdate(
            finishedWork,
            hoistableRoot,
            null !== current ? current.memoizedProps : hoistableRoot
          ));
          flags & 1024 && (needsFormReset = true);
          break;
        case 6:
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          if (flags & 4) {
            if (null === finishedWork.stateNode)
              throw Error(formatProdErrorMessage(162));
            flags = finishedWork.memoizedProps;
            current = finishedWork.stateNode;
            try {
              current.nodeValue = flags;
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }
          break;
        case 3:
          tagCaches = null;
          hoistableRoot = currentHoistableRoot;
          currentHoistableRoot = getHoistableRoot(root2.containerInfo);
          recursivelyTraverseMutationEffects(root2, finishedWork);
          currentHoistableRoot = hoistableRoot;
          commitReconciliationEffects(finishedWork);
          if (flags & 4 && null !== current && current.memoizedState.isDehydrated)
            try {
              retryIfBlockedOn(root2.containerInfo);
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          needsFormReset && (needsFormReset = false, recursivelyResetForms(finishedWork));
          break;
        case 4:
          flags = currentHoistableRoot;
          currentHoistableRoot = getHoistableRoot(
            finishedWork.stateNode.containerInfo
          );
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          currentHoistableRoot = flags;
          break;
        case 12:
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          break;
        case 13:
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          finishedWork.child.flags & 8192 && null !== finishedWork.memoizedState !== (null !== current && null !== current.memoizedState) && (globalMostRecentFallbackTime = now());
          flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
          break;
        case 22:
          hoistableRoot = null !== finishedWork.memoizedState;
          var wasHidden = null !== current && null !== current.memoizedState, prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden, prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
          offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden || hoistableRoot;
          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || wasHidden;
          recursivelyTraverseMutationEffects(root2, finishedWork);
          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
          offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
          commitReconciliationEffects(finishedWork);
          if (flags & 8192)
            a: for (root2 = finishedWork.stateNode, root2._visibility = hoistableRoot ? root2._visibility & -2 : root2._visibility | 1, hoistableRoot && (null === current || wasHidden || offscreenSubtreeIsHidden || offscreenSubtreeWasHidden || recursivelyTraverseDisappearLayoutEffects(finishedWork)), current = null, root2 = finishedWork; ; ) {
              if (5 === root2.tag || 26 === root2.tag) {
                if (null === current) {
                  wasHidden = current = root2;
                  try {
                    if (currentResource = wasHidden.stateNode, hoistableRoot)
                      maybeNodes = currentResource.style, "function" === typeof maybeNodes.setProperty ? maybeNodes.setProperty("display", "none", "important") : maybeNodes.display = "none";
                    else {
                      i = wasHidden.stateNode;
                      var styleProp = wasHidden.memoizedProps.style, display = void 0 !== styleProp && null !== styleProp && styleProp.hasOwnProperty("display") ? styleProp.display : null;
                      i.style.display = null == display || "boolean" === typeof display ? "" : ("" + display).trim();
                    }
                  } catch (error) {
                    captureCommitPhaseError(wasHidden, wasHidden.return, error);
                  }
                }
              } else if (6 === root2.tag) {
                if (null === current) {
                  wasHidden = root2;
                  try {
                    wasHidden.stateNode.nodeValue = hoistableRoot ? "" : wasHidden.memoizedProps;
                  } catch (error) {
                    captureCommitPhaseError(wasHidden, wasHidden.return, error);
                  }
                }
              } else if ((22 !== root2.tag && 23 !== root2.tag || null === root2.memoizedState || root2 === finishedWork) && null !== root2.child) {
                root2.child.return = root2;
                root2 = root2.child;
                continue;
              }
              if (root2 === finishedWork) break a;
              for (; null === root2.sibling; ) {
                if (null === root2.return || root2.return === finishedWork) break a;
                current === root2 && (current = null);
                root2 = root2.return;
              }
              current === root2 && (current = null);
              root2.sibling.return = root2.return;
              root2 = root2.sibling;
            }
          flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (current = flags.retryQueue, null !== current && (flags.retryQueue = null, attachSuspenseRetryListeners(finishedWork, current))));
          break;
        case 19:
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
          break;
        case 30:
          break;
        case 21:
          break;
        default:
          recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork);
      }
    }
    function commitReconciliationEffects(finishedWork) {
      var flags = finishedWork.flags;
      if (flags & 2) {
        try {
          for (var hostParentFiber, parentFiber = finishedWork.return; null !== parentFiber; ) {
            if (isHostParent(parentFiber)) {
              hostParentFiber = parentFiber;
              break;
            }
            parentFiber = parentFiber.return;
          }
          if (null == hostParentFiber) throw Error(formatProdErrorMessage(160));
          switch (hostParentFiber.tag) {
            case 27:
              var parent = hostParentFiber.stateNode, before = getHostSibling(finishedWork);
              insertOrAppendPlacementNode(finishedWork, before, parent);
              break;
            case 5:
              var parent$144 = hostParentFiber.stateNode;
              hostParentFiber.flags & 32 && (setTextContent(parent$144, ""), hostParentFiber.flags &= -33);
              var before$145 = getHostSibling(finishedWork);
              insertOrAppendPlacementNode(finishedWork, before$145, parent$144);
              break;
            case 3:
            case 4:
              var parent$146 = hostParentFiber.stateNode.containerInfo, before$147 = getHostSibling(finishedWork);
              insertOrAppendPlacementNodeIntoContainer(
                finishedWork,
                before$147,
                parent$146
              );
              break;
            default:
              throw Error(formatProdErrorMessage(161));
          }
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
        finishedWork.flags &= -3;
      }
      flags & 4096 && (finishedWork.flags &= -4097);
    }
    function recursivelyResetForms(parentFiber) {
      if (parentFiber.subtreeFlags & 1024)
        for (parentFiber = parentFiber.child; null !== parentFiber; ) {
          var fiber = parentFiber;
          recursivelyResetForms(fiber);
          5 === fiber.tag && fiber.flags & 1024 && fiber.stateNode.reset();
          parentFiber = parentFiber.sibling;
        }
    }
    function recursivelyTraverseLayoutEffects(root2, parentFiber) {
      if (parentFiber.subtreeFlags & 8772)
        for (parentFiber = parentFiber.child; null !== parentFiber; )
          commitLayoutEffectOnFiber(root2, parentFiber.alternate, parentFiber), parentFiber = parentFiber.sibling;
    }
    function recursivelyTraverseDisappearLayoutEffects(parentFiber) {
      for (parentFiber = parentFiber.child; null !== parentFiber; ) {
        var finishedWork = parentFiber;
        switch (finishedWork.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
            commitHookEffectListUnmount(4, finishedWork, finishedWork.return);
            recursivelyTraverseDisappearLayoutEffects(finishedWork);
            break;
          case 1:
            safelyDetachRef(finishedWork, finishedWork.return);
            var instance = finishedWork.stateNode;
            "function" === typeof instance.componentWillUnmount && safelyCallComponentWillUnmount(
              finishedWork,
              finishedWork.return,
              instance
            );
            recursivelyTraverseDisappearLayoutEffects(finishedWork);
            break;
          case 27:
            releaseSingletonInstance(finishedWork.stateNode);
          case 26:
          case 5:
            safelyDetachRef(finishedWork, finishedWork.return);
            recursivelyTraverseDisappearLayoutEffects(finishedWork);
            break;
          case 22:
            null === finishedWork.memoizedState && recursivelyTraverseDisappearLayoutEffects(finishedWork);
            break;
          case 30:
            recursivelyTraverseDisappearLayoutEffects(finishedWork);
            break;
          default:
            recursivelyTraverseDisappearLayoutEffects(finishedWork);
        }
        parentFiber = parentFiber.sibling;
      }
    }
    function recursivelyTraverseReappearLayoutEffects(finishedRoot$jscomp$0, parentFiber, includeWorkInProgressEffects) {
      includeWorkInProgressEffects = includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 8772);
      for (parentFiber = parentFiber.child; null !== parentFiber; ) {
        var current = parentFiber.alternate, finishedRoot = finishedRoot$jscomp$0, finishedWork = parentFiber, flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case 0:
          case 11:
          case 15:
            recursivelyTraverseReappearLayoutEffects(
              finishedRoot,
              finishedWork,
              includeWorkInProgressEffects
            );
            commitHookEffectListMount(4, finishedWork);
            break;
          case 1:
            recursivelyTraverseReappearLayoutEffects(
              finishedRoot,
              finishedWork,
              includeWorkInProgressEffects
            );
            current = finishedWork;
            finishedRoot = current.stateNode;
            if ("function" === typeof finishedRoot.componentDidMount)
              try {
                finishedRoot.componentDidMount();
              } catch (error) {
                captureCommitPhaseError(current, current.return, error);
              }
            current = finishedWork;
            finishedRoot = current.updateQueue;
            if (null !== finishedRoot) {
              var instance = current.stateNode;
              try {
                var hiddenCallbacks = finishedRoot.shared.hiddenCallbacks;
                if (null !== hiddenCallbacks)
                  for (finishedRoot.shared.hiddenCallbacks = null, finishedRoot = 0; finishedRoot < hiddenCallbacks.length; finishedRoot++)
                    callCallback(hiddenCallbacks[finishedRoot], instance);
              } catch (error) {
                captureCommitPhaseError(current, current.return, error);
              }
            }
            includeWorkInProgressEffects && flags & 64 && commitClassCallbacks(finishedWork);
            safelyAttachRef(finishedWork, finishedWork.return);
            break;
          case 27:
            commitHostSingletonAcquisition(finishedWork);
          case 26:
          case 5:
            recursivelyTraverseReappearLayoutEffects(
              finishedRoot,
              finishedWork,
              includeWorkInProgressEffects
            );
            includeWorkInProgressEffects && null === current && flags & 4 && commitHostMount(finishedWork);
            safelyAttachRef(finishedWork, finishedWork.return);
            break;
          case 12:
            recursivelyTraverseReappearLayoutEffects(
              finishedRoot,
              finishedWork,
              includeWorkInProgressEffects
            );
            break;
          case 13:
            recursivelyTraverseReappearLayoutEffects(
              finishedRoot,
              finishedWork,
              includeWorkInProgressEffects
            );
            includeWorkInProgressEffects && flags & 4 && commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
            break;
          case 22:
            null === finishedWork.memoizedState && recursivelyTraverseReappearLayoutEffects(
              finishedRoot,
              finishedWork,
              includeWorkInProgressEffects
            );
            safelyAttachRef(finishedWork, finishedWork.return);
            break;
          case 30:
            break;
          default:
            recursivelyTraverseReappearLayoutEffects(
              finishedRoot,
              finishedWork,
              includeWorkInProgressEffects
            );
        }
        parentFiber = parentFiber.sibling;
      }
    }
    function commitOffscreenPassiveMountEffects(current, finishedWork) {
      var previousCache = null;
      null !== current && null !== current.memoizedState && null !== current.memoizedState.cachePool && (previousCache = current.memoizedState.cachePool.pool);
      current = null;
      null !== finishedWork.memoizedState && null !== finishedWork.memoizedState.cachePool && (current = finishedWork.memoizedState.cachePool.pool);
      current !== previousCache && (null != current && current.refCount++, null != previousCache && releaseCache(previousCache));
    }
    function commitCachePassiveMountEffect(current, finishedWork) {
      current = null;
      null !== finishedWork.alternate && (current = finishedWork.alternate.memoizedState.cache);
      finishedWork = finishedWork.memoizedState.cache;
      finishedWork !== current && (finishedWork.refCount++, null != current && releaseCache(current));
    }
    function recursivelyTraversePassiveMountEffects(root2, parentFiber, committedLanes, committedTransitions) {
      if (parentFiber.subtreeFlags & 10256)
        for (parentFiber = parentFiber.child; null !== parentFiber; )
          commitPassiveMountOnFiber(
            root2,
            parentFiber,
            committedLanes,
            committedTransitions
          ), parentFiber = parentFiber.sibling;
    }
    function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
      var flags = finishedWork.flags;
      switch (finishedWork.tag) {
        case 0:
        case 11:
        case 15:
          recursivelyTraversePassiveMountEffects(
            finishedRoot,
            finishedWork,
            committedLanes,
            committedTransitions
          );
          flags & 2048 && commitHookEffectListMount(9, finishedWork);
          break;
        case 1:
          recursivelyTraversePassiveMountEffects(
            finishedRoot,
            finishedWork,
            committedLanes,
            committedTransitions
          );
          break;
        case 3:
          recursivelyTraversePassiveMountEffects(
            finishedRoot,
            finishedWork,
            committedLanes,
            committedTransitions
          );
          flags & 2048 && (finishedRoot = null, null !== finishedWork.alternate && (finishedRoot = finishedWork.alternate.memoizedState.cache), finishedWork = finishedWork.memoizedState.cache, finishedWork !== finishedRoot && (finishedWork.refCount++, null != finishedRoot && releaseCache(finishedRoot)));
          break;
        case 12:
          if (flags & 2048) {
            recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            );
            finishedRoot = finishedWork.stateNode;
            try {
              var _finishedWork$memoize2 = finishedWork.memoizedProps, id = _finishedWork$memoize2.id, onPostCommit = _finishedWork$memoize2.onPostCommit;
              "function" === typeof onPostCommit && onPostCommit(
                id,
                null === finishedWork.alternate ? "mount" : "update",
                finishedRoot.passiveEffectDuration,
                -0
              );
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          } else
            recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            );
          break;
        case 13:
          recursivelyTraversePassiveMountEffects(
            finishedRoot,
            finishedWork,
            committedLanes,
            committedTransitions
          );
          break;
        case 23:
          break;
        case 22:
          _finishedWork$memoize2 = finishedWork.stateNode;
          id = finishedWork.alternate;
          null !== finishedWork.memoizedState ? _finishedWork$memoize2._visibility & 2 ? recursivelyTraversePassiveMountEffects(
            finishedRoot,
            finishedWork,
            committedLanes,
            committedTransitions
          ) : recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork) : _finishedWork$memoize2._visibility & 2 ? recursivelyTraversePassiveMountEffects(
            finishedRoot,
            finishedWork,
            committedLanes,
            committedTransitions
          ) : (_finishedWork$memoize2._visibility |= 2, recursivelyTraverseReconnectPassiveEffects(
            finishedRoot,
            finishedWork,
            committedLanes,
            committedTransitions,
            0 !== (finishedWork.subtreeFlags & 10256)
          ));
          flags & 2048 && commitOffscreenPassiveMountEffects(id, finishedWork);
          break;
        case 24:
          recursivelyTraversePassiveMountEffects(
            finishedRoot,
            finishedWork,
            committedLanes,
            committedTransitions
          );
          flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
          break;
        default:
          recursivelyTraversePassiveMountEffects(
            finishedRoot,
            finishedWork,
            committedLanes,
            committedTransitions
          );
      }
    }
    function recursivelyTraverseReconnectPassiveEffects(finishedRoot$jscomp$0, parentFiber, committedLanes$jscomp$0, committedTransitions$jscomp$0, includeWorkInProgressEffects) {
      includeWorkInProgressEffects = includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 10256);
      for (parentFiber = parentFiber.child; null !== parentFiber; ) {
        var finishedRoot = finishedRoot$jscomp$0, finishedWork = parentFiber, committedLanes = committedLanes$jscomp$0, committedTransitions = committedTransitions$jscomp$0, flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case 0:
          case 11:
          case 15:
            recursivelyTraverseReconnectPassiveEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions,
              includeWorkInProgressEffects
            );
            commitHookEffectListMount(8, finishedWork);
            break;
          case 23:
            break;
          case 22:
            var instance = finishedWork.stateNode;
            null !== finishedWork.memoizedState ? instance._visibility & 2 ? recursivelyTraverseReconnectPassiveEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions,
              includeWorkInProgressEffects
            ) : recursivelyTraverseAtomicPassiveEffects(
              finishedRoot,
              finishedWork
            ) : (instance._visibility |= 2, recursivelyTraverseReconnectPassiveEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions,
              includeWorkInProgressEffects
            ));
            includeWorkInProgressEffects && flags & 2048 && commitOffscreenPassiveMountEffects(
              finishedWork.alternate,
              finishedWork
            );
            break;
          case 24:
            recursivelyTraverseReconnectPassiveEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions,
              includeWorkInProgressEffects
            );
            includeWorkInProgressEffects && flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
            break;
          default:
            recursivelyTraverseReconnectPassiveEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions,
              includeWorkInProgressEffects
            );
        }
        parentFiber = parentFiber.sibling;
      }
    }
    function recursivelyTraverseAtomicPassiveEffects(finishedRoot$jscomp$0, parentFiber) {
      if (parentFiber.subtreeFlags & 10256)
        for (parentFiber = parentFiber.child; null !== parentFiber; ) {
          var finishedRoot = finishedRoot$jscomp$0, finishedWork = parentFiber, flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case 22:
              recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
              flags & 2048 && commitOffscreenPassiveMountEffects(
                finishedWork.alternate,
                finishedWork
              );
              break;
            case 24:
              recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
              flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
              break;
            default:
              recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
          }
          parentFiber = parentFiber.sibling;
        }
    }
    var suspenseyCommitFlag = 8192;
    function recursivelyAccumulateSuspenseyCommit(parentFiber) {
      if (parentFiber.subtreeFlags & suspenseyCommitFlag)
        for (parentFiber = parentFiber.child; null !== parentFiber; )
          accumulateSuspenseyCommitOnFiber(parentFiber), parentFiber = parentFiber.sibling;
    }
    function accumulateSuspenseyCommitOnFiber(fiber) {
      switch (fiber.tag) {
        case 26:
          recursivelyAccumulateSuspenseyCommit(fiber);
          fiber.flags & suspenseyCommitFlag && null !== fiber.memoizedState && suspendResource(
            currentHoistableRoot,
            fiber.memoizedState,
            fiber.memoizedProps
          );
          break;
        case 5:
          recursivelyAccumulateSuspenseyCommit(fiber);
          break;
        case 3:
        case 4:
          var previousHoistableRoot = currentHoistableRoot;
          currentHoistableRoot = getHoistableRoot(fiber.stateNode.containerInfo);
          recursivelyAccumulateSuspenseyCommit(fiber);
          currentHoistableRoot = previousHoistableRoot;
          break;
        case 22:
          null === fiber.memoizedState && (previousHoistableRoot = fiber.alternate, null !== previousHoistableRoot && null !== previousHoistableRoot.memoizedState ? (previousHoistableRoot = suspenseyCommitFlag, suspenseyCommitFlag = 16777216, recursivelyAccumulateSuspenseyCommit(fiber), suspenseyCommitFlag = previousHoistableRoot) : recursivelyAccumulateSuspenseyCommit(fiber));
          break;
        default:
          recursivelyAccumulateSuspenseyCommit(fiber);
      }
    }
    function detachAlternateSiblings(parentFiber) {
      var previousFiber = parentFiber.alternate;
      if (null !== previousFiber && (parentFiber = previousFiber.child, null !== parentFiber)) {
        previousFiber.child = null;
        do
          previousFiber = parentFiber.sibling, parentFiber.sibling = null, parentFiber = previousFiber;
        while (null !== parentFiber);
      }
    }
    function recursivelyTraversePassiveUnmountEffects(parentFiber) {
      var deletions = parentFiber.deletions;
      if (0 !== (parentFiber.flags & 16)) {
        if (null !== deletions)
          for (var i = 0; i < deletions.length; i++) {
            var childToDelete = deletions[i];
            nextEffect = childToDelete;
            commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
              childToDelete,
              parentFiber
            );
          }
        detachAlternateSiblings(parentFiber);
      }
      if (parentFiber.subtreeFlags & 10256)
        for (parentFiber = parentFiber.child; null !== parentFiber; )
          commitPassiveUnmountOnFiber(parentFiber), parentFiber = parentFiber.sibling;
    }
    function commitPassiveUnmountOnFiber(finishedWork) {
      switch (finishedWork.tag) {
        case 0:
        case 11:
        case 15:
          recursivelyTraversePassiveUnmountEffects(finishedWork);
          finishedWork.flags & 2048 && commitHookEffectListUnmount(9, finishedWork, finishedWork.return);
          break;
        case 3:
          recursivelyTraversePassiveUnmountEffects(finishedWork);
          break;
        case 12:
          recursivelyTraversePassiveUnmountEffects(finishedWork);
          break;
        case 22:
          var instance = finishedWork.stateNode;
          null !== finishedWork.memoizedState && instance._visibility & 2 && (null === finishedWork.return || 13 !== finishedWork.return.tag) ? (instance._visibility &= -3, recursivelyTraverseDisconnectPassiveEffects(finishedWork)) : recursivelyTraversePassiveUnmountEffects(finishedWork);
          break;
        default:
          recursivelyTraversePassiveUnmountEffects(finishedWork);
      }
    }
    function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {
      var deletions = parentFiber.deletions;
      if (0 !== (parentFiber.flags & 16)) {
        if (null !== deletions)
          for (var i = 0; i < deletions.length; i++) {
            var childToDelete = deletions[i];
            nextEffect = childToDelete;
            commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
              childToDelete,
              parentFiber
            );
          }
        detachAlternateSiblings(parentFiber);
      }
      for (parentFiber = parentFiber.child; null !== parentFiber; ) {
        deletions = parentFiber;
        switch (deletions.tag) {
          case 0:
          case 11:
          case 15:
            commitHookEffectListUnmount(8, deletions, deletions.return);
            recursivelyTraverseDisconnectPassiveEffects(deletions);
            break;
          case 22:
            i = deletions.stateNode;
            i._visibility & 2 && (i._visibility &= -3, recursivelyTraverseDisconnectPassiveEffects(deletions));
            break;
          default:
            recursivelyTraverseDisconnectPassiveEffects(deletions);
        }
        parentFiber = parentFiber.sibling;
      }
    }
    function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
      for (; null !== nextEffect; ) {
        var fiber = nextEffect;
        switch (fiber.tag) {
          case 0:
          case 11:
          case 15:
            commitHookEffectListUnmount(8, fiber, nearestMountedAncestor);
            break;
          case 23:
          case 22:
            if (null !== fiber.memoizedState && null !== fiber.memoizedState.cachePool) {
              var cache = fiber.memoizedState.cachePool.pool;
              null != cache && cache.refCount++;
            }
            break;
          case 24:
            releaseCache(fiber.memoizedState.cache);
        }
        cache = fiber.child;
        if (null !== cache) cache.return = fiber, nextEffect = cache;
        else
          a: for (fiber = deletedSubtreeRoot; null !== nextEffect; ) {
            cache = nextEffect;
            var sibling = cache.sibling, returnFiber = cache.return;
            detachFiberAfterEffects(cache);
            if (cache === fiber) {
              nextEffect = null;
              break a;
            }
            if (null !== sibling) {
              sibling.return = returnFiber;
              nextEffect = sibling;
              break a;
            }
            nextEffect = returnFiber;
          }
      }
    }
    var DefaultAsyncDispatcher = {
      getCacheForType: function(resourceType) {
        var cache = readContext(CacheContext), cacheForType = cache.data.get(resourceType);
        void 0 === cacheForType && (cacheForType = resourceType(), cache.data.set(resourceType, cacheForType));
        return cacheForType;
      }
    };
    var PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map;
    var executionContext = 0;
    var workInProgressRoot = null;
    var workInProgress = null;
    var workInProgressRootRenderLanes = 0;
    var workInProgressSuspendedReason = 0;
    var workInProgressThrownValue = null;
    var workInProgressRootDidSkipSuspendedSiblings = false;
    var workInProgressRootIsPrerendering = false;
    var workInProgressRootDidAttachPingListener = false;
    var entangledRenderLanes = 0;
    var workInProgressRootExitStatus = 0;
    var workInProgressRootSkippedLanes = 0;
    var workInProgressRootInterleavedUpdatedLanes = 0;
    var workInProgressRootPingedLanes = 0;
    var workInProgressDeferredLane = 0;
    var workInProgressSuspendedRetryLanes = 0;
    var workInProgressRootConcurrentErrors = null;
    var workInProgressRootRecoverableErrors = null;
    var workInProgressRootDidIncludeRecursiveRenderUpdate = false;
    var globalMostRecentFallbackTime = 0;
    var workInProgressRootRenderTargetTime = Infinity;
    var workInProgressTransitions = null;
    var legacyErrorBoundariesThatAlreadyFailed = null;
    var pendingEffectsStatus = 0;
    var pendingEffectsRoot = null;
    var pendingFinishedWork = null;
    var pendingEffectsLanes = 0;
    var pendingEffectsRemainingLanes = 0;
    var pendingPassiveTransitions = null;
    var pendingRecoverableErrors = null;
    var nestedUpdateCount = 0;
    var rootWithNestedUpdates = null;
    function requestUpdateLane() {
      if (0 !== (executionContext & 2) && 0 !== workInProgressRootRenderLanes)
        return workInProgressRootRenderLanes & -workInProgressRootRenderLanes;
      if (null !== ReactSharedInternals.T) {
        var actionScopeLane = currentEntangledLane;
        return 0 !== actionScopeLane ? actionScopeLane : requestTransitionLane();
      }
      return resolveUpdatePriority();
    }
    function requestDeferredLane() {
      0 === workInProgressDeferredLane && (workInProgressDeferredLane = 0 === (workInProgressRootRenderLanes & 536870912) || isHydrating ? claimNextTransitionLane() : 536870912);
      var suspenseHandler = suspenseHandlerStackCursor.current;
      null !== suspenseHandler && (suspenseHandler.flags |= 32);
      return workInProgressDeferredLane;
    }
    function scheduleUpdateOnFiber(root2, fiber, lane) {
      if (root2 === workInProgressRoot && (2 === workInProgressSuspendedReason || 9 === workInProgressSuspendedReason) || null !== root2.cancelPendingCommit)
        prepareFreshStack(root2, 0), markRootSuspended(
          root2,
          workInProgressRootRenderLanes,
          workInProgressDeferredLane,
          false
        );
      markRootUpdated$1(root2, lane);
      if (0 === (executionContext & 2) || root2 !== workInProgressRoot)
        root2 === workInProgressRoot && (0 === (executionContext & 2) && (workInProgressRootInterleavedUpdatedLanes |= lane), 4 === workInProgressRootExitStatus && markRootSuspended(
          root2,
          workInProgressRootRenderLanes,
          workInProgressDeferredLane,
          false
        )), ensureRootIsScheduled(root2);
    }
    function performWorkOnRoot(root$jscomp$0, lanes, forceSync) {
      if (0 !== (executionContext & 6)) throw Error(formatProdErrorMessage(327));
      var shouldTimeSlice = !forceSync && 0 === (lanes & 124) && 0 === (lanes & root$jscomp$0.expiredLanes) || checkIfRootIsPrerendering(root$jscomp$0, lanes), exitStatus = shouldTimeSlice ? renderRootConcurrent(root$jscomp$0, lanes) : renderRootSync(root$jscomp$0, lanes, true), renderWasConcurrent = shouldTimeSlice;
      do {
        if (0 === exitStatus) {
          workInProgressRootIsPrerendering && !shouldTimeSlice && markRootSuspended(root$jscomp$0, lanes, 0, false);
          break;
        } else {
          forceSync = root$jscomp$0.current.alternate;
          if (renderWasConcurrent && !isRenderConsistentWithExternalStores(forceSync)) {
            exitStatus = renderRootSync(root$jscomp$0, lanes, false);
            renderWasConcurrent = false;
            continue;
          }
          if (2 === exitStatus) {
            renderWasConcurrent = lanes;
            if (root$jscomp$0.errorRecoveryDisabledLanes & renderWasConcurrent)
              var JSCompiler_inline_result = 0;
            else
              JSCompiler_inline_result = root$jscomp$0.pendingLanes & -536870913, JSCompiler_inline_result = 0 !== JSCompiler_inline_result ? JSCompiler_inline_result : JSCompiler_inline_result & 536870912 ? 536870912 : 0;
            if (0 !== JSCompiler_inline_result) {
              lanes = JSCompiler_inline_result;
              a: {
                var root2 = root$jscomp$0;
                exitStatus = workInProgressRootConcurrentErrors;
                var wasRootDehydrated = root2.current.memoizedState.isDehydrated;
                wasRootDehydrated && (prepareFreshStack(root2, JSCompiler_inline_result).flags |= 256);
                JSCompiler_inline_result = renderRootSync(
                  root2,
                  JSCompiler_inline_result,
                  false
                );
                if (2 !== JSCompiler_inline_result) {
                  if (workInProgressRootDidAttachPingListener && !wasRootDehydrated) {
                    root2.errorRecoveryDisabledLanes |= renderWasConcurrent;
                    workInProgressRootInterleavedUpdatedLanes |= renderWasConcurrent;
                    exitStatus = 4;
                    break a;
                  }
                  renderWasConcurrent = workInProgressRootRecoverableErrors;
                  workInProgressRootRecoverableErrors = exitStatus;
                  null !== renderWasConcurrent && (null === workInProgressRootRecoverableErrors ? workInProgressRootRecoverableErrors = renderWasConcurrent : workInProgressRootRecoverableErrors.push.apply(
                    workInProgressRootRecoverableErrors,
                    renderWasConcurrent
                  ));
                }
                exitStatus = JSCompiler_inline_result;
              }
              renderWasConcurrent = false;
              if (2 !== exitStatus) continue;
            }
          }
          if (1 === exitStatus) {
            prepareFreshStack(root$jscomp$0, 0);
            markRootSuspended(root$jscomp$0, lanes, 0, true);
            break;
          }
          a: {
            shouldTimeSlice = root$jscomp$0;
            renderWasConcurrent = exitStatus;
            switch (renderWasConcurrent) {
              case 0:
              case 1:
                throw Error(formatProdErrorMessage(345));
              case 4:
                if ((lanes & 4194048) !== lanes) break;
              case 6:
                markRootSuspended(
                  shouldTimeSlice,
                  lanes,
                  workInProgressDeferredLane,
                  !workInProgressRootDidSkipSuspendedSiblings
                );
                break a;
              case 2:
                workInProgressRootRecoverableErrors = null;
                break;
              case 3:
              case 5:
                break;
              default:
                throw Error(formatProdErrorMessage(329));
            }
            if ((lanes & 62914560) === lanes && (exitStatus = globalMostRecentFallbackTime + 300 - now(), 10 < exitStatus)) {
              markRootSuspended(
                shouldTimeSlice,
                lanes,
                workInProgressDeferredLane,
                !workInProgressRootDidSkipSuspendedSiblings
              );
              if (0 !== getNextLanes(shouldTimeSlice, 0, true)) break a;
              shouldTimeSlice.timeoutHandle = scheduleTimeout(
                commitRootWhenReady.bind(
                  null,
                  shouldTimeSlice,
                  forceSync,
                  workInProgressRootRecoverableErrors,
                  workInProgressTransitions,
                  workInProgressRootDidIncludeRecursiveRenderUpdate,
                  lanes,
                  workInProgressDeferredLane,
                  workInProgressRootInterleavedUpdatedLanes,
                  workInProgressSuspendedRetryLanes,
                  workInProgressRootDidSkipSuspendedSiblings,
                  renderWasConcurrent,
                  2,
                  -0,
                  0
                ),
                exitStatus
              );
              break a;
            }
            commitRootWhenReady(
              shouldTimeSlice,
              forceSync,
              workInProgressRootRecoverableErrors,
              workInProgressTransitions,
              workInProgressRootDidIncludeRecursiveRenderUpdate,
              lanes,
              workInProgressDeferredLane,
              workInProgressRootInterleavedUpdatedLanes,
              workInProgressSuspendedRetryLanes,
              workInProgressRootDidSkipSuspendedSiblings,
              renderWasConcurrent,
              0,
              -0,
              0
            );
          }
        }
        break;
      } while (1);
      ensureRootIsScheduled(root$jscomp$0);
    }
    function commitRootWhenReady(root2, finishedWork, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, lanes, spawnedLane, updatedLanes, suspendedRetryLanes, didSkipSuspendedSiblings, exitStatus, suspendedCommitReason, completedRenderStartTime, completedRenderEndTime) {
      root2.timeoutHandle = -1;
      suspendedCommitReason = finishedWork.subtreeFlags;
      if (suspendedCommitReason & 8192 || 16785408 === (suspendedCommitReason & 16785408)) {
        if (suspendedState = { stylesheets: null, count: 0, unsuspend: noop }, accumulateSuspenseyCommitOnFiber(finishedWork), suspendedCommitReason = waitForCommitToBeReady(), null !== suspendedCommitReason) {
          root2.cancelPendingCommit = suspendedCommitReason(
            commitRoot.bind(
              null,
              root2,
              finishedWork,
              lanes,
              recoverableErrors,
              transitions,
              didIncludeRenderPhaseUpdate,
              spawnedLane,
              updatedLanes,
              suspendedRetryLanes,
              exitStatus,
              1,
              completedRenderStartTime,
              completedRenderEndTime
            )
          );
          markRootSuspended(root2, lanes, spawnedLane, !didSkipSuspendedSiblings);
          return;
        }
      }
      commitRoot(
        root2,
        finishedWork,
        lanes,
        recoverableErrors,
        transitions,
        didIncludeRenderPhaseUpdate,
        spawnedLane,
        updatedLanes,
        suspendedRetryLanes
      );
    }
    function isRenderConsistentWithExternalStores(finishedWork) {
      for (var node2 = finishedWork; ; ) {
        var tag = node2.tag;
        if ((0 === tag || 11 === tag || 15 === tag) && node2.flags & 16384 && (tag = node2.updateQueue, null !== tag && (tag = tag.stores, null !== tag)))
          for (var i = 0; i < tag.length; i++) {
            var check = tag[i], getSnapshot = check.getSnapshot;
            check = check.value;
            try {
              if (!objectIs(getSnapshot(), check)) return false;
            } catch (error) {
              return false;
            }
          }
        tag = node2.child;
        if (node2.subtreeFlags & 16384 && null !== tag)
          tag.return = node2, node2 = tag;
        else {
          if (node2 === finishedWork) break;
          for (; null === node2.sibling; ) {
            if (null === node2.return || node2.return === finishedWork) return true;
            node2 = node2.return;
          }
          node2.sibling.return = node2.return;
          node2 = node2.sibling;
        }
      }
      return true;
    }
    function markRootSuspended(root2, suspendedLanes, spawnedLane, didAttemptEntireTree) {
      suspendedLanes &= ~workInProgressRootPingedLanes;
      suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;
      root2.suspendedLanes |= suspendedLanes;
      root2.pingedLanes &= ~suspendedLanes;
      didAttemptEntireTree && (root2.warmLanes |= suspendedLanes);
      didAttemptEntireTree = root2.expirationTimes;
      for (var lanes = suspendedLanes; 0 < lanes; ) {
        var index$4 = 31 - clz32(lanes), lane = 1 << index$4;
        didAttemptEntireTree[index$4] = -1;
        lanes &= ~lane;
      }
      0 !== spawnedLane && markSpawnedDeferredLane(root2, spawnedLane, suspendedLanes);
    }
    function flushSyncWork$1() {
      return 0 === (executionContext & 6) ? (flushSyncWorkAcrossRoots_impl(0, false), false) : true;
    }
    function resetWorkInProgressStack() {
      if (null !== workInProgress) {
        if (0 === workInProgressSuspendedReason)
          var interruptedWork = workInProgress.return;
        else
          interruptedWork = workInProgress, lastContextDependency = currentlyRenderingFiber$1 = null, resetHooksOnUnwind(interruptedWork), thenableState = null, thenableIndexCounter = 0, interruptedWork = workInProgress;
        for (; null !== interruptedWork; )
          unwindInterruptedWork(interruptedWork.alternate, interruptedWork), interruptedWork = interruptedWork.return;
        workInProgress = null;
      }
    }
    function prepareFreshStack(root2, lanes) {
      var timeoutHandle = root2.timeoutHandle;
      -1 !== timeoutHandle && (root2.timeoutHandle = -1, cancelTimeout(timeoutHandle));
      timeoutHandle = root2.cancelPendingCommit;
      null !== timeoutHandle && (root2.cancelPendingCommit = null, timeoutHandle());
      resetWorkInProgressStack();
      workInProgressRoot = root2;
      workInProgress = timeoutHandle = createWorkInProgress(root2.current, null);
      workInProgressRootRenderLanes = lanes;
      workInProgressSuspendedReason = 0;
      workInProgressThrownValue = null;
      workInProgressRootDidSkipSuspendedSiblings = false;
      workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root2, lanes);
      workInProgressRootDidAttachPingListener = false;
      workInProgressSuspendedRetryLanes = workInProgressDeferredLane = workInProgressRootPingedLanes = workInProgressRootInterleavedUpdatedLanes = workInProgressRootSkippedLanes = workInProgressRootExitStatus = 0;
      workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors = null;
      workInProgressRootDidIncludeRecursiveRenderUpdate = false;
      0 !== (lanes & 8) && (lanes |= lanes & 32);
      var allEntangledLanes = root2.entangledLanes;
      if (0 !== allEntangledLanes)
        for (root2 = root2.entanglements, allEntangledLanes &= lanes; 0 < allEntangledLanes; ) {
          var index$2 = 31 - clz32(allEntangledLanes), lane = 1 << index$2;
          lanes |= root2[index$2];
          allEntangledLanes &= ~lane;
        }
      entangledRenderLanes = lanes;
      finishQueueingConcurrentUpdates();
      return timeoutHandle;
    }
    function handleThrow(root2, thrownValue) {
      currentlyRenderingFiber = null;
      ReactSharedInternals.H = ContextOnlyDispatcher;
      thrownValue === SuspenseException || thrownValue === SuspenseActionException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = 3) : thrownValue === SuspenseyCommitException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = 4) : workInProgressSuspendedReason = thrownValue === SelectiveHydrationException ? 8 : null !== thrownValue && "object" === typeof thrownValue && "function" === typeof thrownValue.then ? 6 : 1;
      workInProgressThrownValue = thrownValue;
      null === workInProgress && (workInProgressRootExitStatus = 1, logUncaughtError(
        root2,
        createCapturedValueAtFiber(thrownValue, root2.current)
      ));
    }
    function pushDispatcher() {
      var prevDispatcher = ReactSharedInternals.H;
      ReactSharedInternals.H = ContextOnlyDispatcher;
      return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;
    }
    function pushAsyncDispatcher() {
      var prevAsyncDispatcher = ReactSharedInternals.A;
      ReactSharedInternals.A = DefaultAsyncDispatcher;
      return prevAsyncDispatcher;
    }
    function renderDidSuspendDelayIfPossible() {
      workInProgressRootExitStatus = 4;
      workInProgressRootDidSkipSuspendedSiblings || (workInProgressRootRenderLanes & 4194048) !== workInProgressRootRenderLanes && null !== suspenseHandlerStackCursor.current || (workInProgressRootIsPrerendering = true);
      0 === (workInProgressRootSkippedLanes & 134217727) && 0 === (workInProgressRootInterleavedUpdatedLanes & 134217727) || null === workInProgressRoot || markRootSuspended(
        workInProgressRoot,
        workInProgressRootRenderLanes,
        workInProgressDeferredLane,
        false
      );
    }
    function renderRootSync(root2, lanes, shouldYieldForPrerendering) {
      var prevExecutionContext = executionContext;
      executionContext |= 2;
      var prevDispatcher = pushDispatcher(), prevAsyncDispatcher = pushAsyncDispatcher();
      if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes)
        workInProgressTransitions = null, prepareFreshStack(root2, lanes);
      lanes = false;
      var exitStatus = workInProgressRootExitStatus;
      a: do
        try {
          if (0 !== workInProgressSuspendedReason && null !== workInProgress) {
            var unitOfWork = workInProgress, thrownValue = workInProgressThrownValue;
            switch (workInProgressSuspendedReason) {
              case 8:
                resetWorkInProgressStack();
                exitStatus = 6;
                break a;
              case 3:
              case 2:
              case 9:
              case 6:
                null === suspenseHandlerStackCursor.current && (lanes = true);
                var reason = workInProgressSuspendedReason;
                workInProgressSuspendedReason = 0;
                workInProgressThrownValue = null;
                throwAndUnwindWorkLoop(root2, unitOfWork, thrownValue, reason);
                if (shouldYieldForPrerendering && workInProgressRootIsPrerendering) {
                  exitStatus = 0;
                  break a;
                }
                break;
              default:
                reason = workInProgressSuspendedReason, workInProgressSuspendedReason = 0, workInProgressThrownValue = null, throwAndUnwindWorkLoop(root2, unitOfWork, thrownValue, reason);
            }
          }
          workLoopSync();
          exitStatus = workInProgressRootExitStatus;
          break;
        } catch (thrownValue$167) {
          handleThrow(root2, thrownValue$167);
        }
      while (1);
      lanes && root2.shellSuspendCounter++;
      lastContextDependency = currentlyRenderingFiber$1 = null;
      executionContext = prevExecutionContext;
      ReactSharedInternals.H = prevDispatcher;
      ReactSharedInternals.A = prevAsyncDispatcher;
      null === workInProgress && (workInProgressRoot = null, workInProgressRootRenderLanes = 0, finishQueueingConcurrentUpdates());
      return exitStatus;
    }
    function workLoopSync() {
      for (; null !== workInProgress; ) performUnitOfWork(workInProgress);
    }
    function renderRootConcurrent(root2, lanes) {
      var prevExecutionContext = executionContext;
      executionContext |= 2;
      var prevDispatcher = pushDispatcher(), prevAsyncDispatcher = pushAsyncDispatcher();
      workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes ? (workInProgressTransitions = null, workInProgressRootRenderTargetTime = now() + 500, prepareFreshStack(root2, lanes)) : workInProgressRootIsPrerendering = checkIfRootIsPrerendering(
        root2,
        lanes
      );
      a: do
        try {
          if (0 !== workInProgressSuspendedReason && null !== workInProgress) {
            lanes = workInProgress;
            var thrownValue = workInProgressThrownValue;
            b: switch (workInProgressSuspendedReason) {
              case 1:
                workInProgressSuspendedReason = 0;
                workInProgressThrownValue = null;
                throwAndUnwindWorkLoop(root2, lanes, thrownValue, 1);
                break;
              case 2:
              case 9:
                if (isThenableResolved(thrownValue)) {
                  workInProgressSuspendedReason = 0;
                  workInProgressThrownValue = null;
                  replaySuspendedUnitOfWork(lanes);
                  break;
                }
                lanes = function() {
                  2 !== workInProgressSuspendedReason && 9 !== workInProgressSuspendedReason || workInProgressRoot !== root2 || (workInProgressSuspendedReason = 7);
                  ensureRootIsScheduled(root2);
                };
                thrownValue.then(lanes, lanes);
                break a;
              case 3:
                workInProgressSuspendedReason = 7;
                break a;
              case 4:
                workInProgressSuspendedReason = 5;
                break a;
              case 7:
                isThenableResolved(thrownValue) ? (workInProgressSuspendedReason = 0, workInProgressThrownValue = null, replaySuspendedUnitOfWork(lanes)) : (workInProgressSuspendedReason = 0, workInProgressThrownValue = null, throwAndUnwindWorkLoop(root2, lanes, thrownValue, 7));
                break;
              case 5:
                var resource = null;
                switch (workInProgress.tag) {
                  case 26:
                    resource = workInProgress.memoizedState;
                  case 5:
                  case 27:
                    var hostFiber = workInProgress;
                    if (resource ? preloadResource(resource) : 1) {
                      workInProgressSuspendedReason = 0;
                      workInProgressThrownValue = null;
                      var sibling = hostFiber.sibling;
                      if (null !== sibling) workInProgress = sibling;
                      else {
                        var returnFiber = hostFiber.return;
                        null !== returnFiber ? (workInProgress = returnFiber, completeUnitOfWork(returnFiber)) : workInProgress = null;
                      }
                      break b;
                    }
                }
                workInProgressSuspendedReason = 0;
                workInProgressThrownValue = null;
                throwAndUnwindWorkLoop(root2, lanes, thrownValue, 5);
                break;
              case 6:
                workInProgressSuspendedReason = 0;
                workInProgressThrownValue = null;
                throwAndUnwindWorkLoop(root2, lanes, thrownValue, 6);
                break;
              case 8:
                resetWorkInProgressStack();
                workInProgressRootExitStatus = 6;
                break a;
              default:
                throw Error(formatProdErrorMessage(462));
            }
          }
          workLoopConcurrentByScheduler();
          break;
        } catch (thrownValue$169) {
          handleThrow(root2, thrownValue$169);
        }
      while (1);
      lastContextDependency = currentlyRenderingFiber$1 = null;
      ReactSharedInternals.H = prevDispatcher;
      ReactSharedInternals.A = prevAsyncDispatcher;
      executionContext = prevExecutionContext;
      if (null !== workInProgress) return 0;
      workInProgressRoot = null;
      workInProgressRootRenderLanes = 0;
      finishQueueingConcurrentUpdates();
      return workInProgressRootExitStatus;
    }
    function workLoopConcurrentByScheduler() {
      for (; null !== workInProgress && !shouldYield(); )
        performUnitOfWork(workInProgress);
    }
    function performUnitOfWork(unitOfWork) {
      var next2 = beginWork(unitOfWork.alternate, unitOfWork, entangledRenderLanes);
      unitOfWork.memoizedProps = unitOfWork.pendingProps;
      null === next2 ? completeUnitOfWork(unitOfWork) : workInProgress = next2;
    }
    function replaySuspendedUnitOfWork(unitOfWork) {
      var next2 = unitOfWork;
      var current = next2.alternate;
      switch (next2.tag) {
        case 15:
        case 0:
          next2 = replayFunctionComponent(
            current,
            next2,
            next2.pendingProps,
            next2.type,
            void 0,
            workInProgressRootRenderLanes
          );
          break;
        case 11:
          next2 = replayFunctionComponent(
            current,
            next2,
            next2.pendingProps,
            next2.type.render,
            next2.ref,
            workInProgressRootRenderLanes
          );
          break;
        case 5:
          resetHooksOnUnwind(next2);
        default:
          unwindInterruptedWork(current, next2), next2 = workInProgress = resetWorkInProgress(next2, entangledRenderLanes), next2 = beginWork(current, next2, entangledRenderLanes);
      }
      unitOfWork.memoizedProps = unitOfWork.pendingProps;
      null === next2 ? completeUnitOfWork(unitOfWork) : workInProgress = next2;
    }
    function throwAndUnwindWorkLoop(root2, unitOfWork, thrownValue, suspendedReason) {
      lastContextDependency = currentlyRenderingFiber$1 = null;
      resetHooksOnUnwind(unitOfWork);
      thenableState = null;
      thenableIndexCounter = 0;
      var returnFiber = unitOfWork.return;
      try {
        if (throwException(
          root2,
          returnFiber,
          unitOfWork,
          thrownValue,
          workInProgressRootRenderLanes
        )) {
          workInProgressRootExitStatus = 1;
          logUncaughtError(
            root2,
            createCapturedValueAtFiber(thrownValue, root2.current)
          );
          workInProgress = null;
          return;
        }
      } catch (error) {
        if (null !== returnFiber) throw workInProgress = returnFiber, error;
        workInProgressRootExitStatus = 1;
        logUncaughtError(
          root2,
          createCapturedValueAtFiber(thrownValue, root2.current)
        );
        workInProgress = null;
        return;
      }
      if (unitOfWork.flags & 32768) {
        if (isHydrating || 1 === suspendedReason) root2 = true;
        else if (workInProgressRootIsPrerendering || 0 !== (workInProgressRootRenderLanes & 536870912))
          root2 = false;
        else if (workInProgressRootDidSkipSuspendedSiblings = root2 = true, 2 === suspendedReason || 9 === suspendedReason || 3 === suspendedReason || 6 === suspendedReason)
          suspendedReason = suspenseHandlerStackCursor.current, null !== suspendedReason && 13 === suspendedReason.tag && (suspendedReason.flags |= 16384);
        unwindUnitOfWork(unitOfWork, root2);
      } else completeUnitOfWork(unitOfWork);
    }
    function completeUnitOfWork(unitOfWork) {
      var completedWork = unitOfWork;
      do {
        if (0 !== (completedWork.flags & 32768)) {
          unwindUnitOfWork(
            completedWork,
            workInProgressRootDidSkipSuspendedSiblings
          );
          return;
        }
        unitOfWork = completedWork.return;
        var next2 = completeWork(
          completedWork.alternate,
          completedWork,
          entangledRenderLanes
        );
        if (null !== next2) {
          workInProgress = next2;
          return;
        }
        completedWork = completedWork.sibling;
        if (null !== completedWork) {
          workInProgress = completedWork;
          return;
        }
        workInProgress = completedWork = unitOfWork;
      } while (null !== completedWork);
      0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 5);
    }
    function unwindUnitOfWork(unitOfWork, skipSiblings) {
      do {
        var next2 = unwindWork(unitOfWork.alternate, unitOfWork);
        if (null !== next2) {
          next2.flags &= 32767;
          workInProgress = next2;
          return;
        }
        next2 = unitOfWork.return;
        null !== next2 && (next2.flags |= 32768, next2.subtreeFlags = 0, next2.deletions = null);
        if (!skipSiblings && (unitOfWork = unitOfWork.sibling, null !== unitOfWork)) {
          workInProgress = unitOfWork;
          return;
        }
        workInProgress = unitOfWork = next2;
      } while (null !== unitOfWork);
      workInProgressRootExitStatus = 6;
      workInProgress = null;
    }
    function commitRoot(root2, finishedWork, lanes, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, spawnedLane, updatedLanes, suspendedRetryLanes) {
      root2.cancelPendingCommit = null;
      do
        flushPendingEffects();
      while (0 !== pendingEffectsStatus);
      if (0 !== (executionContext & 6)) throw Error(formatProdErrorMessage(327));
      if (null !== finishedWork) {
        if (finishedWork === root2.current) throw Error(formatProdErrorMessage(177));
        didIncludeRenderPhaseUpdate = finishedWork.lanes | finishedWork.childLanes;
        didIncludeRenderPhaseUpdate |= concurrentlyUpdatedLanes;
        markRootFinished(
          root2,
          lanes,
          didIncludeRenderPhaseUpdate,
          spawnedLane,
          updatedLanes,
          suspendedRetryLanes
        );
        root2 === workInProgressRoot && (workInProgress = workInProgressRoot = null, workInProgressRootRenderLanes = 0);
        pendingFinishedWork = finishedWork;
        pendingEffectsRoot = root2;
        pendingEffectsLanes = lanes;
        pendingEffectsRemainingLanes = didIncludeRenderPhaseUpdate;
        pendingPassiveTransitions = transitions;
        pendingRecoverableErrors = recoverableErrors;
        0 !== (finishedWork.subtreeFlags & 10256) || 0 !== (finishedWork.flags & 10256) ? (root2.callbackNode = null, root2.callbackPriority = 0, scheduleCallback$1(NormalPriority$1, function() {
          flushPassiveEffects(true);
          return null;
        })) : (root2.callbackNode = null, root2.callbackPriority = 0);
        recoverableErrors = 0 !== (finishedWork.flags & 13878);
        if (0 !== (finishedWork.subtreeFlags & 13878) || recoverableErrors) {
          recoverableErrors = ReactSharedInternals.T;
          ReactSharedInternals.T = null;
          transitions = ReactDOMSharedInternals.p;
          ReactDOMSharedInternals.p = 2;
          spawnedLane = executionContext;
          executionContext |= 4;
          try {
            commitBeforeMutationEffects(root2, finishedWork, lanes);
          } finally {
            executionContext = spawnedLane, ReactDOMSharedInternals.p = transitions, ReactSharedInternals.T = recoverableErrors;
          }
        }
        pendingEffectsStatus = 1;
        flushMutationEffects();
        flushLayoutEffects();
        flushSpawnedWork();
      }
    }
    function flushMutationEffects() {
      if (1 === pendingEffectsStatus) {
        pendingEffectsStatus = 0;
        var root2 = pendingEffectsRoot, finishedWork = pendingFinishedWork, rootMutationHasEffect = 0 !== (finishedWork.flags & 13878);
        if (0 !== (finishedWork.subtreeFlags & 13878) || rootMutationHasEffect) {
          rootMutationHasEffect = ReactSharedInternals.T;
          ReactSharedInternals.T = null;
          var previousPriority = ReactDOMSharedInternals.p;
          ReactDOMSharedInternals.p = 2;
          var prevExecutionContext = executionContext;
          executionContext |= 4;
          try {
            commitMutationEffectsOnFiber(finishedWork, root2);
            var priorSelectionInformation = selectionInformation, curFocusedElem = getActiveElementDeep(root2.containerInfo), priorFocusedElem = priorSelectionInformation.focusedElem, priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && priorFocusedElem && priorFocusedElem.ownerDocument && containsNode(
              priorFocusedElem.ownerDocument.documentElement,
              priorFocusedElem
            )) {
              if (null !== priorSelectionRange && hasSelectionCapabilities(priorFocusedElem)) {
                var start = priorSelectionRange.start, end = priorSelectionRange.end;
                void 0 === end && (end = start);
                if ("selectionStart" in priorFocusedElem)
                  priorFocusedElem.selectionStart = start, priorFocusedElem.selectionEnd = Math.min(
                    end,
                    priorFocusedElem.value.length
                  );
                else {
                  var doc = priorFocusedElem.ownerDocument || document, win = doc && doc.defaultView || window;
                  if (win.getSelection) {
                    var selection = win.getSelection(), length2 = priorFocusedElem.textContent.length, start$jscomp$0 = Math.min(priorSelectionRange.start, length2), end$jscomp$0 = void 0 === priorSelectionRange.end ? start$jscomp$0 : Math.min(priorSelectionRange.end, length2);
                    !selection.extend && start$jscomp$0 > end$jscomp$0 && (curFocusedElem = end$jscomp$0, end$jscomp$0 = start$jscomp$0, start$jscomp$0 = curFocusedElem);
                    var startMarker = getNodeForCharacterOffset(
                      priorFocusedElem,
                      start$jscomp$0
                    ), endMarker = getNodeForCharacterOffset(
                      priorFocusedElem,
                      end$jscomp$0
                    );
                    if (startMarker && endMarker && (1 !== selection.rangeCount || selection.anchorNode !== startMarker.node || selection.anchorOffset !== startMarker.offset || selection.focusNode !== endMarker.node || selection.focusOffset !== endMarker.offset)) {
                      var range = doc.createRange();
                      range.setStart(startMarker.node, startMarker.offset);
                      selection.removeAllRanges();
                      start$jscomp$0 > end$jscomp$0 ? (selection.addRange(range), selection.extend(endMarker.node, endMarker.offset)) : (range.setEnd(endMarker.node, endMarker.offset), selection.addRange(range));
                    }
                  }
                }
              }
              doc = [];
              for (selection = priorFocusedElem; selection = selection.parentNode; )
                1 === selection.nodeType && doc.push({
                  element: selection,
                  left: selection.scrollLeft,
                  top: selection.scrollTop
                });
              "function" === typeof priorFocusedElem.focus && priorFocusedElem.focus();
              for (priorFocusedElem = 0; priorFocusedElem < doc.length; priorFocusedElem++) {
                var info = doc[priorFocusedElem];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
            _enabled = !!eventsEnabled;
            selectionInformation = eventsEnabled = null;
          } finally {
            executionContext = prevExecutionContext, ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = rootMutationHasEffect;
          }
        }
        root2.current = finishedWork;
        pendingEffectsStatus = 2;
      }
    }
    function flushLayoutEffects() {
      if (2 === pendingEffectsStatus) {
        pendingEffectsStatus = 0;
        var root2 = pendingEffectsRoot, finishedWork = pendingFinishedWork, rootHasLayoutEffect = 0 !== (finishedWork.flags & 8772);
        if (0 !== (finishedWork.subtreeFlags & 8772) || rootHasLayoutEffect) {
          rootHasLayoutEffect = ReactSharedInternals.T;
          ReactSharedInternals.T = null;
          var previousPriority = ReactDOMSharedInternals.p;
          ReactDOMSharedInternals.p = 2;
          var prevExecutionContext = executionContext;
          executionContext |= 4;
          try {
            commitLayoutEffectOnFiber(root2, finishedWork.alternate, finishedWork);
          } finally {
            executionContext = prevExecutionContext, ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = rootHasLayoutEffect;
          }
        }
        pendingEffectsStatus = 3;
      }
    }
    function flushSpawnedWork() {
      if (4 === pendingEffectsStatus || 3 === pendingEffectsStatus) {
        pendingEffectsStatus = 0;
        requestPaint();
        var root2 = pendingEffectsRoot, finishedWork = pendingFinishedWork, lanes = pendingEffectsLanes, recoverableErrors = pendingRecoverableErrors;
        0 !== (finishedWork.subtreeFlags & 10256) || 0 !== (finishedWork.flags & 10256) ? pendingEffectsStatus = 5 : (pendingEffectsStatus = 0, pendingFinishedWork = pendingEffectsRoot = null, releaseRootPooledCache(root2, root2.pendingLanes));
        var remainingLanes = root2.pendingLanes;
        0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null);
        lanesToEventPriority(lanes);
        finishedWork = finishedWork.stateNode;
        if (injectedHook && "function" === typeof injectedHook.onCommitFiberRoot)
          try {
            injectedHook.onCommitFiberRoot(
              rendererID,
              finishedWork,
              void 0,
              128 === (finishedWork.current.flags & 128)
            );
          } catch (err) {
          }
        if (null !== recoverableErrors) {
          finishedWork = ReactSharedInternals.T;
          remainingLanes = ReactDOMSharedInternals.p;
          ReactDOMSharedInternals.p = 2;
          ReactSharedInternals.T = null;
          try {
            for (var onRecoverableError = root2.onRecoverableError, i = 0; i < recoverableErrors.length; i++) {
              var recoverableError = recoverableErrors[i];
              onRecoverableError(recoverableError.value, {
                componentStack: recoverableError.stack
              });
            }
          } finally {
            ReactSharedInternals.T = finishedWork, ReactDOMSharedInternals.p = remainingLanes;
          }
        }
        0 !== (pendingEffectsLanes & 3) && flushPendingEffects();
        ensureRootIsScheduled(root2);
        remainingLanes = root2.pendingLanes;
        0 !== (lanes & 4194090) && 0 !== (remainingLanes & 42) ? root2 === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root2) : nestedUpdateCount = 0;
        flushSyncWorkAcrossRoots_impl(0, false);
      }
    }
    function releaseRootPooledCache(root2, remainingLanes) {
      0 === (root2.pooledCacheLanes &= remainingLanes) && (remainingLanes = root2.pooledCache, null != remainingLanes && (root2.pooledCache = null, releaseCache(remainingLanes)));
    }
    function flushPendingEffects(wasDelayedCommit) {
      flushMutationEffects();
      flushLayoutEffects();
      flushSpawnedWork();
      return flushPassiveEffects(wasDelayedCommit);
    }
    function flushPassiveEffects() {
      if (5 !== pendingEffectsStatus) return false;
      var root2 = pendingEffectsRoot, remainingLanes = pendingEffectsRemainingLanes;
      pendingEffectsRemainingLanes = 0;
      var renderPriority = lanesToEventPriority(pendingEffectsLanes), prevTransition = ReactSharedInternals.T, previousPriority = ReactDOMSharedInternals.p;
      try {
        ReactDOMSharedInternals.p = 32 > renderPriority ? 32 : renderPriority;
        ReactSharedInternals.T = null;
        renderPriority = pendingPassiveTransitions;
        pendingPassiveTransitions = null;
        var root$jscomp$0 = pendingEffectsRoot, lanes = pendingEffectsLanes;
        pendingEffectsStatus = 0;
        pendingFinishedWork = pendingEffectsRoot = null;
        pendingEffectsLanes = 0;
        if (0 !== (executionContext & 6)) throw Error(formatProdErrorMessage(331));
        var prevExecutionContext = executionContext;
        executionContext |= 4;
        commitPassiveUnmountOnFiber(root$jscomp$0.current);
        commitPassiveMountOnFiber(
          root$jscomp$0,
          root$jscomp$0.current,
          lanes,
          renderPriority
        );
        executionContext = prevExecutionContext;
        flushSyncWorkAcrossRoots_impl(0, false);
        if (injectedHook && "function" === typeof injectedHook.onPostCommitFiberRoot)
          try {
            injectedHook.onPostCommitFiberRoot(rendererID, root$jscomp$0);
          } catch (err) {
          }
        return true;
      } finally {
        ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition, releaseRootPooledCache(root2, remainingLanes);
      }
    }
    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
      sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
      sourceFiber = createRootErrorUpdate(rootFiber.stateNode, sourceFiber, 2);
      rootFiber = enqueueUpdate(rootFiber, sourceFiber, 2);
      null !== rootFiber && (markRootUpdated$1(rootFiber, 2), ensureRootIsScheduled(rootFiber));
    }
    function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error) {
      if (3 === sourceFiber.tag)
        captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
      else
        for (; null !== nearestMountedAncestor; ) {
          if (3 === nearestMountedAncestor.tag) {
            captureCommitPhaseErrorOnRoot(
              nearestMountedAncestor,
              sourceFiber,
              error
            );
            break;
          } else if (1 === nearestMountedAncestor.tag) {
            var instance = nearestMountedAncestor.stateNode;
            if ("function" === typeof nearestMountedAncestor.type.getDerivedStateFromError || "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
              sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
              error = createClassErrorUpdate(2);
              instance = enqueueUpdate(nearestMountedAncestor, error, 2);
              null !== instance && (initializeClassErrorUpdate(
                error,
                instance,
                nearestMountedAncestor,
                sourceFiber
              ), markRootUpdated$1(instance, 2), ensureRootIsScheduled(instance));
              break;
            }
          }
          nearestMountedAncestor = nearestMountedAncestor.return;
        }
    }
    function attachPingListener(root2, wakeable, lanes) {
      var pingCache = root2.pingCache;
      if (null === pingCache) {
        pingCache = root2.pingCache = new PossiblyWeakMap();
        var threadIDs = /* @__PURE__ */ new Set();
        pingCache.set(wakeable, threadIDs);
      } else
        threadIDs = pingCache.get(wakeable), void 0 === threadIDs && (threadIDs = /* @__PURE__ */ new Set(), pingCache.set(wakeable, threadIDs));
      threadIDs.has(lanes) || (workInProgressRootDidAttachPingListener = true, threadIDs.add(lanes), root2 = pingSuspendedRoot.bind(null, root2, wakeable, lanes), wakeable.then(root2, root2));
    }
    function pingSuspendedRoot(root2, wakeable, pingedLanes) {
      var pingCache = root2.pingCache;
      null !== pingCache && pingCache.delete(wakeable);
      root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
      root2.warmLanes &= ~pingedLanes;
      workInProgressRoot === root2 && (workInProgressRootRenderLanes & pingedLanes) === pingedLanes && (4 === workInProgressRootExitStatus || 3 === workInProgressRootExitStatus && (workInProgressRootRenderLanes & 62914560) === workInProgressRootRenderLanes && 300 > now() - globalMostRecentFallbackTime ? 0 === (executionContext & 2) && prepareFreshStack(root2, 0) : workInProgressRootPingedLanes |= pingedLanes, workInProgressSuspendedRetryLanes === workInProgressRootRenderLanes && (workInProgressSuspendedRetryLanes = 0));
      ensureRootIsScheduled(root2);
    }
    function retryTimedOutBoundary(boundaryFiber, retryLane) {
      0 === retryLane && (retryLane = claimNextRetryLane());
      boundaryFiber = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
      null !== boundaryFiber && (markRootUpdated$1(boundaryFiber, retryLane), ensureRootIsScheduled(boundaryFiber));
    }
    function retryDehydratedSuspenseBoundary(boundaryFiber) {
      var suspenseState = boundaryFiber.memoizedState, retryLane = 0;
      null !== suspenseState && (retryLane = suspenseState.retryLane);
      retryTimedOutBoundary(boundaryFiber, retryLane);
    }
    function resolveRetryWakeable(boundaryFiber, wakeable) {
      var retryLane = 0;
      switch (boundaryFiber.tag) {
        case 13:
          var retryCache = boundaryFiber.stateNode;
          var suspenseState = boundaryFiber.memoizedState;
          null !== suspenseState && (retryLane = suspenseState.retryLane);
          break;
        case 19:
          retryCache = boundaryFiber.stateNode;
          break;
        case 22:
          retryCache = boundaryFiber.stateNode._retryCache;
          break;
        default:
          throw Error(formatProdErrorMessage(314));
      }
      null !== retryCache && retryCache.delete(wakeable);
      retryTimedOutBoundary(boundaryFiber, retryLane);
    }
    function scheduleCallback$1(priorityLevel, callback) {
      return scheduleCallback$3(priorityLevel, callback);
    }
    var firstScheduledRoot = null;
    var lastScheduledRoot = null;
    var didScheduleMicrotask = false;
    var mightHavePendingSyncWork = false;
    var isFlushingWork = false;
    var currentEventTransitionLane = 0;
    function ensureRootIsScheduled(root2) {
      root2 !== lastScheduledRoot && null === root2.next && (null === lastScheduledRoot ? firstScheduledRoot = lastScheduledRoot = root2 : lastScheduledRoot = lastScheduledRoot.next = root2);
      mightHavePendingSyncWork = true;
      didScheduleMicrotask || (didScheduleMicrotask = true, scheduleImmediateRootScheduleTask());
    }
    function flushSyncWorkAcrossRoots_impl(syncTransitionLanes, onlyLegacy) {
      if (!isFlushingWork && mightHavePendingSyncWork) {
        isFlushingWork = true;
        do {
          var didPerformSomeWork = false;
          for (var root$174 = firstScheduledRoot; null !== root$174; ) {
            if (!onlyLegacy)
              if (0 !== syncTransitionLanes) {
                var pendingLanes = root$174.pendingLanes;
                if (0 === pendingLanes) var JSCompiler_inline_result = 0;
                else {
                  var suspendedLanes = root$174.suspendedLanes, pingedLanes = root$174.pingedLanes;
                  JSCompiler_inline_result = (1 << 31 - clz32(42 | syncTransitionLanes) + 1) - 1;
                  JSCompiler_inline_result &= pendingLanes & ~(suspendedLanes & ~pingedLanes);
                  JSCompiler_inline_result = JSCompiler_inline_result & 201326741 ? JSCompiler_inline_result & 201326741 | 1 : JSCompiler_inline_result ? JSCompiler_inline_result | 2 : 0;
                }
                0 !== JSCompiler_inline_result && (didPerformSomeWork = true, performSyncWorkOnRoot(root$174, JSCompiler_inline_result));
              } else
                JSCompiler_inline_result = workInProgressRootRenderLanes, JSCompiler_inline_result = getNextLanes(
                  root$174,
                  root$174 === workInProgressRoot ? JSCompiler_inline_result : 0,
                  null !== root$174.cancelPendingCommit || -1 !== root$174.timeoutHandle
                ), 0 === (JSCompiler_inline_result & 3) || checkIfRootIsPrerendering(root$174, JSCompiler_inline_result) || (didPerformSomeWork = true, performSyncWorkOnRoot(root$174, JSCompiler_inline_result));
            root$174 = root$174.next;
          }
        } while (didPerformSomeWork);
        isFlushingWork = false;
      }
    }
    function processRootScheduleInImmediateTask() {
      processRootScheduleInMicrotask();
    }
    function processRootScheduleInMicrotask() {
      mightHavePendingSyncWork = didScheduleMicrotask = false;
      var syncTransitionLanes = 0;
      0 !== currentEventTransitionLane && (shouldAttemptEagerTransition() && (syncTransitionLanes = currentEventTransitionLane), currentEventTransitionLane = 0);
      for (var currentTime = now(), prev2 = null, root2 = firstScheduledRoot; null !== root2; ) {
        var next2 = root2.next, nextLanes = scheduleTaskForRootDuringMicrotask(root2, currentTime);
        if (0 === nextLanes)
          root2.next = null, null === prev2 ? firstScheduledRoot = next2 : prev2.next = next2, null === next2 && (lastScheduledRoot = prev2);
        else if (prev2 = root2, 0 !== syncTransitionLanes || 0 !== (nextLanes & 3))
          mightHavePendingSyncWork = true;
        root2 = next2;
      }
      flushSyncWorkAcrossRoots_impl(syncTransitionLanes, false);
    }
    function scheduleTaskForRootDuringMicrotask(root2, currentTime) {
      for (var suspendedLanes = root2.suspendedLanes, pingedLanes = root2.pingedLanes, expirationTimes = root2.expirationTimes, lanes = root2.pendingLanes & -62914561; 0 < lanes; ) {
        var index$3 = 31 - clz32(lanes), lane = 1 << index$3, expirationTime = expirationTimes[index$3];
        if (-1 === expirationTime) {
          if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes))
            expirationTimes[index$3] = computeExpirationTime(lane, currentTime);
        } else expirationTime <= currentTime && (root2.expiredLanes |= lane);
        lanes &= ~lane;
      }
      currentTime = workInProgressRoot;
      suspendedLanes = workInProgressRootRenderLanes;
      suspendedLanes = getNextLanes(
        root2,
        root2 === currentTime ? suspendedLanes : 0,
        null !== root2.cancelPendingCommit || -1 !== root2.timeoutHandle
      );
      pingedLanes = root2.callbackNode;
      if (0 === suspendedLanes || root2 === currentTime && (2 === workInProgressSuspendedReason || 9 === workInProgressSuspendedReason) || null !== root2.cancelPendingCommit)
        return null !== pingedLanes && null !== pingedLanes && cancelCallback$1(pingedLanes), root2.callbackNode = null, root2.callbackPriority = 0;
      if (0 === (suspendedLanes & 3) || checkIfRootIsPrerendering(root2, suspendedLanes)) {
        currentTime = suspendedLanes & -suspendedLanes;
        if (currentTime === root2.callbackPriority) return currentTime;
        null !== pingedLanes && cancelCallback$1(pingedLanes);
        switch (lanesToEventPriority(suspendedLanes)) {
          case 2:
          case 8:
            suspendedLanes = UserBlockingPriority;
            break;
          case 32:
            suspendedLanes = NormalPriority$1;
            break;
          case 268435456:
            suspendedLanes = IdlePriority;
            break;
          default:
            suspendedLanes = NormalPriority$1;
        }
        pingedLanes = performWorkOnRootViaSchedulerTask.bind(null, root2);
        suspendedLanes = scheduleCallback$3(suspendedLanes, pingedLanes);
        root2.callbackPriority = currentTime;
        root2.callbackNode = suspendedLanes;
        return currentTime;
      }
      null !== pingedLanes && null !== pingedLanes && cancelCallback$1(pingedLanes);
      root2.callbackPriority = 2;
      root2.callbackNode = null;
      return 2;
    }
    function performWorkOnRootViaSchedulerTask(root2, didTimeout) {
      if (0 !== pendingEffectsStatus && 5 !== pendingEffectsStatus)
        return root2.callbackNode = null, root2.callbackPriority = 0, null;
      var originalCallbackNode = root2.callbackNode;
      if (flushPendingEffects(true) && root2.callbackNode !== originalCallbackNode)
        return null;
      var workInProgressRootRenderLanes$jscomp$0 = workInProgressRootRenderLanes;
      workInProgressRootRenderLanes$jscomp$0 = getNextLanes(
        root2,
        root2 === workInProgressRoot ? workInProgressRootRenderLanes$jscomp$0 : 0,
        null !== root2.cancelPendingCommit || -1 !== root2.timeoutHandle
      );
      if (0 === workInProgressRootRenderLanes$jscomp$0) return null;
      performWorkOnRoot(root2, workInProgressRootRenderLanes$jscomp$0, didTimeout);
      scheduleTaskForRootDuringMicrotask(root2, now());
      return null != root2.callbackNode && root2.callbackNode === originalCallbackNode ? performWorkOnRootViaSchedulerTask.bind(null, root2) : null;
    }
    function performSyncWorkOnRoot(root2, lanes) {
      if (flushPendingEffects()) return null;
      performWorkOnRoot(root2, lanes, true);
    }
    function scheduleImmediateRootScheduleTask() {
      scheduleMicrotask(function() {
        0 !== (executionContext & 6) ? scheduleCallback$3(
          ImmediatePriority,
          processRootScheduleInImmediateTask
        ) : processRootScheduleInMicrotask();
      });
    }
    function requestTransitionLane() {
      0 === currentEventTransitionLane && (currentEventTransitionLane = claimNextTransitionLane());
      return currentEventTransitionLane;
    }
    function coerceFormActionProp(actionProp) {
      return null == actionProp || "symbol" === typeof actionProp || "boolean" === typeof actionProp ? null : "function" === typeof actionProp ? actionProp : sanitizeURL("" + actionProp);
    }
    function createFormDataWithSubmitter(form, submitter) {
      var temp = submitter.ownerDocument.createElement("input");
      temp.name = submitter.name;
      temp.value = submitter.value;
      form.id && temp.setAttribute("form", form.id);
      submitter.parentNode.insertBefore(temp, submitter);
      form = new FormData(form);
      temp.parentNode.removeChild(temp);
      return form;
    }
    function extractEvents$1(dispatchQueue, domEventName, maybeTargetInst, nativeEvent, nativeEventTarget) {
      if ("submit" === domEventName && maybeTargetInst && maybeTargetInst.stateNode === nativeEventTarget) {
        var action = coerceFormActionProp(
          (nativeEventTarget[internalPropsKey] || null).action
        ), submitter = nativeEvent.submitter;
        submitter && (domEventName = (domEventName = submitter[internalPropsKey] || null) ? coerceFormActionProp(domEventName.formAction) : submitter.getAttribute("formAction"), null !== domEventName && (action = domEventName, submitter = null));
        var event = new SyntheticEvent(
          "action",
          "action",
          null,
          nativeEvent,
          nativeEventTarget
        );
        dispatchQueue.push({
          event,
          listeners: [
            {
              instance: null,
              listener: function() {
                if (nativeEvent.defaultPrevented) {
                  if (0 !== currentEventTransitionLane) {
                    var formData = submitter ? createFormDataWithSubmitter(nativeEventTarget, submitter) : new FormData(nativeEventTarget);
                    startHostTransition(
                      maybeTargetInst,
                      {
                        pending: true,
                        data: formData,
                        method: nativeEventTarget.method,
                        action
                      },
                      null,
                      formData
                    );
                  }
                } else
                  "function" === typeof action && (event.preventDefault(), formData = submitter ? createFormDataWithSubmitter(nativeEventTarget, submitter) : new FormData(nativeEventTarget), startHostTransition(
                    maybeTargetInst,
                    {
                      pending: true,
                      data: formData,
                      method: nativeEventTarget.method,
                      action
                    },
                    action,
                    formData
                  ));
              },
              currentTarget: nativeEventTarget
            }
          ]
        });
      }
    }
    for (i$jscomp$inline_1528 = 0; i$jscomp$inline_1528 < simpleEventPluginEvents.length; i$jscomp$inline_1528++) {
      eventName$jscomp$inline_1529 = simpleEventPluginEvents[i$jscomp$inline_1528], domEventName$jscomp$inline_1530 = eventName$jscomp$inline_1529.toLowerCase(), capitalizedEvent$jscomp$inline_1531 = eventName$jscomp$inline_1529[0].toUpperCase() + eventName$jscomp$inline_1529.slice(1);
      registerSimpleEvent(
        domEventName$jscomp$inline_1530,
        "on" + capitalizedEvent$jscomp$inline_1531
      );
    }
    var eventName$jscomp$inline_1529;
    var domEventName$jscomp$inline_1530;
    var capitalizedEvent$jscomp$inline_1531;
    var i$jscomp$inline_1528;
    registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
    registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
    registerSimpleEvent(ANIMATION_START, "onAnimationStart");
    registerSimpleEvent("dblclick", "onDoubleClick");
    registerSimpleEvent("focusin", "onFocus");
    registerSimpleEvent("focusout", "onBlur");
    registerSimpleEvent(TRANSITION_RUN, "onTransitionRun");
    registerSimpleEvent(TRANSITION_START, "onTransitionStart");
    registerSimpleEvent(TRANSITION_CANCEL, "onTransitionCancel");
    registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
    registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
    registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
    registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
    registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
    registerTwoPhaseEvent(
      "onChange",
      "change click focusin focusout input keydown keyup selectionchange".split(" ")
    );
    registerTwoPhaseEvent(
      "onSelect",
      "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(
        " "
      )
    );
    registerTwoPhaseEvent("onBeforeInput", [
      "compositionend",
      "keypress",
      "textInput",
      "paste"
    ]);
    registerTwoPhaseEvent(
      "onCompositionEnd",
      "compositionend focusout keydown keypress keyup mousedown".split(" ")
    );
    registerTwoPhaseEvent(
      "onCompositionStart",
      "compositionstart focusout keydown keypress keyup mousedown".split(" ")
    );
    registerTwoPhaseEvent(
      "onCompositionUpdate",
      "compositionupdate focusout keydown keypress keyup mousedown".split(" ")
    );
    var mediaEventTypes = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(
      " "
    );
    var nonDelegatedEvents = new Set(
      "beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(mediaEventTypes)
    );
    function processDispatchQueue(dispatchQueue, eventSystemFlags) {
      eventSystemFlags = 0 !== (eventSystemFlags & 4);
      for (var i = 0; i < dispatchQueue.length; i++) {
        var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event;
        _dispatchQueue$i = _dispatchQueue$i.listeners;
        a: {
          var previousInstance = void 0;
          if (eventSystemFlags)
            for (var i$jscomp$0 = _dispatchQueue$i.length - 1; 0 <= i$jscomp$0; i$jscomp$0--) {
              var _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget;
              _dispatchListeners$i = _dispatchListeners$i.listener;
              if (instance !== previousInstance && event.isPropagationStopped())
                break a;
              previousInstance = _dispatchListeners$i;
              event.currentTarget = currentTarget;
              try {
                previousInstance(event);
              } catch (error) {
                reportGlobalError(error);
              }
              event.currentTarget = null;
              previousInstance = instance;
            }
          else
            for (i$jscomp$0 = 0; i$jscomp$0 < _dispatchQueue$i.length; i$jscomp$0++) {
              _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0];
              instance = _dispatchListeners$i.instance;
              currentTarget = _dispatchListeners$i.currentTarget;
              _dispatchListeners$i = _dispatchListeners$i.listener;
              if (instance !== previousInstance && event.isPropagationStopped())
                break a;
              previousInstance = _dispatchListeners$i;
              event.currentTarget = currentTarget;
              try {
                previousInstance(event);
              } catch (error) {
                reportGlobalError(error);
              }
              event.currentTarget = null;
              previousInstance = instance;
            }
        }
      }
    }
    function listenToNonDelegatedEvent(domEventName, targetElement) {
      var JSCompiler_inline_result = targetElement[internalEventHandlersKey];
      void 0 === JSCompiler_inline_result && (JSCompiler_inline_result = targetElement[internalEventHandlersKey] = /* @__PURE__ */ new Set());
      var listenerSetKey = domEventName + "__bubble";
      JSCompiler_inline_result.has(listenerSetKey) || (addTrappedEventListener(targetElement, domEventName, 2, false), JSCompiler_inline_result.add(listenerSetKey));
    }
    function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
      var eventSystemFlags = 0;
      isCapturePhaseListener && (eventSystemFlags |= 4);
      addTrappedEventListener(
        target,
        domEventName,
        eventSystemFlags,
        isCapturePhaseListener
      );
    }
    var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
    function listenToAllSupportedEvents(rootContainerElement) {
      if (!rootContainerElement[listeningMarker]) {
        rootContainerElement[listeningMarker] = true;
        allNativeEvents.forEach(function(domEventName) {
          "selectionchange" !== domEventName && (nonDelegatedEvents.has(domEventName) || listenToNativeEvent(domEventName, false, rootContainerElement), listenToNativeEvent(domEventName, true, rootContainerElement));
        });
        var ownerDocument = 9 === rootContainerElement.nodeType ? rootContainerElement : rootContainerElement.ownerDocument;
        null === ownerDocument || ownerDocument[listeningMarker] || (ownerDocument[listeningMarker] = true, listenToNativeEvent("selectionchange", false, ownerDocument));
      }
    }
    function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener) {
      switch (getEventPriority(domEventName)) {
        case 2:
          var listenerWrapper = dispatchDiscreteEvent;
          break;
        case 8:
          listenerWrapper = dispatchContinuousEvent;
          break;
        default:
          listenerWrapper = dispatchEvent;
      }
      eventSystemFlags = listenerWrapper.bind(
        null,
        domEventName,
        eventSystemFlags,
        targetContainer
      );
      listenerWrapper = void 0;
      !passiveBrowserEventsSupported || "touchstart" !== domEventName && "touchmove" !== domEventName && "wheel" !== domEventName || (listenerWrapper = true);
      isCapturePhaseListener ? void 0 !== listenerWrapper ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
        capture: true,
        passive: listenerWrapper
      }) : targetContainer.addEventListener(domEventName, eventSystemFlags, true) : void 0 !== listenerWrapper ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
        passive: listenerWrapper
      }) : targetContainer.addEventListener(domEventName, eventSystemFlags, false);
    }
    function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst$jscomp$0, targetContainer) {
      var ancestorInst = targetInst$jscomp$0;
      if (0 === (eventSystemFlags & 1) && 0 === (eventSystemFlags & 2) && null !== targetInst$jscomp$0)
        a: for (; ; ) {
          if (null === targetInst$jscomp$0) return;
          var nodeTag = targetInst$jscomp$0.tag;
          if (3 === nodeTag || 4 === nodeTag) {
            var container = targetInst$jscomp$0.stateNode.containerInfo;
            if (container === targetContainer) break;
            if (4 === nodeTag)
              for (nodeTag = targetInst$jscomp$0.return; null !== nodeTag; ) {
                var grandTag = nodeTag.tag;
                if ((3 === grandTag || 4 === grandTag) && nodeTag.stateNode.containerInfo === targetContainer)
                  return;
                nodeTag = nodeTag.return;
              }
            for (; null !== container; ) {
              nodeTag = getClosestInstanceFromNode(container);
              if (null === nodeTag) return;
              grandTag = nodeTag.tag;
              if (5 === grandTag || 6 === grandTag || 26 === grandTag || 27 === grandTag) {
                targetInst$jscomp$0 = ancestorInst = nodeTag;
                continue a;
              }
              container = container.parentNode;
            }
          }
          targetInst$jscomp$0 = targetInst$jscomp$0.return;
        }
      batchedUpdates$1(function() {
        var targetInst = ancestorInst, nativeEventTarget = getEventTarget(nativeEvent), dispatchQueue = [];
        a: {
          var reactName = topLevelEventsToReactNames.get(domEventName);
          if (void 0 !== reactName) {
            var SyntheticEventCtor = SyntheticEvent, reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (0 === getEventCharCode(nativeEvent)) break a;
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (2 === nativeEvent.button) break a;
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
              case "scrollend":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
              case "toggle":
              case "beforetoggle":
                SyntheticEventCtor = SyntheticToggleEvent;
            }
            var inCapturePhase = 0 !== (eventSystemFlags & 4), accumulateTargetOnly = !inCapturePhase && ("scroll" === domEventName || "scrollend" === domEventName), reactEventName = inCapturePhase ? null !== reactName ? reactName + "Capture" : null : reactName;
            inCapturePhase = [];
            for (var instance = targetInst, lastHostComponent; null !== instance; ) {
              var _instance = instance;
              lastHostComponent = _instance.stateNode;
              _instance = _instance.tag;
              5 !== _instance && 26 !== _instance && 27 !== _instance || null === lastHostComponent || null === reactEventName || (_instance = getListener(instance, reactEventName), null != _instance && inCapturePhase.push(
                createDispatchListener(instance, _instance, lastHostComponent)
              ));
              if (accumulateTargetOnly) break;
              instance = instance.return;
            }
            0 < inCapturePhase.length && (reactName = new SyntheticEventCtor(
              reactName,
              reactEventType,
              null,
              nativeEvent,
              nativeEventTarget
            ), dispatchQueue.push({ event: reactName, listeners: inCapturePhase }));
          }
        }
        if (0 === (eventSystemFlags & 7)) {
          a: {
            reactName = "mouseover" === domEventName || "pointerover" === domEventName;
            SyntheticEventCtor = "mouseout" === domEventName || "pointerout" === domEventName;
            if (reactName && nativeEvent !== currentReplayingEvent && (reactEventType = nativeEvent.relatedTarget || nativeEvent.fromElement) && (getClosestInstanceFromNode(reactEventType) || reactEventType[internalContainerInstanceKey]))
              break a;
            if (SyntheticEventCtor || reactName) {
              reactName = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget : (reactName = nativeEventTarget.ownerDocument) ? reactName.defaultView || reactName.parentWindow : window;
              if (SyntheticEventCtor) {
                if (reactEventType = nativeEvent.relatedTarget || nativeEvent.toElement, SyntheticEventCtor = targetInst, reactEventType = reactEventType ? getClosestInstanceFromNode(reactEventType) : null, null !== reactEventType && (accumulateTargetOnly = getNearestMountedFiber(reactEventType), inCapturePhase = reactEventType.tag, reactEventType !== accumulateTargetOnly || 5 !== inCapturePhase && 27 !== inCapturePhase && 6 !== inCapturePhase))
                  reactEventType = null;
              } else SyntheticEventCtor = null, reactEventType = targetInst;
              if (SyntheticEventCtor !== reactEventType) {
                inCapturePhase = SyntheticMouseEvent;
                _instance = "onMouseLeave";
                reactEventName = "onMouseEnter";
                instance = "mouse";
                if ("pointerout" === domEventName || "pointerover" === domEventName)
                  inCapturePhase = SyntheticPointerEvent, _instance = "onPointerLeave", reactEventName = "onPointerEnter", instance = "pointer";
                accumulateTargetOnly = null == SyntheticEventCtor ? reactName : getNodeFromInstance(SyntheticEventCtor);
                lastHostComponent = null == reactEventType ? reactName : getNodeFromInstance(reactEventType);
                reactName = new inCapturePhase(
                  _instance,
                  instance + "leave",
                  SyntheticEventCtor,
                  nativeEvent,
                  nativeEventTarget
                );
                reactName.target = accumulateTargetOnly;
                reactName.relatedTarget = lastHostComponent;
                _instance = null;
                getClosestInstanceFromNode(nativeEventTarget) === targetInst && (inCapturePhase = new inCapturePhase(
                  reactEventName,
                  instance + "enter",
                  reactEventType,
                  nativeEvent,
                  nativeEventTarget
                ), inCapturePhase.target = lastHostComponent, inCapturePhase.relatedTarget = accumulateTargetOnly, _instance = inCapturePhase);
                accumulateTargetOnly = _instance;
                if (SyntheticEventCtor && reactEventType)
                  b: {
                    inCapturePhase = SyntheticEventCtor;
                    reactEventName = reactEventType;
                    instance = 0;
                    for (lastHostComponent = inCapturePhase; lastHostComponent; lastHostComponent = getParent(lastHostComponent))
                      instance++;
                    lastHostComponent = 0;
                    for (_instance = reactEventName; _instance; _instance = getParent(_instance))
                      lastHostComponent++;
                    for (; 0 < instance - lastHostComponent; )
                      inCapturePhase = getParent(inCapturePhase), instance--;
                    for (; 0 < lastHostComponent - instance; )
                      reactEventName = getParent(reactEventName), lastHostComponent--;
                    for (; instance--; ) {
                      if (inCapturePhase === reactEventName || null !== reactEventName && inCapturePhase === reactEventName.alternate)
                        break b;
                      inCapturePhase = getParent(inCapturePhase);
                      reactEventName = getParent(reactEventName);
                    }
                    inCapturePhase = null;
                  }
                else inCapturePhase = null;
                null !== SyntheticEventCtor && accumulateEnterLeaveListenersForEvent(
                  dispatchQueue,
                  reactName,
                  SyntheticEventCtor,
                  inCapturePhase,
                  false
                );
                null !== reactEventType && null !== accumulateTargetOnly && accumulateEnterLeaveListenersForEvent(
                  dispatchQueue,
                  accumulateTargetOnly,
                  reactEventType,
                  inCapturePhase,
                  true
                );
              }
            }
          }
          a: {
            reactName = targetInst ? getNodeFromInstance(targetInst) : window;
            SyntheticEventCtor = reactName.nodeName && reactName.nodeName.toLowerCase();
            if ("select" === SyntheticEventCtor || "input" === SyntheticEventCtor && "file" === reactName.type)
              var getTargetInstFunc = getTargetInstForChangeEvent;
            else if (isTextInputElement(reactName))
              if (isInputEventSupported)
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                var handleEventFunc = handleEventsForInputEventPolyfill;
              }
            else
              SyntheticEventCtor = reactName.nodeName, !SyntheticEventCtor || "input" !== SyntheticEventCtor.toLowerCase() || "checkbox" !== reactName.type && "radio" !== reactName.type ? targetInst && isCustomElement(targetInst.elementType) && (getTargetInstFunc = getTargetInstForChangeEvent) : getTargetInstFunc = getTargetInstForClickEvent;
            if (getTargetInstFunc && (getTargetInstFunc = getTargetInstFunc(domEventName, targetInst))) {
              createAndAccumulateChangeEvent(
                dispatchQueue,
                getTargetInstFunc,
                nativeEvent,
                nativeEventTarget
              );
              break a;
            }
            handleEventFunc && handleEventFunc(domEventName, reactName, targetInst);
            "focusout" === domEventName && targetInst && "number" === reactName.type && null != targetInst.memoizedProps.value && setDefaultValue(reactName, "number", reactName.value);
          }
          handleEventFunc = targetInst ? getNodeFromInstance(targetInst) : window;
          switch (domEventName) {
            case "focusin":
              if (isTextInputElement(handleEventFunc) || "true" === handleEventFunc.contentEditable)
                activeElement = handleEventFunc, activeElementInst = targetInst, lastSelection = null;
              break;
            case "focusout":
              lastSelection = activeElementInst = activeElement = null;
              break;
            case "mousedown":
              mouseDown = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              mouseDown = false;
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
              break;
            case "selectionchange":
              if (skipSelectionChangeEvent) break;
            case "keydown":
            case "keyup":
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          }
          var fallbackData;
          if (canUseCompositionEvent)
            b: {
              switch (domEventName) {
                case "compositionstart":
                  var eventType = "onCompositionStart";
                  break b;
                case "compositionend":
                  eventType = "onCompositionEnd";
                  break b;
                case "compositionupdate":
                  eventType = "onCompositionUpdate";
                  break b;
              }
              eventType = void 0;
            }
          else
            isComposing ? isFallbackCompositionEnd(domEventName, nativeEvent) && (eventType = "onCompositionEnd") : "keydown" === domEventName && 229 === nativeEvent.keyCode && (eventType = "onCompositionStart");
          eventType && (useFallbackCompositionData && "ko" !== nativeEvent.locale && (isComposing || "onCompositionStart" !== eventType ? "onCompositionEnd" === eventType && isComposing && (fallbackData = getData()) : (root = nativeEventTarget, startText = "value" in root ? root.value : root.textContent, isComposing = true)), handleEventFunc = accumulateTwoPhaseListeners(targetInst, eventType), 0 < handleEventFunc.length && (eventType = new SyntheticCompositionEvent(
            eventType,
            domEventName,
            null,
            nativeEvent,
            nativeEventTarget
          ), dispatchQueue.push({ event: eventType, listeners: handleEventFunc }), fallbackData ? eventType.data = fallbackData : (fallbackData = getDataFromCustomEvent(nativeEvent), null !== fallbackData && (eventType.data = fallbackData))));
          if (fallbackData = canUseTextInputEvent ? getNativeBeforeInputChars(domEventName, nativeEvent) : getFallbackBeforeInputChars(domEventName, nativeEvent))
            eventType = accumulateTwoPhaseListeners(targetInst, "onBeforeInput"), 0 < eventType.length && (handleEventFunc = new SyntheticCompositionEvent(
              "onBeforeInput",
              "beforeinput",
              null,
              nativeEvent,
              nativeEventTarget
            ), dispatchQueue.push({
              event: handleEventFunc,
              listeners: eventType
            }), handleEventFunc.data = fallbackData);
          extractEvents$1(
            dispatchQueue,
            domEventName,
            targetInst,
            nativeEvent,
            nativeEventTarget
          );
        }
        processDispatchQueue(dispatchQueue, eventSystemFlags);
      });
    }
    function createDispatchListener(instance, listener, currentTarget) {
      return {
        instance,
        listener,
        currentTarget
      };
    }
    function accumulateTwoPhaseListeners(targetFiber, reactName) {
      for (var captureName = reactName + "Capture", listeners = []; null !== targetFiber; ) {
        var _instance2 = targetFiber, stateNode = _instance2.stateNode;
        _instance2 = _instance2.tag;
        5 !== _instance2 && 26 !== _instance2 && 27 !== _instance2 || null === stateNode || (_instance2 = getListener(targetFiber, captureName), null != _instance2 && listeners.unshift(
          createDispatchListener(targetFiber, _instance2, stateNode)
        ), _instance2 = getListener(targetFiber, reactName), null != _instance2 && listeners.push(
          createDispatchListener(targetFiber, _instance2, stateNode)
        ));
        if (3 === targetFiber.tag) return listeners;
        targetFiber = targetFiber.return;
      }
      return [];
    }
    function getParent(inst) {
      if (null === inst) return null;
      do
        inst = inst.return;
      while (inst && 5 !== inst.tag && 27 !== inst.tag);
      return inst ? inst : null;
    }
    function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
      for (var registrationName = event._reactName, listeners = []; null !== target && target !== common; ) {
        var _instance3 = target, alternate = _instance3.alternate, stateNode = _instance3.stateNode;
        _instance3 = _instance3.tag;
        if (null !== alternate && alternate === common) break;
        5 !== _instance3 && 26 !== _instance3 && 27 !== _instance3 || null === stateNode || (alternate = stateNode, inCapturePhase ? (stateNode = getListener(target, registrationName), null != stateNode && listeners.unshift(
          createDispatchListener(target, stateNode, alternate)
        )) : inCapturePhase || (stateNode = getListener(target, registrationName), null != stateNode && listeners.push(
          createDispatchListener(target, stateNode, alternate)
        )));
        target = target.return;
      }
      0 !== listeners.length && dispatchQueue.push({ event, listeners });
    }
    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
    var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
    function normalizeMarkupForTextOrAttribute(markup) {
      return ("string" === typeof markup ? markup : "" + markup).replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
    }
    function checkForUnmatchedText(serverText, clientText) {
      clientText = normalizeMarkupForTextOrAttribute(clientText);
      return normalizeMarkupForTextOrAttribute(serverText) === clientText ? true : false;
    }
    function noop$1() {
    }
    function setProp(domElement, tag, key, value, props, prevValue) {
      switch (key) {
        case "children":
          "string" === typeof value ? "body" === tag || "textarea" === tag && "" === value || setTextContent(domElement, value) : ("number" === typeof value || "bigint" === typeof value) && "body" !== tag && setTextContent(domElement, "" + value);
          break;
        case "className":
          setValueForKnownAttribute(domElement, "class", value);
          break;
        case "tabIndex":
          setValueForKnownAttribute(domElement, "tabindex", value);
          break;
        case "dir":
        case "role":
        case "viewBox":
        case "width":
        case "height":
          setValueForKnownAttribute(domElement, key, value);
          break;
        case "style":
          setValueForStyles(domElement, value, prevValue);
          break;
        case "data":
          if ("object" !== tag) {
            setValueForKnownAttribute(domElement, "data", value);
            break;
          }
        case "src":
        case "href":
          if ("" === value && ("a" !== tag || "href" !== key)) {
            domElement.removeAttribute(key);
            break;
          }
          if (null == value || "function" === typeof value || "symbol" === typeof value || "boolean" === typeof value) {
            domElement.removeAttribute(key);
            break;
          }
          value = sanitizeURL("" + value);
          domElement.setAttribute(key, value);
          break;
        case "action":
        case "formAction":
          if ("function" === typeof value) {
            domElement.setAttribute(
              key,
              "javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')"
            );
            break;
          } else
            "function" === typeof prevValue && ("formAction" === key ? ("input" !== tag && setProp(domElement, tag, "name", props.name, props, null), setProp(
              domElement,
              tag,
              "formEncType",
              props.formEncType,
              props,
              null
            ), setProp(
              domElement,
              tag,
              "formMethod",
              props.formMethod,
              props,
              null
            ), setProp(
              domElement,
              tag,
              "formTarget",
              props.formTarget,
              props,
              null
            )) : (setProp(domElement, tag, "encType", props.encType, props, null), setProp(domElement, tag, "method", props.method, props, null), setProp(domElement, tag, "target", props.target, props, null)));
          if (null == value || "symbol" === typeof value || "boolean" === typeof value) {
            domElement.removeAttribute(key);
            break;
          }
          value = sanitizeURL("" + value);
          domElement.setAttribute(key, value);
          break;
        case "onClick":
          null != value && (domElement.onclick = noop$1);
          break;
        case "onScroll":
          null != value && listenToNonDelegatedEvent("scroll", domElement);
          break;
        case "onScrollEnd":
          null != value && listenToNonDelegatedEvent("scrollend", domElement);
          break;
        case "dangerouslySetInnerHTML":
          if (null != value) {
            if ("object" !== typeof value || !("__html" in value))
              throw Error(formatProdErrorMessage(61));
            key = value.__html;
            if (null != key) {
              if (null != props.children) throw Error(formatProdErrorMessage(60));
              domElement.innerHTML = key;
            }
          }
          break;
        case "multiple":
          domElement.multiple = value && "function" !== typeof value && "symbol" !== typeof value;
          break;
        case "muted":
          domElement.muted = value && "function" !== typeof value && "symbol" !== typeof value;
          break;
        case "suppressContentEditableWarning":
        case "suppressHydrationWarning":
        case "defaultValue":
        case "defaultChecked":
        case "innerHTML":
        case "ref":
          break;
        case "autoFocus":
          break;
        case "xlinkHref":
          if (null == value || "function" === typeof value || "boolean" === typeof value || "symbol" === typeof value) {
            domElement.removeAttribute("xlink:href");
            break;
          }
          key = sanitizeURL("" + value);
          domElement.setAttributeNS(
            "http://www.w3.org/1999/xlink",
            "xlink:href",
            key
          );
          break;
        case "contentEditable":
        case "spellCheck":
        case "draggable":
        case "value":
        case "autoReverse":
        case "externalResourcesRequired":
        case "focusable":
        case "preserveAlpha":
          null != value && "function" !== typeof value && "symbol" !== typeof value ? domElement.setAttribute(key, "" + value) : domElement.removeAttribute(key);
          break;
        case "inert":
        case "allowFullScreen":
        case "async":
        case "autoPlay":
        case "controls":
        case "default":
        case "defer":
        case "disabled":
        case "disablePictureInPicture":
        case "disableRemotePlayback":
        case "formNoValidate":
        case "hidden":
        case "loop":
        case "noModule":
        case "noValidate":
        case "open":
        case "playsInline":
        case "readOnly":
        case "required":
        case "reversed":
        case "scoped":
        case "seamless":
        case "itemScope":
          value && "function" !== typeof value && "symbol" !== typeof value ? domElement.setAttribute(key, "") : domElement.removeAttribute(key);
          break;
        case "capture":
        case "download":
          true === value ? domElement.setAttribute(key, "") : false !== value && null != value && "function" !== typeof value && "symbol" !== typeof value ? domElement.setAttribute(key, value) : domElement.removeAttribute(key);
          break;
        case "cols":
        case "rows":
        case "size":
        case "span":
          null != value && "function" !== typeof value && "symbol" !== typeof value && !isNaN(value) && 1 <= value ? domElement.setAttribute(key, value) : domElement.removeAttribute(key);
          break;
        case "rowSpan":
        case "start":
          null == value || "function" === typeof value || "symbol" === typeof value || isNaN(value) ? domElement.removeAttribute(key) : domElement.setAttribute(key, value);
          break;
        case "popover":
          listenToNonDelegatedEvent("beforetoggle", domElement);
          listenToNonDelegatedEvent("toggle", domElement);
          setValueForAttribute(domElement, "popover", value);
          break;
        case "xlinkActuate":
          setValueForNamespacedAttribute(
            domElement,
            "http://www.w3.org/1999/xlink",
            "xlink:actuate",
            value
          );
          break;
        case "xlinkArcrole":
          setValueForNamespacedAttribute(
            domElement,
            "http://www.w3.org/1999/xlink",
            "xlink:arcrole",
            value
          );
          break;
        case "xlinkRole":
          setValueForNamespacedAttribute(
            domElement,
            "http://www.w3.org/1999/xlink",
            "xlink:role",
            value
          );
          break;
        case "xlinkShow":
          setValueForNamespacedAttribute(
            domElement,
            "http://www.w3.org/1999/xlink",
            "xlink:show",
            value
          );
          break;
        case "xlinkTitle":
          setValueForNamespacedAttribute(
            domElement,
            "http://www.w3.org/1999/xlink",
            "xlink:title",
            value
          );
          break;
        case "xlinkType":
          setValueForNamespacedAttribute(
            domElement,
            "http://www.w3.org/1999/xlink",
            "xlink:type",
            value
          );
          break;
        case "xmlBase":
          setValueForNamespacedAttribute(
            domElement,
            "http://www.w3.org/XML/1998/namespace",
            "xml:base",
            value
          );
          break;
        case "xmlLang":
          setValueForNamespacedAttribute(
            domElement,
            "http://www.w3.org/XML/1998/namespace",
            "xml:lang",
            value
          );
          break;
        case "xmlSpace":
          setValueForNamespacedAttribute(
            domElement,
            "http://www.w3.org/XML/1998/namespace",
            "xml:space",
            value
          );
          break;
        case "is":
          setValueForAttribute(domElement, "is", value);
          break;
        case "innerText":
        case "textContent":
          break;
        default:
          if (!(2 < key.length) || "o" !== key[0] && "O" !== key[0] || "n" !== key[1] && "N" !== key[1])
            key = aliases.get(key) || key, setValueForAttribute(domElement, key, value);
      }
    }
    function setPropOnCustomElement(domElement, tag, key, value, props, prevValue) {
      switch (key) {
        case "style":
          setValueForStyles(domElement, value, prevValue);
          break;
        case "dangerouslySetInnerHTML":
          if (null != value) {
            if ("object" !== typeof value || !("__html" in value))
              throw Error(formatProdErrorMessage(61));
            key = value.__html;
            if (null != key) {
              if (null != props.children) throw Error(formatProdErrorMessage(60));
              domElement.innerHTML = key;
            }
          }
          break;
        case "children":
          "string" === typeof value ? setTextContent(domElement, value) : ("number" === typeof value || "bigint" === typeof value) && setTextContent(domElement, "" + value);
          break;
        case "onScroll":
          null != value && listenToNonDelegatedEvent("scroll", domElement);
          break;
        case "onScrollEnd":
          null != value && listenToNonDelegatedEvent("scrollend", domElement);
          break;
        case "onClick":
          null != value && (domElement.onclick = noop$1);
          break;
        case "suppressContentEditableWarning":
        case "suppressHydrationWarning":
        case "innerHTML":
        case "ref":
          break;
        case "innerText":
        case "textContent":
          break;
        default:
          if (!registrationNameDependencies.hasOwnProperty(key))
            a: {
              if ("o" === key[0] && "n" === key[1] && (props = key.endsWith("Capture"), tag = key.slice(2, props ? key.length - 7 : void 0), prevValue = domElement[internalPropsKey] || null, prevValue = null != prevValue ? prevValue[key] : null, "function" === typeof prevValue && domElement.removeEventListener(tag, prevValue, props), "function" === typeof value)) {
                "function" !== typeof prevValue && null !== prevValue && (key in domElement ? domElement[key] = null : domElement.hasAttribute(key) && domElement.removeAttribute(key));
                domElement.addEventListener(tag, value, props);
                break a;
              }
              key in domElement ? domElement[key] = value : true === value ? domElement.setAttribute(key, "") : setValueForAttribute(domElement, key, value);
            }
      }
    }
    function setInitialProperties(domElement, tag, props) {
      switch (tag) {
        case "div":
        case "span":
        case "svg":
        case "path":
        case "a":
        case "g":
        case "p":
        case "li":
          break;
        case "img":
          listenToNonDelegatedEvent("error", domElement);
          listenToNonDelegatedEvent("load", domElement);
          var hasSrc = false, hasSrcSet = false, propKey;
          for (propKey in props)
            if (props.hasOwnProperty(propKey)) {
              var propValue = props[propKey];
              if (null != propValue)
                switch (propKey) {
                  case "src":
                    hasSrc = true;
                    break;
                  case "srcSet":
                    hasSrcSet = true;
                    break;
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw Error(formatProdErrorMessage(137, tag));
                  default:
                    setProp(domElement, tag, propKey, propValue, props, null);
                }
            }
          hasSrcSet && setProp(domElement, tag, "srcSet", props.srcSet, props, null);
          hasSrc && setProp(domElement, tag, "src", props.src, props, null);
          return;
        case "input":
          listenToNonDelegatedEvent("invalid", domElement);
          var defaultValue = propKey = propValue = hasSrcSet = null, checked = null, defaultChecked = null;
          for (hasSrc in props)
            if (props.hasOwnProperty(hasSrc)) {
              var propValue$188 = props[hasSrc];
              if (null != propValue$188)
                switch (hasSrc) {
                  case "name":
                    hasSrcSet = propValue$188;
                    break;
                  case "type":
                    propValue = propValue$188;
                    break;
                  case "checked":
                    checked = propValue$188;
                    break;
                  case "defaultChecked":
                    defaultChecked = propValue$188;
                    break;
                  case "value":
                    propKey = propValue$188;
                    break;
                  case "defaultValue":
                    defaultValue = propValue$188;
                    break;
                  case "children":
                  case "dangerouslySetInnerHTML":
                    if (null != propValue$188)
                      throw Error(formatProdErrorMessage(137, tag));
                    break;
                  default:
                    setProp(domElement, tag, hasSrc, propValue$188, props, null);
                }
            }
          initInput(
            domElement,
            propKey,
            defaultValue,
            checked,
            defaultChecked,
            propValue,
            hasSrcSet,
            false
          );
          track(domElement);
          return;
        case "select":
          listenToNonDelegatedEvent("invalid", domElement);
          hasSrc = propValue = propKey = null;
          for (hasSrcSet in props)
            if (props.hasOwnProperty(hasSrcSet) && (defaultValue = props[hasSrcSet], null != defaultValue))
              switch (hasSrcSet) {
                case "value":
                  propKey = defaultValue;
                  break;
                case "defaultValue":
                  propValue = defaultValue;
                  break;
                case "multiple":
                  hasSrc = defaultValue;
                default:
                  setProp(domElement, tag, hasSrcSet, defaultValue, props, null);
              }
          tag = propKey;
          props = propValue;
          domElement.multiple = !!hasSrc;
          null != tag ? updateOptions(domElement, !!hasSrc, tag, false) : null != props && updateOptions(domElement, !!hasSrc, props, true);
          return;
        case "textarea":
          listenToNonDelegatedEvent("invalid", domElement);
          propKey = hasSrcSet = hasSrc = null;
          for (propValue in props)
            if (props.hasOwnProperty(propValue) && (defaultValue = props[propValue], null != defaultValue))
              switch (propValue) {
                case "value":
                  hasSrc = defaultValue;
                  break;
                case "defaultValue":
                  hasSrcSet = defaultValue;
                  break;
                case "children":
                  propKey = defaultValue;
                  break;
                case "dangerouslySetInnerHTML":
                  if (null != defaultValue) throw Error(formatProdErrorMessage(91));
                  break;
                default:
                  setProp(domElement, tag, propValue, defaultValue, props, null);
              }
          initTextarea(domElement, hasSrc, hasSrcSet, propKey);
          track(domElement);
          return;
        case "option":
          for (checked in props)
            if (props.hasOwnProperty(checked) && (hasSrc = props[checked], null != hasSrc))
              switch (checked) {
                case "selected":
                  domElement.selected = hasSrc && "function" !== typeof hasSrc && "symbol" !== typeof hasSrc;
                  break;
                default:
                  setProp(domElement, tag, checked, hasSrc, props, null);
              }
          return;
        case "dialog":
          listenToNonDelegatedEvent("beforetoggle", domElement);
          listenToNonDelegatedEvent("toggle", domElement);
          listenToNonDelegatedEvent("cancel", domElement);
          listenToNonDelegatedEvent("close", domElement);
          break;
        case "iframe":
        case "object":
          listenToNonDelegatedEvent("load", domElement);
          break;
        case "video":
        case "audio":
          for (hasSrc = 0; hasSrc < mediaEventTypes.length; hasSrc++)
            listenToNonDelegatedEvent(mediaEventTypes[hasSrc], domElement);
          break;
        case "image":
          listenToNonDelegatedEvent("error", domElement);
          listenToNonDelegatedEvent("load", domElement);
          break;
        case "details":
          listenToNonDelegatedEvent("toggle", domElement);
          break;
        case "embed":
        case "source":
        case "link":
          listenToNonDelegatedEvent("error", domElement), listenToNonDelegatedEvent("load", domElement);
        case "area":
        case "base":
        case "br":
        case "col":
        case "hr":
        case "keygen":
        case "meta":
        case "param":
        case "track":
        case "wbr":
        case "menuitem":
          for (defaultChecked in props)
            if (props.hasOwnProperty(defaultChecked) && (hasSrc = props[defaultChecked], null != hasSrc))
              switch (defaultChecked) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw Error(formatProdErrorMessage(137, tag));
                default:
                  setProp(domElement, tag, defaultChecked, hasSrc, props, null);
              }
          return;
        default:
          if (isCustomElement(tag)) {
            for (propValue$188 in props)
              props.hasOwnProperty(propValue$188) && (hasSrc = props[propValue$188], void 0 !== hasSrc && setPropOnCustomElement(
                domElement,
                tag,
                propValue$188,
                hasSrc,
                props,
                void 0
              ));
            return;
          }
      }
      for (defaultValue in props)
        props.hasOwnProperty(defaultValue) && (hasSrc = props[defaultValue], null != hasSrc && setProp(domElement, tag, defaultValue, hasSrc, props, null));
    }
    function updateProperties(domElement, tag, lastProps, nextProps) {
      switch (tag) {
        case "div":
        case "span":
        case "svg":
        case "path":
        case "a":
        case "g":
        case "p":
        case "li":
          break;
        case "input":
          var name = null, type = null, value = null, defaultValue = null, lastDefaultValue = null, checked = null, defaultChecked = null;
          for (propKey in lastProps) {
            var lastProp = lastProps[propKey];
            if (lastProps.hasOwnProperty(propKey) && null != lastProp)
              switch (propKey) {
                case "checked":
                  break;
                case "value":
                  break;
                case "defaultValue":
                  lastDefaultValue = lastProp;
                default:
                  nextProps.hasOwnProperty(propKey) || setProp(domElement, tag, propKey, null, nextProps, lastProp);
              }
          }
          for (var propKey$205 in nextProps) {
            var propKey = nextProps[propKey$205];
            lastProp = lastProps[propKey$205];
            if (nextProps.hasOwnProperty(propKey$205) && (null != propKey || null != lastProp))
              switch (propKey$205) {
                case "type":
                  type = propKey;
                  break;
                case "name":
                  name = propKey;
                  break;
                case "checked":
                  checked = propKey;
                  break;
                case "defaultChecked":
                  defaultChecked = propKey;
                  break;
                case "value":
                  value = propKey;
                  break;
                case "defaultValue":
                  defaultValue = propKey;
                  break;
                case "children":
                case "dangerouslySetInnerHTML":
                  if (null != propKey)
                    throw Error(formatProdErrorMessage(137, tag));
                  break;
                default:
                  propKey !== lastProp && setProp(
                    domElement,
                    tag,
                    propKey$205,
                    propKey,
                    nextProps,
                    lastProp
                  );
              }
          }
          updateInput(
            domElement,
            value,
            defaultValue,
            lastDefaultValue,
            checked,
            defaultChecked,
            type,
            name
          );
          return;
        case "select":
          propKey = value = defaultValue = propKey$205 = null;
          for (type in lastProps)
            if (lastDefaultValue = lastProps[type], lastProps.hasOwnProperty(type) && null != lastDefaultValue)
              switch (type) {
                case "value":
                  break;
                case "multiple":
                  propKey = lastDefaultValue;
                default:
                  nextProps.hasOwnProperty(type) || setProp(
                    domElement,
                    tag,
                    type,
                    null,
                    nextProps,
                    lastDefaultValue
                  );
              }
          for (name in nextProps)
            if (type = nextProps[name], lastDefaultValue = lastProps[name], nextProps.hasOwnProperty(name) && (null != type || null != lastDefaultValue))
              switch (name) {
                case "value":
                  propKey$205 = type;
                  break;
                case "defaultValue":
                  defaultValue = type;
                  break;
                case "multiple":
                  value = type;
                default:
                  type !== lastDefaultValue && setProp(
                    domElement,
                    tag,
                    name,
                    type,
                    nextProps,
                    lastDefaultValue
                  );
              }
          tag = defaultValue;
          lastProps = value;
          nextProps = propKey;
          null != propKey$205 ? updateOptions(domElement, !!lastProps, propKey$205, false) : !!nextProps !== !!lastProps && (null != tag ? updateOptions(domElement, !!lastProps, tag, true) : updateOptions(domElement, !!lastProps, lastProps ? [] : "", false));
          return;
        case "textarea":
          propKey = propKey$205 = null;
          for (defaultValue in lastProps)
            if (name = lastProps[defaultValue], lastProps.hasOwnProperty(defaultValue) && null != name && !nextProps.hasOwnProperty(defaultValue))
              switch (defaultValue) {
                case "value":
                  break;
                case "children":
                  break;
                default:
                  setProp(domElement, tag, defaultValue, null, nextProps, name);
              }
          for (value in nextProps)
            if (name = nextProps[value], type = lastProps[value], nextProps.hasOwnProperty(value) && (null != name || null != type))
              switch (value) {
                case "value":
                  propKey$205 = name;
                  break;
                case "defaultValue":
                  propKey = name;
                  break;
                case "children":
                  break;
                case "dangerouslySetInnerHTML":
                  if (null != name) throw Error(formatProdErrorMessage(91));
                  break;
                default:
                  name !== type && setProp(domElement, tag, value, name, nextProps, type);
              }
          updateTextarea(domElement, propKey$205, propKey);
          return;
        case "option":
          for (var propKey$221 in lastProps)
            if (propKey$205 = lastProps[propKey$221], lastProps.hasOwnProperty(propKey$221) && null != propKey$205 && !nextProps.hasOwnProperty(propKey$221))
              switch (propKey$221) {
                case "selected":
                  domElement.selected = false;
                  break;
                default:
                  setProp(
                    domElement,
                    tag,
                    propKey$221,
                    null,
                    nextProps,
                    propKey$205
                  );
              }
          for (lastDefaultValue in nextProps)
            if (propKey$205 = nextProps[lastDefaultValue], propKey = lastProps[lastDefaultValue], nextProps.hasOwnProperty(lastDefaultValue) && propKey$205 !== propKey && (null != propKey$205 || null != propKey))
              switch (lastDefaultValue) {
                case "selected":
                  domElement.selected = propKey$205 && "function" !== typeof propKey$205 && "symbol" !== typeof propKey$205;
                  break;
                default:
                  setProp(
                    domElement,
                    tag,
                    lastDefaultValue,
                    propKey$205,
                    nextProps,
                    propKey
                  );
              }
          return;
        case "img":
        case "link":
        case "area":
        case "base":
        case "br":
        case "col":
        case "embed":
        case "hr":
        case "keygen":
        case "meta":
        case "param":
        case "source":
        case "track":
        case "wbr":
        case "menuitem":
          for (var propKey$226 in lastProps)
            propKey$205 = lastProps[propKey$226], lastProps.hasOwnProperty(propKey$226) && null != propKey$205 && !nextProps.hasOwnProperty(propKey$226) && setProp(domElement, tag, propKey$226, null, nextProps, propKey$205);
          for (checked in nextProps)
            if (propKey$205 = nextProps[checked], propKey = lastProps[checked], nextProps.hasOwnProperty(checked) && propKey$205 !== propKey && (null != propKey$205 || null != propKey))
              switch (checked) {
                case "children":
                case "dangerouslySetInnerHTML":
                  if (null != propKey$205)
                    throw Error(formatProdErrorMessage(137, tag));
                  break;
                default:
                  setProp(
                    domElement,
                    tag,
                    checked,
                    propKey$205,
                    nextProps,
                    propKey
                  );
              }
          return;
        default:
          if (isCustomElement(tag)) {
            for (var propKey$231 in lastProps)
              propKey$205 = lastProps[propKey$231], lastProps.hasOwnProperty(propKey$231) && void 0 !== propKey$205 && !nextProps.hasOwnProperty(propKey$231) && setPropOnCustomElement(
                domElement,
                tag,
                propKey$231,
                void 0,
                nextProps,
                propKey$205
              );
            for (defaultChecked in nextProps)
              propKey$205 = nextProps[defaultChecked], propKey = lastProps[defaultChecked], !nextProps.hasOwnProperty(defaultChecked) || propKey$205 === propKey || void 0 === propKey$205 && void 0 === propKey || setPropOnCustomElement(
                domElement,
                tag,
                defaultChecked,
                propKey$205,
                nextProps,
                propKey
              );
            return;
          }
      }
      for (var propKey$236 in lastProps)
        propKey$205 = lastProps[propKey$236], lastProps.hasOwnProperty(propKey$236) && null != propKey$205 && !nextProps.hasOwnProperty(propKey$236) && setProp(domElement, tag, propKey$236, null, nextProps, propKey$205);
      for (lastProp in nextProps)
        propKey$205 = nextProps[lastProp], propKey = lastProps[lastProp], !nextProps.hasOwnProperty(lastProp) || propKey$205 === propKey || null == propKey$205 && null == propKey || setProp(domElement, tag, lastProp, propKey$205, nextProps, propKey);
    }
    var eventsEnabled = null;
    var selectionInformation = null;
    function getOwnerDocumentFromRootContainer(rootContainerElement) {
      return 9 === rootContainerElement.nodeType ? rootContainerElement : rootContainerElement.ownerDocument;
    }
    function getOwnHostContext(namespaceURI) {
      switch (namespaceURI) {
        case "http://www.w3.org/2000/svg":
          return 1;
        case "http://www.w3.org/1998/Math/MathML":
          return 2;
        default:
          return 0;
      }
    }
    function getChildHostContextProd(parentNamespace, type) {
      if (0 === parentNamespace)
        switch (type) {
          case "svg":
            return 1;
          case "math":
            return 2;
          default:
            return 0;
        }
      return 1 === parentNamespace && "foreignObject" === type ? 0 : parentNamespace;
    }
    function shouldSetTextContent(type, props) {
      return "textarea" === type || "noscript" === type || "string" === typeof props.children || "number" === typeof props.children || "bigint" === typeof props.children || "object" === typeof props.dangerouslySetInnerHTML && null !== props.dangerouslySetInnerHTML && null != props.dangerouslySetInnerHTML.__html;
    }
    var currentPopstateTransitionEvent = null;
    function shouldAttemptEagerTransition() {
      var event = window.event;
      if (event && "popstate" === event.type) {
        if (event === currentPopstateTransitionEvent) return false;
        currentPopstateTransitionEvent = event;
        return true;
      }
      currentPopstateTransitionEvent = null;
      return false;
    }
    var scheduleTimeout = "function" === typeof setTimeout ? setTimeout : void 0;
    var cancelTimeout = "function" === typeof clearTimeout ? clearTimeout : void 0;
    var localPromise = "function" === typeof Promise ? Promise : void 0;
    var scheduleMicrotask = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof localPromise ? function(callback) {
      return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
    } : scheduleTimeout;
    function handleErrorInNextTick(error) {
      setTimeout(function() {
        throw error;
      });
    }
    function isSingletonScope(type) {
      return "head" === type;
    }
    function clearSuspenseBoundary(parentInstance, suspenseInstance) {
      var node2 = suspenseInstance, possiblePreambleContribution = 0, depth = 0;
      do {
        var nextNode = node2.nextSibling;
        parentInstance.removeChild(node2);
        if (nextNode && 8 === nextNode.nodeType)
          if (node2 = nextNode.data, "/$" === node2) {
            if (0 < possiblePreambleContribution && 8 > possiblePreambleContribution) {
              node2 = possiblePreambleContribution;
              var ownerDocument = parentInstance.ownerDocument;
              node2 & 1 && releaseSingletonInstance(ownerDocument.documentElement);
              node2 & 2 && releaseSingletonInstance(ownerDocument.body);
              if (node2 & 4)
                for (node2 = ownerDocument.head, releaseSingletonInstance(node2), ownerDocument = node2.firstChild; ownerDocument; ) {
                  var nextNode$jscomp$0 = ownerDocument.nextSibling, nodeName = ownerDocument.nodeName;
                  ownerDocument[internalHoistableMarker] || "SCRIPT" === nodeName || "STYLE" === nodeName || "LINK" === nodeName && "stylesheet" === ownerDocument.rel.toLowerCase() || node2.removeChild(ownerDocument);
                  ownerDocument = nextNode$jscomp$0;
                }
            }
            if (0 === depth) {
              parentInstance.removeChild(nextNode);
              retryIfBlockedOn(suspenseInstance);
              return;
            }
            depth--;
          } else
            "$" === node2 || "$?" === node2 || "$!" === node2 ? depth++ : possiblePreambleContribution = node2.charCodeAt(0) - 48;
        else possiblePreambleContribution = 0;
        node2 = nextNode;
      } while (node2);
      retryIfBlockedOn(suspenseInstance);
    }
    function clearContainerSparingly(container) {
      var nextNode = container.firstChild;
      nextNode && 10 === nextNode.nodeType && (nextNode = nextNode.nextSibling);
      for (; nextNode; ) {
        var node2 = nextNode;
        nextNode = nextNode.nextSibling;
        switch (node2.nodeName) {
          case "HTML":
          case "HEAD":
          case "BODY":
            clearContainerSparingly(node2);
            detachDeletedInstance(node2);
            continue;
          case "SCRIPT":
          case "STYLE":
            continue;
          case "LINK":
            if ("stylesheet" === node2.rel.toLowerCase()) continue;
        }
        container.removeChild(node2);
      }
    }
    function canHydrateInstance(instance, type, props, inRootOrSingleton) {
      for (; 1 === instance.nodeType; ) {
        var anyProps = props;
        if (instance.nodeName.toLowerCase() !== type.toLowerCase()) {
          if (!inRootOrSingleton && ("INPUT" !== instance.nodeName || "hidden" !== instance.type))
            break;
        } else if (!inRootOrSingleton)
          if ("input" === type && "hidden" === instance.type) {
            var name = null == anyProps.name ? null : "" + anyProps.name;
            if ("hidden" === anyProps.type && instance.getAttribute("name") === name)
              return instance;
          } else return instance;
        else if (!instance[internalHoistableMarker])
          switch (type) {
            case "meta":
              if (!instance.hasAttribute("itemprop")) break;
              return instance;
            case "link":
              name = instance.getAttribute("rel");
              if ("stylesheet" === name && instance.hasAttribute("data-precedence"))
                break;
              else if (name !== anyProps.rel || instance.getAttribute("href") !== (null == anyProps.href || "" === anyProps.href ? null : anyProps.href) || instance.getAttribute("crossorigin") !== (null == anyProps.crossOrigin ? null : anyProps.crossOrigin) || instance.getAttribute("title") !== (null == anyProps.title ? null : anyProps.title))
                break;
              return instance;
            case "style":
              if (instance.hasAttribute("data-precedence")) break;
              return instance;
            case "script":
              name = instance.getAttribute("src");
              if ((name !== (null == anyProps.src ? null : anyProps.src) || instance.getAttribute("type") !== (null == anyProps.type ? null : anyProps.type) || instance.getAttribute("crossorigin") !== (null == anyProps.crossOrigin ? null : anyProps.crossOrigin)) && name && instance.hasAttribute("async") && !instance.hasAttribute("itemprop"))
                break;
              return instance;
            default:
              return instance;
          }
        instance = getNextHydratable(instance.nextSibling);
        if (null === instance) break;
      }
      return null;
    }
    function canHydrateTextInstance(instance, text, inRootOrSingleton) {
      if ("" === text) return null;
      for (; 3 !== instance.nodeType; ) {
        if ((1 !== instance.nodeType || "INPUT" !== instance.nodeName || "hidden" !== instance.type) && !inRootOrSingleton)
          return null;
        instance = getNextHydratable(instance.nextSibling);
        if (null === instance) return null;
      }
      return instance;
    }
    function isSuspenseInstanceFallback(instance) {
      return "$!" === instance.data || "$?" === instance.data && "complete" === instance.ownerDocument.readyState;
    }
    function registerSuspenseInstanceRetry(instance, callback) {
      var ownerDocument = instance.ownerDocument;
      if ("$?" !== instance.data || "complete" === ownerDocument.readyState)
        callback();
      else {
        var listener = function() {
          callback();
          ownerDocument.removeEventListener("DOMContentLoaded", listener);
        };
        ownerDocument.addEventListener("DOMContentLoaded", listener);
        instance._reactRetry = listener;
      }
    }
    function getNextHydratable(node2) {
      for (; null != node2; node2 = node2.nextSibling) {
        var nodeType = node2.nodeType;
        if (1 === nodeType || 3 === nodeType) break;
        if (8 === nodeType) {
          nodeType = node2.data;
          if ("$" === nodeType || "$!" === nodeType || "$?" === nodeType || "F!" === nodeType || "F" === nodeType)
            break;
          if ("/$" === nodeType) return null;
        }
      }
      return node2;
    }
    var previousHydratableOnEnteringScopedSingleton = null;
    function getParentSuspenseInstance(targetInstance) {
      targetInstance = targetInstance.previousSibling;
      for (var depth = 0; targetInstance; ) {
        if (8 === targetInstance.nodeType) {
          var data = targetInstance.data;
          if ("$" === data || "$!" === data || "$?" === data) {
            if (0 === depth) return targetInstance;
            depth--;
          } else "/$" === data && depth++;
        }
        targetInstance = targetInstance.previousSibling;
      }
      return null;
    }
    function resolveSingletonInstance(type, props, rootContainerInstance) {
      props = getOwnerDocumentFromRootContainer(rootContainerInstance);
      switch (type) {
        case "html":
          type = props.documentElement;
          if (!type) throw Error(formatProdErrorMessage(452));
          return type;
        case "head":
          type = props.head;
          if (!type) throw Error(formatProdErrorMessage(453));
          return type;
        case "body":
          type = props.body;
          if (!type) throw Error(formatProdErrorMessage(454));
          return type;
        default:
          throw Error(formatProdErrorMessage(451));
      }
    }
    function releaseSingletonInstance(instance) {
      for (var attributes = instance.attributes; attributes.length; )
        instance.removeAttributeNode(attributes[0]);
      detachDeletedInstance(instance);
    }
    var preloadPropsMap = /* @__PURE__ */ new Map();
    var preconnectsSet = /* @__PURE__ */ new Set();
    function getHoistableRoot(container) {
      return "function" === typeof container.getRootNode ? container.getRootNode() : 9 === container.nodeType ? container : container.ownerDocument;
    }
    var previousDispatcher = ReactDOMSharedInternals.d;
    ReactDOMSharedInternals.d = {
      f: flushSyncWork,
      r: requestFormReset,
      D: prefetchDNS,
      C: preconnect,
      L: preload,
      m: preloadModule,
      X: preinitScript,
      S: preinitStyle,
      M: preinitModuleScript
    };
    function flushSyncWork() {
      var previousWasRendering = previousDispatcher.f(), wasRendering = flushSyncWork$1();
      return previousWasRendering || wasRendering;
    }
    function requestFormReset(form) {
      var formInst = getInstanceFromNode(form);
      null !== formInst && 5 === formInst.tag && "form" === formInst.type ? requestFormReset$1(formInst) : previousDispatcher.r(form);
    }
    var globalDocument = "undefined" === typeof document ? null : document;
    function preconnectAs(rel, href, crossOrigin) {
      var ownerDocument = globalDocument;
      if (ownerDocument && "string" === typeof href && href) {
        var limitedEscapedHref = escapeSelectorAttributeValueInsideDoubleQuotes(href);
        limitedEscapedHref = 'link[rel="' + rel + '"][href="' + limitedEscapedHref + '"]';
        "string" === typeof crossOrigin && (limitedEscapedHref += '[crossorigin="' + crossOrigin + '"]');
        preconnectsSet.has(limitedEscapedHref) || (preconnectsSet.add(limitedEscapedHref), rel = { rel, crossOrigin, href }, null === ownerDocument.querySelector(limitedEscapedHref) && (href = ownerDocument.createElement("link"), setInitialProperties(href, "link", rel), markNodeAsHoistable(href), ownerDocument.head.appendChild(href)));
      }
    }
    function prefetchDNS(href) {
      previousDispatcher.D(href);
      preconnectAs("dns-prefetch", href, null);
    }
    function preconnect(href, crossOrigin) {
      previousDispatcher.C(href, crossOrigin);
      preconnectAs("preconnect", href, crossOrigin);
    }
    function preload(href, as, options2) {
      previousDispatcher.L(href, as, options2);
      var ownerDocument = globalDocument;
      if (ownerDocument && href && as) {
        var preloadSelector = 'link[rel="preload"][as="' + escapeSelectorAttributeValueInsideDoubleQuotes(as) + '"]';
        "image" === as ? options2 && options2.imageSrcSet ? (preloadSelector += '[imagesrcset="' + escapeSelectorAttributeValueInsideDoubleQuotes(
          options2.imageSrcSet
        ) + '"]', "string" === typeof options2.imageSizes && (preloadSelector += '[imagesizes="' + escapeSelectorAttributeValueInsideDoubleQuotes(
          options2.imageSizes
        ) + '"]')) : preloadSelector += '[href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]' : preloadSelector += '[href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]';
        var key = preloadSelector;
        switch (as) {
          case "style":
            key = getStyleKey(href);
            break;
          case "script":
            key = getScriptKey(href);
        }
        preloadPropsMap.has(key) || (href = assign2(
          {
            rel: "preload",
            href: "image" === as && options2 && options2.imageSrcSet ? void 0 : href,
            as
          },
          options2
        ), preloadPropsMap.set(key, href), null !== ownerDocument.querySelector(preloadSelector) || "style" === as && ownerDocument.querySelector(getStylesheetSelectorFromKey(key)) || "script" === as && ownerDocument.querySelector(getScriptSelectorFromKey(key)) || (as = ownerDocument.createElement("link"), setInitialProperties(as, "link", href), markNodeAsHoistable(as), ownerDocument.head.appendChild(as)));
      }
    }
    function preloadModule(href, options2) {
      previousDispatcher.m(href, options2);
      var ownerDocument = globalDocument;
      if (ownerDocument && href) {
        var as = options2 && "string" === typeof options2.as ? options2.as : "script", preloadSelector = 'link[rel="modulepreload"][as="' + escapeSelectorAttributeValueInsideDoubleQuotes(as) + '"][href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]', key = preloadSelector;
        switch (as) {
          case "audioworklet":
          case "paintworklet":
          case "serviceworker":
          case "sharedworker":
          case "worker":
          case "script":
            key = getScriptKey(href);
        }
        if (!preloadPropsMap.has(key) && (href = assign2({ rel: "modulepreload", href }, options2), preloadPropsMap.set(key, href), null === ownerDocument.querySelector(preloadSelector))) {
          switch (as) {
            case "audioworklet":
            case "paintworklet":
            case "serviceworker":
            case "sharedworker":
            case "worker":
            case "script":
              if (ownerDocument.querySelector(getScriptSelectorFromKey(key)))
                return;
          }
          as = ownerDocument.createElement("link");
          setInitialProperties(as, "link", href);
          markNodeAsHoistable(as);
          ownerDocument.head.appendChild(as);
        }
      }
    }
    function preinitStyle(href, precedence, options2) {
      previousDispatcher.S(href, precedence, options2);
      var ownerDocument = globalDocument;
      if (ownerDocument && href) {
        var styles = getResourcesFromRoot(ownerDocument).hoistableStyles, key = getStyleKey(href);
        precedence = precedence || "default";
        var resource = styles.get(key);
        if (!resource) {
          var state = { loading: 0, preload: null };
          if (resource = ownerDocument.querySelector(
            getStylesheetSelectorFromKey(key)
          ))
            state.loading = 5;
          else {
            href = assign2(
              { rel: "stylesheet", href, "data-precedence": precedence },
              options2
            );
            (options2 = preloadPropsMap.get(key)) && adoptPreloadPropsForStylesheet(href, options2);
            var link = resource = ownerDocument.createElement("link");
            markNodeAsHoistable(link);
            setInitialProperties(link, "link", href);
            link._p = new Promise(function(resolve, reject) {
              link.onload = resolve;
              link.onerror = reject;
            });
            link.addEventListener("load", function() {
              state.loading |= 1;
            });
            link.addEventListener("error", function() {
              state.loading |= 2;
            });
            state.loading |= 4;
            insertStylesheet(resource, precedence, ownerDocument);
          }
          resource = {
            type: "stylesheet",
            instance: resource,
            count: 1,
            state
          };
          styles.set(key, resource);
        }
      }
    }
    function preinitScript(src, options2) {
      previousDispatcher.X(src, options2);
      var ownerDocument = globalDocument;
      if (ownerDocument && src) {
        var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts, key = getScriptKey(src), resource = scripts.get(key);
        resource || (resource = ownerDocument.querySelector(getScriptSelectorFromKey(key)), resource || (src = assign2({ src, async: true }, options2), (options2 = preloadPropsMap.get(key)) && adoptPreloadPropsForScript(src, options2), resource = ownerDocument.createElement("script"), markNodeAsHoistable(resource), setInitialProperties(resource, "link", src), ownerDocument.head.appendChild(resource)), resource = {
          type: "script",
          instance: resource,
          count: 1,
          state: null
        }, scripts.set(key, resource));
      }
    }
    function preinitModuleScript(src, options2) {
      previousDispatcher.M(src, options2);
      var ownerDocument = globalDocument;
      if (ownerDocument && src) {
        var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts, key = getScriptKey(src), resource = scripts.get(key);
        resource || (resource = ownerDocument.querySelector(getScriptSelectorFromKey(key)), resource || (src = assign2({ src, async: true, type: "module" }, options2), (options2 = preloadPropsMap.get(key)) && adoptPreloadPropsForScript(src, options2), resource = ownerDocument.createElement("script"), markNodeAsHoistable(resource), setInitialProperties(resource, "link", src), ownerDocument.head.appendChild(resource)), resource = {
          type: "script",
          instance: resource,
          count: 1,
          state: null
        }, scripts.set(key, resource));
      }
    }
    function getResource(type, currentProps, pendingProps, currentResource) {
      var JSCompiler_inline_result = (JSCompiler_inline_result = rootInstanceStackCursor.current) ? getHoistableRoot(JSCompiler_inline_result) : null;
      if (!JSCompiler_inline_result) throw Error(formatProdErrorMessage(446));
      switch (type) {
        case "meta":
        case "title":
          return null;
        case "style":
          return "string" === typeof pendingProps.precedence && "string" === typeof pendingProps.href ? (currentProps = getStyleKey(pendingProps.href), pendingProps = getResourcesFromRoot(
            JSCompiler_inline_result
          ).hoistableStyles, currentResource = pendingProps.get(currentProps), currentResource || (currentResource = {
            type: "style",
            instance: null,
            count: 0,
            state: null
          }, pendingProps.set(currentProps, currentResource)), currentResource) : { type: "void", instance: null, count: 0, state: null };
        case "link":
          if ("stylesheet" === pendingProps.rel && "string" === typeof pendingProps.href && "string" === typeof pendingProps.precedence) {
            type = getStyleKey(pendingProps.href);
            var styles$244 = getResourcesFromRoot(
              JSCompiler_inline_result
            ).hoistableStyles, resource$245 = styles$244.get(type);
            resource$245 || (JSCompiler_inline_result = JSCompiler_inline_result.ownerDocument || JSCompiler_inline_result, resource$245 = {
              type: "stylesheet",
              instance: null,
              count: 0,
              state: { loading: 0, preload: null }
            }, styles$244.set(type, resource$245), (styles$244 = JSCompiler_inline_result.querySelector(
              getStylesheetSelectorFromKey(type)
            )) && !styles$244._p && (resource$245.instance = styles$244, resource$245.state.loading = 5), preloadPropsMap.has(type) || (pendingProps = {
              rel: "preload",
              as: "style",
              href: pendingProps.href,
              crossOrigin: pendingProps.crossOrigin,
              integrity: pendingProps.integrity,
              media: pendingProps.media,
              hrefLang: pendingProps.hrefLang,
              referrerPolicy: pendingProps.referrerPolicy
            }, preloadPropsMap.set(type, pendingProps), styles$244 || preloadStylesheet(
              JSCompiler_inline_result,
              type,
              pendingProps,
              resource$245.state
            )));
            if (currentProps && null === currentResource)
              throw Error(formatProdErrorMessage(528, ""));
            return resource$245;
          }
          if (currentProps && null !== currentResource)
            throw Error(formatProdErrorMessage(529, ""));
          return null;
        case "script":
          return currentProps = pendingProps.async, pendingProps = pendingProps.src, "string" === typeof pendingProps && currentProps && "function" !== typeof currentProps && "symbol" !== typeof currentProps ? (currentProps = getScriptKey(pendingProps), pendingProps = getResourcesFromRoot(
            JSCompiler_inline_result
          ).hoistableScripts, currentResource = pendingProps.get(currentProps), currentResource || (currentResource = {
            type: "script",
            instance: null,
            count: 0,
            state: null
          }, pendingProps.set(currentProps, currentResource)), currentResource) : { type: "void", instance: null, count: 0, state: null };
        default:
          throw Error(formatProdErrorMessage(444, type));
      }
    }
    function getStyleKey(href) {
      return 'href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"';
    }
    function getStylesheetSelectorFromKey(key) {
      return 'link[rel="stylesheet"][' + key + "]";
    }
    function stylesheetPropsFromRawProps(rawProps) {
      return assign2({}, rawProps, {
        "data-precedence": rawProps.precedence,
        precedence: null
      });
    }
    function preloadStylesheet(ownerDocument, key, preloadProps, state) {
      ownerDocument.querySelector('link[rel="preload"][as="style"][' + key + "]") ? state.loading = 1 : (key = ownerDocument.createElement("link"), state.preload = key, key.addEventListener("load", function() {
        return state.loading |= 1;
      }), key.addEventListener("error", function() {
        return state.loading |= 2;
      }), setInitialProperties(key, "link", preloadProps), markNodeAsHoistable(key), ownerDocument.head.appendChild(key));
    }
    function getScriptKey(src) {
      return '[src="' + escapeSelectorAttributeValueInsideDoubleQuotes(src) + '"]';
    }
    function getScriptSelectorFromKey(key) {
      return "script[async]" + key;
    }
    function acquireResource(hoistableRoot, resource, props) {
      resource.count++;
      if (null === resource.instance)
        switch (resource.type) {
          case "style":
            var instance = hoistableRoot.querySelector(
              'style[data-href~="' + escapeSelectorAttributeValueInsideDoubleQuotes(props.href) + '"]'
            );
            if (instance)
              return resource.instance = instance, markNodeAsHoistable(instance), instance;
            var styleProps = assign2({}, props, {
              "data-href": props.href,
              "data-precedence": props.precedence,
              href: null,
              precedence: null
            });
            instance = (hoistableRoot.ownerDocument || hoistableRoot).createElement(
              "style"
            );
            markNodeAsHoistable(instance);
            setInitialProperties(instance, "style", styleProps);
            insertStylesheet(instance, props.precedence, hoistableRoot);
            return resource.instance = instance;
          case "stylesheet":
            styleProps = getStyleKey(props.href);
            var instance$250 = hoistableRoot.querySelector(
              getStylesheetSelectorFromKey(styleProps)
            );
            if (instance$250)
              return resource.state.loading |= 4, resource.instance = instance$250, markNodeAsHoistable(instance$250), instance$250;
            instance = stylesheetPropsFromRawProps(props);
            (styleProps = preloadPropsMap.get(styleProps)) && adoptPreloadPropsForStylesheet(instance, styleProps);
            instance$250 = (hoistableRoot.ownerDocument || hoistableRoot).createElement("link");
            markNodeAsHoistable(instance$250);
            var linkInstance = instance$250;
            linkInstance._p = new Promise(function(resolve, reject) {
              linkInstance.onload = resolve;
              linkInstance.onerror = reject;
            });
            setInitialProperties(instance$250, "link", instance);
            resource.state.loading |= 4;
            insertStylesheet(instance$250, props.precedence, hoistableRoot);
            return resource.instance = instance$250;
          case "script":
            instance$250 = getScriptKey(props.src);
            if (styleProps = hoistableRoot.querySelector(
              getScriptSelectorFromKey(instance$250)
            ))
              return resource.instance = styleProps, markNodeAsHoistable(styleProps), styleProps;
            instance = props;
            if (styleProps = preloadPropsMap.get(instance$250))
              instance = assign2({}, props), adoptPreloadPropsForScript(instance, styleProps);
            hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
            styleProps = hoistableRoot.createElement("script");
            markNodeAsHoistable(styleProps);
            setInitialProperties(styleProps, "link", instance);
            hoistableRoot.head.appendChild(styleProps);
            return resource.instance = styleProps;
          case "void":
            return null;
          default:
            throw Error(formatProdErrorMessage(443, resource.type));
        }
      else
        "stylesheet" === resource.type && 0 === (resource.state.loading & 4) && (instance = resource.instance, resource.state.loading |= 4, insertStylesheet(instance, props.precedence, hoistableRoot));
      return resource.instance;
    }
    function insertStylesheet(instance, precedence, root2) {
      for (var nodes = root2.querySelectorAll(
        'link[rel="stylesheet"][data-precedence],style[data-precedence]'
      ), last = nodes.length ? nodes[nodes.length - 1] : null, prior = last, i = 0; i < nodes.length; i++) {
        var node2 = nodes[i];
        if (node2.dataset.precedence === precedence) prior = node2;
        else if (prior !== last) break;
      }
      prior ? prior.parentNode.insertBefore(instance, prior.nextSibling) : (precedence = 9 === root2.nodeType ? root2.head : root2, precedence.insertBefore(instance, precedence.firstChild));
    }
    function adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps) {
      null == stylesheetProps.crossOrigin && (stylesheetProps.crossOrigin = preloadProps.crossOrigin);
      null == stylesheetProps.referrerPolicy && (stylesheetProps.referrerPolicy = preloadProps.referrerPolicy);
      null == stylesheetProps.title && (stylesheetProps.title = preloadProps.title);
    }
    function adoptPreloadPropsForScript(scriptProps, preloadProps) {
      null == scriptProps.crossOrigin && (scriptProps.crossOrigin = preloadProps.crossOrigin);
      null == scriptProps.referrerPolicy && (scriptProps.referrerPolicy = preloadProps.referrerPolicy);
      null == scriptProps.integrity && (scriptProps.integrity = preloadProps.integrity);
    }
    var tagCaches = null;
    function getHydratableHoistableCache(type, keyAttribute, ownerDocument) {
      if (null === tagCaches) {
        var cache = /* @__PURE__ */ new Map();
        var caches = tagCaches = /* @__PURE__ */ new Map();
        caches.set(ownerDocument, cache);
      } else
        caches = tagCaches, cache = caches.get(ownerDocument), cache || (cache = /* @__PURE__ */ new Map(), caches.set(ownerDocument, cache));
      if (cache.has(type)) return cache;
      cache.set(type, null);
      ownerDocument = ownerDocument.getElementsByTagName(type);
      for (caches = 0; caches < ownerDocument.length; caches++) {
        var node2 = ownerDocument[caches];
        if (!(node2[internalHoistableMarker] || node2[internalInstanceKey] || "link" === type && "stylesheet" === node2.getAttribute("rel")) && "http://www.w3.org/2000/svg" !== node2.namespaceURI) {
          var nodeKey = node2.getAttribute(keyAttribute) || "";
          nodeKey = type + nodeKey;
          var existing = cache.get(nodeKey);
          existing ? existing.push(node2) : cache.set(nodeKey, [node2]);
        }
      }
      return cache;
    }
    function mountHoistable(hoistableRoot, type, instance) {
      hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
      hoistableRoot.head.insertBefore(
        instance,
        "title" === type ? hoistableRoot.querySelector("head > title") : null
      );
    }
    function isHostHoistableType(type, props, hostContext) {
      if (1 === hostContext || null != props.itemProp) return false;
      switch (type) {
        case "meta":
        case "title":
          return true;
        case "style":
          if ("string" !== typeof props.precedence || "string" !== typeof props.href || "" === props.href)
            break;
          return true;
        case "link":
          if ("string" !== typeof props.rel || "string" !== typeof props.href || "" === props.href || props.onLoad || props.onError)
            break;
          switch (props.rel) {
            case "stylesheet":
              return type = props.disabled, "string" === typeof props.precedence && null == type;
            default:
              return true;
          }
        case "script":
          if (props.async && "function" !== typeof props.async && "symbol" !== typeof props.async && !props.onLoad && !props.onError && props.src && "string" === typeof props.src)
            return true;
      }
      return false;
    }
    function preloadResource(resource) {
      return "stylesheet" === resource.type && 0 === (resource.state.loading & 3) ? false : true;
    }
    var suspendedState = null;
    function noop() {
    }
    function suspendResource(hoistableRoot, resource, props) {
      if (null === suspendedState) throw Error(formatProdErrorMessage(475));
      var state = suspendedState;
      if ("stylesheet" === resource.type && ("string" !== typeof props.media || false !== matchMedia(props.media).matches) && 0 === (resource.state.loading & 4)) {
        if (null === resource.instance) {
          var key = getStyleKey(props.href), instance = hoistableRoot.querySelector(
            getStylesheetSelectorFromKey(key)
          );
          if (instance) {
            hoistableRoot = instance._p;
            null !== hoistableRoot && "object" === typeof hoistableRoot && "function" === typeof hoistableRoot.then && (state.count++, state = onUnsuspend.bind(state), hoistableRoot.then(state, state));
            resource.state.loading |= 4;
            resource.instance = instance;
            markNodeAsHoistable(instance);
            return;
          }
          instance = hoistableRoot.ownerDocument || hoistableRoot;
          props = stylesheetPropsFromRawProps(props);
          (key = preloadPropsMap.get(key)) && adoptPreloadPropsForStylesheet(props, key);
          instance = instance.createElement("link");
          markNodeAsHoistable(instance);
          var linkInstance = instance;
          linkInstance._p = new Promise(function(resolve, reject) {
            linkInstance.onload = resolve;
            linkInstance.onerror = reject;
          });
          setInitialProperties(instance, "link", props);
          resource.instance = instance;
        }
        null === state.stylesheets && (state.stylesheets = /* @__PURE__ */ new Map());
        state.stylesheets.set(resource, hoistableRoot);
        (hoistableRoot = resource.state.preload) && 0 === (resource.state.loading & 3) && (state.count++, resource = onUnsuspend.bind(state), hoistableRoot.addEventListener("load", resource), hoistableRoot.addEventListener("error", resource));
      }
    }
    function waitForCommitToBeReady() {
      if (null === suspendedState) throw Error(formatProdErrorMessage(475));
      var state = suspendedState;
      state.stylesheets && 0 === state.count && insertSuspendedStylesheets(state, state.stylesheets);
      return 0 < state.count ? function(commit) {
        var stylesheetTimer = setTimeout(function() {
          state.stylesheets && insertSuspendedStylesheets(state, state.stylesheets);
          if (state.unsuspend) {
            var unsuspend = state.unsuspend;
            state.unsuspend = null;
            unsuspend();
          }
        }, 6e4);
        state.unsuspend = commit;
        return function() {
          state.unsuspend = null;
          clearTimeout(stylesheetTimer);
        };
      } : null;
    }
    function onUnsuspend() {
      this.count--;
      if (0 === this.count) {
        if (this.stylesheets) insertSuspendedStylesheets(this, this.stylesheets);
        else if (this.unsuspend) {
          var unsuspend = this.unsuspend;
          this.unsuspend = null;
          unsuspend();
        }
      }
    }
    var precedencesByRoot = null;
    function insertSuspendedStylesheets(state, resources) {
      state.stylesheets = null;
      null !== state.unsuspend && (state.count++, precedencesByRoot = /* @__PURE__ */ new Map(), resources.forEach(insertStylesheetIntoRoot, state), precedencesByRoot = null, onUnsuspend.call(state));
    }
    function insertStylesheetIntoRoot(root2, resource) {
      if (!(resource.state.loading & 4)) {
        var precedences = precedencesByRoot.get(root2);
        if (precedences) var last = precedences.get(null);
        else {
          precedences = /* @__PURE__ */ new Map();
          precedencesByRoot.set(root2, precedences);
          for (var nodes = root2.querySelectorAll(
            "link[data-precedence],style[data-precedence]"
          ), i = 0; i < nodes.length; i++) {
            var node2 = nodes[i];
            if ("LINK" === node2.nodeName || "not all" !== node2.getAttribute("media"))
              precedences.set(node2.dataset.precedence, node2), last = node2;
          }
          last && precedences.set(null, last);
        }
        nodes = resource.instance;
        node2 = nodes.getAttribute("data-precedence");
        i = precedences.get(node2) || last;
        i === last && precedences.set(null, nodes);
        precedences.set(node2, nodes);
        this.count++;
        last = onUnsuspend.bind(this);
        nodes.addEventListener("load", last);
        nodes.addEventListener("error", last);
        i ? i.parentNode.insertBefore(nodes, i.nextSibling) : (root2 = 9 === root2.nodeType ? root2.head : root2, root2.insertBefore(nodes, root2.firstChild));
        resource.state.loading |= 4;
      }
    }
    var HostTransitionContext = {
      $$typeof: REACT_CONTEXT_TYPE,
      Provider: null,
      Consumer: null,
      _currentValue: sharedNotPendingObject,
      _currentValue2: sharedNotPendingObject,
      _threadCount: 0
    };
    function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, formState) {
      this.tag = 1;
      this.containerInfo = containerInfo;
      this.pingCache = this.current = this.pendingChildren = null;
      this.timeoutHandle = -1;
      this.callbackNode = this.next = this.pendingContext = this.context = this.cancelPendingCommit = null;
      this.callbackPriority = 0;
      this.expirationTimes = createLaneMap(-1);
      this.entangledLanes = this.shellSuspendCounter = this.errorRecoveryDisabledLanes = this.expiredLanes = this.warmLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
      this.entanglements = createLaneMap(0);
      this.hiddenUpdates = createLaneMap(null);
      this.identifierPrefix = identifierPrefix;
      this.onUncaughtError = onUncaughtError;
      this.onCaughtError = onCaughtError;
      this.onRecoverableError = onRecoverableError;
      this.pooledCache = null;
      this.pooledCacheLanes = 0;
      this.formState = formState;
      this.incompleteTransitions = /* @__PURE__ */ new Map();
    }
    function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, transitionCallbacks, formState) {
      containerInfo = new FiberRootNode(
        containerInfo,
        tag,
        hydrate,
        identifierPrefix,
        onUncaughtError,
        onCaughtError,
        onRecoverableError,
        formState
      );
      tag = 1;
      true === isStrictMode && (tag |= 24);
      isStrictMode = createFiberImplClass(3, null, null, tag);
      containerInfo.current = isStrictMode;
      isStrictMode.stateNode = containerInfo;
      tag = createCache3();
      tag.refCount++;
      containerInfo.pooledCache = tag;
      tag.refCount++;
      isStrictMode.memoizedState = {
        element: initialChildren,
        isDehydrated: hydrate,
        cache: tag
      };
      initializeUpdateQueue(isStrictMode);
      return containerInfo;
    }
    function getContextForSubtree(parentComponent) {
      if (!parentComponent) return emptyContextObject;
      parentComponent = emptyContextObject;
      return parentComponent;
    }
    function updateContainerImpl(rootFiber, lane, element, container, parentComponent, callback) {
      parentComponent = getContextForSubtree(parentComponent);
      null === container.context ? container.context = parentComponent : container.pendingContext = parentComponent;
      container = createUpdate(lane);
      container.payload = { element };
      callback = void 0 === callback ? null : callback;
      null !== callback && (container.callback = callback);
      element = enqueueUpdate(rootFiber, container, lane);
      null !== element && (scheduleUpdateOnFiber(element, rootFiber, lane), entangleTransitions(element, rootFiber, lane));
    }
    function markRetryLaneImpl(fiber, retryLane) {
      fiber = fiber.memoizedState;
      if (null !== fiber && null !== fiber.dehydrated) {
        var a = fiber.retryLane;
        fiber.retryLane = 0 !== a && a < retryLane ? a : retryLane;
      }
    }
    function markRetryLaneIfNotHydrated(fiber, retryLane) {
      markRetryLaneImpl(fiber, retryLane);
      (fiber = fiber.alternate) && markRetryLaneImpl(fiber, retryLane);
    }
    function attemptContinuousHydration(fiber) {
      if (13 === fiber.tag) {
        var root2 = enqueueConcurrentRenderForLane(fiber, 67108864);
        null !== root2 && scheduleUpdateOnFiber(root2, fiber, 67108864);
        markRetryLaneIfNotHydrated(fiber, 67108864);
      }
    }
    var _enabled = true;
    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
      var prevTransition = ReactSharedInternals.T;
      ReactSharedInternals.T = null;
      var previousPriority = ReactDOMSharedInternals.p;
      try {
        ReactDOMSharedInternals.p = 2, dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
      } finally {
        ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition;
      }
    }
    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
      var prevTransition = ReactSharedInternals.T;
      ReactSharedInternals.T = null;
      var previousPriority = ReactDOMSharedInternals.p;
      try {
        ReactDOMSharedInternals.p = 8, dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
      } finally {
        ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition;
      }
    }
    function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      if (_enabled) {
        var blockedOn = findInstanceBlockingEvent(nativeEvent);
        if (null === blockedOn)
          dispatchEventForPluginEventSystem(
            domEventName,
            eventSystemFlags,
            nativeEvent,
            return_targetInst,
            targetContainer
          ), clearIfContinuousEvent(domEventName, nativeEvent);
        else if (queueIfContinuousEvent(
          blockedOn,
          domEventName,
          eventSystemFlags,
          targetContainer,
          nativeEvent
        ))
          nativeEvent.stopPropagation();
        else if (clearIfContinuousEvent(domEventName, nativeEvent), eventSystemFlags & 4 && -1 < discreteReplayableEvents.indexOf(domEventName)) {
          for (; null !== blockedOn; ) {
            var fiber = getInstanceFromNode(blockedOn);
            if (null !== fiber)
              switch (fiber.tag) {
                case 3:
                  fiber = fiber.stateNode;
                  if (fiber.current.memoizedState.isDehydrated) {
                    var lanes = getHighestPriorityLanes(fiber.pendingLanes);
                    if (0 !== lanes) {
                      var root2 = fiber;
                      root2.pendingLanes |= 2;
                      for (root2.entangledLanes |= 2; lanes; ) {
                        var lane = 1 << 31 - clz32(lanes);
                        root2.entanglements[1] |= lane;
                        lanes &= ~lane;
                      }
                      ensureRootIsScheduled(fiber);
                      0 === (executionContext & 6) && (workInProgressRootRenderTargetTime = now() + 500, flushSyncWorkAcrossRoots_impl(0, false));
                    }
                  }
                  break;
                case 13:
                  root2 = enqueueConcurrentRenderForLane(fiber, 2), null !== root2 && scheduleUpdateOnFiber(root2, fiber, 2), flushSyncWork$1(), markRetryLaneIfNotHydrated(fiber, 2);
              }
            fiber = findInstanceBlockingEvent(nativeEvent);
            null === fiber && dispatchEventForPluginEventSystem(
              domEventName,
              eventSystemFlags,
              nativeEvent,
              return_targetInst,
              targetContainer
            );
            if (fiber === blockedOn) break;
            blockedOn = fiber;
          }
          null !== blockedOn && nativeEvent.stopPropagation();
        } else
          dispatchEventForPluginEventSystem(
            domEventName,
            eventSystemFlags,
            nativeEvent,
            null,
            targetContainer
          );
      }
    }
    function findInstanceBlockingEvent(nativeEvent) {
      nativeEvent = getEventTarget(nativeEvent);
      return findInstanceBlockingTarget(nativeEvent);
    }
    var return_targetInst = null;
    function findInstanceBlockingTarget(targetNode) {
      return_targetInst = null;
      targetNode = getClosestInstanceFromNode(targetNode);
      if (null !== targetNode) {
        var nearestMounted = getNearestMountedFiber(targetNode);
        if (null === nearestMounted) targetNode = null;
        else {
          var tag = nearestMounted.tag;
          if (13 === tag) {
            targetNode = getSuspenseInstanceFromFiber(nearestMounted);
            if (null !== targetNode) return targetNode;
            targetNode = null;
          } else if (3 === tag) {
            if (nearestMounted.stateNode.current.memoizedState.isDehydrated)
              return 3 === nearestMounted.tag ? nearestMounted.stateNode.containerInfo : null;
            targetNode = null;
          } else nearestMounted !== targetNode && (targetNode = null);
        }
      }
      return_targetInst = targetNode;
      return null;
    }
    function getEventPriority(domEventName) {
      switch (domEventName) {
        case "beforetoggle":
        case "cancel":
        case "click":
        case "close":
        case "contextmenu":
        case "copy":
        case "cut":
        case "auxclick":
        case "dblclick":
        case "dragend":
        case "dragstart":
        case "drop":
        case "focusin":
        case "focusout":
        case "input":
        case "invalid":
        case "keydown":
        case "keypress":
        case "keyup":
        case "mousedown":
        case "mouseup":
        case "paste":
        case "pause":
        case "play":
        case "pointercancel":
        case "pointerdown":
        case "pointerup":
        case "ratechange":
        case "reset":
        case "resize":
        case "seeked":
        case "submit":
        case "toggle":
        case "touchcancel":
        case "touchend":
        case "touchstart":
        case "volumechange":
        case "change":
        case "selectionchange":
        case "textInput":
        case "compositionstart":
        case "compositionend":
        case "compositionupdate":
        case "beforeblur":
        case "afterblur":
        case "beforeinput":
        case "blur":
        case "fullscreenchange":
        case "focus":
        case "hashchange":
        case "popstate":
        case "select":
        case "selectstart":
          return 2;
        case "drag":
        case "dragenter":
        case "dragexit":
        case "dragleave":
        case "dragover":
        case "mousemove":
        case "mouseout":
        case "mouseover":
        case "pointermove":
        case "pointerout":
        case "pointerover":
        case "scroll":
        case "touchmove":
        case "wheel":
        case "mouseenter":
        case "mouseleave":
        case "pointerenter":
        case "pointerleave":
          return 8;
        case "message":
          switch (getCurrentPriorityLevel()) {
            case ImmediatePriority:
              return 2;
            case UserBlockingPriority:
              return 8;
            case NormalPriority$1:
            case LowPriority:
              return 32;
            case IdlePriority:
              return 268435456;
            default:
              return 32;
          }
        default:
          return 32;
      }
    }
    var hasScheduledReplayAttempt = false;
    var queuedFocus = null;
    var queuedDrag = null;
    var queuedMouse = null;
    var queuedPointers = /* @__PURE__ */ new Map();
    var queuedPointerCaptures = /* @__PURE__ */ new Map();
    var queuedExplicitHydrationTargets = [];
    var discreteReplayableEvents = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(
      " "
    );
    function clearIfContinuousEvent(domEventName, nativeEvent) {
      switch (domEventName) {
        case "focusin":
        case "focusout":
          queuedFocus = null;
          break;
        case "dragenter":
        case "dragleave":
          queuedDrag = null;
          break;
        case "mouseover":
        case "mouseout":
          queuedMouse = null;
          break;
        case "pointerover":
        case "pointerout":
          queuedPointers.delete(nativeEvent.pointerId);
          break;
        case "gotpointercapture":
        case "lostpointercapture":
          queuedPointerCaptures.delete(nativeEvent.pointerId);
      }
    }
    function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      if (null === existingQueuedEvent || existingQueuedEvent.nativeEvent !== nativeEvent)
        return existingQueuedEvent = {
          blockedOn,
          domEventName,
          eventSystemFlags,
          nativeEvent,
          targetContainers: [targetContainer]
        }, null !== blockedOn && (blockedOn = getInstanceFromNode(blockedOn), null !== blockedOn && attemptContinuousHydration(blockedOn)), existingQueuedEvent;
      existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
      blockedOn = existingQueuedEvent.targetContainers;
      null !== targetContainer && -1 === blockedOn.indexOf(targetContainer) && blockedOn.push(targetContainer);
      return existingQueuedEvent;
    }
    function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      switch (domEventName) {
        case "focusin":
          return queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(
            queuedFocus,
            blockedOn,
            domEventName,
            eventSystemFlags,
            targetContainer,
            nativeEvent
          ), true;
        case "dragenter":
          return queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(
            queuedDrag,
            blockedOn,
            domEventName,
            eventSystemFlags,
            targetContainer,
            nativeEvent
          ), true;
        case "mouseover":
          return queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(
            queuedMouse,
            blockedOn,
            domEventName,
            eventSystemFlags,
            targetContainer,
            nativeEvent
          ), true;
        case "pointerover":
          var pointerId = nativeEvent.pointerId;
          queuedPointers.set(
            pointerId,
            accumulateOrCreateContinuousQueuedReplayableEvent(
              queuedPointers.get(pointerId) || null,
              blockedOn,
              domEventName,
              eventSystemFlags,
              targetContainer,
              nativeEvent
            )
          );
          return true;
        case "gotpointercapture":
          return pointerId = nativeEvent.pointerId, queuedPointerCaptures.set(
            pointerId,
            accumulateOrCreateContinuousQueuedReplayableEvent(
              queuedPointerCaptures.get(pointerId) || null,
              blockedOn,
              domEventName,
              eventSystemFlags,
              targetContainer,
              nativeEvent
            )
          ), true;
      }
      return false;
    }
    function attemptExplicitHydrationTarget(queuedTarget) {
      var targetInst = getClosestInstanceFromNode(queuedTarget.target);
      if (null !== targetInst) {
        var nearestMounted = getNearestMountedFiber(targetInst);
        if (null !== nearestMounted) {
          if (targetInst = nearestMounted.tag, 13 === targetInst) {
            if (targetInst = getSuspenseInstanceFromFiber(nearestMounted), null !== targetInst) {
              queuedTarget.blockedOn = targetInst;
              runWithPriority(queuedTarget.priority, function() {
                if (13 === nearestMounted.tag) {
                  var lane = requestUpdateLane();
                  lane = getBumpedLaneForHydrationByLane(lane);
                  var root2 = enqueueConcurrentRenderForLane(nearestMounted, lane);
                  null !== root2 && scheduleUpdateOnFiber(root2, nearestMounted, lane);
                  markRetryLaneIfNotHydrated(nearestMounted, lane);
                }
              });
              return;
            }
          } else if (3 === targetInst && nearestMounted.stateNode.current.memoizedState.isDehydrated) {
            queuedTarget.blockedOn = 3 === nearestMounted.tag ? nearestMounted.stateNode.containerInfo : null;
            return;
          }
        }
      }
      queuedTarget.blockedOn = null;
    }
    function attemptReplayContinuousQueuedEvent(queuedEvent) {
      if (null !== queuedEvent.blockedOn) return false;
      for (var targetContainers = queuedEvent.targetContainers; 0 < targetContainers.length; ) {
        var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.nativeEvent);
        if (null === nextBlockedOn) {
          nextBlockedOn = queuedEvent.nativeEvent;
          var nativeEventClone = new nextBlockedOn.constructor(
            nextBlockedOn.type,
            nextBlockedOn
          );
          currentReplayingEvent = nativeEventClone;
          nextBlockedOn.target.dispatchEvent(nativeEventClone);
          currentReplayingEvent = null;
        } else
          return targetContainers = getInstanceFromNode(nextBlockedOn), null !== targetContainers && attemptContinuousHydration(targetContainers), queuedEvent.blockedOn = nextBlockedOn, false;
        targetContainers.shift();
      }
      return true;
    }
    function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
      attemptReplayContinuousQueuedEvent(queuedEvent) && map.delete(key);
    }
    function replayUnblockedEvents() {
      hasScheduledReplayAttempt = false;
      null !== queuedFocus && attemptReplayContinuousQueuedEvent(queuedFocus) && (queuedFocus = null);
      null !== queuedDrag && attemptReplayContinuousQueuedEvent(queuedDrag) && (queuedDrag = null);
      null !== queuedMouse && attemptReplayContinuousQueuedEvent(queuedMouse) && (queuedMouse = null);
      queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
      queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
    }
    function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
      queuedEvent.blockedOn === unblocked && (queuedEvent.blockedOn = null, hasScheduledReplayAttempt || (hasScheduledReplayAttempt = true, Scheduler.unstable_scheduleCallback(
        Scheduler.unstable_NormalPriority,
        replayUnblockedEvents
      )));
    }
    var lastScheduledReplayQueue = null;
    function scheduleReplayQueueIfNeeded(formReplayingQueue) {
      lastScheduledReplayQueue !== formReplayingQueue && (lastScheduledReplayQueue = formReplayingQueue, Scheduler.unstable_scheduleCallback(
        Scheduler.unstable_NormalPriority,
        function() {
          lastScheduledReplayQueue === formReplayingQueue && (lastScheduledReplayQueue = null);
          for (var i = 0; i < formReplayingQueue.length; i += 3) {
            var form = formReplayingQueue[i], submitterOrAction = formReplayingQueue[i + 1], formData = formReplayingQueue[i + 2];
            if ("function" !== typeof submitterOrAction)
              if (null === findInstanceBlockingTarget(submitterOrAction || form))
                continue;
              else break;
            var formInst = getInstanceFromNode(form);
            null !== formInst && (formReplayingQueue.splice(i, 3), i -= 3, startHostTransition(
              formInst,
              {
                pending: true,
                data: formData,
                method: form.method,
                action: submitterOrAction
              },
              submitterOrAction,
              formData
            ));
          }
        }
      ));
    }
    function retryIfBlockedOn(unblocked) {
      function unblock(queuedEvent) {
        return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
      }
      null !== queuedFocus && scheduleCallbackIfUnblocked(queuedFocus, unblocked);
      null !== queuedDrag && scheduleCallbackIfUnblocked(queuedDrag, unblocked);
      null !== queuedMouse && scheduleCallbackIfUnblocked(queuedMouse, unblocked);
      queuedPointers.forEach(unblock);
      queuedPointerCaptures.forEach(unblock);
      for (var i = 0; i < queuedExplicitHydrationTargets.length; i++) {
        var queuedTarget = queuedExplicitHydrationTargets[i];
        queuedTarget.blockedOn === unblocked && (queuedTarget.blockedOn = null);
      }
      for (; 0 < queuedExplicitHydrationTargets.length && (i = queuedExplicitHydrationTargets[0], null === i.blockedOn); )
        attemptExplicitHydrationTarget(i), null === i.blockedOn && queuedExplicitHydrationTargets.shift();
      i = (unblocked.ownerDocument || unblocked).$$reactFormReplay;
      if (null != i)
        for (queuedTarget = 0; queuedTarget < i.length; queuedTarget += 3) {
          var form = i[queuedTarget], submitterOrAction = i[queuedTarget + 1], formProps = form[internalPropsKey] || null;
          if ("function" === typeof submitterOrAction)
            formProps || scheduleReplayQueueIfNeeded(i);
          else if (formProps) {
            var action = null;
            if (submitterOrAction && submitterOrAction.hasAttribute("formAction"))
              if (form = submitterOrAction, formProps = submitterOrAction[internalPropsKey] || null)
                action = formProps.formAction;
              else {
                if (null !== findInstanceBlockingTarget(form)) continue;
              }
            else action = formProps.action;
            "function" === typeof action ? i[queuedTarget + 1] = action : (i.splice(queuedTarget, 3), queuedTarget -= 3);
            scheduleReplayQueueIfNeeded(i);
          }
        }
    }
    function ReactDOMRoot(internalRoot) {
      this._internalRoot = internalRoot;
    }
    ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
      var root2 = this._internalRoot;
      if (null === root2) throw Error(formatProdErrorMessage(409));
      var current = root2.current, lane = requestUpdateLane();
      updateContainerImpl(current, lane, children, root2, null, null);
    };
    ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
      var root2 = this._internalRoot;
      if (null !== root2) {
        this._internalRoot = null;
        var container = root2.containerInfo;
        updateContainerImpl(root2.current, 2, null, root2, null, null);
        flushSyncWork$1();
        container[internalContainerInstanceKey] = null;
      }
    };
    function ReactDOMHydrationRoot(internalRoot) {
      this._internalRoot = internalRoot;
    }
    ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function(target) {
      if (target) {
        var updatePriority = resolveUpdatePriority();
        target = { blockedOn: null, target, priority: updatePriority };
        for (var i = 0; i < queuedExplicitHydrationTargets.length && 0 !== updatePriority && updatePriority < queuedExplicitHydrationTargets[i].priority; i++) ;
        queuedExplicitHydrationTargets.splice(i, 0, target);
        0 === i && attemptExplicitHydrationTarget(target);
      }
    };
    var isomorphicReactPackageVersion$jscomp$inline_1785 = React7.version;
    if ("19.1.0" !== isomorphicReactPackageVersion$jscomp$inline_1785)
      throw Error(
        formatProdErrorMessage(
          527,
          isomorphicReactPackageVersion$jscomp$inline_1785,
          "19.1.0"
        )
      );
    ReactDOMSharedInternals.findDOMNode = function(componentOrElement) {
      var fiber = componentOrElement._reactInternals;
      if (void 0 === fiber) {
        if ("function" === typeof componentOrElement.render)
          throw Error(formatProdErrorMessage(188));
        componentOrElement = Object.keys(componentOrElement).join(",");
        throw Error(formatProdErrorMessage(268, componentOrElement));
      }
      componentOrElement = findCurrentFiberUsingSlowPath(fiber);
      componentOrElement = null !== componentOrElement ? findCurrentHostFiberImpl(componentOrElement) : null;
      componentOrElement = null === componentOrElement ? null : componentOrElement.stateNode;
      return componentOrElement;
    };
    var internals$jscomp$inline_2256 = {
      bundleType: 0,
      version: "19.1.0",
      rendererPackageName: "react-dom",
      currentDispatcherRef: ReactSharedInternals,
      reconcilerVersion: "19.1.0"
    };
    if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
      hook$jscomp$inline_2257 = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (!hook$jscomp$inline_2257.isDisabled && hook$jscomp$inline_2257.supportsFiber)
        try {
          rendererID = hook$jscomp$inline_2257.inject(
            internals$jscomp$inline_2256
          ), injectedHook = hook$jscomp$inline_2257;
        } catch (err) {
        }
    }
    var hook$jscomp$inline_2257;
    exports2.createRoot = function(container, options2) {
      if (!isValidContainer(container)) throw Error(formatProdErrorMessage(299));
      var isStrictMode = false, identifierPrefix = "", onUncaughtError = defaultOnUncaughtError, onCaughtError = defaultOnCaughtError, onRecoverableError = defaultOnRecoverableError, transitionCallbacks = null;
      null !== options2 && void 0 !== options2 && (true === options2.unstable_strictMode && (isStrictMode = true), void 0 !== options2.identifierPrefix && (identifierPrefix = options2.identifierPrefix), void 0 !== options2.onUncaughtError && (onUncaughtError = options2.onUncaughtError), void 0 !== options2.onCaughtError && (onCaughtError = options2.onCaughtError), void 0 !== options2.onRecoverableError && (onRecoverableError = options2.onRecoverableError), void 0 !== options2.unstable_transitionCallbacks && (transitionCallbacks = options2.unstable_transitionCallbacks));
      options2 = createFiberRoot(
        container,
        1,
        false,
        null,
        null,
        isStrictMode,
        identifierPrefix,
        onUncaughtError,
        onCaughtError,
        onRecoverableError,
        transitionCallbacks,
        null
      );
      container[internalContainerInstanceKey] = options2.current;
      listenToAllSupportedEvents(container);
      return new ReactDOMRoot(options2);
    };
    exports2.hydrateRoot = function(container, initialChildren, options2) {
      if (!isValidContainer(container)) throw Error(formatProdErrorMessage(299));
      var isStrictMode = false, identifierPrefix = "", onUncaughtError = defaultOnUncaughtError, onCaughtError = defaultOnCaughtError, onRecoverableError = defaultOnRecoverableError, transitionCallbacks = null, formState = null;
      null !== options2 && void 0 !== options2 && (true === options2.unstable_strictMode && (isStrictMode = true), void 0 !== options2.identifierPrefix && (identifierPrefix = options2.identifierPrefix), void 0 !== options2.onUncaughtError && (onUncaughtError = options2.onUncaughtError), void 0 !== options2.onCaughtError && (onCaughtError = options2.onCaughtError), void 0 !== options2.onRecoverableError && (onRecoverableError = options2.onRecoverableError), void 0 !== options2.unstable_transitionCallbacks && (transitionCallbacks = options2.unstable_transitionCallbacks), void 0 !== options2.formState && (formState = options2.formState));
      initialChildren = createFiberRoot(
        container,
        1,
        true,
        initialChildren,
        null != options2 ? options2 : null,
        isStrictMode,
        identifierPrefix,
        onUncaughtError,
        onCaughtError,
        onRecoverableError,
        transitionCallbacks,
        formState
      );
      initialChildren.context = getContextForSubtree(null);
      options2 = initialChildren.current;
      isStrictMode = requestUpdateLane();
      isStrictMode = getBumpedLaneForHydrationByLane(isStrictMode);
      identifierPrefix = createUpdate(isStrictMode);
      identifierPrefix.callback = null;
      enqueueUpdate(options2, identifierPrefix, isStrictMode);
      options2 = isStrictMode;
      initialChildren.current.lanes = options2;
      markRootUpdated$1(initialChildren, options2);
      ensureRootIsScheduled(initialChildren);
      container[internalContainerInstanceKey] = initialChildren.current;
      listenToAllSupportedEvents(container);
      return new ReactDOMHydrationRoot(initialChildren);
    };
    exports2.version = "19.1.0";
  }
});

// node_modules/react-dom/cjs/react-dom-client.development.js
var require_react_dom_client_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom-client.development.js"(exports2) {
    "use strict";
    init_define_process_env();
    "production" !== define_process_env_default.NODE_ENV && function() {
      function findHook(fiber, id) {
        for (fiber = fiber.memoizedState; null !== fiber && 0 < id; )
          fiber = fiber.next, id--;
        return fiber;
      }
      function copyWithSetImpl(obj, path, index, value) {
        if (index >= path.length) return value;
        var key = path[index], updated = isArrayImpl(obj) ? obj.slice() : assign2({}, obj);
        updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
        return updated;
      }
      function copyWithRename(obj, oldPath, newPath) {
        if (oldPath.length !== newPath.length)
          console.warn("copyWithRename() expects paths of the same length");
        else {
          for (var i = 0; i < newPath.length - 1; i++)
            if (oldPath[i] !== newPath[i]) {
              console.warn(
                "copyWithRename() expects paths to be the same except for the deepest key"
              );
              return;
            }
          return copyWithRenameImpl(obj, oldPath, newPath, 0);
        }
      }
      function copyWithRenameImpl(obj, oldPath, newPath, index) {
        var oldKey = oldPath[index], updated = isArrayImpl(obj) ? obj.slice() : assign2({}, obj);
        index + 1 === oldPath.length ? (updated[newPath[index]] = updated[oldKey], isArrayImpl(updated) ? updated.splice(oldKey, 1) : delete updated[oldKey]) : updated[oldKey] = copyWithRenameImpl(
          obj[oldKey],
          oldPath,
          newPath,
          index + 1
        );
        return updated;
      }
      function copyWithDeleteImpl(obj, path, index) {
        var key = path[index], updated = isArrayImpl(obj) ? obj.slice() : assign2({}, obj);
        if (index + 1 === path.length)
          return isArrayImpl(updated) ? updated.splice(key, 1) : delete updated[key], updated;
        updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
        return updated;
      }
      function shouldSuspendImpl() {
        return false;
      }
      function shouldErrorImpl() {
        return null;
      }
      function warnForMissingKey() {
      }
      function warnInvalidHookAccess() {
        console.error(
          "Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://react.dev/link/rules-of-hooks"
        );
      }
      function warnInvalidContextAccess() {
        console.error(
          "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
        );
      }
      function noop$2() {
      }
      function setToSortedString(set) {
        var array = [];
        set.forEach(function(value) {
          array.push(value);
        });
        return array.sort().join(", ");
      }
      function createFiber(tag, pendingProps, key, mode) {
        return new FiberNode(tag, pendingProps, key, mode);
      }
      function scheduleRoot(root2, element) {
        root2.context === emptyContextObject && (updateContainerImpl(root2.current, 2, element, root2, null, null), flushSyncWork$1());
      }
      function scheduleRefresh(root2, update) {
        if (null !== resolveFamily) {
          var staleFamilies = update.staleFamilies;
          update = update.updatedFamilies;
          flushPendingEffects();
          scheduleFibersWithFamiliesRecursively(
            root2.current,
            update,
            staleFamilies
          );
          flushSyncWork$1();
        }
      }
      function setRefreshHandler(handler) {
        resolveFamily = handler;
      }
      function isValidContainer(node2) {
        return !(!node2 || 1 !== node2.nodeType && 9 !== node2.nodeType && 11 !== node2.nodeType);
      }
      function getNearestMountedFiber(fiber) {
        var node2 = fiber, nearestMounted = fiber;
        if (fiber.alternate) for (; node2.return; ) node2 = node2.return;
        else {
          fiber = node2;
          do
            node2 = fiber, 0 !== (node2.flags & 4098) && (nearestMounted = node2.return), fiber = node2.return;
          while (fiber);
        }
        return 3 === node2.tag ? nearestMounted : null;
      }
      function getSuspenseInstanceFromFiber(fiber) {
        if (13 === fiber.tag) {
          var suspenseState = fiber.memoizedState;
          null === suspenseState && (fiber = fiber.alternate, null !== fiber && (suspenseState = fiber.memoizedState));
          if (null !== suspenseState) return suspenseState.dehydrated;
        }
        return null;
      }
      function assertIsMounted(fiber) {
        if (getNearestMountedFiber(fiber) !== fiber)
          throw Error("Unable to find node on an unmounted component.");
      }
      function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
          alternate = getNearestMountedFiber(fiber);
          if (null === alternate)
            throw Error("Unable to find node on an unmounted component.");
          return alternate !== fiber ? null : fiber;
        }
        for (var a = fiber, b = alternate; ; ) {
          var parentA = a.return;
          if (null === parentA) break;
          var parentB = parentA.alternate;
          if (null === parentB) {
            b = parentA.return;
            if (null !== b) {
              a = b;
              continue;
            }
            break;
          }
          if (parentA.child === parentB.child) {
            for (parentB = parentA.child; parentB; ) {
              if (parentB === a) return assertIsMounted(parentA), fiber;
              if (parentB === b) return assertIsMounted(parentA), alternate;
              parentB = parentB.sibling;
            }
            throw Error("Unable to find node on an unmounted component.");
          }
          if (a.return !== b.return) a = parentA, b = parentB;
          else {
            for (var didFindChild = false, _child = parentA.child; _child; ) {
              if (_child === a) {
                didFindChild = true;
                a = parentA;
                b = parentB;
                break;
              }
              if (_child === b) {
                didFindChild = true;
                b = parentA;
                a = parentB;
                break;
              }
              _child = _child.sibling;
            }
            if (!didFindChild) {
              for (_child = parentB.child; _child; ) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentB;
                  b = parentA;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentB;
                  a = parentA;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild)
                throw Error(
                  "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue."
                );
            }
          }
          if (a.alternate !== b)
            throw Error(
              "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue."
            );
        }
        if (3 !== a.tag)
          throw Error("Unable to find node on an unmounted component.");
        return a.stateNode.current === a ? fiber : alternate;
      }
      function findCurrentHostFiberImpl(node2) {
        var tag = node2.tag;
        if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return node2;
        for (node2 = node2.child; null !== node2; ) {
          tag = findCurrentHostFiberImpl(node2);
          if (null !== tag) return tag;
          node2 = node2.sibling;
        }
        return null;
      }
      function getIteratorFn(maybeIterable) {
        if (null === maybeIterable || "object" !== typeof maybeIterable)
          return null;
        maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
        return "function" === typeof maybeIterable ? maybeIterable : null;
      }
      function getComponentNameFromType(type) {
        if (null == type) return null;
        if ("function" === typeof type)
          return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
        if ("string" === typeof type) return type;
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
          case REACT_ACTIVITY_TYPE:
            return "Activity";
        }
        if ("object" === typeof type)
          switch ("number" === typeof type.tag && console.error(
            "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
          ), type.$$typeof) {
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_CONTEXT_TYPE:
              return (type.displayName || "Context") + ".Provider";
            case REACT_CONSUMER_TYPE:
              return (type._context.displayName || "Context") + ".Consumer";
            case REACT_FORWARD_REF_TYPE:
              var innerType = type.render;
              type = type.displayName;
              type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
              return type;
            case REACT_MEMO_TYPE:
              return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE:
              innerType = type._payload;
              type = type._init;
              try {
                return getComponentNameFromType(type(innerType));
              } catch (x) {
              }
          }
        return null;
      }
      function getComponentNameFromOwner(owner) {
        return "number" === typeof owner.tag ? getComponentNameFromFiber(owner) : "string" === typeof owner.name ? owner.name : null;
      }
      function getComponentNameFromFiber(fiber) {
        var type = fiber.type;
        switch (fiber.tag) {
          case 31:
            return "Activity";
          case 24:
            return "Cache";
          case 9:
            return (type._context.displayName || "Context") + ".Consumer";
          case 10:
            return (type.displayName || "Context") + ".Provider";
          case 18:
            return "DehydratedFragment";
          case 11:
            return fiber = type.render, fiber = fiber.displayName || fiber.name || "", type.displayName || ("" !== fiber ? "ForwardRef(" + fiber + ")" : "ForwardRef");
          case 7:
            return "Fragment";
          case 26:
          case 27:
          case 5:
            return type;
          case 4:
            return "Portal";
          case 3:
            return "Root";
          case 6:
            return "Text";
          case 16:
            return getComponentNameFromType(type);
          case 8:
            return type === REACT_STRICT_MODE_TYPE ? "StrictMode" : "Mode";
          case 22:
            return "Offscreen";
          case 12:
            return "Profiler";
          case 21:
            return "Scope";
          case 13:
            return "Suspense";
          case 19:
            return "SuspenseList";
          case 25:
            return "TracingMarker";
          case 1:
          case 0:
          case 14:
          case 15:
            if ("function" === typeof type)
              return type.displayName || type.name || null;
            if ("string" === typeof type) return type;
            break;
          case 29:
            type = fiber._debugInfo;
            if (null != type) {
              for (var i = type.length - 1; 0 <= i; i--)
                if ("string" === typeof type[i].name) return type[i].name;
            }
            if (null !== fiber.return)
              return getComponentNameFromFiber(fiber.return);
        }
        return null;
      }
      function createCursor(defaultValue) {
        return { current: defaultValue };
      }
      function pop(cursor2, fiber) {
        0 > index$jscomp$0 ? console.error("Unexpected pop.") : (fiber !== fiberStack[index$jscomp$0] && console.error("Unexpected Fiber popped."), cursor2.current = valueStack[index$jscomp$0], valueStack[index$jscomp$0] = null, fiberStack[index$jscomp$0] = null, index$jscomp$0--);
      }
      function push(cursor2, value, fiber) {
        index$jscomp$0++;
        valueStack[index$jscomp$0] = cursor2.current;
        fiberStack[index$jscomp$0] = fiber;
        cursor2.current = value;
      }
      function requiredContext(c) {
        null === c && console.error(
          "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue."
        );
        return c;
      }
      function pushHostContainer(fiber, nextRootInstance) {
        push(rootInstanceStackCursor, nextRootInstance, fiber);
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor, null, fiber);
        var nextRootContext = nextRootInstance.nodeType;
        switch (nextRootContext) {
          case 9:
          case 11:
            nextRootContext = 9 === nextRootContext ? "#document" : "#fragment";
            nextRootInstance = (nextRootInstance = nextRootInstance.documentElement) ? (nextRootInstance = nextRootInstance.namespaceURI) ? getOwnHostContext(nextRootInstance) : HostContextNamespaceNone : HostContextNamespaceNone;
            break;
          default:
            if (nextRootContext = nextRootInstance.tagName, nextRootInstance = nextRootInstance.namespaceURI)
              nextRootInstance = getOwnHostContext(nextRootInstance), nextRootInstance = getChildHostContextProd(
                nextRootInstance,
                nextRootContext
              );
            else
              switch (nextRootContext) {
                case "svg":
                  nextRootInstance = HostContextNamespaceSvg;
                  break;
                case "math":
                  nextRootInstance = HostContextNamespaceMath;
                  break;
                default:
                  nextRootInstance = HostContextNamespaceNone;
              }
        }
        nextRootContext = nextRootContext.toLowerCase();
        nextRootContext = updatedAncestorInfoDev(null, nextRootContext);
        nextRootContext = {
          context: nextRootInstance,
          ancestorInfo: nextRootContext
        };
        pop(contextStackCursor, fiber);
        push(contextStackCursor, nextRootContext, fiber);
      }
      function popHostContainer(fiber) {
        pop(contextStackCursor, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
      }
      function getHostContext() {
        return requiredContext(contextStackCursor.current);
      }
      function pushHostContext(fiber) {
        null !== fiber.memoizedState && push(hostTransitionProviderCursor, fiber, fiber);
        var context = requiredContext(contextStackCursor.current);
        var type = fiber.type;
        var nextContext = getChildHostContextProd(context.context, type);
        type = updatedAncestorInfoDev(context.ancestorInfo, type);
        nextContext = { context: nextContext, ancestorInfo: type };
        context !== nextContext && (push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor, nextContext, fiber));
      }
      function popHostContext(fiber) {
        contextFiberStackCursor.current === fiber && (pop(contextStackCursor, fiber), pop(contextFiberStackCursor, fiber));
        hostTransitionProviderCursor.current === fiber && (pop(hostTransitionProviderCursor, fiber), HostTransitionContext._currentValue = NotPendingTransition);
      }
      function typeName(value) {
        return "function" === typeof Symbol && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
      }
      function willCoercionThrow(value) {
        try {
          return testStringCoercion(value), false;
        } catch (e) {
          return true;
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkAttributeStringCoercion(value, attributeName) {
        if (willCoercionThrow(value))
          return console.error(
            "The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before using it here.",
            attributeName,
            typeName(value)
          ), testStringCoercion(value);
      }
      function checkCSSPropertyStringCoercion(value, propName) {
        if (willCoercionThrow(value))
          return console.error(
            "The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before using it here.",
            propName,
            typeName(value)
          ), testStringCoercion(value);
      }
      function checkFormFieldValueStringCoercion(value) {
        if (willCoercionThrow(value))
          return console.error(
            "Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before using it here.",
            typeName(value)
          ), testStringCoercion(value);
      }
      function injectInternals(internals) {
        if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return false;
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled) return true;
        if (!hook.supportsFiber)
          return console.error(
            "The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://react.dev/link/react-devtools"
          ), true;
        try {
          rendererID = hook.inject(internals), injectedHook = hook;
        } catch (err) {
          console.error("React instrumentation encountered an error: %s.", err);
        }
        return hook.checkDCE ? true : false;
      }
      function setIsStrictModeForDevtools(newIsStrictMode) {
        "function" === typeof log$1 && unstable_setDisableYieldValue(newIsStrictMode);
        if (injectedHook && "function" === typeof injectedHook.setStrictMode)
          try {
            injectedHook.setStrictMode(rendererID, newIsStrictMode);
          } catch (err) {
            hasLoggedError || (hasLoggedError = true, console.error(
              "React instrumentation encountered an error: %s",
              err
            ));
          }
      }
      function injectProfilingHooks(profilingHooks) {
        injectedProfilingHooks = profilingHooks;
      }
      function markCommitStopped() {
        null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markCommitStopped && injectedProfilingHooks.markCommitStopped();
      }
      function markComponentRenderStarted(fiber) {
        null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentRenderStarted && injectedProfilingHooks.markComponentRenderStarted(fiber);
      }
      function markComponentRenderStopped() {
        null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentRenderStopped && injectedProfilingHooks.markComponentRenderStopped();
      }
      function markRenderStarted(lanes) {
        null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markRenderStarted && injectedProfilingHooks.markRenderStarted(lanes);
      }
      function markRenderStopped() {
        null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markRenderStopped && injectedProfilingHooks.markRenderStopped();
      }
      function markStateUpdateScheduled(fiber, lane) {
        null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markStateUpdateScheduled && injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
      }
      function clz32Fallback(x) {
        x >>>= 0;
        return 0 === x ? 32 : 31 - (log(x) / LN2 | 0) | 0;
      }
      function getLabelForLane(lane) {
        if (lane & 1) return "SyncHydrationLane";
        if (lane & 2) return "Sync";
        if (lane & 4) return "InputContinuousHydration";
        if (lane & 8) return "InputContinuous";
        if (lane & 16) return "DefaultHydration";
        if (lane & 32) return "Default";
        if (lane & 128) return "TransitionHydration";
        if (lane & 4194048) return "Transition";
        if (lane & 62914560) return "Retry";
        if (lane & 67108864) return "SelectiveHydration";
        if (lane & 134217728) return "IdleHydration";
        if (lane & 268435456) return "Idle";
        if (lane & 536870912) return "Offscreen";
        if (lane & 1073741824) return "Deferred";
      }
      function getHighestPriorityLanes(lanes) {
        var pendingSyncLanes = lanes & 42;
        if (0 !== pendingSyncLanes) return pendingSyncLanes;
        switch (lanes & -lanes) {
          case 1:
            return 1;
          case 2:
            return 2;
          case 4:
            return 4;
          case 8:
            return 8;
          case 16:
            return 16;
          case 32:
            return 32;
          case 64:
            return 64;
          case 128:
            return 128;
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return lanes & 4194048;
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
            return lanes & 62914560;
          case 67108864:
            return 67108864;
          case 134217728:
            return 134217728;
          case 268435456:
            return 268435456;
          case 536870912:
            return 536870912;
          case 1073741824:
            return 0;
          default:
            return console.error(
              "Should have found matching lanes. This is a bug in React."
            ), lanes;
        }
      }
      function getNextLanes(root2, wipLanes, rootHasPendingCommit) {
        var pendingLanes = root2.pendingLanes;
        if (0 === pendingLanes) return 0;
        var nextLanes = 0, suspendedLanes = root2.suspendedLanes, pingedLanes = root2.pingedLanes;
        root2 = root2.warmLanes;
        var nonIdlePendingLanes = pendingLanes & 134217727;
        0 !== nonIdlePendingLanes ? (pendingLanes = nonIdlePendingLanes & ~suspendedLanes, 0 !== pendingLanes ? nextLanes = getHighestPriorityLanes(pendingLanes) : (pingedLanes &= nonIdlePendingLanes, 0 !== pingedLanes ? nextLanes = getHighestPriorityLanes(pingedLanes) : rootHasPendingCommit || (rootHasPendingCommit = nonIdlePendingLanes & ~root2, 0 !== rootHasPendingCommit && (nextLanes = getHighestPriorityLanes(rootHasPendingCommit))))) : (nonIdlePendingLanes = pendingLanes & ~suspendedLanes, 0 !== nonIdlePendingLanes ? nextLanes = getHighestPriorityLanes(nonIdlePendingLanes) : 0 !== pingedLanes ? nextLanes = getHighestPriorityLanes(pingedLanes) : rootHasPendingCommit || (rootHasPendingCommit = pendingLanes & ~root2, 0 !== rootHasPendingCommit && (nextLanes = getHighestPriorityLanes(rootHasPendingCommit))));
        return 0 === nextLanes ? 0 : 0 !== wipLanes && wipLanes !== nextLanes && 0 === (wipLanes & suspendedLanes) && (suspendedLanes = nextLanes & -nextLanes, rootHasPendingCommit = wipLanes & -wipLanes, suspendedLanes >= rootHasPendingCommit || 32 === suspendedLanes && 0 !== (rootHasPendingCommit & 4194048)) ? wipLanes : nextLanes;
      }
      function checkIfRootIsPrerendering(root2, renderLanes2) {
        return 0 === (root2.pendingLanes & ~(root2.suspendedLanes & ~root2.pingedLanes) & renderLanes2);
      }
      function computeExpirationTime(lane, currentTime) {
        switch (lane) {
          case 1:
          case 2:
          case 4:
          case 8:
          case 64:
            return currentTime + 250;
          case 16:
          case 32:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return currentTime + 5e3;
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
            return -1;
          case 67108864:
          case 134217728:
          case 268435456:
          case 536870912:
          case 1073741824:
            return -1;
          default:
            return console.error(
              "Should have found matching lanes. This is a bug in React."
            ), -1;
        }
      }
      function claimNextTransitionLane() {
        var lane = nextTransitionLane;
        nextTransitionLane <<= 1;
        0 === (nextTransitionLane & 4194048) && (nextTransitionLane = 256);
        return lane;
      }
      function claimNextRetryLane() {
        var lane = nextRetryLane;
        nextRetryLane <<= 1;
        0 === (nextRetryLane & 62914560) && (nextRetryLane = 4194304);
        return lane;
      }
      function createLaneMap(initial) {
        for (var laneMap = [], i = 0; 31 > i; i++) laneMap.push(initial);
        return laneMap;
      }
      function markRootUpdated$1(root2, updateLane) {
        root2.pendingLanes |= updateLane;
        268435456 !== updateLane && (root2.suspendedLanes = 0, root2.pingedLanes = 0, root2.warmLanes = 0);
      }
      function markRootFinished(root2, finishedLanes, remainingLanes, spawnedLane, updatedLanes, suspendedRetryLanes) {
        var previouslyPendingLanes = root2.pendingLanes;
        root2.pendingLanes = remainingLanes;
        root2.suspendedLanes = 0;
        root2.pingedLanes = 0;
        root2.warmLanes = 0;
        root2.expiredLanes &= remainingLanes;
        root2.entangledLanes &= remainingLanes;
        root2.errorRecoveryDisabledLanes &= remainingLanes;
        root2.shellSuspendCounter = 0;
        var entanglements = root2.entanglements, expirationTimes = root2.expirationTimes, hiddenUpdates = root2.hiddenUpdates;
        for (remainingLanes = previouslyPendingLanes & ~remainingLanes; 0 < remainingLanes; ) {
          var index = 31 - clz32(remainingLanes), lane = 1 << index;
          entanglements[index] = 0;
          expirationTimes[index] = -1;
          var hiddenUpdatesForLane = hiddenUpdates[index];
          if (null !== hiddenUpdatesForLane)
            for (hiddenUpdates[index] = null, index = 0; index < hiddenUpdatesForLane.length; index++) {
              var update = hiddenUpdatesForLane[index];
              null !== update && (update.lane &= -536870913);
            }
          remainingLanes &= ~lane;
        }
        0 !== spawnedLane && markSpawnedDeferredLane(root2, spawnedLane, 0);
        0 !== suspendedRetryLanes && 0 === updatedLanes && 0 !== root2.tag && (root2.suspendedLanes |= suspendedRetryLanes & ~(previouslyPendingLanes & ~finishedLanes));
      }
      function markSpawnedDeferredLane(root2, spawnedLane, entangledLanes) {
        root2.pendingLanes |= spawnedLane;
        root2.suspendedLanes &= ~spawnedLane;
        var spawnedLaneIndex = 31 - clz32(spawnedLane);
        root2.entangledLanes |= spawnedLane;
        root2.entanglements[spawnedLaneIndex] = root2.entanglements[spawnedLaneIndex] | 1073741824 | entangledLanes & 4194090;
      }
      function markRootEntangled(root2, entangledLanes) {
        var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
        for (root2 = root2.entanglements; rootEntangledLanes; ) {
          var index = 31 - clz32(rootEntangledLanes), lane = 1 << index;
          lane & entangledLanes | root2[index] & entangledLanes && (root2[index] |= entangledLanes);
          rootEntangledLanes &= ~lane;
        }
      }
      function getBumpedLaneForHydrationByLane(lane) {
        switch (lane) {
          case 2:
            lane = 1;
            break;
          case 8:
            lane = 4;
            break;
          case 32:
            lane = 16;
            break;
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
            lane = 128;
            break;
          case 268435456:
            lane = 134217728;
            break;
          default:
            lane = 0;
        }
        return lane;
      }
      function addFiberToLanesMap(root2, fiber, lanes) {
        if (isDevToolsPresent)
          for (root2 = root2.pendingUpdatersLaneMap; 0 < lanes; ) {
            var index = 31 - clz32(lanes), lane = 1 << index;
            root2[index].add(fiber);
            lanes &= ~lane;
          }
      }
      function movePendingFibersToMemoized(root2, lanes) {
        if (isDevToolsPresent)
          for (var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap, memoizedUpdaters = root2.memoizedUpdaters; 0 < lanes; ) {
            var index = 31 - clz32(lanes);
            root2 = 1 << index;
            index = pendingUpdatersLaneMap[index];
            0 < index.size && (index.forEach(function(fiber) {
              var alternate = fiber.alternate;
              null !== alternate && memoizedUpdaters.has(alternate) || memoizedUpdaters.add(fiber);
            }), index.clear());
            lanes &= ~root2;
          }
      }
      function lanesToEventPriority(lanes) {
        lanes &= -lanes;
        return 0 !== DiscreteEventPriority && DiscreteEventPriority < lanes ? 0 !== ContinuousEventPriority && ContinuousEventPriority < lanes ? 0 !== (lanes & 134217727) ? DefaultEventPriority : IdleEventPriority : ContinuousEventPriority : DiscreteEventPriority;
      }
      function resolveUpdatePriority() {
        var updatePriority = ReactDOMSharedInternals.p;
        if (0 !== updatePriority) return updatePriority;
        updatePriority = window.event;
        return void 0 === updatePriority ? DefaultEventPriority : getEventPriority(updatePriority.type);
      }
      function runWithPriority(priority, fn) {
        var previousPriority = ReactDOMSharedInternals.p;
        try {
          return ReactDOMSharedInternals.p = priority, fn();
        } finally {
          ReactDOMSharedInternals.p = previousPriority;
        }
      }
      function detachDeletedInstance(node2) {
        delete node2[internalInstanceKey];
        delete node2[internalPropsKey];
        delete node2[internalEventHandlersKey];
        delete node2[internalEventHandlerListenersKey];
        delete node2[internalEventHandlesSetKey];
      }
      function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst) return targetInst;
        for (var parentNode = targetNode.parentNode; parentNode; ) {
          if (targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey]) {
            parentNode = targetInst.alternate;
            if (null !== targetInst.child || null !== parentNode && null !== parentNode.child)
              for (targetNode = getParentSuspenseInstance(targetNode); null !== targetNode; ) {
                if (parentNode = targetNode[internalInstanceKey])
                  return parentNode;
                targetNode = getParentSuspenseInstance(targetNode);
              }
            return targetInst;
          }
          targetNode = parentNode;
          parentNode = targetNode.parentNode;
        }
        return null;
      }
      function getInstanceFromNode(node2) {
        if (node2 = node2[internalInstanceKey] || node2[internalContainerInstanceKey]) {
          var tag = node2.tag;
          if (5 === tag || 6 === tag || 13 === tag || 26 === tag || 27 === tag || 3 === tag)
            return node2;
        }
        return null;
      }
      function getNodeFromInstance(inst) {
        var tag = inst.tag;
        if (5 === tag || 26 === tag || 27 === tag || 6 === tag)
          return inst.stateNode;
        throw Error("getNodeFromInstance: Invalid argument.");
      }
      function getResourcesFromRoot(root2) {
        var resources = root2[internalRootNodeResourcesKey];
        resources || (resources = root2[internalRootNodeResourcesKey] = { hoistableStyles: /* @__PURE__ */ new Map(), hoistableScripts: /* @__PURE__ */ new Map() });
        return resources;
      }
      function markNodeAsHoistable(node2) {
        node2[internalHoistableMarker] = true;
      }
      function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies);
        registerDirectEvent(registrationName + "Capture", dependencies);
      }
      function registerDirectEvent(registrationName, dependencies) {
        registrationNameDependencies[registrationName] && console.error(
          "EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.",
          registrationName
        );
        registrationNameDependencies[registrationName] = dependencies;
        var lowerCasedName = registrationName.toLowerCase();
        possibleRegistrationNames[lowerCasedName] = registrationName;
        "onDoubleClick" === registrationName && (possibleRegistrationNames.ondblclick = registrationName);
        for (registrationName = 0; registrationName < dependencies.length; registrationName++)
          allNativeEvents.add(dependencies[registrationName]);
      }
      function checkControlledValueProps(tagName, props) {
        hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || null == props.value || ("select" === tagName ? console.error(
          "You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set `onChange`."
        ) : console.error(
          "You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."
        ));
        props.onChange || props.readOnly || props.disabled || null == props.checked || console.error(
          "You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`."
        );
      }
      function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty.call(validatedAttributeNameCache, attributeName))
          return true;
        if (hasOwnProperty.call(illegalAttributeNameCache, attributeName))
          return false;
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName))
          return validatedAttributeNameCache[attributeName] = true;
        illegalAttributeNameCache[attributeName] = true;
        console.error("Invalid attribute name: `%s`", attributeName);
        return false;
      }
      function getValueForAttributeOnCustomComponent(node2, name, expected) {
        if (isAttributeNameSafe(name)) {
          if (!node2.hasAttribute(name)) {
            switch (typeof expected) {
              case "symbol":
              case "object":
                return expected;
              case "function":
                return expected;
              case "boolean":
                if (false === expected) return expected;
            }
            return void 0 === expected ? void 0 : null;
          }
          node2 = node2.getAttribute(name);
          if ("" === node2 && true === expected) return true;
          checkAttributeStringCoercion(expected, name);
          return node2 === "" + expected ? expected : node2;
        }
      }
      function setValueForAttribute(node2, name, value) {
        if (isAttributeNameSafe(name))
          if (null === value) node2.removeAttribute(name);
          else {
            switch (typeof value) {
              case "undefined":
              case "function":
              case "symbol":
                node2.removeAttribute(name);
                return;
              case "boolean":
                var prefix3 = name.toLowerCase().slice(0, 5);
                if ("data-" !== prefix3 && "aria-" !== prefix3) {
                  node2.removeAttribute(name);
                  return;
                }
            }
            checkAttributeStringCoercion(value, name);
            node2.setAttribute(name, "" + value);
          }
      }
      function setValueForKnownAttribute(node2, name, value) {
        if (null === value) node2.removeAttribute(name);
        else {
          switch (typeof value) {
            case "undefined":
            case "function":
            case "symbol":
            case "boolean":
              node2.removeAttribute(name);
              return;
          }
          checkAttributeStringCoercion(value, name);
          node2.setAttribute(name, "" + value);
        }
      }
      function setValueForNamespacedAttribute(node2, namespace, name, value) {
        if (null === value) node2.removeAttribute(name);
        else {
          switch (typeof value) {
            case "undefined":
            case "function":
            case "symbol":
            case "boolean":
              node2.removeAttribute(name);
              return;
          }
          checkAttributeStringCoercion(value, name);
          node2.setAttributeNS(namespace, name, "" + value);
        }
      }
      function disabledLog() {
      }
      function disableLogs() {
        if (0 === disabledDepth) {
          prevLog = console.log;
          prevInfo = console.info;
          prevWarn = console.warn;
          prevError = console.error;
          prevGroup = console.group;
          prevGroupCollapsed = console.groupCollapsed;
          prevGroupEnd = console.groupEnd;
          var props = {
            configurable: true,
            enumerable: true,
            value: disabledLog,
            writable: true
          };
          Object.defineProperties(console, {
            info: props,
            log: props,
            warn: props,
            error: props,
            group: props,
            groupCollapsed: props,
            groupEnd: props
          });
        }
        disabledDepth++;
      }
      function reenableLogs() {
        disabledDepth--;
        if (0 === disabledDepth) {
          var props = { configurable: true, enumerable: true, writable: true };
          Object.defineProperties(console, {
            log: assign2({}, props, { value: prevLog }),
            info: assign2({}, props, { value: prevInfo }),
            warn: assign2({}, props, { value: prevWarn }),
            error: assign2({}, props, { value: prevError }),
            group: assign2({}, props, { value: prevGroup }),
            groupCollapsed: assign2({}, props, { value: prevGroupCollapsed }),
            groupEnd: assign2({}, props, { value: prevGroupEnd })
          });
        }
        0 > disabledDepth && console.error(
          "disabledDepth fell below zero. This is a bug in React. Please file an issue."
        );
      }
      function describeBuiltInComponentFrame(name) {
        if (void 0 === prefix2)
          try {
            throw Error();
          } catch (x) {
            var match2 = x.stack.trim().match(/\n( *(at )?)/);
            prefix2 = match2 && match2[1] || "";
            suffix = -1 < x.stack.indexOf("\n    at") ? " (<anonymous>)" : -1 < x.stack.indexOf("@") ? "@unknown:0:0" : "";
          }
        return "\n" + prefix2 + name + suffix;
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) return "";
        var frame = componentFrameCache.get(fn);
        if (void 0 !== frame) return frame;
        reentry = true;
        frame = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher2 = null;
        previousDispatcher2 = ReactSharedInternals.H;
        ReactSharedInternals.H = null;
        disableLogs();
        try {
          var RunInRootFrame = {
            DetermineComponentFrameRoot: function() {
              try {
                if (construct) {
                  var Fake = function() {
                    throw Error();
                  };
                  Object.defineProperty(Fake.prototype, "props", {
                    set: function() {
                      throw Error();
                    }
                  });
                  if ("object" === typeof Reflect && Reflect.construct) {
                    try {
                      Reflect.construct(Fake, []);
                    } catch (x) {
                      var control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                  } else {
                    try {
                      Fake.call();
                    } catch (x$0) {
                      control = x$0;
                    }
                    fn.call(Fake.prototype);
                  }
                } else {
                  try {
                    throw Error();
                  } catch (x$1) {
                    control = x$1;
                  }
                  (Fake = fn()) && "function" === typeof Fake.catch && Fake.catch(function() {
                  });
                }
              } catch (sample) {
                if (sample && control && "string" === typeof sample.stack)
                  return [sample.stack, control.stack];
              }
              return [null, null];
            }
          };
          RunInRootFrame.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
          var namePropDescriptor = Object.getOwnPropertyDescriptor(
            RunInRootFrame.DetermineComponentFrameRoot,
            "name"
          );
          namePropDescriptor && namePropDescriptor.configurable && Object.defineProperty(
            RunInRootFrame.DetermineComponentFrameRoot,
            "name",
            { value: "DetermineComponentFrameRoot" }
          );
          var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];
          if (sampleStack && controlStack) {
            var sampleLines = sampleStack.split("\n"), controlLines = controlStack.split("\n");
            for (_RunInRootFrame$Deter = namePropDescriptor = 0; namePropDescriptor < sampleLines.length && !sampleLines[namePropDescriptor].includes(
              "DetermineComponentFrameRoot"
            ); )
              namePropDescriptor++;
            for (; _RunInRootFrame$Deter < controlLines.length && !controlLines[_RunInRootFrame$Deter].includes(
              "DetermineComponentFrameRoot"
            ); )
              _RunInRootFrame$Deter++;
            if (namePropDescriptor === sampleLines.length || _RunInRootFrame$Deter === controlLines.length)
              for (namePropDescriptor = sampleLines.length - 1, _RunInRootFrame$Deter = controlLines.length - 1; 1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter && sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter]; )
                _RunInRootFrame$Deter--;
            for (; 1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter; namePropDescriptor--, _RunInRootFrame$Deter--)
              if (sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter]) {
                if (1 !== namePropDescriptor || 1 !== _RunInRootFrame$Deter) {
                  do
                    if (namePropDescriptor--, _RunInRootFrame$Deter--, 0 > _RunInRootFrame$Deter || sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter]) {
                      var _frame = "\n" + sampleLines[namePropDescriptor].replace(
                        " at new ",
                        " at "
                      );
                      fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName));
                      "function" === typeof fn && componentFrameCache.set(fn, _frame);
                      return _frame;
                    }
                  while (1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter);
                }
                break;
              }
          }
        } finally {
          reentry = false, ReactSharedInternals.H = previousDispatcher2, reenableLogs(), Error.prepareStackTrace = frame;
        }
        sampleLines = (sampleLines = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(sampleLines) : "";
        "function" === typeof fn && componentFrameCache.set(fn, sampleLines);
        return sampleLines;
      }
      function formatOwnerStack(error) {
        var prevPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        error = error.stack;
        Error.prepareStackTrace = prevPrepareStackTrace;
        error.startsWith("Error: react-stack-top-frame\n") && (error = error.slice(29));
        prevPrepareStackTrace = error.indexOf("\n");
        -1 !== prevPrepareStackTrace && (error = error.slice(prevPrepareStackTrace + 1));
        prevPrepareStackTrace = error.indexOf("react-stack-bottom-frame");
        -1 !== prevPrepareStackTrace && (prevPrepareStackTrace = error.lastIndexOf(
          "\n",
          prevPrepareStackTrace
        ));
        if (-1 !== prevPrepareStackTrace)
          error = error.slice(0, prevPrepareStackTrace);
        else return "";
        return error;
      }
      function describeFiber(fiber) {
        switch (fiber.tag) {
          case 26:
          case 27:
          case 5:
            return describeBuiltInComponentFrame(fiber.type);
          case 16:
            return describeBuiltInComponentFrame("Lazy");
          case 13:
            return describeBuiltInComponentFrame("Suspense");
          case 19:
            return describeBuiltInComponentFrame("SuspenseList");
          case 0:
          case 15:
            return describeNativeComponentFrame(fiber.type, false);
          case 11:
            return describeNativeComponentFrame(fiber.type.render, false);
          case 1:
            return describeNativeComponentFrame(fiber.type, true);
          case 31:
            return describeBuiltInComponentFrame("Activity");
          default:
            return "";
        }
      }
      function getStackByFiberInDevAndProd(workInProgress2) {
        try {
          var info = "";
          do {
            info += describeFiber(workInProgress2);
            var debugInfo = workInProgress2._debugInfo;
            if (debugInfo)
              for (var i = debugInfo.length - 1; 0 <= i; i--) {
                var entry = debugInfo[i];
                if ("string" === typeof entry.name) {
                  var JSCompiler_temp_const = info, env = entry.env;
                  var JSCompiler_inline_result = describeBuiltInComponentFrame(
                    entry.name + (env ? " [" + env + "]" : "")
                  );
                  info = JSCompiler_temp_const + JSCompiler_inline_result;
                }
              }
            workInProgress2 = workInProgress2.return;
          } while (workInProgress2);
          return info;
        } catch (x) {
          return "\nError generating stack: " + x.message + "\n" + x.stack;
        }
      }
      function describeFunctionComponentFrameWithoutLineNumber(fn) {
        return (fn = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(fn) : "";
      }
      function getCurrentFiberOwnerNameInDevOrNull() {
        if (null === current) return null;
        var owner = current._debugOwner;
        return null != owner ? getComponentNameFromOwner(owner) : null;
      }
      function getCurrentFiberStackInDev() {
        if (null === current) return "";
        var workInProgress2 = current;
        try {
          var info = "";
          6 === workInProgress2.tag && (workInProgress2 = workInProgress2.return);
          switch (workInProgress2.tag) {
            case 26:
            case 27:
            case 5:
              info += describeBuiltInComponentFrame(workInProgress2.type);
              break;
            case 13:
              info += describeBuiltInComponentFrame("Suspense");
              break;
            case 19:
              info += describeBuiltInComponentFrame("SuspenseList");
              break;
            case 31:
              info += describeBuiltInComponentFrame("Activity");
              break;
            case 30:
            case 0:
            case 15:
            case 1:
              workInProgress2._debugOwner || "" !== info || (info += describeFunctionComponentFrameWithoutLineNumber(
                workInProgress2.type
              ));
              break;
            case 11:
              workInProgress2._debugOwner || "" !== info || (info += describeFunctionComponentFrameWithoutLineNumber(
                workInProgress2.type.render
              ));
          }
          for (; workInProgress2; )
            if ("number" === typeof workInProgress2.tag) {
              var fiber = workInProgress2;
              workInProgress2 = fiber._debugOwner;
              var debugStack = fiber._debugStack;
              workInProgress2 && debugStack && ("string" !== typeof debugStack && (fiber._debugStack = debugStack = formatOwnerStack(debugStack)), "" !== debugStack && (info += "\n" + debugStack));
            } else if (null != workInProgress2.debugStack) {
              var ownerStack = workInProgress2.debugStack;
              (workInProgress2 = workInProgress2.owner) && ownerStack && (info += "\n" + formatOwnerStack(ownerStack));
            } else break;
          var JSCompiler_inline_result = info;
        } catch (x) {
          JSCompiler_inline_result = "\nError generating stack: " + x.message + "\n" + x.stack;
        }
        return JSCompiler_inline_result;
      }
      function runWithFiberInDEV(fiber, callback, arg0, arg1, arg2, arg3, arg4) {
        var previousFiber = current;
        setCurrentFiber(fiber);
        try {
          return null !== fiber && fiber._debugTask ? fiber._debugTask.run(
            callback.bind(null, arg0, arg1, arg2, arg3, arg4)
          ) : callback(arg0, arg1, arg2, arg3, arg4);
        } finally {
          setCurrentFiber(previousFiber);
        }
        throw Error(
          "runWithFiberInDEV should never be called in production. This is a bug in React."
        );
      }
      function setCurrentFiber(fiber) {
        ReactSharedInternals.getCurrentStack = null === fiber ? null : getCurrentFiberStackInDev;
        isRendering = false;
        current = fiber;
      }
      function getToStringValue(value) {
        switch (typeof value) {
          case "bigint":
          case "boolean":
          case "number":
          case "string":
          case "undefined":
            return value;
          case "object":
            return checkFormFieldValueStringCoercion(value), value;
          default:
            return "";
        }
      }
      function isCheckable(elem) {
        var type = elem.type;
        return (elem = elem.nodeName) && "input" === elem.toLowerCase() && ("checkbox" === type || "radio" === type);
      }
      function trackValueOnNode(node2) {
        var valueField = isCheckable(node2) ? "checked" : "value", descriptor = Object.getOwnPropertyDescriptor(
          node2.constructor.prototype,
          valueField
        );
        checkFormFieldValueStringCoercion(node2[valueField]);
        var currentValue = "" + node2[valueField];
        if (!node2.hasOwnProperty(valueField) && "undefined" !== typeof descriptor && "function" === typeof descriptor.get && "function" === typeof descriptor.set) {
          var get = descriptor.get, set = descriptor.set;
          Object.defineProperty(node2, valueField, {
            configurable: true,
            get: function() {
              return get.call(this);
            },
            set: function(value) {
              checkFormFieldValueStringCoercion(value);
              currentValue = "" + value;
              set.call(this, value);
            }
          });
          Object.defineProperty(node2, valueField, {
            enumerable: descriptor.enumerable
          });
          return {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value) {
              checkFormFieldValueStringCoercion(value);
              currentValue = "" + value;
            },
            stopTracking: function() {
              node2._valueTracker = null;
              delete node2[valueField];
            }
          };
        }
      }
      function track(node2) {
        node2._valueTracker || (node2._valueTracker = trackValueOnNode(node2));
      }
      function updateValueIfChanged(node2) {
        if (!node2) return false;
        var tracker = node2._valueTracker;
        if (!tracker) return true;
        var lastValue = tracker.getValue();
        var value = "";
        node2 && (value = isCheckable(node2) ? node2.checked ? "true" : "false" : node2.value);
        node2 = value;
        return node2 !== lastValue ? (tracker.setValue(node2), true) : false;
      }
      function getActiveElement(doc) {
        doc = doc || ("undefined" !== typeof document ? document : void 0);
        if ("undefined" === typeof doc) return null;
        try {
          return doc.activeElement || doc.body;
        } catch (e) {
          return doc.body;
        }
      }
      function escapeSelectorAttributeValueInsideDoubleQuotes(value) {
        return value.replace(
          escapeSelectorAttributeValueInsideDoubleQuotesRegex,
          function(ch) {
            return "\\" + ch.charCodeAt(0).toString(16) + " ";
          }
        );
      }
      function validateInputProps(element, props) {
        void 0 === props.checked || void 0 === props.defaultChecked || didWarnCheckedDefaultChecked || (console.error(
          "%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://react.dev/link/controlled-components",
          getCurrentFiberOwnerNameInDevOrNull() || "A component",
          props.type
        ), didWarnCheckedDefaultChecked = true);
        void 0 === props.value || void 0 === props.defaultValue || didWarnValueDefaultValue$1 || (console.error(
          "%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://react.dev/link/controlled-components",
          getCurrentFiberOwnerNameInDevOrNull() || "A component",
          props.type
        ), didWarnValueDefaultValue$1 = true);
      }
      function updateInput(element, value, defaultValue, lastDefaultValue, checked, defaultChecked, type, name) {
        element.name = "";
        null != type && "function" !== typeof type && "symbol" !== typeof type && "boolean" !== typeof type ? (checkAttributeStringCoercion(type, "type"), element.type = type) : element.removeAttribute("type");
        if (null != value)
          if ("number" === type) {
            if (0 === value && "" === element.value || element.value != value)
              element.value = "" + getToStringValue(value);
          } else
            element.value !== "" + getToStringValue(value) && (element.value = "" + getToStringValue(value));
        else
          "submit" !== type && "reset" !== type || element.removeAttribute("value");
        null != value ? setDefaultValue(element, type, getToStringValue(value)) : null != defaultValue ? setDefaultValue(element, type, getToStringValue(defaultValue)) : null != lastDefaultValue && element.removeAttribute("value");
        null == checked && null != defaultChecked && (element.defaultChecked = !!defaultChecked);
        null != checked && (element.checked = checked && "function" !== typeof checked && "symbol" !== typeof checked);
        null != name && "function" !== typeof name && "symbol" !== typeof name && "boolean" !== typeof name ? (checkAttributeStringCoercion(name, "name"), element.name = "" + getToStringValue(name)) : element.removeAttribute("name");
      }
      function initInput(element, value, defaultValue, checked, defaultChecked, type, name, isHydrating2) {
        null != type && "function" !== typeof type && "symbol" !== typeof type && "boolean" !== typeof type && (checkAttributeStringCoercion(type, "type"), element.type = type);
        if (null != value || null != defaultValue) {
          if (!("submit" !== type && "reset" !== type || void 0 !== value && null !== value))
            return;
          defaultValue = null != defaultValue ? "" + getToStringValue(defaultValue) : "";
          value = null != value ? "" + getToStringValue(value) : defaultValue;
          isHydrating2 || value === element.value || (element.value = value);
          element.defaultValue = value;
        }
        checked = null != checked ? checked : defaultChecked;
        checked = "function" !== typeof checked && "symbol" !== typeof checked && !!checked;
        element.checked = isHydrating2 ? element.checked : !!checked;
        element.defaultChecked = !!checked;
        null != name && "function" !== typeof name && "symbol" !== typeof name && "boolean" !== typeof name && (checkAttributeStringCoercion(name, "name"), element.name = name);
      }
      function setDefaultValue(node2, type, value) {
        "number" === type && getActiveElement(node2.ownerDocument) === node2 || node2.defaultValue === "" + value || (node2.defaultValue = "" + value);
      }
      function validateOptionProps(element, props) {
        null == props.value && ("object" === typeof props.children && null !== props.children ? React7.Children.forEach(props.children, function(child) {
          null == child || "string" === typeof child || "number" === typeof child || "bigint" === typeof child || didWarnInvalidChild || (didWarnInvalidChild = true, console.error(
            "Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>."
          ));
        }) : null == props.dangerouslySetInnerHTML || didWarnInvalidInnerHTML || (didWarnInvalidInnerHTML = true, console.error(
          "Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected."
        )));
        null == props.selected || didWarnSelectedSetOnOption || (console.error(
          "Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."
        ), didWarnSelectedSetOnOption = true);
      }
      function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        return ownerName ? "\n\nCheck the render method of `" + ownerName + "`." : "";
      }
      function updateOptions(node2, multiple, propValue, setDefaultSelected) {
        node2 = node2.options;
        if (multiple) {
          multiple = {};
          for (var i = 0; i < propValue.length; i++)
            multiple["$" + propValue[i]] = true;
          for (propValue = 0; propValue < node2.length; propValue++)
            i = multiple.hasOwnProperty("$" + node2[propValue].value), node2[propValue].selected !== i && (node2[propValue].selected = i), i && setDefaultSelected && (node2[propValue].defaultSelected = true);
        } else {
          propValue = "" + getToStringValue(propValue);
          multiple = null;
          for (i = 0; i < node2.length; i++) {
            if (node2[i].value === propValue) {
              node2[i].selected = true;
              setDefaultSelected && (node2[i].defaultSelected = true);
              return;
            }
            null !== multiple || node2[i].disabled || (multiple = node2[i]);
          }
          null !== multiple && (multiple.selected = true);
        }
      }
      function validateSelectProps(element, props) {
        for (element = 0; element < valuePropNames.length; element++) {
          var propName = valuePropNames[element];
          if (null != props[propName]) {
            var propNameIsArray = isArrayImpl(props[propName]);
            props.multiple && !propNameIsArray ? console.error(
              "The `%s` prop supplied to <select> must be an array if `multiple` is true.%s",
              propName,
              getDeclarationErrorAddendum()
            ) : !props.multiple && propNameIsArray && console.error(
              "The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s",
              propName,
              getDeclarationErrorAddendum()
            );
          }
        }
        void 0 === props.value || void 0 === props.defaultValue || didWarnValueDefaultValue || (console.error(
          "Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://react.dev/link/controlled-components"
        ), didWarnValueDefaultValue = true);
      }
      function validateTextareaProps(element, props) {
        void 0 === props.value || void 0 === props.defaultValue || didWarnValDefaultVal || (console.error(
          "%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://react.dev/link/controlled-components",
          getCurrentFiberOwnerNameInDevOrNull() || "A component"
        ), didWarnValDefaultVal = true);
        null != props.children && null == props.value && console.error(
          "Use the `defaultValue` or `value` props instead of setting children on <textarea>."
        );
      }
      function updateTextarea(element, value, defaultValue) {
        if (null != value && (value = "" + getToStringValue(value), value !== element.value && (element.value = value), null == defaultValue)) {
          element.defaultValue !== value && (element.defaultValue = value);
          return;
        }
        element.defaultValue = null != defaultValue ? "" + getToStringValue(defaultValue) : "";
      }
      function initTextarea(element, value, defaultValue, children) {
        if (null == value) {
          if (null != children) {
            if (null != defaultValue)
              throw Error(
                "If you supply `defaultValue` on a <textarea>, do not pass children."
              );
            if (isArrayImpl(children)) {
              if (1 < children.length)
                throw Error("<textarea> can only have at most one child.");
              children = children[0];
            }
            defaultValue = children;
          }
          null == defaultValue && (defaultValue = "");
          value = defaultValue;
        }
        defaultValue = getToStringValue(value);
        element.defaultValue = defaultValue;
        children = element.textContent;
        children === defaultValue && "" !== children && null !== children && (element.value = children);
      }
      function findNotableNode(node2, indent) {
        return void 0 === node2.serverProps && 0 === node2.serverTail.length && 1 === node2.children.length && 3 < node2.distanceFromLeaf && node2.distanceFromLeaf > 15 - indent ? findNotableNode(node2.children[0], indent) : node2;
      }
      function indentation(indent) {
        return "  " + "  ".repeat(indent);
      }
      function added(indent) {
        return "+ " + "  ".repeat(indent);
      }
      function removed(indent) {
        return "- " + "  ".repeat(indent);
      }
      function describeFiberType(fiber) {
        switch (fiber.tag) {
          case 26:
          case 27:
          case 5:
            return fiber.type;
          case 16:
            return "Lazy";
          case 13:
            return "Suspense";
          case 19:
            return "SuspenseList";
          case 0:
          case 15:
            return fiber = fiber.type, fiber.displayName || fiber.name || null;
          case 11:
            return fiber = fiber.type.render, fiber.displayName || fiber.name || null;
          case 1:
            return fiber = fiber.type, fiber.displayName || fiber.name || null;
          default:
            return null;
        }
      }
      function describeTextNode(content, maxLength) {
        return needsEscaping.test(content) ? (content = JSON.stringify(content), content.length > maxLength - 2 ? 8 > maxLength ? '{"..."}' : "{" + content.slice(0, maxLength - 7) + '..."}' : "{" + content + "}") : content.length > maxLength ? 5 > maxLength ? '{"..."}' : content.slice(0, maxLength - 3) + "..." : content;
      }
      function describeTextDiff(clientText, serverProps, indent) {
        var maxLength = 120 - 2 * indent;
        if (null === serverProps)
          return added(indent) + describeTextNode(clientText, maxLength) + "\n";
        if ("string" === typeof serverProps) {
          for (var firstDiff = 0; firstDiff < serverProps.length && firstDiff < clientText.length && serverProps.charCodeAt(firstDiff) === clientText.charCodeAt(firstDiff); firstDiff++) ;
          firstDiff > maxLength - 8 && 10 < firstDiff && (clientText = "..." + clientText.slice(firstDiff - 8), serverProps = "..." + serverProps.slice(firstDiff - 8));
          return added(indent) + describeTextNode(clientText, maxLength) + "\n" + removed(indent) + describeTextNode(serverProps, maxLength) + "\n";
        }
        return indentation(indent) + describeTextNode(clientText, maxLength) + "\n";
      }
      function objectName(object) {
        return Object.prototype.toString.call(object).replace(/^\[object (.*)\]$/, function(m, p0) {
          return p0;
        });
      }
      function describeValue(value, maxLength) {
        switch (typeof value) {
          case "string":
            return value = JSON.stringify(value), value.length > maxLength ? 5 > maxLength ? '"..."' : value.slice(0, maxLength - 4) + '..."' : value;
          case "object":
            if (null === value) return "null";
            if (isArrayImpl(value)) return "[...]";
            if (value.$$typeof === REACT_ELEMENT_TYPE)
              return (maxLength = getComponentNameFromType(value.type)) ? "<" + maxLength + ">" : "<...>";
            var name = objectName(value);
            if ("Object" === name) {
              name = "";
              maxLength -= 2;
              for (var propName in value)
                if (value.hasOwnProperty(propName)) {
                  var jsonPropName = JSON.stringify(propName);
                  jsonPropName !== '"' + propName + '"' && (propName = jsonPropName);
                  maxLength -= propName.length - 2;
                  jsonPropName = describeValue(
                    value[propName],
                    15 > maxLength ? maxLength : 15
                  );
                  maxLength -= jsonPropName.length;
                  if (0 > maxLength) {
                    name += "" === name ? "..." : ", ...";
                    break;
                  }
                  name += ("" === name ? "" : ",") + propName + ":" + jsonPropName;
                }
              return "{" + name + "}";
            }
            return name;
          case "function":
            return (maxLength = value.displayName || value.name) ? "function " + maxLength : "function";
          default:
            return String(value);
        }
      }
      function describePropValue(value, maxLength) {
        return "string" !== typeof value || needsEscaping.test(value) ? "{" + describeValue(value, maxLength - 2) + "}" : value.length > maxLength - 2 ? 5 > maxLength ? '"..."' : '"' + value.slice(0, maxLength - 5) + '..."' : '"' + value + '"';
      }
      function describeExpandedElement(type, props, rowPrefix) {
        var remainingRowLength = 120 - rowPrefix.length - type.length, properties = [], propName;
        for (propName in props)
          if (props.hasOwnProperty(propName) && "children" !== propName) {
            var propValue = describePropValue(
              props[propName],
              120 - rowPrefix.length - propName.length - 1
            );
            remainingRowLength -= propName.length + propValue.length + 2;
            properties.push(propName + "=" + propValue);
          }
        return 0 === properties.length ? rowPrefix + "<" + type + ">\n" : 0 < remainingRowLength ? rowPrefix + "<" + type + " " + properties.join(" ") + ">\n" : rowPrefix + "<" + type + "\n" + rowPrefix + "  " + properties.join("\n" + rowPrefix + "  ") + "\n" + rowPrefix + ">\n";
      }
      function describePropertiesDiff(clientObject, serverObject, indent) {
        var properties = "", remainingServerProperties = assign2({}, serverObject), propName;
        for (propName in clientObject)
          if (clientObject.hasOwnProperty(propName)) {
            delete remainingServerProperties[propName];
            var maxLength = 120 - 2 * indent - propName.length - 2, clientPropValue = describeValue(clientObject[propName], maxLength);
            serverObject.hasOwnProperty(propName) ? (maxLength = describeValue(serverObject[propName], maxLength), properties += added(indent) + propName + ": " + clientPropValue + "\n", properties += removed(indent) + propName + ": " + maxLength + "\n") : properties += added(indent) + propName + ": " + clientPropValue + "\n";
          }
        for (var _propName in remainingServerProperties)
          remainingServerProperties.hasOwnProperty(_propName) && (clientObject = describeValue(
            remainingServerProperties[_propName],
            120 - 2 * indent - _propName.length - 2
          ), properties += removed(indent) + _propName + ": " + clientObject + "\n");
        return properties;
      }
      function describeElementDiff(type, clientProps, serverProps, indent) {
        var content = "", serverPropNames = /* @__PURE__ */ new Map();
        for (propName$jscomp$0 in serverProps)
          serverProps.hasOwnProperty(propName$jscomp$0) && serverPropNames.set(
            propName$jscomp$0.toLowerCase(),
            propName$jscomp$0
          );
        if (1 === serverPropNames.size && serverPropNames.has("children"))
          content += describeExpandedElement(
            type,
            clientProps,
            indentation(indent)
          );
        else {
          for (var _propName2 in clientProps)
            if (clientProps.hasOwnProperty(_propName2) && "children" !== _propName2) {
              var maxLength$jscomp$0 = 120 - 2 * (indent + 1) - _propName2.length - 1, serverPropName = serverPropNames.get(_propName2.toLowerCase());
              if (void 0 !== serverPropName) {
                serverPropNames.delete(_propName2.toLowerCase());
                var propName$jscomp$0 = clientProps[_propName2];
                serverPropName = serverProps[serverPropName];
                var clientPropValue = describePropValue(
                  propName$jscomp$0,
                  maxLength$jscomp$0
                );
                maxLength$jscomp$0 = describePropValue(
                  serverPropName,
                  maxLength$jscomp$0
                );
                "object" === typeof propName$jscomp$0 && null !== propName$jscomp$0 && "object" === typeof serverPropName && null !== serverPropName && "Object" === objectName(propName$jscomp$0) && "Object" === objectName(serverPropName) && (2 < Object.keys(propName$jscomp$0).length || 2 < Object.keys(serverPropName).length || -1 < clientPropValue.indexOf("...") || -1 < maxLength$jscomp$0.indexOf("...")) ? content += indentation(indent + 1) + _propName2 + "={{\n" + describePropertiesDiff(
                  propName$jscomp$0,
                  serverPropName,
                  indent + 2
                ) + indentation(indent + 1) + "}}\n" : (content += added(indent + 1) + _propName2 + "=" + clientPropValue + "\n", content += removed(indent + 1) + _propName2 + "=" + maxLength$jscomp$0 + "\n");
              } else
                content += indentation(indent + 1) + _propName2 + "=" + describePropValue(clientProps[_propName2], maxLength$jscomp$0) + "\n";
            }
          serverPropNames.forEach(function(propName) {
            if ("children" !== propName) {
              var maxLength = 120 - 2 * (indent + 1) - propName.length - 1;
              content += removed(indent + 1) + propName + "=" + describePropValue(serverProps[propName], maxLength) + "\n";
            }
          });
          content = "" === content ? indentation(indent) + "<" + type + ">\n" : indentation(indent) + "<" + type + "\n" + content + indentation(indent) + ">\n";
        }
        type = serverProps.children;
        clientProps = clientProps.children;
        if ("string" === typeof type || "number" === typeof type || "bigint" === typeof type) {
          serverPropNames = "";
          if ("string" === typeof clientProps || "number" === typeof clientProps || "bigint" === typeof clientProps)
            serverPropNames = "" + clientProps;
          content += describeTextDiff(serverPropNames, "" + type, indent + 1);
        } else if ("string" === typeof clientProps || "number" === typeof clientProps || "bigint" === typeof clientProps)
          content = null == type ? content + describeTextDiff("" + clientProps, null, indent + 1) : content + describeTextDiff("" + clientProps, void 0, indent + 1);
        return content;
      }
      function describeSiblingFiber(fiber, indent) {
        var type = describeFiberType(fiber);
        if (null === type) {
          type = "";
          for (fiber = fiber.child; fiber; )
            type += describeSiblingFiber(fiber, indent), fiber = fiber.sibling;
          return type;
        }
        return indentation(indent) + "<" + type + ">\n";
      }
      function describeNode(node2, indent) {
        var skipToNode = findNotableNode(node2, indent);
        if (skipToNode !== node2 && (1 !== node2.children.length || node2.children[0] !== skipToNode))
          return indentation(indent) + "...\n" + describeNode(skipToNode, indent + 1);
        skipToNode = "";
        var debugInfo = node2.fiber._debugInfo;
        if (debugInfo)
          for (var i = 0; i < debugInfo.length; i++) {
            var serverComponentName = debugInfo[i].name;
            "string" === typeof serverComponentName && (skipToNode += indentation(indent) + "<" + serverComponentName + ">\n", indent++);
          }
        debugInfo = "";
        i = node2.fiber.pendingProps;
        if (6 === node2.fiber.tag)
          debugInfo = describeTextDiff(i, node2.serverProps, indent), indent++;
        else if (serverComponentName = describeFiberType(node2.fiber), null !== serverComponentName)
          if (void 0 === node2.serverProps) {
            debugInfo = indent;
            var maxLength = 120 - 2 * debugInfo - serverComponentName.length - 2, content = "";
            for (propName in i)
              if (i.hasOwnProperty(propName) && "children" !== propName) {
                var propValue = describePropValue(i[propName], 15);
                maxLength -= propName.length + propValue.length + 2;
                if (0 > maxLength) {
                  content += " ...";
                  break;
                }
                content += " " + propName + "=" + propValue;
              }
            debugInfo = indentation(debugInfo) + "<" + serverComponentName + content + ">\n";
            indent++;
          } else
            null === node2.serverProps ? (debugInfo = describeExpandedElement(
              serverComponentName,
              i,
              added(indent)
            ), indent++) : "string" === typeof node2.serverProps ? console.error(
              "Should not have matched a non HostText fiber to a Text node. This is a bug in React."
            ) : (debugInfo = describeElementDiff(
              serverComponentName,
              i,
              node2.serverProps,
              indent
            ), indent++);
        var propName = "";
        i = node2.fiber.child;
        for (serverComponentName = 0; i && serverComponentName < node2.children.length; )
          maxLength = node2.children[serverComponentName], maxLength.fiber === i ? (propName += describeNode(maxLength, indent), serverComponentName++) : propName += describeSiblingFiber(i, indent), i = i.sibling;
        i && 0 < node2.children.length && (propName += indentation(indent) + "...\n");
        i = node2.serverTail;
        null === node2.serverProps && indent--;
        for (node2 = 0; node2 < i.length; node2++)
          serverComponentName = i[node2], propName = "string" === typeof serverComponentName ? propName + (removed(indent) + describeTextNode(serverComponentName, 120 - 2 * indent) + "\n") : propName + describeExpandedElement(
            serverComponentName.type,
            serverComponentName.props,
            removed(indent)
          );
        return skipToNode + debugInfo + propName;
      }
      function describeDiff(rootNode) {
        try {
          return "\n\n" + describeNode(rootNode, 0);
        } catch (x) {
          return "";
        }
      }
      function describeAncestors(ancestor, child, props) {
        for (var fiber = child, node2 = null, distanceFromLeaf = 0; fiber; )
          fiber === ancestor && (distanceFromLeaf = 0), node2 = {
            fiber,
            children: null !== node2 ? [node2] : [],
            serverProps: fiber === child ? props : fiber === ancestor ? null : void 0,
            serverTail: [],
            distanceFromLeaf
          }, distanceFromLeaf++, fiber = fiber.return;
        return null !== node2 ? describeDiff(node2).replaceAll(/^[+-]/gm, ">") : "";
      }
      function updatedAncestorInfoDev(oldInfo, tag) {
        var ancestorInfo = assign2({}, oldInfo || emptyAncestorInfoDev), info = { tag };
        -1 !== inScopeTags.indexOf(tag) && (ancestorInfo.aTagInScope = null, ancestorInfo.buttonTagInScope = null, ancestorInfo.nobrTagInScope = null);
        -1 !== buttonScopeTags.indexOf(tag) && (ancestorInfo.pTagInButtonScope = null);
        -1 !== specialTags.indexOf(tag) && "address" !== tag && "div" !== tag && "p" !== tag && (ancestorInfo.listItemTagAutoclosing = null, ancestorInfo.dlItemTagAutoclosing = null);
        ancestorInfo.current = info;
        "form" === tag && (ancestorInfo.formTag = info);
        "a" === tag && (ancestorInfo.aTagInScope = info);
        "button" === tag && (ancestorInfo.buttonTagInScope = info);
        "nobr" === tag && (ancestorInfo.nobrTagInScope = info);
        "p" === tag && (ancestorInfo.pTagInButtonScope = info);
        "li" === tag && (ancestorInfo.listItemTagAutoclosing = info);
        if ("dd" === tag || "dt" === tag)
          ancestorInfo.dlItemTagAutoclosing = info;
        "#document" === tag || "html" === tag ? ancestorInfo.containerTagInScope = null : ancestorInfo.containerTagInScope || (ancestorInfo.containerTagInScope = info);
        null !== oldInfo || "#document" !== tag && "html" !== tag && "body" !== tag ? true === ancestorInfo.implicitRootScope && (ancestorInfo.implicitRootScope = false) : ancestorInfo.implicitRootScope = true;
        return ancestorInfo;
      }
      function isTagValidWithParent(tag, parentTag, implicitRootScope) {
        switch (parentTag) {
          case "select":
            return "hr" === tag || "option" === tag || "optgroup" === tag || "script" === tag || "template" === tag || "#text" === tag;
          case "optgroup":
            return "option" === tag || "#text" === tag;
          case "option":
            return "#text" === tag;
          case "tr":
            return "th" === tag || "td" === tag || "style" === tag || "script" === tag || "template" === tag;
          case "tbody":
          case "thead":
          case "tfoot":
            return "tr" === tag || "style" === tag || "script" === tag || "template" === tag;
          case "colgroup":
            return "col" === tag || "template" === tag;
          case "table":
            return "caption" === tag || "colgroup" === tag || "tbody" === tag || "tfoot" === tag || "thead" === tag || "style" === tag || "script" === tag || "template" === tag;
          case "head":
            return "base" === tag || "basefont" === tag || "bgsound" === tag || "link" === tag || "meta" === tag || "title" === tag || "noscript" === tag || "noframes" === tag || "style" === tag || "script" === tag || "template" === tag;
          case "html":
            if (implicitRootScope) break;
            return "head" === tag || "body" === tag || "frameset" === tag;
          case "frameset":
            return "frame" === tag;
          case "#document":
            if (!implicitRootScope) return "html" === tag;
        }
        switch (tag) {
          case "h1":
          case "h2":
          case "h3":
          case "h4":
          case "h5":
          case "h6":
            return "h1" !== parentTag && "h2" !== parentTag && "h3" !== parentTag && "h4" !== parentTag && "h5" !== parentTag && "h6" !== parentTag;
          case "rp":
          case "rt":
            return -1 === impliedEndTags.indexOf(parentTag);
          case "caption":
          case "col":
          case "colgroup":
          case "frameset":
          case "frame":
          case "tbody":
          case "td":
          case "tfoot":
          case "th":
          case "thead":
          case "tr":
            return null == parentTag;
          case "head":
            return implicitRootScope || null === parentTag;
          case "html":
            return implicitRootScope && "#document" === parentTag || null === parentTag;
          case "body":
            return implicitRootScope && ("#document" === parentTag || "html" === parentTag) || null === parentTag;
        }
        return true;
      }
      function findInvalidAncestorForTag(tag, ancestorInfo) {
        switch (tag) {
          case "address":
          case "article":
          case "aside":
          case "blockquote":
          case "center":
          case "details":
          case "dialog":
          case "dir":
          case "div":
          case "dl":
          case "fieldset":
          case "figcaption":
          case "figure":
          case "footer":
          case "header":
          case "hgroup":
          case "main":
          case "menu":
          case "nav":
          case "ol":
          case "p":
          case "section":
          case "summary":
          case "ul":
          case "pre":
          case "listing":
          case "table":
          case "hr":
          case "xmp":
          case "h1":
          case "h2":
          case "h3":
          case "h4":
          case "h5":
          case "h6":
            return ancestorInfo.pTagInButtonScope;
          case "form":
            return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
          case "li":
            return ancestorInfo.listItemTagAutoclosing;
          case "dd":
          case "dt":
            return ancestorInfo.dlItemTagAutoclosing;
          case "button":
            return ancestorInfo.buttonTagInScope;
          case "a":
            return ancestorInfo.aTagInScope;
          case "nobr":
            return ancestorInfo.nobrTagInScope;
        }
        return null;
      }
      function findAncestor(parent, tagName) {
        for (; parent; ) {
          switch (parent.tag) {
            case 5:
            case 26:
            case 27:
              if (parent.type === tagName) return parent;
          }
          parent = parent.return;
        }
        return null;
      }
      function validateDOMNesting(childTag, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfoDev;
        var parentInfo = ancestorInfo.current;
        ancestorInfo = (parentInfo = isTagValidWithParent(
          childTag,
          parentInfo && parentInfo.tag,
          ancestorInfo.implicitRootScope
        ) ? null : parentInfo) ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
        ancestorInfo = parentInfo || ancestorInfo;
        if (!ancestorInfo) return true;
        var ancestorTag = ancestorInfo.tag;
        ancestorInfo = String(!!parentInfo) + "|" + childTag + "|" + ancestorTag;
        if (didWarn[ancestorInfo]) return false;
        didWarn[ancestorInfo] = true;
        var ancestor = (ancestorInfo = current) ? findAncestor(ancestorInfo.return, ancestorTag) : null, ancestorDescription = null !== ancestorInfo && null !== ancestor ? describeAncestors(ancestor, ancestorInfo, null) : "", tagDisplayName = "<" + childTag + ">";
        parentInfo ? (parentInfo = "", "table" === ancestorTag && "tr" === childTag && (parentInfo += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser."), console.error(
          "In HTML, %s cannot be a child of <%s>.%s\nThis will cause a hydration error.%s",
          tagDisplayName,
          ancestorTag,
          parentInfo,
          ancestorDescription
        )) : console.error(
          "In HTML, %s cannot be a descendant of <%s>.\nThis will cause a hydration error.%s",
          tagDisplayName,
          ancestorTag,
          ancestorDescription
        );
        ancestorInfo && (childTag = ancestorInfo.return, null === ancestor || null === childTag || ancestor === childTag && childTag._debugOwner === ancestorInfo._debugOwner || runWithFiberInDEV(ancestor, function() {
          console.error(
            "<%s> cannot contain a nested %s.\nSee this log for the ancestor stack trace.",
            ancestorTag,
            tagDisplayName
          );
        }));
        return false;
      }
      function validateTextNesting(childText, parentTag, implicitRootScope) {
        if (implicitRootScope || isTagValidWithParent("#text", parentTag, false))
          return true;
        implicitRootScope = "#text|" + parentTag;
        if (didWarn[implicitRootScope]) return false;
        didWarn[implicitRootScope] = true;
        var ancestor = (implicitRootScope = current) ? findAncestor(implicitRootScope, parentTag) : null;
        implicitRootScope = null !== implicitRootScope && null !== ancestor ? describeAncestors(
          ancestor,
          implicitRootScope,
          6 !== implicitRootScope.tag ? { children: null } : null
        ) : "";
        /\S/.test(childText) ? console.error(
          "In HTML, text nodes cannot be a child of <%s>.\nThis will cause a hydration error.%s",
          parentTag,
          implicitRootScope
        ) : console.error(
          "In HTML, whitespace text nodes cannot be a child of <%s>. Make sure you don't have any extra whitespace between tags on each line of your source code.\nThis will cause a hydration error.%s",
          parentTag,
          implicitRootScope
        );
        return false;
      }
      function setTextContent(node2, text) {
        if (text) {
          var firstChild = node2.firstChild;
          if (firstChild && firstChild === node2.lastChild && 3 === firstChild.nodeType) {
            firstChild.nodeValue = text;
            return;
          }
        }
        node2.textContent = text;
      }
      function camelize(string) {
        return string.replace(hyphenPattern, function(_, character2) {
          return character2.toUpperCase();
        });
      }
      function setValueForStyle(style2, styleName, value) {
        var isCustomProperty3 = 0 === styleName.indexOf("--");
        isCustomProperty3 || (-1 < styleName.indexOf("-") ? warnedStyleNames.hasOwnProperty(styleName) && warnedStyleNames[styleName] || (warnedStyleNames[styleName] = true, console.error(
          "Unsupported style property %s. Did you mean %s?",
          styleName,
          camelize(styleName.replace(msPattern, "ms-"))
        )) : badVendoredStyleNamePattern.test(styleName) ? warnedStyleNames.hasOwnProperty(styleName) && warnedStyleNames[styleName] || (warnedStyleNames[styleName] = true, console.error(
          "Unsupported vendor-prefixed style property %s. Did you mean %s?",
          styleName,
          styleName.charAt(0).toUpperCase() + styleName.slice(1)
        )) : !badStyleValueWithSemicolonPattern.test(value) || warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value] || (warnedStyleValues[value] = true, console.error(
          `Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`,
          styleName,
          value.replace(badStyleValueWithSemicolonPattern, "")
        )), "number" === typeof value && (isNaN(value) ? warnedForNaNValue || (warnedForNaNValue = true, console.error(
          "`NaN` is an invalid value for the `%s` css style property.",
          styleName
        )) : isFinite(value) || warnedForInfinityValue || (warnedForInfinityValue = true, console.error(
          "`Infinity` is an invalid value for the `%s` css style property.",
          styleName
        ))));
        null == value || "boolean" === typeof value || "" === value ? isCustomProperty3 ? style2.setProperty(styleName, "") : "float" === styleName ? style2.cssFloat = "" : style2[styleName] = "" : isCustomProperty3 ? style2.setProperty(styleName, value) : "number" !== typeof value || 0 === value || unitlessNumbers.has(styleName) ? "float" === styleName ? style2.cssFloat = value : (checkCSSPropertyStringCoercion(value, styleName), style2[styleName] = ("" + value).trim()) : style2[styleName] = value + "px";
      }
      function setValueForStyles(node2, styles, prevStyles) {
        if (null != styles && "object" !== typeof styles)
          throw Error(
            "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX."
          );
        styles && Object.freeze(styles);
        node2 = node2.style;
        if (null != prevStyles) {
          if (styles) {
            var expandedUpdates = {};
            if (prevStyles) {
              for (var key in prevStyles)
                if (prevStyles.hasOwnProperty(key) && !styles.hasOwnProperty(key))
                  for (var longhands = shorthandToLonghand[key] || [key], i = 0; i < longhands.length; i++)
                    expandedUpdates[longhands[i]] = key;
            }
            for (var _key in styles)
              if (styles.hasOwnProperty(_key) && (!prevStyles || prevStyles[_key] !== styles[_key]))
                for (key = shorthandToLonghand[_key] || [_key], longhands = 0; longhands < key.length; longhands++)
                  expandedUpdates[key[longhands]] = _key;
            _key = {};
            for (var key$jscomp$0 in styles)
              for (key = shorthandToLonghand[key$jscomp$0] || [key$jscomp$0], longhands = 0; longhands < key.length; longhands++)
                _key[key[longhands]] = key$jscomp$0;
            key$jscomp$0 = {};
            for (var _key2 in expandedUpdates)
              if (key = expandedUpdates[_key2], (longhands = _key[_key2]) && key !== longhands && (i = key + "," + longhands, !key$jscomp$0[i])) {
                key$jscomp$0[i] = true;
                i = console;
                var value = styles[key];
                i.error.call(
                  i,
                  "%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.",
                  null == value || "boolean" === typeof value || "" === value ? "Removing" : "Updating",
                  key,
                  longhands
                );
              }
          }
          for (var styleName in prevStyles)
            !prevStyles.hasOwnProperty(styleName) || null != styles && styles.hasOwnProperty(styleName) || (0 === styleName.indexOf("--") ? node2.setProperty(styleName, "") : "float" === styleName ? node2.cssFloat = "" : node2[styleName] = "");
          for (var _styleName in styles)
            _key2 = styles[_styleName], styles.hasOwnProperty(_styleName) && prevStyles[_styleName] !== _key2 && setValueForStyle(node2, _styleName, _key2);
        } else
          for (expandedUpdates in styles)
            styles.hasOwnProperty(expandedUpdates) && setValueForStyle(node2, expandedUpdates, styles[expandedUpdates]);
      }
      function isCustomElement(tagName) {
        if (-1 === tagName.indexOf("-")) return false;
        switch (tagName) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return false;
          default:
            return true;
        }
      }
      function getAttributeAlias(name) {
        return aliases.get(name) || name;
      }
      function validateProperty$1(tagName, name) {
        if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name])
          return true;
        if (rARIACamel$1.test(name)) {
          tagName = "aria-" + name.slice(4).toLowerCase();
          tagName = ariaProperties.hasOwnProperty(tagName) ? tagName : null;
          if (null == tagName)
            return console.error(
              "Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.",
              name
            ), warnedProperties$1[name] = true;
          if (name !== tagName)
            return console.error(
              "Invalid ARIA attribute `%s`. Did you mean `%s`?",
              name,
              tagName
            ), warnedProperties$1[name] = true;
        }
        if (rARIA$1.test(name)) {
          tagName = name.toLowerCase();
          tagName = ariaProperties.hasOwnProperty(tagName) ? tagName : null;
          if (null == tagName) return warnedProperties$1[name] = true, false;
          name !== tagName && (console.error(
            "Unknown ARIA attribute `%s`. Did you mean `%s`?",
            name,
            tagName
          ), warnedProperties$1[name] = true);
        }
        return true;
      }
      function validateProperties$2(type, props) {
        var invalidProps = [], key;
        for (key in props)
          validateProperty$1(type, key) || invalidProps.push(key);
        props = invalidProps.map(function(prop) {
          return "`" + prop + "`";
        }).join(", ");
        1 === invalidProps.length ? console.error(
          "Invalid aria prop %s on <%s> tag. For details, see https://react.dev/link/invalid-aria-props",
          props,
          type
        ) : 1 < invalidProps.length && console.error(
          "Invalid aria props %s on <%s> tag. For details, see https://react.dev/link/invalid-aria-props",
          props,
          type
        );
      }
      function validateProperty(tagName, name, value, eventRegistry) {
        if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name])
          return true;
        var lowerCasedName = name.toLowerCase();
        if ("onfocusin" === lowerCasedName || "onfocusout" === lowerCasedName)
          return console.error(
            "React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."
          ), warnedProperties[name] = true;
        if ("function" === typeof value && ("form" === tagName && "action" === name || "input" === tagName && "formAction" === name || "button" === tagName && "formAction" === name))
          return true;
        if (null != eventRegistry) {
          tagName = eventRegistry.possibleRegistrationNames;
          if (eventRegistry.registrationNameDependencies.hasOwnProperty(name))
            return true;
          eventRegistry = tagName.hasOwnProperty(lowerCasedName) ? tagName[lowerCasedName] : null;
          if (null != eventRegistry)
            return console.error(
              "Invalid event handler property `%s`. Did you mean `%s`?",
              name,
              eventRegistry
            ), warnedProperties[name] = true;
          if (EVENT_NAME_REGEX.test(name))
            return console.error(
              "Unknown event handler property `%s`. It will be ignored.",
              name
            ), warnedProperties[name] = true;
        } else if (EVENT_NAME_REGEX.test(name))
          return INVALID_EVENT_NAME_REGEX.test(name) && console.error(
            "Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.",
            name
          ), warnedProperties[name] = true;
        if (rARIA.test(name) || rARIACamel.test(name)) return true;
        if ("innerhtml" === lowerCasedName)
          return console.error(
            "Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."
          ), warnedProperties[name] = true;
        if ("aria" === lowerCasedName)
          return console.error(
            "The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."
          ), warnedProperties[name] = true;
        if ("is" === lowerCasedName && null !== value && void 0 !== value && "string" !== typeof value)
          return console.error(
            "Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.",
            typeof value
          ), warnedProperties[name] = true;
        if ("number" === typeof value && isNaN(value))
          return console.error(
            "Received NaN for the `%s` attribute. If this is expected, cast the value to a string.",
            name
          ), warnedProperties[name] = true;
        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
          if (lowerCasedName = possibleStandardNames[lowerCasedName], lowerCasedName !== name)
            return console.error(
              "Invalid DOM property `%s`. Did you mean `%s`?",
              name,
              lowerCasedName
            ), warnedProperties[name] = true;
        } else if (name !== lowerCasedName)
          return console.error(
            "React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.",
            name,
            lowerCasedName
          ), warnedProperties[name] = true;
        switch (name) {
          case "dangerouslySetInnerHTML":
          case "children":
          case "style":
          case "suppressContentEditableWarning":
          case "suppressHydrationWarning":
          case "defaultValue":
          case "defaultChecked":
          case "innerHTML":
          case "ref":
            return true;
          case "innerText":
          case "textContent":
            return true;
        }
        switch (typeof value) {
          case "boolean":
            switch (name) {
              case "autoFocus":
              case "checked":
              case "multiple":
              case "muted":
              case "selected":
              case "contentEditable":
              case "spellCheck":
              case "draggable":
              case "value":
              case "autoReverse":
              case "externalResourcesRequired":
              case "focusable":
              case "preserveAlpha":
              case "allowFullScreen":
              case "async":
              case "autoPlay":
              case "controls":
              case "default":
              case "defer":
              case "disabled":
              case "disablePictureInPicture":
              case "disableRemotePlayback":
              case "formNoValidate":
              case "hidden":
              case "loop":
              case "noModule":
              case "noValidate":
              case "open":
              case "playsInline":
              case "readOnly":
              case "required":
              case "reversed":
              case "scoped":
              case "seamless":
              case "itemScope":
              case "capture":
              case "download":
              case "inert":
                return true;
              default:
                lowerCasedName = name.toLowerCase().slice(0, 5);
                if ("data-" === lowerCasedName || "aria-" === lowerCasedName)
                  return true;
                value ? console.error(
                  'Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.',
                  value,
                  name,
                  name,
                  value,
                  name
                ) : console.error(
                  'Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.',
                  value,
                  name,
                  name,
                  value,
                  name,
                  name,
                  name
                );
                return warnedProperties[name] = true;
            }
          case "function":
          case "symbol":
            return warnedProperties[name] = true, false;
          case "string":
            if ("false" === value || "true" === value) {
              switch (name) {
                case "checked":
                case "selected":
                case "multiple":
                case "muted":
                case "allowFullScreen":
                case "async":
                case "autoPlay":
                case "controls":
                case "default":
                case "defer":
                case "disabled":
                case "disablePictureInPicture":
                case "disableRemotePlayback":
                case "formNoValidate":
                case "hidden":
                case "loop":
                case "noModule":
                case "noValidate":
                case "open":
                case "playsInline":
                case "readOnly":
                case "required":
                case "reversed":
                case "scoped":
                case "seamless":
                case "itemScope":
                case "inert":
                  break;
                default:
                  return true;
              }
              console.error(
                "Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?",
                value,
                name,
                "false" === value ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".',
                name,
                value
              );
              warnedProperties[name] = true;
            }
        }
        return true;
      }
      function warnUnknownProperties(type, props, eventRegistry) {
        var unknownProps = [], key;
        for (key in props)
          validateProperty(type, key, props[key], eventRegistry) || unknownProps.push(key);
        props = unknownProps.map(function(prop) {
          return "`" + prop + "`";
        }).join(", ");
        1 === unknownProps.length ? console.error(
          "Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://react.dev/link/attribute-behavior ",
          props,
          type
        ) : 1 < unknownProps.length && console.error(
          "Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://react.dev/link/attribute-behavior ",
          props,
          type
        );
      }
      function sanitizeURL(url) {
        return isJavaScriptProtocol.test("" + url) ? "javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')" : url;
      }
      function getEventTarget(nativeEvent) {
        nativeEvent = nativeEvent.target || nativeEvent.srcElement || window;
        nativeEvent.correspondingUseElement && (nativeEvent = nativeEvent.correspondingUseElement);
        return 3 === nativeEvent.nodeType ? nativeEvent.parentNode : nativeEvent;
      }
      function restoreStateOfTarget(target) {
        var internalInstance = getInstanceFromNode(target);
        if (internalInstance && (target = internalInstance.stateNode)) {
          var props = target[internalPropsKey] || null;
          a: switch (target = internalInstance.stateNode, internalInstance.type) {
            case "input":
              updateInput(
                target,
                props.value,
                props.defaultValue,
                props.defaultValue,
                props.checked,
                props.defaultChecked,
                props.type,
                props.name
              );
              internalInstance = props.name;
              if ("radio" === props.type && null != internalInstance) {
                for (props = target; props.parentNode; ) props = props.parentNode;
                checkAttributeStringCoercion(internalInstance, "name");
                props = props.querySelectorAll(
                  'input[name="' + escapeSelectorAttributeValueInsideDoubleQuotes(
                    "" + internalInstance
                  ) + '"][type="radio"]'
                );
                for (internalInstance = 0; internalInstance < props.length; internalInstance++) {
                  var otherNode = props[internalInstance];
                  if (otherNode !== target && otherNode.form === target.form) {
                    var otherProps = otherNode[internalPropsKey] || null;
                    if (!otherProps)
                      throw Error(
                        "ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported."
                      );
                    updateInput(
                      otherNode,
                      otherProps.value,
                      otherProps.defaultValue,
                      otherProps.defaultValue,
                      otherProps.checked,
                      otherProps.defaultChecked,
                      otherProps.type,
                      otherProps.name
                    );
                  }
                }
                for (internalInstance = 0; internalInstance < props.length; internalInstance++)
                  otherNode = props[internalInstance], otherNode.form === target.form && updateValueIfChanged(otherNode);
              }
              break a;
            case "textarea":
              updateTextarea(target, props.value, props.defaultValue);
              break a;
            case "select":
              internalInstance = props.value, null != internalInstance && updateOptions(target, !!props.multiple, internalInstance, false);
          }
        }
      }
      function batchedUpdates$1(fn, a, b) {
        if (isInsideEventHandler) return fn(a, b);
        isInsideEventHandler = true;
        try {
          var JSCompiler_inline_result = fn(a);
          return JSCompiler_inline_result;
        } finally {
          if (isInsideEventHandler = false, null !== restoreTarget || null !== restoreQueue) {
            if (flushSyncWork$1(), restoreTarget && (a = restoreTarget, fn = restoreQueue, restoreQueue = restoreTarget = null, restoreStateOfTarget(a), fn))
              for (a = 0; a < fn.length; a++) restoreStateOfTarget(fn[a]);
          }
        }
      }
      function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (null === stateNode) return null;
        var props = stateNode[internalPropsKey] || null;
        if (null === props) return null;
        stateNode = props[registrationName];
        a: switch (registrationName) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            (props = !props.disabled) || (inst = inst.type, props = !("button" === inst || "input" === inst || "select" === inst || "textarea" === inst));
            inst = !props;
            break a;
          default:
            inst = false;
        }
        if (inst) return null;
        if (stateNode && "function" !== typeof stateNode)
          throw Error(
            "Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof stateNode + "` type."
          );
        return stateNode;
      }
      function getData() {
        if (fallbackText) return fallbackText;
        var start, startValue = startText, startLength = startValue.length, end, endValue = "value" in root ? root.value : root.textContent, endLength = endValue.length;
        for (start = 0; start < startLength && startValue[start] === endValue[start]; start++) ;
        var minEnd = startLength - start;
        for (end = 1; end <= minEnd && startValue[startLength - end] === endValue[endLength - end]; end++) ;
        return fallbackText = endValue.slice(start, 1 < end ? 1 - end : void 0);
      }
      function getEventCharCode(nativeEvent) {
        var keyCode = nativeEvent.keyCode;
        "charCode" in nativeEvent ? (nativeEvent = nativeEvent.charCode, 0 === nativeEvent && 13 === keyCode && (nativeEvent = 13)) : nativeEvent = keyCode;
        10 === nativeEvent && (nativeEvent = 13);
        return 32 <= nativeEvent || 13 === nativeEvent ? nativeEvent : 0;
      }
      function functionThatReturnsTrue() {
        return true;
      }
      function functionThatReturnsFalse() {
        return false;
      }
      function createSyntheticEvent(Interface) {
        function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
          this._reactName = reactName;
          this._targetInst = targetInst;
          this.type = reactEventType;
          this.nativeEvent = nativeEvent;
          this.target = nativeEventTarget;
          this.currentTarget = null;
          for (var propName in Interface)
            Interface.hasOwnProperty(propName) && (reactName = Interface[propName], this[propName] = reactName ? reactName(nativeEvent) : nativeEvent[propName]);
          this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : false === nativeEvent.returnValue) ? functionThatReturnsTrue : functionThatReturnsFalse;
          this.isPropagationStopped = functionThatReturnsFalse;
          return this;
        }
        assign2(SyntheticBaseEvent.prototype, {
          preventDefault: function() {
            this.defaultPrevented = true;
            var event = this.nativeEvent;
            event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = false), this.isDefaultPrevented = functionThatReturnsTrue);
          },
          stopPropagation: function() {
            var event = this.nativeEvent;
            event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = true), this.isPropagationStopped = functionThatReturnsTrue);
          },
          persist: function() {
          },
          isPersistent: functionThatReturnsTrue
        });
        return SyntheticBaseEvent;
      }
      function modifierStateGetter(keyArg) {
        var nativeEvent = this.nativeEvent;
        return nativeEvent.getModifierState ? nativeEvent.getModifierState(keyArg) : (keyArg = modifierKeyToProp[keyArg]) ? !!nativeEvent[keyArg] : false;
      }
      function getEventModifierState() {
        return modifierStateGetter;
      }
      function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch (domEventName) {
          case "keyup":
            return -1 !== END_KEYCODES.indexOf(nativeEvent.keyCode);
          case "keydown":
            return nativeEvent.keyCode !== START_KEYCODE;
          case "keypress":
          case "mousedown":
          case "focusout":
            return true;
          default:
            return false;
        }
      }
      function getDataFromCustomEvent(nativeEvent) {
        nativeEvent = nativeEvent.detail;
        return "object" === typeof nativeEvent && "data" in nativeEvent ? nativeEvent.data : null;
      }
      function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch (domEventName) {
          case "compositionend":
            return getDataFromCustomEvent(nativeEvent);
          case "keypress":
            if (nativeEvent.which !== SPACEBAR_CODE) return null;
            hasSpaceKeypress = true;
            return SPACEBAR_CHAR;
          case "textInput":
            return domEventName = nativeEvent.data, domEventName === SPACEBAR_CHAR && hasSpaceKeypress ? null : domEventName;
          default:
            return null;
        }
      }
      function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        if (isComposing)
          return "compositionend" === domEventName || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent) ? (domEventName = getData(), fallbackText = startText = root = null, isComposing = false, domEventName) : null;
        switch (domEventName) {
          case "paste":
            return null;
          case "keypress":
            if (!(nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) || nativeEvent.ctrlKey && nativeEvent.altKey) {
              if (nativeEvent.char && 1 < nativeEvent.char.length)
                return nativeEvent.char;
              if (nativeEvent.which)
                return String.fromCharCode(nativeEvent.which);
            }
            return null;
          case "compositionend":
            return useFallbackCompositionData && "ko" !== nativeEvent.locale ? null : nativeEvent.data;
          default:
            return null;
        }
      }
      function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return "input" === nodeName ? !!supportedInputTypes[elem.type] : "textarea" === nodeName ? true : false;
      }
      function isEventSupported(eventNameSuffix) {
        if (!canUseDOM) return false;
        eventNameSuffix = "on" + eventNameSuffix;
        var isSupported = eventNameSuffix in document;
        isSupported || (isSupported = document.createElement("div"), isSupported.setAttribute(eventNameSuffix, "return;"), isSupported = "function" === typeof isSupported[eventNameSuffix]);
        return isSupported;
      }
      function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        restoreTarget ? restoreQueue ? restoreQueue.push(target) : restoreQueue = [target] : restoreTarget = target;
        inst = accumulateTwoPhaseListeners(inst, "onChange");
        0 < inst.length && (nativeEvent = new SyntheticEvent(
          "onChange",
          "change",
          null,
          nativeEvent,
          target
        ), dispatchQueue.push({ event: nativeEvent, listeners: inst }));
      }
      function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
      }
      function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode)) return targetInst;
      }
      function getTargetInstForChangeEvent(domEventName, targetInst) {
        if ("change" === domEventName) return targetInst;
      }
      function stopWatchingForValueChange() {
        activeElement$1 && (activeElement$1.detachEvent("onpropertychange", handlePropertyChange), activeElementInst$1 = activeElement$1 = null);
      }
      function handlePropertyChange(nativeEvent) {
        if ("value" === nativeEvent.propertyName && getInstIfValueChanged(activeElementInst$1)) {
          var dispatchQueue = [];
          createAndAccumulateChangeEvent(
            dispatchQueue,
            activeElementInst$1,
            nativeEvent,
            getEventTarget(nativeEvent)
          );
          batchedUpdates$1(runEventInBatch, dispatchQueue);
        }
      }
      function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        "focusin" === domEventName ? (stopWatchingForValueChange(), activeElement$1 = target, activeElementInst$1 = targetInst, activeElement$1.attachEvent("onpropertychange", handlePropertyChange)) : "focusout" === domEventName && stopWatchingForValueChange();
      }
      function getTargetInstForInputEventPolyfill(domEventName) {
        if ("selectionchange" === domEventName || "keyup" === domEventName || "keydown" === domEventName)
          return getInstIfValueChanged(activeElementInst$1);
      }
      function getTargetInstForClickEvent(domEventName, targetInst) {
        if ("click" === domEventName) return getInstIfValueChanged(targetInst);
      }
      function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if ("input" === domEventName || "change" === domEventName)
          return getInstIfValueChanged(targetInst);
      }
      function is(x, y) {
        return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
      }
      function shallowEqual(objA, objB) {
        if (objectIs(objA, objB)) return true;
        if ("object" !== typeof objA || null === objA || "object" !== typeof objB || null === objB)
          return false;
        var keysA = Object.keys(objA), keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) return false;
        for (keysB = 0; keysB < keysA.length; keysB++) {
          var currentKey = keysA[keysB];
          if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey]))
            return false;
        }
        return true;
      }
      function getLeafNode(node2) {
        for (; node2 && node2.firstChild; ) node2 = node2.firstChild;
        return node2;
      }
      function getNodeForCharacterOffset(root2, offset) {
        var node2 = getLeafNode(root2);
        root2 = 0;
        for (var nodeEnd; node2; ) {
          if (3 === node2.nodeType) {
            nodeEnd = root2 + node2.textContent.length;
            if (root2 <= offset && nodeEnd >= offset)
              return { node: node2, offset: offset - root2 };
            root2 = nodeEnd;
          }
          a: {
            for (; node2; ) {
              if (node2.nextSibling) {
                node2 = node2.nextSibling;
                break a;
              }
              node2 = node2.parentNode;
            }
            node2 = void 0;
          }
          node2 = getLeafNode(node2);
        }
      }
      function containsNode(outerNode, innerNode) {
        return outerNode && innerNode ? outerNode === innerNode ? true : outerNode && 3 === outerNode.nodeType ? false : innerNode && 3 === innerNode.nodeType ? containsNode(outerNode, innerNode.parentNode) : "contains" in outerNode ? outerNode.contains(innerNode) : outerNode.compareDocumentPosition ? !!(outerNode.compareDocumentPosition(innerNode) & 16) : false : false;
      }
      function getActiveElementDeep(containerInfo) {
        containerInfo = null != containerInfo && null != containerInfo.ownerDocument && null != containerInfo.ownerDocument.defaultView ? containerInfo.ownerDocument.defaultView : window;
        for (var element = getActiveElement(containerInfo.document); element instanceof containerInfo.HTMLIFrameElement; ) {
          try {
            var JSCompiler_inline_result = "string" === typeof element.contentWindow.location.href;
          } catch (err) {
            JSCompiler_inline_result = false;
          }
          if (JSCompiler_inline_result) containerInfo = element.contentWindow;
          else break;
          element = getActiveElement(containerInfo.document);
        }
        return element;
      }
      function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && ("input" === nodeName && ("text" === elem.type || "search" === elem.type || "tel" === elem.type || "url" === elem.type || "password" === elem.type) || "textarea" === nodeName || "true" === elem.contentEditable);
      }
      function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        var doc = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget.document : 9 === nativeEventTarget.nodeType ? nativeEventTarget : nativeEventTarget.ownerDocument;
        mouseDown || null == activeElement || activeElement !== getActiveElement(doc) || (doc = activeElement, "selectionStart" in doc && hasSelectionCapabilities(doc) ? doc = { start: doc.selectionStart, end: doc.selectionEnd } : (doc = (doc.ownerDocument && doc.ownerDocument.defaultView || window).getSelection(), doc = {
          anchorNode: doc.anchorNode,
          anchorOffset: doc.anchorOffset,
          focusNode: doc.focusNode,
          focusOffset: doc.focusOffset
        }), lastSelection && shallowEqual(lastSelection, doc) || (lastSelection = doc, doc = accumulateTwoPhaseListeners(activeElementInst, "onSelect"), 0 < doc.length && (nativeEvent = new SyntheticEvent(
          "onSelect",
          "select",
          null,
          nativeEvent,
          nativeEventTarget
        ), dispatchQueue.push({ event: nativeEvent, listeners: doc }), nativeEvent.target = activeElement)));
      }
      function makePrefixMap(styleProp, eventName) {
        var prefixes = {};
        prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes["Webkit" + styleProp] = "webkit" + eventName;
        prefixes["Moz" + styleProp] = "moz" + eventName;
        return prefixes;
      }
      function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
        if (!vendorPrefixes[eventName]) return eventName;
        var prefixMap = vendorPrefixes[eventName], styleProp;
        for (styleProp in prefixMap)
          if (prefixMap.hasOwnProperty(styleProp) && styleProp in style)
            return prefixedEventNames[eventName] = prefixMap[styleProp];
        return eventName;
      }
      function registerSimpleEvent(domEventName, reactName) {
        topLevelEventsToReactNames.set(domEventName, reactName);
        registerTwoPhaseEvent(reactName, [domEventName]);
      }
      function createCapturedValueAtFiber(value, source) {
        if ("object" === typeof value && null !== value) {
          var existing = CapturedStacks.get(value);
          if (void 0 !== existing) return existing;
          source = {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source)
          };
          CapturedStacks.set(value, source);
          return source;
        }
        return {
          value,
          source,
          stack: getStackByFiberInDevAndProd(source)
        };
      }
      function finishQueueingConcurrentUpdates() {
        for (var endIndex = concurrentQueuesIndex, i = concurrentlyUpdatedLanes = concurrentQueuesIndex = 0; i < endIndex; ) {
          var fiber = concurrentQueues[i];
          concurrentQueues[i++] = null;
          var queue = concurrentQueues[i];
          concurrentQueues[i++] = null;
          var update = concurrentQueues[i];
          concurrentQueues[i++] = null;
          var lane = concurrentQueues[i];
          concurrentQueues[i++] = null;
          if (null !== queue && null !== update) {
            var pending = queue.pending;
            null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
            queue.pending = update;
          }
          0 !== lane && markUpdateLaneFromFiberToRoot(fiber, update, lane);
        }
      }
      function enqueueUpdate$1(fiber, queue, update, lane) {
        concurrentQueues[concurrentQueuesIndex++] = fiber;
        concurrentQueues[concurrentQueuesIndex++] = queue;
        concurrentQueues[concurrentQueuesIndex++] = update;
        concurrentQueues[concurrentQueuesIndex++] = lane;
        concurrentlyUpdatedLanes |= lane;
        fiber.lanes |= lane;
        fiber = fiber.alternate;
        null !== fiber && (fiber.lanes |= lane);
      }
      function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
        enqueueUpdate$1(fiber, queue, update, lane);
        return getRootForUpdatedFiber(fiber);
      }
      function enqueueConcurrentRenderForLane(fiber, lane) {
        enqueueUpdate$1(fiber, null, null, lane);
        return getRootForUpdatedFiber(fiber);
      }
      function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {
        sourceFiber.lanes |= lane;
        var alternate = sourceFiber.alternate;
        null !== alternate && (alternate.lanes |= lane);
        for (var isHidden = false, parent = sourceFiber.return; null !== parent; )
          parent.childLanes |= lane, alternate = parent.alternate, null !== alternate && (alternate.childLanes |= lane), 22 === parent.tag && (sourceFiber = parent.stateNode, null === sourceFiber || sourceFiber._visibility & OffscreenVisible || (isHidden = true)), sourceFiber = parent, parent = parent.return;
        return 3 === sourceFiber.tag ? (parent = sourceFiber.stateNode, isHidden && null !== update && (isHidden = 31 - clz32(lane), sourceFiber = parent.hiddenUpdates, alternate = sourceFiber[isHidden], null === alternate ? sourceFiber[isHidden] = [update] : alternate.push(update), update.lane = lane | 536870912), parent) : null;
      }
      function getRootForUpdatedFiber(sourceFiber) {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT)
          throw nestedPassiveUpdateCount = nestedUpdateCount = 0, rootWithPassiveNestedUpdates = rootWithNestedUpdates = null, Error(
            "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops."
          );
        nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT && (nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null, console.error(
          "Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render."
        ));
        null === sourceFiber.alternate && 0 !== (sourceFiber.flags & 4098) && warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        for (var node2 = sourceFiber, parent = node2.return; null !== parent; )
          null === node2.alternate && 0 !== (node2.flags & 4098) && warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber), node2 = parent, parent = node2.return;
        return 3 === node2.tag ? node2.stateNode : null;
      }
      function resolveFunctionForHotReloading(type) {
        if (null === resolveFamily) return type;
        var family = resolveFamily(type);
        return void 0 === family ? type : family.current;
      }
      function resolveForwardRefForHotReloading(type) {
        if (null === resolveFamily) return type;
        var family = resolveFamily(type);
        return void 0 === family ? null !== type && void 0 !== type && "function" === typeof type.render && (family = resolveFunctionForHotReloading(type.render), type.render !== family) ? (family = { $$typeof: REACT_FORWARD_REF_TYPE, render: family }, void 0 !== type.displayName && (family.displayName = type.displayName), family) : type : family.current;
      }
      function isCompatibleFamilyForHotReloading(fiber, element) {
        if (null === resolveFamily) return false;
        var prevType = fiber.elementType;
        element = element.type;
        var needsCompareFamilies = false, $$typeofNextType = "object" === typeof element && null !== element ? element.$$typeof : null;
        switch (fiber.tag) {
          case 1:
            "function" === typeof element && (needsCompareFamilies = true);
            break;
          case 0:
            "function" === typeof element ? needsCompareFamilies = true : $$typeofNextType === REACT_LAZY_TYPE && (needsCompareFamilies = true);
            break;
          case 11:
            $$typeofNextType === REACT_FORWARD_REF_TYPE ? needsCompareFamilies = true : $$typeofNextType === REACT_LAZY_TYPE && (needsCompareFamilies = true);
            break;
          case 14:
          case 15:
            $$typeofNextType === REACT_MEMO_TYPE ? needsCompareFamilies = true : $$typeofNextType === REACT_LAZY_TYPE && (needsCompareFamilies = true);
            break;
          default:
            return false;
        }
        return needsCompareFamilies && (fiber = resolveFamily(prevType), void 0 !== fiber && fiber === resolveFamily(element)) ? true : false;
      }
      function markFailedErrorBoundaryForHotReloading(fiber) {
        null !== resolveFamily && "function" === typeof WeakSet && (null === failedBoundaries && (failedBoundaries = /* @__PURE__ */ new WeakSet()), failedBoundaries.add(fiber));
      }
      function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type, candidateType = null;
        switch (tag) {
          case 0:
          case 15:
          case 1:
            candidateType = type;
            break;
          case 11:
            candidateType = type.render;
        }
        if (null === resolveFamily)
          throw Error("Expected resolveFamily to be set during hot reload.");
        var needsRender = false;
        type = false;
        null !== candidateType && (candidateType = resolveFamily(candidateType), void 0 !== candidateType && (staleFamilies.has(candidateType) ? type = true : updatedFamilies.has(candidateType) && (1 === tag ? type = true : needsRender = true)));
        null !== failedBoundaries && (failedBoundaries.has(fiber) || null !== alternate && failedBoundaries.has(alternate)) && (type = true);
        type && (fiber._debugNeedsRemount = true);
        if (type || needsRender)
          alternate = enqueueConcurrentRenderForLane(fiber, 2), null !== alternate && scheduleUpdateOnFiber(alternate, fiber, 2);
        null === child || type || scheduleFibersWithFamiliesRecursively(
          child,
          updatedFamilies,
          staleFamilies
        );
        null !== sibling && scheduleFibersWithFamiliesRecursively(
          sibling,
          updatedFamilies,
          staleFamilies
        );
      }
      function FiberNode(tag, pendingProps, key, mode) {
        this.tag = tag;
        this.key = key;
        this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
        this.index = 0;
        this.refCleanup = this.ref = null;
        this.pendingProps = pendingProps;
        this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
        this.mode = mode;
        this.subtreeFlags = this.flags = 0;
        this.deletions = null;
        this.childLanes = this.lanes = 0;
        this.alternate = null;
        this.actualDuration = -0;
        this.actualStartTime = -1.1;
        this.treeBaseDuration = this.selfBaseDuration = -0;
        this._debugTask = this._debugStack = this._debugOwner = this._debugInfo = null;
        this._debugNeedsRemount = false;
        this._debugHookTypes = null;
        hasBadMapPolyfill || "function" !== typeof Object.preventExtensions || Object.preventExtensions(this);
      }
      function shouldConstruct(Component) {
        Component = Component.prototype;
        return !(!Component || !Component.isReactComponent);
      }
      function createWorkInProgress(current2, pendingProps) {
        var workInProgress2 = current2.alternate;
        null === workInProgress2 ? (workInProgress2 = createFiber(
          current2.tag,
          pendingProps,
          current2.key,
          current2.mode
        ), workInProgress2.elementType = current2.elementType, workInProgress2.type = current2.type, workInProgress2.stateNode = current2.stateNode, workInProgress2._debugOwner = current2._debugOwner, workInProgress2._debugStack = current2._debugStack, workInProgress2._debugTask = current2._debugTask, workInProgress2._debugHookTypes = current2._debugHookTypes, workInProgress2.alternate = current2, current2.alternate = workInProgress2) : (workInProgress2.pendingProps = pendingProps, workInProgress2.type = current2.type, workInProgress2.flags = 0, workInProgress2.subtreeFlags = 0, workInProgress2.deletions = null, workInProgress2.actualDuration = -0, workInProgress2.actualStartTime = -1.1);
        workInProgress2.flags = current2.flags & 65011712;
        workInProgress2.childLanes = current2.childLanes;
        workInProgress2.lanes = current2.lanes;
        workInProgress2.child = current2.child;
        workInProgress2.memoizedProps = current2.memoizedProps;
        workInProgress2.memoizedState = current2.memoizedState;
        workInProgress2.updateQueue = current2.updateQueue;
        pendingProps = current2.dependencies;
        workInProgress2.dependencies = null === pendingProps ? null : {
          lanes: pendingProps.lanes,
          firstContext: pendingProps.firstContext,
          _debugThenableState: pendingProps._debugThenableState
        };
        workInProgress2.sibling = current2.sibling;
        workInProgress2.index = current2.index;
        workInProgress2.ref = current2.ref;
        workInProgress2.refCleanup = current2.refCleanup;
        workInProgress2.selfBaseDuration = current2.selfBaseDuration;
        workInProgress2.treeBaseDuration = current2.treeBaseDuration;
        workInProgress2._debugInfo = current2._debugInfo;
        workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
        switch (workInProgress2.tag) {
          case 0:
          case 15:
            workInProgress2.type = resolveFunctionForHotReloading(current2.type);
            break;
          case 1:
            workInProgress2.type = resolveFunctionForHotReloading(current2.type);
            break;
          case 11:
            workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
        }
        return workInProgress2;
      }
      function resetWorkInProgress(workInProgress2, renderLanes2) {
        workInProgress2.flags &= 65011714;
        var current2 = workInProgress2.alternate;
        null === current2 ? (workInProgress2.childLanes = 0, workInProgress2.lanes = renderLanes2, workInProgress2.child = null, workInProgress2.subtreeFlags = 0, workInProgress2.memoizedProps = null, workInProgress2.memoizedState = null, workInProgress2.updateQueue = null, workInProgress2.dependencies = null, workInProgress2.stateNode = null, workInProgress2.selfBaseDuration = 0, workInProgress2.treeBaseDuration = 0) : (workInProgress2.childLanes = current2.childLanes, workInProgress2.lanes = current2.lanes, workInProgress2.child = current2.child, workInProgress2.subtreeFlags = 0, workInProgress2.deletions = null, workInProgress2.memoizedProps = current2.memoizedProps, workInProgress2.memoizedState = current2.memoizedState, workInProgress2.updateQueue = current2.updateQueue, workInProgress2.type = current2.type, renderLanes2 = current2.dependencies, workInProgress2.dependencies = null === renderLanes2 ? null : {
          lanes: renderLanes2.lanes,
          firstContext: renderLanes2.firstContext,
          _debugThenableState: renderLanes2._debugThenableState
        }, workInProgress2.selfBaseDuration = current2.selfBaseDuration, workInProgress2.treeBaseDuration = current2.treeBaseDuration);
        return workInProgress2;
      }
      function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
        var fiberTag = 0, resolvedType = type;
        if ("function" === typeof type)
          shouldConstruct(type) && (fiberTag = 1), resolvedType = resolveFunctionForHotReloading(resolvedType);
        else if ("string" === typeof type)
          fiberTag = getHostContext(), fiberTag = isHostHoistableType(type, pendingProps, fiberTag) ? 26 : "html" === type || "head" === type || "body" === type ? 27 : 5;
        else
          a: switch (type) {
            case REACT_ACTIVITY_TYPE:
              return key = createFiber(31, pendingProps, key, mode), key.elementType = REACT_ACTIVITY_TYPE, key.lanes = lanes, key;
            case REACT_FRAGMENT_TYPE:
              return createFiberFromFragment(
                pendingProps.children,
                mode,
                lanes,
                key
              );
            case REACT_STRICT_MODE_TYPE:
              fiberTag = 8;
              mode |= StrictLegacyMode;
              mode |= StrictEffectsMode;
              break;
            case REACT_PROFILER_TYPE:
              return type = pendingProps, owner = mode, "string" !== typeof type.id && console.error(
                'Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.',
                typeof type.id
              ), key = createFiber(12, type, key, owner | ProfileMode), key.elementType = REACT_PROFILER_TYPE, key.lanes = lanes, key.stateNode = { effectDuration: 0, passiveEffectDuration: 0 }, key;
            case REACT_SUSPENSE_TYPE:
              return key = createFiber(13, pendingProps, key, mode), key.elementType = REACT_SUSPENSE_TYPE, key.lanes = lanes, key;
            case REACT_SUSPENSE_LIST_TYPE:
              return key = createFiber(19, pendingProps, key, mode), key.elementType = REACT_SUSPENSE_LIST_TYPE, key.lanes = lanes, key;
            default:
              if ("object" === typeof type && null !== type)
                switch (type.$$typeof) {
                  case REACT_PROVIDER_TYPE:
                  case REACT_CONTEXT_TYPE:
                    fiberTag = 10;
                    break a;
                  case REACT_CONSUMER_TYPE:
                    fiberTag = 9;
                    break a;
                  case REACT_FORWARD_REF_TYPE:
                    fiberTag = 11;
                    resolvedType = resolveForwardRefForHotReloading(resolvedType);
                    break a;
                  case REACT_MEMO_TYPE:
                    fiberTag = 14;
                    break a;
                  case REACT_LAZY_TYPE:
                    fiberTag = 16;
                    resolvedType = null;
                    break a;
                }
              resolvedType = "";
              if (void 0 === type || "object" === typeof type && null !== type && 0 === Object.keys(type).length)
                resolvedType += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              null === type ? pendingProps = "null" : isArrayImpl(type) ? pendingProps = "array" : void 0 !== type && type.$$typeof === REACT_ELEMENT_TYPE ? (pendingProps = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />", resolvedType = " Did you accidentally export a JSX literal instead of a component?") : pendingProps = typeof type;
              (fiberTag = owner ? getComponentNameFromOwner(owner) : null) && (resolvedType += "\n\nCheck the render method of `" + fiberTag + "`.");
              fiberTag = 29;
              pendingProps = Error(
                "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (pendingProps + "." + resolvedType)
              );
              resolvedType = null;
          }
        key = createFiber(fiberTag, pendingProps, key, mode);
        key.elementType = type;
        key.type = resolvedType;
        key.lanes = lanes;
        key._debugOwner = owner;
        return key;
      }
      function createFiberFromElement(element, mode, lanes) {
        mode = createFiberFromTypeAndProps(
          element.type,
          element.key,
          element.props,
          element._owner,
          mode,
          lanes
        );
        mode._debugOwner = element._owner;
        mode._debugStack = element._debugStack;
        mode._debugTask = element._debugTask;
        return mode;
      }
      function createFiberFromFragment(elements, mode, lanes, key) {
        elements = createFiber(7, elements, key, mode);
        elements.lanes = lanes;
        return elements;
      }
      function createFiberFromText(content, mode, lanes) {
        content = createFiber(6, content, null, mode);
        content.lanes = lanes;
        return content;
      }
      function createFiberFromPortal(portal, mode, lanes) {
        mode = createFiber(
          4,
          null !== portal.children ? portal.children : [],
          portal.key,
          mode
        );
        mode.lanes = lanes;
        mode.stateNode = {
          containerInfo: portal.containerInfo,
          pendingChildren: null,
          implementation: portal.implementation
        };
        return mode;
      }
      function pushTreeFork(workInProgress2, totalChildren) {
        warnIfNotHydrating();
        forkStack[forkStackIndex++] = treeForkCount;
        forkStack[forkStackIndex++] = treeForkProvider;
        treeForkProvider = workInProgress2;
        treeForkCount = totalChildren;
      }
      function pushTreeId(workInProgress2, totalChildren, index) {
        warnIfNotHydrating();
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextProvider = workInProgress2;
        var baseIdWithLeadingBit = treeContextId;
        workInProgress2 = treeContextOverflow;
        var baseLength = 32 - clz32(baseIdWithLeadingBit) - 1;
        baseIdWithLeadingBit &= ~(1 << baseLength);
        index += 1;
        var length2 = 32 - clz32(totalChildren) + baseLength;
        if (30 < length2) {
          var numberOfOverflowBits = baseLength - baseLength % 5;
          length2 = (baseIdWithLeadingBit & (1 << numberOfOverflowBits) - 1).toString(32);
          baseIdWithLeadingBit >>= numberOfOverflowBits;
          baseLength -= numberOfOverflowBits;
          treeContextId = 1 << 32 - clz32(totalChildren) + baseLength | index << baseLength | baseIdWithLeadingBit;
          treeContextOverflow = length2 + workInProgress2;
        } else
          treeContextId = 1 << length2 | index << baseLength | baseIdWithLeadingBit, treeContextOverflow = workInProgress2;
      }
      function pushMaterializedTreeId(workInProgress2) {
        warnIfNotHydrating();
        null !== workInProgress2.return && (pushTreeFork(workInProgress2, 1), pushTreeId(workInProgress2, 1, 0));
      }
      function popTreeContext(workInProgress2) {
        for (; workInProgress2 === treeForkProvider; )
          treeForkProvider = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null, treeForkCount = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null;
        for (; workInProgress2 === treeContextProvider; )
          treeContextProvider = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextOverflow = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextId = idStack[--idStackIndex], idStack[idStackIndex] = null;
      }
      function warnIfNotHydrating() {
        isHydrating || console.error(
          "Expected to be hydrating. This is a bug in React. Please file an issue."
        );
      }
      function buildHydrationDiffNode(fiber, distanceFromLeaf) {
        if (null === fiber.return) {
          if (null === hydrationDiffRootDEV)
            hydrationDiffRootDEV = {
              fiber,
              children: [],
              serverProps: void 0,
              serverTail: [],
              distanceFromLeaf
            };
          else {
            if (hydrationDiffRootDEV.fiber !== fiber)
              throw Error(
                "Saw multiple hydration diff roots in a pass. This is a bug in React."
              );
            hydrationDiffRootDEV.distanceFromLeaf > distanceFromLeaf && (hydrationDiffRootDEV.distanceFromLeaf = distanceFromLeaf);
          }
          return hydrationDiffRootDEV;
        }
        var siblings = buildHydrationDiffNode(
          fiber.return,
          distanceFromLeaf + 1
        ).children;
        if (0 < siblings.length && siblings[siblings.length - 1].fiber === fiber)
          return siblings = siblings[siblings.length - 1], siblings.distanceFromLeaf > distanceFromLeaf && (siblings.distanceFromLeaf = distanceFromLeaf), siblings;
        distanceFromLeaf = {
          fiber,
          children: [],
          serverProps: void 0,
          serverTail: [],
          distanceFromLeaf
        };
        siblings.push(distanceFromLeaf);
        return distanceFromLeaf;
      }
      function warnNonHydratedInstance(fiber, rejectedCandidate) {
        didSuspendOrErrorDEV || (fiber = buildHydrationDiffNode(fiber, 0), fiber.serverProps = null, null !== rejectedCandidate && (rejectedCandidate = describeHydratableInstanceForDevWarnings(rejectedCandidate), fiber.serverTail.push(rejectedCandidate)));
      }
      function throwOnHydrationMismatch(fiber) {
        var diff = "", diffRoot = hydrationDiffRootDEV;
        null !== diffRoot && (hydrationDiffRootDEV = null, diff = describeDiff(diffRoot));
        queueHydrationError(
          createCapturedValueAtFiber(
            Error(
              "Hydration failed because the server rendered HTML didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:\n\n- A server/client branch `if (typeof window !== 'undefined')`.\n- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n- Date formatting in a user's locale which doesn't match the server.\n- External changing data without sending a snapshot of it along with the HTML.\n- Invalid HTML tag nesting.\n\nIt can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n\nhttps://react.dev/link/hydration-mismatch" + diff
            ),
            fiber
          )
        );
        throw HydrationMismatchException;
      }
      function prepareToHydrateHostInstance(fiber) {
        var didHydrate = fiber.stateNode;
        var type = fiber.type, props = fiber.memoizedProps;
        didHydrate[internalInstanceKey] = fiber;
        didHydrate[internalPropsKey] = props;
        validatePropertiesInDevelopment(type, props);
        switch (type) {
          case "dialog":
            listenToNonDelegatedEvent("cancel", didHydrate);
            listenToNonDelegatedEvent("close", didHydrate);
            break;
          case "iframe":
          case "object":
          case "embed":
            listenToNonDelegatedEvent("load", didHydrate);
            break;
          case "video":
          case "audio":
            for (type = 0; type < mediaEventTypes.length; type++)
              listenToNonDelegatedEvent(mediaEventTypes[type], didHydrate);
            break;
          case "source":
            listenToNonDelegatedEvent("error", didHydrate);
            break;
          case "img":
          case "image":
          case "link":
            listenToNonDelegatedEvent("error", didHydrate);
            listenToNonDelegatedEvent("load", didHydrate);
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", didHydrate);
            break;
          case "input":
            checkControlledValueProps("input", props);
            listenToNonDelegatedEvent("invalid", didHydrate);
            validateInputProps(didHydrate, props);
            initInput(
              didHydrate,
              props.value,
              props.defaultValue,
              props.checked,
              props.defaultChecked,
              props.type,
              props.name,
              true
            );
            track(didHydrate);
            break;
          case "option":
            validateOptionProps(didHydrate, props);
            break;
          case "select":
            checkControlledValueProps("select", props);
            listenToNonDelegatedEvent("invalid", didHydrate);
            validateSelectProps(didHydrate, props);
            break;
          case "textarea":
            checkControlledValueProps("textarea", props), listenToNonDelegatedEvent("invalid", didHydrate), validateTextareaProps(didHydrate, props), initTextarea(
              didHydrate,
              props.value,
              props.defaultValue,
              props.children
            ), track(didHydrate);
        }
        type = props.children;
        "string" !== typeof type && "number" !== typeof type && "bigint" !== typeof type || didHydrate.textContent === "" + type || true === props.suppressHydrationWarning || checkForUnmatchedText(didHydrate.textContent, type) ? (null != props.popover && (listenToNonDelegatedEvent("beforetoggle", didHydrate), listenToNonDelegatedEvent("toggle", didHydrate)), null != props.onScroll && listenToNonDelegatedEvent("scroll", didHydrate), null != props.onScrollEnd && listenToNonDelegatedEvent("scrollend", didHydrate), null != props.onClick && (didHydrate.onclick = noop$1), didHydrate = true) : didHydrate = false;
        didHydrate || throwOnHydrationMismatch(fiber);
      }
      function popToNextHostParent(fiber) {
        for (hydrationParentFiber = fiber.return; hydrationParentFiber; )
          switch (hydrationParentFiber.tag) {
            case 5:
            case 13:
              rootOrSingletonContext = false;
              return;
            case 27:
            case 3:
              rootOrSingletonContext = true;
              return;
            default:
              hydrationParentFiber = hydrationParentFiber.return;
          }
      }
      function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) return false;
        if (!isHydrating)
          return popToNextHostParent(fiber), isHydrating = true, false;
        var tag = fiber.tag, JSCompiler_temp;
        if (JSCompiler_temp = 3 !== tag && 27 !== tag) {
          if (JSCompiler_temp = 5 === tag)
            JSCompiler_temp = fiber.type, JSCompiler_temp = !("form" !== JSCompiler_temp && "button" !== JSCompiler_temp) || shouldSetTextContent(fiber.type, fiber.memoizedProps);
          JSCompiler_temp = !JSCompiler_temp;
        }
        if (JSCompiler_temp && nextHydratableInstance) {
          for (JSCompiler_temp = nextHydratableInstance; JSCompiler_temp; ) {
            var diffNode = buildHydrationDiffNode(fiber, 0), description = describeHydratableInstanceForDevWarnings(JSCompiler_temp);
            diffNode.serverTail.push(description);
            JSCompiler_temp = "Suspense" === description.type ? getNextHydratableInstanceAfterSuspenseInstance(JSCompiler_temp) : getNextHydratable(JSCompiler_temp.nextSibling);
          }
          throwOnHydrationMismatch(fiber);
        }
        popToNextHostParent(fiber);
        if (13 === tag) {
          fiber = fiber.memoizedState;
          fiber = null !== fiber ? fiber.dehydrated : null;
          if (!fiber)
            throw Error(
              "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue."
            );
          nextHydratableInstance = getNextHydratableInstanceAfterSuspenseInstance(fiber);
        } else
          27 === tag ? (tag = nextHydratableInstance, isSingletonScope(fiber.type) ? (fiber = previousHydratableOnEnteringScopedSingleton, previousHydratableOnEnteringScopedSingleton = null, nextHydratableInstance = fiber) : nextHydratableInstance = tag) : nextHydratableInstance = hydrationParentFiber ? getNextHydratable(fiber.stateNode.nextSibling) : null;
        return true;
      }
      function resetHydrationState() {
        nextHydratableInstance = hydrationParentFiber = null;
        didSuspendOrErrorDEV = isHydrating = false;
      }
      function upgradeHydrationErrorsToRecoverable() {
        var queuedErrors = hydrationErrors;
        null !== queuedErrors && (null === workInProgressRootRecoverableErrors ? workInProgressRootRecoverableErrors = queuedErrors : workInProgressRootRecoverableErrors.push.apply(
          workInProgressRootRecoverableErrors,
          queuedErrors
        ), hydrationErrors = null);
        return queuedErrors;
      }
      function queueHydrationError(error) {
        null === hydrationErrors ? hydrationErrors = [error] : hydrationErrors.push(error);
      }
      function emitPendingHydrationWarnings() {
        var diffRoot = hydrationDiffRootDEV;
        if (null !== diffRoot) {
          hydrationDiffRootDEV = null;
          for (var diff = describeDiff(diffRoot); 0 < diffRoot.children.length; )
            diffRoot = diffRoot.children[0];
          runWithFiberInDEV(diffRoot.fiber, function() {
            console.error(
              "A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. This won't be patched up. This can happen if a SSR-ed Client Component used:\n\n- A server/client branch `if (typeof window !== 'undefined')`.\n- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n- Date formatting in a user's locale which doesn't match the server.\n- External changing data without sending a snapshot of it along with the HTML.\n- Invalid HTML tag nesting.\n\nIt can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n\n%s%s",
              "https://react.dev/link/hydration-mismatch",
              diff
            );
          });
        }
      }
      function resetContextDependencies() {
        lastContextDependency = currentlyRenderingFiber$1 = null;
        isDisallowedContextReadInDEV = false;
      }
      function pushProvider(providerFiber, context, nextValue) {
        push(valueCursor, context._currentValue, providerFiber);
        context._currentValue = nextValue;
        push(rendererCursorDEV, context._currentRenderer, providerFiber);
        void 0 !== context._currentRenderer && null !== context._currentRenderer && context._currentRenderer !== rendererSigil && console.error(
          "Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."
        );
        context._currentRenderer = rendererSigil;
      }
      function popProvider(context, providerFiber) {
        context._currentValue = valueCursor.current;
        var currentRenderer = rendererCursorDEV.current;
        pop(rendererCursorDEV, providerFiber);
        context._currentRenderer = currentRenderer;
        pop(valueCursor, providerFiber);
      }
      function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
        for (; null !== parent; ) {
          var alternate = parent.alternate;
          (parent.childLanes & renderLanes2) !== renderLanes2 ? (parent.childLanes |= renderLanes2, null !== alternate && (alternate.childLanes |= renderLanes2)) : null !== alternate && (alternate.childLanes & renderLanes2) !== renderLanes2 && (alternate.childLanes |= renderLanes2);
          if (parent === propagationRoot) break;
          parent = parent.return;
        }
        parent !== propagationRoot && console.error(
          "Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue."
        );
      }
      function propagateContextChanges(workInProgress2, contexts, renderLanes2, forcePropagateEntireTree) {
        var fiber = workInProgress2.child;
        null !== fiber && (fiber.return = workInProgress2);
        for (; null !== fiber; ) {
          var list = fiber.dependencies;
          if (null !== list) {
            var nextFiber = fiber.child;
            list = list.firstContext;
            a: for (; null !== list; ) {
              var dependency = list;
              list = fiber;
              for (var i = 0; i < contexts.length; i++)
                if (dependency.context === contexts[i]) {
                  list.lanes |= renderLanes2;
                  dependency = list.alternate;
                  null !== dependency && (dependency.lanes |= renderLanes2);
                  scheduleContextWorkOnParentPath(
                    list.return,
                    renderLanes2,
                    workInProgress2
                  );
                  forcePropagateEntireTree || (nextFiber = null);
                  break a;
                }
              list = dependency.next;
            }
          } else if (18 === fiber.tag) {
            nextFiber = fiber.return;
            if (null === nextFiber)
              throw Error(
                "We just came from a parent so we must have had a parent. This is a bug in React."
              );
            nextFiber.lanes |= renderLanes2;
            list = nextFiber.alternate;
            null !== list && (list.lanes |= renderLanes2);
            scheduleContextWorkOnParentPath(
              nextFiber,
              renderLanes2,
              workInProgress2
            );
            nextFiber = null;
          } else nextFiber = fiber.child;
          if (null !== nextFiber) nextFiber.return = fiber;
          else
            for (nextFiber = fiber; null !== nextFiber; ) {
              if (nextFiber === workInProgress2) {
                nextFiber = null;
                break;
              }
              fiber = nextFiber.sibling;
              if (null !== fiber) {
                fiber.return = nextFiber.return;
                nextFiber = fiber;
                break;
              }
              nextFiber = nextFiber.return;
            }
          fiber = nextFiber;
        }
      }
      function propagateParentContextChanges(current2, workInProgress2, renderLanes2, forcePropagateEntireTree) {
        current2 = null;
        for (var parent = workInProgress2, isInsidePropagationBailout = false; null !== parent; ) {
          if (!isInsidePropagationBailout) {
            if (0 !== (parent.flags & 524288)) isInsidePropagationBailout = true;
            else if (0 !== (parent.flags & 262144)) break;
          }
          if (10 === parent.tag) {
            var currentParent = parent.alternate;
            if (null === currentParent)
              throw Error("Should have a current fiber. This is a bug in React.");
            currentParent = currentParent.memoizedProps;
            if (null !== currentParent) {
              var context = parent.type;
              objectIs(parent.pendingProps.value, currentParent.value) || (null !== current2 ? current2.push(context) : current2 = [context]);
            }
          } else if (parent === hostTransitionProviderCursor.current) {
            currentParent = parent.alternate;
            if (null === currentParent)
              throw Error("Should have a current fiber. This is a bug in React.");
            currentParent.memoizedState.memoizedState !== parent.memoizedState.memoizedState && (null !== current2 ? current2.push(HostTransitionContext) : current2 = [HostTransitionContext]);
          }
          parent = parent.return;
        }
        null !== current2 && propagateContextChanges(
          workInProgress2,
          current2,
          renderLanes2,
          forcePropagateEntireTree
        );
        workInProgress2.flags |= 262144;
      }
      function checkIfContextChanged(currentDependencies) {
        for (currentDependencies = currentDependencies.firstContext; null !== currentDependencies; ) {
          if (!objectIs(
            currentDependencies.context._currentValue,
            currentDependencies.memoizedValue
          ))
            return true;
          currentDependencies = currentDependencies.next;
        }
        return false;
      }
      function prepareToReadContext(workInProgress2) {
        currentlyRenderingFiber$1 = workInProgress2;
        lastContextDependency = null;
        workInProgress2 = workInProgress2.dependencies;
        null !== workInProgress2 && (workInProgress2.firstContext = null);
      }
      function readContext(context) {
        isDisallowedContextReadInDEV && console.error(
          "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
        );
        return readContextForConsumer(currentlyRenderingFiber$1, context);
      }
      function readContextDuringReconciliation(consumer, context) {
        null === currentlyRenderingFiber$1 && prepareToReadContext(consumer);
        return readContextForConsumer(consumer, context);
      }
      function readContextForConsumer(consumer, context) {
        var value = context._currentValue;
        context = { context, memoizedValue: value, next: null };
        if (null === lastContextDependency) {
          if (null === consumer)
            throw Error(
              "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
            );
          lastContextDependency = context;
          consumer.dependencies = {
            lanes: 0,
            firstContext: context,
            _debugThenableState: null
          };
          consumer.flags |= 524288;
        } else lastContextDependency = lastContextDependency.next = context;
        return value;
      }
      function createCache3() {
        return {
          controller: new AbortControllerLocal(),
          data: /* @__PURE__ */ new Map(),
          refCount: 0
        };
      }
      function retainCache(cache) {
        cache.controller.signal.aborted && console.warn(
          "A cache instance was retained after it was already freed. This likely indicates a bug in React."
        );
        cache.refCount++;
      }
      function releaseCache(cache) {
        cache.refCount--;
        0 > cache.refCount && console.warn(
          "A cache instance was released after it was already freed. This likely indicates a bug in React."
        );
        0 === cache.refCount && scheduleCallback$2(NormalPriority, function() {
          cache.controller.abort();
        });
      }
      function pushNestedEffectDurations() {
        var prevEffectDuration = profilerEffectDuration;
        profilerEffectDuration = 0;
        return prevEffectDuration;
      }
      function popNestedEffectDurations(prevEffectDuration) {
        var elapsedTime = profilerEffectDuration;
        profilerEffectDuration = prevEffectDuration;
        return elapsedTime;
      }
      function bubbleNestedEffectDurations(prevEffectDuration) {
        var elapsedTime = profilerEffectDuration;
        profilerEffectDuration += prevEffectDuration;
        return elapsedTime;
      }
      function startProfilerTimer(fiber) {
        profilerStartTime = now();
        0 > fiber.actualStartTime && (fiber.actualStartTime = profilerStartTime);
      }
      function stopProfilerTimerIfRunningAndRecordDuration(fiber) {
        if (0 <= profilerStartTime) {
          var elapsedTime = now() - profilerStartTime;
          fiber.actualDuration += elapsedTime;
          fiber.selfBaseDuration = elapsedTime;
          profilerStartTime = -1;
        }
      }
      function stopProfilerTimerIfRunningAndRecordIncompleteDuration(fiber) {
        if (0 <= profilerStartTime) {
          var elapsedTime = now() - profilerStartTime;
          fiber.actualDuration += elapsedTime;
          profilerStartTime = -1;
        }
      }
      function recordEffectDuration() {
        if (0 <= profilerStartTime) {
          var elapsedTime = now() - profilerStartTime;
          profilerStartTime = -1;
          profilerEffectDuration += elapsedTime;
        }
      }
      function startEffectTimer() {
        profilerStartTime = now();
      }
      function transferActualDuration(fiber) {
        for (var child = fiber.child; child; )
          fiber.actualDuration += child.actualDuration, child = child.sibling;
      }
      function entangleAsyncAction(transition, thenable) {
        if (null === currentEntangledListeners) {
          var entangledListeners = currentEntangledListeners = [];
          currentEntangledPendingCount = 0;
          currentEntangledLane = requestTransitionLane();
          currentEntangledActionThenable = {
            status: "pending",
            value: void 0,
            then: function(resolve) {
              entangledListeners.push(resolve);
            }
          };
        }
        currentEntangledPendingCount++;
        thenable.then(pingEngtangledActionScope, pingEngtangledActionScope);
        return thenable;
      }
      function pingEngtangledActionScope() {
        if (0 === --currentEntangledPendingCount && null !== currentEntangledListeners) {
          null !== currentEntangledActionThenable && (currentEntangledActionThenable.status = "fulfilled");
          var listeners = currentEntangledListeners;
          currentEntangledListeners = null;
          currentEntangledLane = 0;
          currentEntangledActionThenable = null;
          for (var i = 0; i < listeners.length; i++) (0, listeners[i])();
        }
      }
      function chainThenableValue(thenable, result) {
        var listeners = [], thenableWithOverride = {
          status: "pending",
          value: null,
          reason: null,
          then: function(resolve) {
            listeners.push(resolve);
          }
        };
        thenable.then(
          function() {
            thenableWithOverride.status = "fulfilled";
            thenableWithOverride.value = result;
            for (var i = 0; i < listeners.length; i++) (0, listeners[i])(result);
          },
          function(error) {
            thenableWithOverride.status = "rejected";
            thenableWithOverride.reason = error;
            for (error = 0; error < listeners.length; error++)
              (0, listeners[error])(void 0);
          }
        );
        return thenableWithOverride;
      }
      function peekCacheFromPool() {
        var cacheResumedFromPreviousRender = resumedCache.current;
        return null !== cacheResumedFromPreviousRender ? cacheResumedFromPreviousRender : workInProgressRoot.pooledCache;
      }
      function pushTransition(offscreenWorkInProgress, prevCachePool) {
        null === prevCachePool ? push(resumedCache, resumedCache.current, offscreenWorkInProgress) : push(resumedCache, prevCachePool.pool, offscreenWorkInProgress);
      }
      function getSuspendedCache() {
        var cacheFromPool = peekCacheFromPool();
        return null === cacheFromPool ? null : { parent: CacheContext._currentValue, pool: cacheFromPool };
      }
      function createThenableState() {
        return { didWarnAboutUncachedPromise: false, thenables: [] };
      }
      function isThenableResolved(thenable) {
        thenable = thenable.status;
        return "fulfilled" === thenable || "rejected" === thenable;
      }
      function noop$3() {
      }
      function trackUsedThenable(thenableState2, thenable, index) {
        null !== ReactSharedInternals.actQueue && (ReactSharedInternals.didUsePromise = true);
        var trackedThenables = thenableState2.thenables;
        index = trackedThenables[index];
        void 0 === index ? trackedThenables.push(thenable) : index !== thenable && (thenableState2.didWarnAboutUncachedPromise || (thenableState2.didWarnAboutUncachedPromise = true, console.error(
          "A component was suspended by an uncached promise. Creating promises inside a Client Component or hook is not yet supported, except via a Suspense-compatible library or framework."
        )), thenable.then(noop$3, noop$3), thenable = index);
        switch (thenable.status) {
          case "fulfilled":
            return thenable.value;
          case "rejected":
            throw thenableState2 = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState2), thenableState2;
          default:
            if ("string" === typeof thenable.status)
              thenable.then(noop$3, noop$3);
            else {
              thenableState2 = workInProgressRoot;
              if (null !== thenableState2 && 100 < thenableState2.shellSuspendCounter)
                throw Error(
                  "An unknown Component is an async Client Component. Only Server Components can be async at the moment. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server."
                );
              thenableState2 = thenable;
              thenableState2.status = "pending";
              thenableState2.then(
                function(fulfilledValue) {
                  if ("pending" === thenable.status) {
                    var fulfilledThenable = thenable;
                    fulfilledThenable.status = "fulfilled";
                    fulfilledThenable.value = fulfilledValue;
                  }
                },
                function(error) {
                  if ("pending" === thenable.status) {
                    var rejectedThenable = thenable;
                    rejectedThenable.status = "rejected";
                    rejectedThenable.reason = error;
                  }
                }
              );
            }
            switch (thenable.status) {
              case "fulfilled":
                return thenable.value;
              case "rejected":
                throw thenableState2 = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState2), thenableState2;
            }
            suspendedThenable = thenable;
            needsToResetSuspendedThenableDEV = true;
            throw SuspenseException;
        }
      }
      function getSuspendedThenable() {
        if (null === suspendedThenable)
          throw Error(
            "Expected a suspended thenable. This is a bug in React. Please file an issue."
          );
        var thenable = suspendedThenable;
        suspendedThenable = null;
        needsToResetSuspendedThenableDEV = false;
        return thenable;
      }
      function checkIfUseWrappedInAsyncCatch(rejectedReason) {
        if (rejectedReason === SuspenseException || rejectedReason === SuspenseActionException)
          throw Error(
            "Hooks are not supported inside an async component. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server."
          );
      }
      function initializeUpdateQueue(fiber) {
        fiber.updateQueue = {
          baseState: fiber.memoizedState,
          firstBaseUpdate: null,
          lastBaseUpdate: null,
          shared: { pending: null, lanes: 0, hiddenCallbacks: null },
          callbacks: null
        };
      }
      function cloneUpdateQueue(current2, workInProgress2) {
        current2 = current2.updateQueue;
        workInProgress2.updateQueue === current2 && (workInProgress2.updateQueue = {
          baseState: current2.baseState,
          firstBaseUpdate: current2.firstBaseUpdate,
          lastBaseUpdate: current2.lastBaseUpdate,
          shared: current2.shared,
          callbacks: null
        });
      }
      function createUpdate(lane) {
        return {
          lane,
          tag: UpdateState,
          payload: null,
          callback: null,
          next: null
        };
      }
      function enqueueUpdate(fiber, update, lane) {
        var updateQueue = fiber.updateQueue;
        if (null === updateQueue) return null;
        updateQueue = updateQueue.shared;
        if (currentlyProcessingQueue === updateQueue && !didWarnUpdateInsideUpdate) {
          var componentName2 = getComponentNameFromFiber(fiber);
          console.error(
            "An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.\n\nPlease update the following component: %s",
            componentName2
          );
          didWarnUpdateInsideUpdate = true;
        }
        if ((executionContext & RenderContext) !== NoContext)
          return componentName2 = updateQueue.pending, null === componentName2 ? update.next = update : (update.next = componentName2.next, componentName2.next = update), updateQueue.pending = update, update = getRootForUpdatedFiber(fiber), markUpdateLaneFromFiberToRoot(fiber, null, lane), update;
        enqueueUpdate$1(fiber, updateQueue, update, lane);
        return getRootForUpdatedFiber(fiber);
      }
      function entangleTransitions(root2, fiber, lane) {
        fiber = fiber.updateQueue;
        if (null !== fiber && (fiber = fiber.shared, 0 !== (lane & 4194048))) {
          var queueLanes = fiber.lanes;
          queueLanes &= root2.pendingLanes;
          lane |= queueLanes;
          fiber.lanes = lane;
          markRootEntangled(root2, lane);
        }
      }
      function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
        var queue = workInProgress2.updateQueue, current2 = workInProgress2.alternate;
        if (null !== current2 && (current2 = current2.updateQueue, queue === current2)) {
          var newFirst = null, newLast = null;
          queue = queue.firstBaseUpdate;
          if (null !== queue) {
            do {
              var clone = {
                lane: queue.lane,
                tag: queue.tag,
                payload: queue.payload,
                callback: null,
                next: null
              };
              null === newLast ? newFirst = newLast = clone : newLast = newLast.next = clone;
              queue = queue.next;
            } while (null !== queue);
            null === newLast ? newFirst = newLast = capturedUpdate : newLast = newLast.next = capturedUpdate;
          } else newFirst = newLast = capturedUpdate;
          queue = {
            baseState: current2.baseState,
            firstBaseUpdate: newFirst,
            lastBaseUpdate: newLast,
            shared: current2.shared,
            callbacks: current2.callbacks
          };
          workInProgress2.updateQueue = queue;
          return;
        }
        workInProgress2 = queue.lastBaseUpdate;
        null === workInProgress2 ? queue.firstBaseUpdate = capturedUpdate : workInProgress2.next = capturedUpdate;
        queue.lastBaseUpdate = capturedUpdate;
      }
      function suspendIfUpdateReadFromEntangledAsyncAction() {
        if (didReadFromEntangledAsyncAction) {
          var entangledActionThenable = currentEntangledActionThenable;
          if (null !== entangledActionThenable) throw entangledActionThenable;
        }
      }
      function processUpdateQueue(workInProgress2, props, instance$jscomp$0, renderLanes2) {
        didReadFromEntangledAsyncAction = false;
        var queue = workInProgress2.updateQueue;
        hasForceUpdate = false;
        currentlyProcessingQueue = queue.shared;
        var firstBaseUpdate = queue.firstBaseUpdate, lastBaseUpdate = queue.lastBaseUpdate, pendingQueue = queue.shared.pending;
        if (null !== pendingQueue) {
          queue.shared.pending = null;
          var lastPendingUpdate = pendingQueue, firstPendingUpdate = lastPendingUpdate.next;
          lastPendingUpdate.next = null;
          null === lastBaseUpdate ? firstBaseUpdate = firstPendingUpdate : lastBaseUpdate.next = firstPendingUpdate;
          lastBaseUpdate = lastPendingUpdate;
          var current2 = workInProgress2.alternate;
          null !== current2 && (current2 = current2.updateQueue, pendingQueue = current2.lastBaseUpdate, pendingQueue !== lastBaseUpdate && (null === pendingQueue ? current2.firstBaseUpdate = firstPendingUpdate : pendingQueue.next = firstPendingUpdate, current2.lastBaseUpdate = lastPendingUpdate));
        }
        if (null !== firstBaseUpdate) {
          var newState = queue.baseState;
          lastBaseUpdate = 0;
          current2 = firstPendingUpdate = lastPendingUpdate = null;
          pendingQueue = firstBaseUpdate;
          do {
            var updateLane = pendingQueue.lane & -536870913, isHiddenUpdate = updateLane !== pendingQueue.lane;
            if (isHiddenUpdate ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes2 & updateLane) === updateLane) {
              0 !== updateLane && updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction = true);
              null !== current2 && (current2 = current2.next = {
                lane: 0,
                tag: pendingQueue.tag,
                payload: pendingQueue.payload,
                callback: null,
                next: null
              });
              a: {
                updateLane = workInProgress2;
                var partialState = pendingQueue;
                var nextProps = props, instance = instance$jscomp$0;
                switch (partialState.tag) {
                  case ReplaceState:
                    partialState = partialState.payload;
                    if ("function" === typeof partialState) {
                      isDisallowedContextReadInDEV = true;
                      var nextState = partialState.call(
                        instance,
                        newState,
                        nextProps
                      );
                      if (updateLane.mode & StrictLegacyMode) {
                        setIsStrictModeForDevtools(true);
                        try {
                          partialState.call(instance, newState, nextProps);
                        } finally {
                          setIsStrictModeForDevtools(false);
                        }
                      }
                      isDisallowedContextReadInDEV = false;
                      newState = nextState;
                      break a;
                    }
                    newState = partialState;
                    break a;
                  case CaptureUpdate:
                    updateLane.flags = updateLane.flags & -65537 | 128;
                  case UpdateState:
                    nextState = partialState.payload;
                    if ("function" === typeof nextState) {
                      isDisallowedContextReadInDEV = true;
                      partialState = nextState.call(
                        instance,
                        newState,
                        nextProps
                      );
                      if (updateLane.mode & StrictLegacyMode) {
                        setIsStrictModeForDevtools(true);
                        try {
                          nextState.call(instance, newState, nextProps);
                        } finally {
                          setIsStrictModeForDevtools(false);
                        }
                      }
                      isDisallowedContextReadInDEV = false;
                    } else partialState = nextState;
                    if (null === partialState || void 0 === partialState) break a;
                    newState = assign2({}, newState, partialState);
                    break a;
                  case ForceUpdate:
                    hasForceUpdate = true;
                }
              }
              updateLane = pendingQueue.callback;
              null !== updateLane && (workInProgress2.flags |= 64, isHiddenUpdate && (workInProgress2.flags |= 8192), isHiddenUpdate = queue.callbacks, null === isHiddenUpdate ? queue.callbacks = [updateLane] : isHiddenUpdate.push(updateLane));
            } else
              isHiddenUpdate = {
                lane: updateLane,
                tag: pendingQueue.tag,
                payload: pendingQueue.payload,
                callback: pendingQueue.callback,
                next: null
              }, null === current2 ? (firstPendingUpdate = current2 = isHiddenUpdate, lastPendingUpdate = newState) : current2 = current2.next = isHiddenUpdate, lastBaseUpdate |= updateLane;
            pendingQueue = pendingQueue.next;
            if (null === pendingQueue)
              if (pendingQueue = queue.shared.pending, null === pendingQueue)
                break;
              else
                isHiddenUpdate = pendingQueue, pendingQueue = isHiddenUpdate.next, isHiddenUpdate.next = null, queue.lastBaseUpdate = isHiddenUpdate, queue.shared.pending = null;
          } while (1);
          null === current2 && (lastPendingUpdate = newState);
          queue.baseState = lastPendingUpdate;
          queue.firstBaseUpdate = firstPendingUpdate;
          queue.lastBaseUpdate = current2;
          null === firstBaseUpdate && (queue.shared.lanes = 0);
          workInProgressRootSkippedLanes |= lastBaseUpdate;
          workInProgress2.lanes = lastBaseUpdate;
          workInProgress2.memoizedState = newState;
        }
        currentlyProcessingQueue = null;
      }
      function callCallback(callback, context) {
        if ("function" !== typeof callback)
          throw Error(
            "Invalid argument passed as callback. Expected a function. Instead received: " + callback
          );
        callback.call(context);
      }
      function commitHiddenCallbacks(updateQueue, context) {
        var hiddenCallbacks = updateQueue.shared.hiddenCallbacks;
        if (null !== hiddenCallbacks)
          for (updateQueue.shared.hiddenCallbacks = null, updateQueue = 0; updateQueue < hiddenCallbacks.length; updateQueue++)
            callCallback(hiddenCallbacks[updateQueue], context);
      }
      function commitCallbacks(updateQueue, context) {
        var callbacks = updateQueue.callbacks;
        if (null !== callbacks)
          for (updateQueue.callbacks = null, updateQueue = 0; updateQueue < callbacks.length; updateQueue++)
            callCallback(callbacks[updateQueue], context);
      }
      function pushHiddenContext(fiber, context) {
        var prevEntangledRenderLanes = entangledRenderLanes;
        push(prevEntangledRenderLanesCursor, prevEntangledRenderLanes, fiber);
        push(currentTreeHiddenStackCursor, context, fiber);
        entangledRenderLanes = prevEntangledRenderLanes | context.baseLanes;
      }
      function reuseHiddenContextOnStack(fiber) {
        push(prevEntangledRenderLanesCursor, entangledRenderLanes, fiber);
        push(
          currentTreeHiddenStackCursor,
          currentTreeHiddenStackCursor.current,
          fiber
        );
      }
      function popHiddenContext(fiber) {
        entangledRenderLanes = prevEntangledRenderLanesCursor.current;
        pop(currentTreeHiddenStackCursor, fiber);
        pop(prevEntangledRenderLanesCursor, fiber);
      }
      function mountHookTypesDev() {
        var hookName = currentHookNameInDev;
        null === hookTypesDev ? hookTypesDev = [hookName] : hookTypesDev.push(hookName);
      }
      function updateHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (null !== hookTypesDev && (hookTypesUpdateIndexDev++, hookTypesDev[hookTypesUpdateIndexDev] !== hookName)) {
          var componentName2 = getComponentNameFromFiber(currentlyRenderingFiber);
          if (!didWarnAboutMismatchedHooksForComponent.has(componentName2) && (didWarnAboutMismatchedHooksForComponent.add(componentName2), null !== hookTypesDev)) {
            for (var table = "", i = 0; i <= hookTypesUpdateIndexDev; i++) {
              var oldHookName = hookTypesDev[i], newHookName = i === hookTypesUpdateIndexDev ? hookName : oldHookName;
              for (oldHookName = i + 1 + ". " + oldHookName; 30 > oldHookName.length; )
                oldHookName += " ";
              oldHookName += newHookName + "\n";
              table += oldHookName;
            }
            console.error(
              "React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://react.dev/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
              componentName2,
              table
            );
          }
        }
      }
      function checkDepsAreArrayDev(deps) {
        void 0 === deps || null === deps || isArrayImpl(deps) || console.error(
          "%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.",
          currentHookNameInDev,
          typeof deps
        );
      }
      function warnOnUseFormStateInDev() {
        var componentName2 = getComponentNameFromFiber(currentlyRenderingFiber);
        didWarnAboutUseFormState.has(componentName2) || (didWarnAboutUseFormState.add(componentName2), console.error(
          "ReactDOM.useFormState has been renamed to React.useActionState. Please update %s to use React.useActionState.",
          componentName2
        ));
      }
      function throwInvalidHookError() {
        throw Error(
          "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."
        );
      }
      function areHookInputsEqual(nextDeps, prevDeps) {
        if (ignorePreviousDependencies) return false;
        if (null === prevDeps)
          return console.error(
            "%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.",
            currentHookNameInDev
          ), false;
        nextDeps.length !== prevDeps.length && console.error(
          "The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s",
          currentHookNameInDev,
          "[" + prevDeps.join(", ") + "]",
          "[" + nextDeps.join(", ") + "]"
        );
        for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++)
          if (!objectIs(nextDeps[i], prevDeps[i])) return false;
        return true;
      }
      function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
        renderLanes = nextRenderLanes;
        currentlyRenderingFiber = workInProgress2;
        hookTypesDev = null !== current2 ? current2._debugHookTypes : null;
        hookTypesUpdateIndexDev = -1;
        ignorePreviousDependencies = null !== current2 && current2.type !== workInProgress2.type;
        if ("[object AsyncFunction]" === Object.prototype.toString.call(Component) || "[object AsyncGeneratorFunction]" === Object.prototype.toString.call(Component))
          nextRenderLanes = getComponentNameFromFiber(currentlyRenderingFiber), didWarnAboutAsyncClientComponent.has(nextRenderLanes) || (didWarnAboutAsyncClientComponent.add(nextRenderLanes), console.error(
            "%s is an async Client Component. Only Server Components can be async at the moment. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.",
            null === nextRenderLanes ? "An unknown Component" : "<" + nextRenderLanes + ">"
          ));
        workInProgress2.memoizedState = null;
        workInProgress2.updateQueue = null;
        workInProgress2.lanes = 0;
        ReactSharedInternals.H = null !== current2 && null !== current2.memoizedState ? HooksDispatcherOnUpdateInDEV : null !== hookTypesDev ? HooksDispatcherOnMountWithHookTypesInDEV : HooksDispatcherOnMountInDEV;
        shouldDoubleInvokeUserFnsInHooksDEV = nextRenderLanes = (workInProgress2.mode & StrictLegacyMode) !== NoMode;
        var children = callComponentInDEV(Component, props, secondArg);
        shouldDoubleInvokeUserFnsInHooksDEV = false;
        didScheduleRenderPhaseUpdateDuringThisPass && (children = renderWithHooksAgain(
          workInProgress2,
          Component,
          props,
          secondArg
        ));
        if (nextRenderLanes) {
          setIsStrictModeForDevtools(true);
          try {
            children = renderWithHooksAgain(
              workInProgress2,
              Component,
              props,
              secondArg
            );
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
        finishRenderingHooks(current2, workInProgress2);
        return children;
      }
      function finishRenderingHooks(current2, workInProgress2) {
        workInProgress2._debugHookTypes = hookTypesDev;
        null === workInProgress2.dependencies ? null !== thenableState$1 && (workInProgress2.dependencies = {
          lanes: 0,
          firstContext: null,
          _debugThenableState: thenableState$1
        }) : workInProgress2.dependencies._debugThenableState = thenableState$1;
        ReactSharedInternals.H = ContextOnlyDispatcher;
        var didRenderTooFewHooks = null !== currentHook && null !== currentHook.next;
        renderLanes = 0;
        hookTypesDev = currentHookNameInDev = workInProgressHook = currentHook = currentlyRenderingFiber = null;
        hookTypesUpdateIndexDev = -1;
        null !== current2 && (current2.flags & 65011712) !== (workInProgress2.flags & 65011712) && console.error(
          "Internal React error: Expected static flag was missing. Please notify the React team."
        );
        didScheduleRenderPhaseUpdate = false;
        thenableIndexCounter$1 = 0;
        thenableState$1 = null;
        if (didRenderTooFewHooks)
          throw Error(
            "Rendered fewer hooks than expected. This may be caused by an accidental early return statement."
          );
        null === current2 || didReceiveUpdate || (current2 = current2.dependencies, null !== current2 && checkIfContextChanged(current2) && (didReceiveUpdate = true));
        needsToResetSuspendedThenableDEV ? (needsToResetSuspendedThenableDEV = false, current2 = true) : current2 = false;
        current2 && (workInProgress2 = getComponentNameFromFiber(workInProgress2) || "Unknown", didWarnAboutUseWrappedInTryCatch.has(workInProgress2) || didWarnAboutAsyncClientComponent.has(workInProgress2) || (didWarnAboutUseWrappedInTryCatch.add(workInProgress2), console.error(
          "`use` was called from inside a try/catch block. This is not allowed and can lead to unexpected behavior. To handle errors triggered by `use`, wrap your component in a error boundary."
        )));
      }
      function renderWithHooksAgain(workInProgress2, Component, props, secondArg) {
        currentlyRenderingFiber = workInProgress2;
        var numberOfReRenders = 0;
        do {
          didScheduleRenderPhaseUpdateDuringThisPass && (thenableState$1 = null);
          thenableIndexCounter$1 = 0;
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          if (numberOfReRenders >= RE_RENDER_LIMIT)
            throw Error(
              "Too many re-renders. React limits the number of renders to prevent an infinite loop."
            );
          numberOfReRenders += 1;
          ignorePreviousDependencies = false;
          workInProgressHook = currentHook = null;
          if (null != workInProgress2.updateQueue) {
            var children = workInProgress2.updateQueue;
            children.lastEffect = null;
            children.events = null;
            children.stores = null;
            null != children.memoCache && (children.memoCache.index = 0);
          }
          hookTypesUpdateIndexDev = -1;
          ReactSharedInternals.H = HooksDispatcherOnRerenderInDEV;
          children = callComponentInDEV(Component, props, secondArg);
        } while (didScheduleRenderPhaseUpdateDuringThisPass);
        return children;
      }
      function TransitionAwareHostComponent() {
        var dispatcher = ReactSharedInternals.H, maybeThenable = dispatcher.useState()[0];
        maybeThenable = "function" === typeof maybeThenable.then ? useThenable(maybeThenable) : maybeThenable;
        dispatcher = dispatcher.useState()[0];
        (null !== currentHook ? currentHook.memoizedState : null) !== dispatcher && (currentlyRenderingFiber.flags |= 1024);
        return maybeThenable;
      }
      function checkDidRenderIdHook() {
        var didRenderIdHook = 0 !== localIdCounter;
        localIdCounter = 0;
        return didRenderIdHook;
      }
      function bailoutHooks(current2, workInProgress2, lanes) {
        workInProgress2.updateQueue = current2.updateQueue;
        workInProgress2.flags = (workInProgress2.mode & StrictEffectsMode) !== NoMode ? workInProgress2.flags & -402655237 : workInProgress2.flags & -2053;
        current2.lanes &= ~lanes;
      }
      function resetHooksOnUnwind(workInProgress2) {
        if (didScheduleRenderPhaseUpdate) {
          for (workInProgress2 = workInProgress2.memoizedState; null !== workInProgress2; ) {
            var queue = workInProgress2.queue;
            null !== queue && (queue.pending = null);
            workInProgress2 = workInProgress2.next;
          }
          didScheduleRenderPhaseUpdate = false;
        }
        renderLanes = 0;
        hookTypesDev = workInProgressHook = currentHook = currentlyRenderingFiber = null;
        hookTypesUpdateIndexDev = -1;
        currentHookNameInDev = null;
        didScheduleRenderPhaseUpdateDuringThisPass = false;
        thenableIndexCounter$1 = localIdCounter = 0;
        thenableState$1 = null;
      }
      function mountWorkInProgressHook() {
        var hook = {
          memoizedState: null,
          baseState: null,
          baseQueue: null,
          queue: null,
          next: null
        };
        null === workInProgressHook ? currentlyRenderingFiber.memoizedState = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook;
        return workInProgressHook;
      }
      function updateWorkInProgressHook() {
        if (null === currentHook) {
          var nextCurrentHook = currentlyRenderingFiber.alternate;
          nextCurrentHook = null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;
        } else nextCurrentHook = currentHook.next;
        var nextWorkInProgressHook = null === workInProgressHook ? currentlyRenderingFiber.memoizedState : workInProgressHook.next;
        if (null !== nextWorkInProgressHook)
          workInProgressHook = nextWorkInProgressHook, currentHook = nextCurrentHook;
        else {
          if (null === nextCurrentHook) {
            if (null === currentlyRenderingFiber.alternate)
              throw Error(
                "Update hook called on initial render. This is likely a bug in React. Please file an issue."
              );
            throw Error("Rendered more hooks than during the previous render.");
          }
          currentHook = nextCurrentHook;
          nextCurrentHook = {
            memoizedState: currentHook.memoizedState,
            baseState: currentHook.baseState,
            baseQueue: currentHook.baseQueue,
            queue: currentHook.queue,
            next: null
          };
          null === workInProgressHook ? currentlyRenderingFiber.memoizedState = workInProgressHook = nextCurrentHook : workInProgressHook = workInProgressHook.next = nextCurrentHook;
        }
        return workInProgressHook;
      }
      function createFunctionComponentUpdateQueue() {
        return { lastEffect: null, events: null, stores: null, memoCache: null };
      }
      function useThenable(thenable) {
        var index = thenableIndexCounter$1;
        thenableIndexCounter$1 += 1;
        null === thenableState$1 && (thenableState$1 = createThenableState());
        thenable = trackUsedThenable(thenableState$1, thenable, index);
        index = currentlyRenderingFiber;
        null === (null === workInProgressHook ? index.memoizedState : workInProgressHook.next) && (index = index.alternate, ReactSharedInternals.H = null !== index && null !== index.memoizedState ? HooksDispatcherOnUpdateInDEV : HooksDispatcherOnMountInDEV);
        return thenable;
      }
      function use(usable) {
        if (null !== usable && "object" === typeof usable) {
          if ("function" === typeof usable.then) return useThenable(usable);
          if (usable.$$typeof === REACT_CONTEXT_TYPE) return readContext(usable);
        }
        throw Error("An unsupported type was passed to use(): " + String(usable));
      }
      function useMemoCache(size) {
        var memoCache = null, updateQueue = currentlyRenderingFiber.updateQueue;
        null !== updateQueue && (memoCache = updateQueue.memoCache);
        if (null == memoCache) {
          var current2 = currentlyRenderingFiber.alternate;
          null !== current2 && (current2 = current2.updateQueue, null !== current2 && (current2 = current2.memoCache, null != current2 && (memoCache = {
            data: current2.data.map(function(array) {
              return array.slice();
            }),
            index: 0
          })));
        }
        null == memoCache && (memoCache = { data: [], index: 0 });
        null === updateQueue && (updateQueue = createFunctionComponentUpdateQueue(), currentlyRenderingFiber.updateQueue = updateQueue);
        updateQueue.memoCache = memoCache;
        updateQueue = memoCache.data[memoCache.index];
        if (void 0 === updateQueue || ignorePreviousDependencies)
          for (updateQueue = memoCache.data[memoCache.index] = Array(size), current2 = 0; current2 < size; current2++)
            updateQueue[current2] = REACT_MEMO_CACHE_SENTINEL;
        else
          updateQueue.length !== size && console.error(
            "Expected a constant size argument for each invocation of useMemoCache. The previous cache was allocated with size %s but size %s was requested.",
            updateQueue.length,
            size
          );
        memoCache.index++;
        return updateQueue;
      }
      function basicStateReducer(state, action) {
        return "function" === typeof action ? action(state) : action;
      }
      function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        if (void 0 !== init) {
          var initialState = init(initialArg);
          if (shouldDoubleInvokeUserFnsInHooksDEV) {
            setIsStrictModeForDevtools(true);
            try {
              init(initialArg);
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
        } else initialState = initialArg;
        hook.memoizedState = hook.baseState = initialState;
        reducer = {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: reducer,
          lastRenderedState: initialState
        };
        hook.queue = reducer;
        reducer = reducer.dispatch = dispatchReducerAction.bind(
          null,
          currentlyRenderingFiber,
          reducer
        );
        return [hook.memoizedState, reducer];
      }
      function updateReducer(reducer) {
        var hook = updateWorkInProgressHook();
        return updateReducerImpl(hook, currentHook, reducer);
      }
      function updateReducerImpl(hook, current2, reducer) {
        var queue = hook.queue;
        if (null === queue)
          throw Error(
            "Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)"
          );
        queue.lastRenderedReducer = reducer;
        var baseQueue = hook.baseQueue, pendingQueue = queue.pending;
        if (null !== pendingQueue) {
          if (null !== baseQueue) {
            var baseFirst = baseQueue.next;
            baseQueue.next = pendingQueue.next;
            pendingQueue.next = baseFirst;
          }
          current2.baseQueue !== baseQueue && console.error(
            "Internal error: Expected work-in-progress queue to be a clone. This is a bug in React."
          );
          current2.baseQueue = baseQueue = pendingQueue;
          queue.pending = null;
        }
        pendingQueue = hook.baseState;
        if (null === baseQueue) hook.memoizedState = pendingQueue;
        else {
          current2 = baseQueue.next;
          var newBaseQueueFirst = baseFirst = null, newBaseQueueLast = null, update = current2, didReadFromEntangledAsyncAction2 = false;
          do {
            var updateLane = update.lane & -536870913;
            if (updateLane !== update.lane ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes & updateLane) === updateLane) {
              var revertLane = update.revertLane;
              if (0 === revertLane)
                null !== newBaseQueueLast && (newBaseQueueLast = newBaseQueueLast.next = {
                  lane: 0,
                  revertLane: 0,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                }), updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction2 = true);
              else if ((renderLanes & revertLane) === revertLane) {
                update = update.next;
                revertLane === currentEntangledLane && (didReadFromEntangledAsyncAction2 = true);
                continue;
              } else
                updateLane = {
                  lane: 0,
                  revertLane: update.revertLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                }, null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = updateLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = updateLane, currentlyRenderingFiber.lanes |= revertLane, workInProgressRootSkippedLanes |= revertLane;
              updateLane = update.action;
              shouldDoubleInvokeUserFnsInHooksDEV && reducer(pendingQueue, updateLane);
              pendingQueue = update.hasEagerState ? update.eagerState : reducer(pendingQueue, updateLane);
            } else
              revertLane = {
                lane: updateLane,
                revertLane: update.revertLane,
                action: update.action,
                hasEagerState: update.hasEagerState,
                eagerState: update.eagerState,
                next: null
              }, null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = revertLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = revertLane, currentlyRenderingFiber.lanes |= updateLane, workInProgressRootSkippedLanes |= updateLane;
            update = update.next;
          } while (null !== update && update !== current2);
          null === newBaseQueueLast ? baseFirst = pendingQueue : newBaseQueueLast.next = newBaseQueueFirst;
          if (!objectIs(pendingQueue, hook.memoizedState) && (didReceiveUpdate = true, didReadFromEntangledAsyncAction2 && (reducer = currentEntangledActionThenable, null !== reducer)))
            throw reducer;
          hook.memoizedState = pendingQueue;
          hook.baseState = baseFirst;
          hook.baseQueue = newBaseQueueLast;
          queue.lastRenderedState = pendingQueue;
        }
        null === baseQueue && (queue.lanes = 0);
        return [hook.memoizedState, queue.dispatch];
      }
      function rerenderReducer(reducer) {
        var hook = updateWorkInProgressHook(), queue = hook.queue;
        if (null === queue)
          throw Error(
            "Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)"
          );
        queue.lastRenderedReducer = reducer;
        var dispatch = queue.dispatch, lastRenderPhaseUpdate = queue.pending, newState = hook.memoizedState;
        if (null !== lastRenderPhaseUpdate) {
          queue.pending = null;
          var update = lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
          do
            newState = reducer(newState, update.action), update = update.next;
          while (update !== lastRenderPhaseUpdate);
          objectIs(newState, hook.memoizedState) || (didReceiveUpdate = true);
          hook.memoizedState = newState;
          null === hook.baseQueue && (hook.baseState = newState);
          queue.lastRenderedState = newState;
        }
        return [newState, dispatch];
      }
      function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber, hook = mountWorkInProgressHook();
        if (isHydrating) {
          if (void 0 === getServerSnapshot)
            throw Error(
              "Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering."
            );
          var nextSnapshot = getServerSnapshot();
          didWarnUncachedGetSnapshot || nextSnapshot === getServerSnapshot() || (console.error(
            "The result of getServerSnapshot should be cached to avoid an infinite loop"
          ), didWarnUncachedGetSnapshot = true);
        } else {
          nextSnapshot = getSnapshot();
          didWarnUncachedGetSnapshot || (getServerSnapshot = getSnapshot(), objectIs(nextSnapshot, getServerSnapshot) || (console.error(
            "The result of getSnapshot should be cached to avoid an infinite loop"
          ), didWarnUncachedGetSnapshot = true));
          if (null === workInProgressRoot)
            throw Error(
              "Expected a work-in-progress root. This is a bug in React. Please file an issue."
            );
          0 !== (workInProgressRootRenderLanes & 124) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        }
        hook.memoizedState = nextSnapshot;
        getServerSnapshot = { value: nextSnapshot, getSnapshot };
        hook.queue = getServerSnapshot;
        mountEffect(
          subscribeToStore.bind(null, fiber, getServerSnapshot, subscribe),
          [subscribe]
        );
        fiber.flags |= 2048;
        pushSimpleEffect(
          HasEffect | Passive,
          createEffectInstance(),
          updateStoreInstance.bind(
            null,
            fiber,
            getServerSnapshot,
            nextSnapshot,
            getSnapshot
          ),
          null
        );
        return nextSnapshot;
      }
      function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber, hook = updateWorkInProgressHook(), isHydrating$jscomp$0 = isHydrating;
        if (isHydrating$jscomp$0) {
          if (void 0 === getServerSnapshot)
            throw Error(
              "Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering."
            );
          getServerSnapshot = getServerSnapshot();
        } else if (getServerSnapshot = getSnapshot(), !didWarnUncachedGetSnapshot) {
          var cachedSnapshot = getSnapshot();
          objectIs(getServerSnapshot, cachedSnapshot) || (console.error(
            "The result of getSnapshot should be cached to avoid an infinite loop"
          ), didWarnUncachedGetSnapshot = true);
        }
        if (cachedSnapshot = !objectIs(
          (currentHook || hook).memoizedState,
          getServerSnapshot
        ))
          hook.memoizedState = getServerSnapshot, didReceiveUpdate = true;
        hook = hook.queue;
        var create = subscribeToStore.bind(null, fiber, hook, subscribe);
        updateEffectImpl(2048, Passive, create, [subscribe]);
        if (hook.getSnapshot !== getSnapshot || cachedSnapshot || null !== workInProgressHook && workInProgressHook.memoizedState.tag & HasEffect) {
          fiber.flags |= 2048;
          pushSimpleEffect(
            HasEffect | Passive,
            createEffectInstance(),
            updateStoreInstance.bind(
              null,
              fiber,
              hook,
              getServerSnapshot,
              getSnapshot
            ),
            null
          );
          if (null === workInProgressRoot)
            throw Error(
              "Expected a work-in-progress root. This is a bug in React. Please file an issue."
            );
          isHydrating$jscomp$0 || 0 !== (renderLanes & 124) || pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot);
        }
        return getServerSnapshot;
      }
      function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
        fiber.flags |= 16384;
        fiber = { getSnapshot, value: renderedSnapshot };
        getSnapshot = currentlyRenderingFiber.updateQueue;
        null === getSnapshot ? (getSnapshot = createFunctionComponentUpdateQueue(), currentlyRenderingFiber.updateQueue = getSnapshot, getSnapshot.stores = [fiber]) : (renderedSnapshot = getSnapshot.stores, null === renderedSnapshot ? getSnapshot.stores = [fiber] : renderedSnapshot.push(fiber));
      }
      function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
        inst.value = nextSnapshot;
        inst.getSnapshot = getSnapshot;
        checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
      }
      function subscribeToStore(fiber, inst, subscribe) {
        return subscribe(function() {
          checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
        });
      }
      function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot;
        inst = inst.value;
        try {
          var nextValue = latestGetSnapshot();
          return !objectIs(inst, nextValue);
        } catch (error) {
          return true;
        }
      }
      function forceStoreRerender(fiber) {
        var root2 = enqueueConcurrentRenderForLane(fiber, 2);
        null !== root2 && scheduleUpdateOnFiber(root2, fiber, 2);
      }
      function mountStateImpl(initialState) {
        var hook = mountWorkInProgressHook();
        if ("function" === typeof initialState) {
          var initialStateInitializer = initialState;
          initialState = initialStateInitializer();
          if (shouldDoubleInvokeUserFnsInHooksDEV) {
            setIsStrictModeForDevtools(true);
            try {
              initialStateInitializer();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
        }
        hook.memoizedState = hook.baseState = initialState;
        hook.queue = {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: basicStateReducer,
          lastRenderedState: initialState
        };
        return hook;
      }
      function mountState(initialState) {
        initialState = mountStateImpl(initialState);
        var queue = initialState.queue, dispatch = dispatchSetState.bind(null, currentlyRenderingFiber, queue);
        queue.dispatch = dispatch;
        return [initialState.memoizedState, dispatch];
      }
      function mountOptimistic(passthrough) {
        var hook = mountWorkInProgressHook();
        hook.memoizedState = hook.baseState = passthrough;
        var queue = {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: null,
          lastRenderedState: null
        };
        hook.queue = queue;
        hook = dispatchOptimisticSetState.bind(
          null,
          currentlyRenderingFiber,
          true,
          queue
        );
        queue.dispatch = hook;
        return [passthrough, hook];
      }
      function updateOptimistic(passthrough, reducer) {
        var hook = updateWorkInProgressHook();
        return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
      }
      function updateOptimisticImpl(hook, current2, passthrough, reducer) {
        hook.baseState = passthrough;
        return updateReducerImpl(
          hook,
          currentHook,
          "function" === typeof reducer ? reducer : basicStateReducer
        );
      }
      function rerenderOptimistic(passthrough, reducer) {
        var hook = updateWorkInProgressHook();
        if (null !== currentHook)
          return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
        hook.baseState = passthrough;
        return [passthrough, hook.queue.dispatch];
      }
      function dispatchActionState(fiber, actionQueue, setPendingState, setState, payload) {
        if (isRenderPhaseUpdate(fiber))
          throw Error("Cannot update form state while rendering.");
        fiber = actionQueue.action;
        if (null !== fiber) {
          var actionNode = {
            payload,
            action: fiber,
            next: null,
            isTransition: true,
            status: "pending",
            value: null,
            reason: null,
            listeners: [],
            then: function(listener) {
              actionNode.listeners.push(listener);
            }
          };
          null !== ReactSharedInternals.T ? setPendingState(true) : actionNode.isTransition = false;
          setState(actionNode);
          setPendingState = actionQueue.pending;
          null === setPendingState ? (actionNode.next = actionQueue.pending = actionNode, runActionStateAction(actionQueue, actionNode)) : (actionNode.next = setPendingState.next, actionQueue.pending = setPendingState.next = actionNode);
        }
      }
      function runActionStateAction(actionQueue, node2) {
        var action = node2.action, payload = node2.payload, prevState = actionQueue.state;
        if (node2.isTransition) {
          var prevTransition = ReactSharedInternals.T, currentTransition = {};
          ReactSharedInternals.T = currentTransition;
          ReactSharedInternals.T._updatedFibers = /* @__PURE__ */ new Set();
          try {
            var returnValue = action(prevState, payload), onStartTransitionFinish = ReactSharedInternals.S;
            null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
            handleActionReturnValue(actionQueue, node2, returnValue);
          } catch (error) {
            onActionError(actionQueue, node2, error);
          } finally {
            ReactSharedInternals.T = prevTransition, null === prevTransition && currentTransition._updatedFibers && (actionQueue = currentTransition._updatedFibers.size, currentTransition._updatedFibers.clear(), 10 < actionQueue && console.warn(
              "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."
            ));
          }
        } else
          try {
            currentTransition = action(prevState, payload), handleActionReturnValue(actionQueue, node2, currentTransition);
          } catch (error$4) {
            onActionError(actionQueue, node2, error$4);
          }
      }
      function handleActionReturnValue(actionQueue, node2, returnValue) {
        null !== returnValue && "object" === typeof returnValue && "function" === typeof returnValue.then ? (returnValue.then(
          function(nextState) {
            onActionSuccess(actionQueue, node2, nextState);
          },
          function(error) {
            return onActionError(actionQueue, node2, error);
          }
        ), node2.isTransition || console.error(
          "An async function with useActionState was called outside of a transition. This is likely not what you intended (for example, isPending will not update correctly). Either call the returned function inside startTransition, or pass it to an `action` or `formAction` prop."
        )) : onActionSuccess(actionQueue, node2, returnValue);
      }
      function onActionSuccess(actionQueue, actionNode, nextState) {
        actionNode.status = "fulfilled";
        actionNode.value = nextState;
        notifyActionListeners(actionNode);
        actionQueue.state = nextState;
        actionNode = actionQueue.pending;
        null !== actionNode && (nextState = actionNode.next, nextState === actionNode ? actionQueue.pending = null : (nextState = nextState.next, actionNode.next = nextState, runActionStateAction(actionQueue, nextState)));
      }
      function onActionError(actionQueue, actionNode, error) {
        var last = actionQueue.pending;
        actionQueue.pending = null;
        if (null !== last) {
          last = last.next;
          do
            actionNode.status = "rejected", actionNode.reason = error, notifyActionListeners(actionNode), actionNode = actionNode.next;
          while (actionNode !== last);
        }
        actionQueue.action = null;
      }
      function notifyActionListeners(actionNode) {
        actionNode = actionNode.listeners;
        for (var i = 0; i < actionNode.length; i++) (0, actionNode[i])();
      }
      function actionStateReducer(oldState, newState) {
        return newState;
      }
      function mountActionState(action, initialStateProp) {
        if (isHydrating) {
          var ssrFormState = workInProgressRoot.formState;
          if (null !== ssrFormState) {
            a: {
              var isMatching = currentlyRenderingFiber;
              if (isHydrating) {
                if (nextHydratableInstance) {
                  b: {
                    var markerInstance = nextHydratableInstance;
                    for (var inRootOrSingleton = rootOrSingletonContext; 8 !== markerInstance.nodeType; ) {
                      if (!inRootOrSingleton) {
                        markerInstance = null;
                        break b;
                      }
                      markerInstance = getNextHydratable(
                        markerInstance.nextSibling
                      );
                      if (null === markerInstance) {
                        markerInstance = null;
                        break b;
                      }
                    }
                    inRootOrSingleton = markerInstance.data;
                    markerInstance = inRootOrSingleton === FORM_STATE_IS_MATCHING || inRootOrSingleton === FORM_STATE_IS_NOT_MATCHING ? markerInstance : null;
                  }
                  if (markerInstance) {
                    nextHydratableInstance = getNextHydratable(
                      markerInstance.nextSibling
                    );
                    isMatching = markerInstance.data === FORM_STATE_IS_MATCHING;
                    break a;
                  }
                }
                throwOnHydrationMismatch(isMatching);
              }
              isMatching = false;
            }
            isMatching && (initialStateProp = ssrFormState[0]);
          }
        }
        ssrFormState = mountWorkInProgressHook();
        ssrFormState.memoizedState = ssrFormState.baseState = initialStateProp;
        isMatching = {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: actionStateReducer,
          lastRenderedState: initialStateProp
        };
        ssrFormState.queue = isMatching;
        ssrFormState = dispatchSetState.bind(
          null,
          currentlyRenderingFiber,
          isMatching
        );
        isMatching.dispatch = ssrFormState;
        isMatching = mountStateImpl(false);
        inRootOrSingleton = dispatchOptimisticSetState.bind(
          null,
          currentlyRenderingFiber,
          false,
          isMatching.queue
        );
        isMatching = mountWorkInProgressHook();
        markerInstance = {
          state: initialStateProp,
          dispatch: null,
          action,
          pending: null
        };
        isMatching.queue = markerInstance;
        ssrFormState = dispatchActionState.bind(
          null,
          currentlyRenderingFiber,
          markerInstance,
          inRootOrSingleton,
          ssrFormState
        );
        markerInstance.dispatch = ssrFormState;
        isMatching.memoizedState = action;
        return [initialStateProp, ssrFormState, false];
      }
      function updateActionState(action) {
        var stateHook = updateWorkInProgressHook();
        return updateActionStateImpl(stateHook, currentHook, action);
      }
      function updateActionStateImpl(stateHook, currentStateHook, action) {
        currentStateHook = updateReducerImpl(
          stateHook,
          currentStateHook,
          actionStateReducer
        )[0];
        stateHook = updateReducer(basicStateReducer)[0];
        if ("object" === typeof currentStateHook && null !== currentStateHook && "function" === typeof currentStateHook.then)
          try {
            var state = useThenable(currentStateHook);
          } catch (x) {
            if (x === SuspenseException) throw SuspenseActionException;
            throw x;
          }
        else state = currentStateHook;
        currentStateHook = updateWorkInProgressHook();
        var actionQueue = currentStateHook.queue, dispatch = actionQueue.dispatch;
        action !== currentStateHook.memoizedState && (currentlyRenderingFiber.flags |= 2048, pushSimpleEffect(
          HasEffect | Passive,
          createEffectInstance(),
          actionStateActionEffect.bind(null, actionQueue, action),
          null
        ));
        return [state, dispatch, stateHook];
      }
      function actionStateActionEffect(actionQueue, action) {
        actionQueue.action = action;
      }
      function rerenderActionState(action) {
        var stateHook = updateWorkInProgressHook(), currentStateHook = currentHook;
        if (null !== currentStateHook)
          return updateActionStateImpl(stateHook, currentStateHook, action);
        updateWorkInProgressHook();
        stateHook = stateHook.memoizedState;
        currentStateHook = updateWorkInProgressHook();
        var dispatch = currentStateHook.queue.dispatch;
        currentStateHook.memoizedState = action;
        return [stateHook, dispatch, false];
      }
      function pushSimpleEffect(tag, inst, create, createDeps) {
        tag = {
          tag,
          create,
          deps: createDeps,
          inst,
          next: null
        };
        inst = currentlyRenderingFiber.updateQueue;
        null === inst && (inst = createFunctionComponentUpdateQueue(), currentlyRenderingFiber.updateQueue = inst);
        create = inst.lastEffect;
        null === create ? inst.lastEffect = tag.next = tag : (createDeps = create.next, create.next = tag, tag.next = createDeps, inst.lastEffect = tag);
        return tag;
      }
      function createEffectInstance() {
        return { destroy: void 0, resource: void 0 };
      }
      function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        initialValue = { current: initialValue };
        return hook.memoizedState = initialValue;
      }
      function mountEffectImpl(fiberFlags, hookFlags, create, createDeps) {
        var hook = mountWorkInProgressHook();
        createDeps = void 0 === createDeps ? null : createDeps;
        currentlyRenderingFiber.flags |= fiberFlags;
        hook.memoizedState = pushSimpleEffect(
          HasEffect | hookFlags,
          createEffectInstance(),
          create,
          createDeps
        );
      }
      function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = updateWorkInProgressHook();
        deps = void 0 === deps ? null : deps;
        var inst = hook.memoizedState.inst;
        null !== currentHook && null !== deps && areHookInputsEqual(deps, currentHook.memoizedState.deps) ? hook.memoizedState = pushSimpleEffect(hookFlags, inst, create, deps) : (currentlyRenderingFiber.flags |= fiberFlags, hook.memoizedState = pushSimpleEffect(
          HasEffect | hookFlags,
          inst,
          create,
          deps
        ));
      }
      function mountEffect(create, createDeps) {
        (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode && (currentlyRenderingFiber.mode & NoStrictPassiveEffectsMode) === NoMode ? mountEffectImpl(276826112, Passive, create, createDeps) : mountEffectImpl(8390656, Passive, create, createDeps);
      }
      function mountLayoutEffect(create, deps) {
        var fiberFlags = 4194308;
        (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode && (fiberFlags |= 134217728);
        return mountEffectImpl(fiberFlags, Layout, create, deps);
      }
      function imperativeHandleEffect(create, ref) {
        if ("function" === typeof ref) {
          create = create();
          var refCleanup = ref(create);
          return function() {
            "function" === typeof refCleanup ? refCleanup() : ref(null);
          };
        }
        if (null !== ref && void 0 !== ref)
          return ref.hasOwnProperty("current") || console.error(
            "Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.",
            "an object with keys {" + Object.keys(ref).join(", ") + "}"
          ), create = create(), ref.current = create, function() {
            ref.current = null;
          };
      }
      function mountImperativeHandle(ref, create, deps) {
        "function" !== typeof create && console.error(
          "Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",
          null !== create ? typeof create : "null"
        );
        deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
        var fiberFlags = 4194308;
        (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode && (fiberFlags |= 134217728);
        mountEffectImpl(
          fiberFlags,
          Layout,
          imperativeHandleEffect.bind(null, create, ref),
          deps
        );
      }
      function updateImperativeHandle(ref, create, deps) {
        "function" !== typeof create && console.error(
          "Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",
          null !== create ? typeof create : "null"
        );
        deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
        updateEffectImpl(
          4,
          Layout,
          imperativeHandleEffect.bind(null, create, ref),
          deps
        );
      }
      function mountCallback(callback, deps) {
        mountWorkInProgressHook().memoizedState = [
          callback,
          void 0 === deps ? null : deps
        ];
        return callback;
      }
      function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        deps = void 0 === deps ? null : deps;
        var prevState = hook.memoizedState;
        if (null !== deps && areHookInputsEqual(deps, prevState[1]))
          return prevState[0];
        hook.memoizedState = [callback, deps];
        return callback;
      }
      function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        deps = void 0 === deps ? null : deps;
        var nextValue = nextCreate();
        if (shouldDoubleInvokeUserFnsInHooksDEV) {
          setIsStrictModeForDevtools(true);
          try {
            nextCreate();
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
        hook.memoizedState = [nextValue, deps];
        return nextValue;
      }
      function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        deps = void 0 === deps ? null : deps;
        var prevState = hook.memoizedState;
        if (null !== deps && areHookInputsEqual(deps, prevState[1]))
          return prevState[0];
        prevState = nextCreate();
        if (shouldDoubleInvokeUserFnsInHooksDEV) {
          setIsStrictModeForDevtools(true);
          try {
            nextCreate();
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
        hook.memoizedState = [prevState, deps];
        return prevState;
      }
      function mountDeferredValue(value, initialValue) {
        var hook = mountWorkInProgressHook();
        return mountDeferredValueImpl(hook, value, initialValue);
      }
      function updateDeferredValue(value, initialValue) {
        var hook = updateWorkInProgressHook();
        return updateDeferredValueImpl(
          hook,
          currentHook.memoizedState,
          value,
          initialValue
        );
      }
      function rerenderDeferredValue(value, initialValue) {
        var hook = updateWorkInProgressHook();
        return null === currentHook ? mountDeferredValueImpl(hook, value, initialValue) : updateDeferredValueImpl(
          hook,
          currentHook.memoizedState,
          value,
          initialValue
        );
      }
      function mountDeferredValueImpl(hook, value, initialValue) {
        if (void 0 === initialValue || 0 !== (renderLanes & 1073741824))
          return hook.memoizedState = value;
        hook.memoizedState = initialValue;
        hook = requestDeferredLane();
        currentlyRenderingFiber.lanes |= hook;
        workInProgressRootSkippedLanes |= hook;
        return initialValue;
      }
      function updateDeferredValueImpl(hook, prevValue, value, initialValue) {
        if (objectIs(value, prevValue)) return value;
        if (null !== currentTreeHiddenStackCursor.current)
          return hook = mountDeferredValueImpl(hook, value, initialValue), objectIs(hook, prevValue) || (didReceiveUpdate = true), hook;
        if (0 === (renderLanes & 42))
          return didReceiveUpdate = true, hook.memoizedState = value;
        hook = requestDeferredLane();
        currentlyRenderingFiber.lanes |= hook;
        workInProgressRootSkippedLanes |= hook;
        return prevValue;
      }
      function startTransition(fiber, queue, pendingState, finishedState, callback) {
        var previousPriority = ReactDOMSharedInternals.p;
        ReactDOMSharedInternals.p = 0 !== previousPriority && previousPriority < ContinuousEventPriority ? previousPriority : ContinuousEventPriority;
        var prevTransition = ReactSharedInternals.T, currentTransition = {};
        ReactSharedInternals.T = currentTransition;
        dispatchOptimisticSetState(fiber, false, queue, pendingState);
        currentTransition._updatedFibers = /* @__PURE__ */ new Set();
        try {
          var returnValue = callback(), onStartTransitionFinish = ReactSharedInternals.S;
          null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
          if (null !== returnValue && "object" === typeof returnValue && "function" === typeof returnValue.then) {
            var thenableForFinishedState = chainThenableValue(
              returnValue,
              finishedState
            );
            dispatchSetStateInternal(
              fiber,
              queue,
              thenableForFinishedState,
              requestUpdateLane(fiber)
            );
          } else
            dispatchSetStateInternal(
              fiber,
              queue,
              finishedState,
              requestUpdateLane(fiber)
            );
        } catch (error) {
          dispatchSetStateInternal(
            fiber,
            queue,
            { then: function() {
            }, status: "rejected", reason: error },
            requestUpdateLane(fiber)
          );
        } finally {
          ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition, null === prevTransition && currentTransition._updatedFibers && (fiber = currentTransition._updatedFibers.size, currentTransition._updatedFibers.clear(), 10 < fiber && console.warn(
            "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."
          ));
        }
      }
      function startHostTransition(formFiber, pendingState, action, formData) {
        if (5 !== formFiber.tag)
          throw Error(
            "Expected the form instance to be a HostComponent. This is a bug in React."
          );
        var queue = ensureFormComponentIsStateful(formFiber).queue;
        startTransition(
          formFiber,
          queue,
          pendingState,
          NotPendingTransition,
          null === action ? noop$2 : function() {
            requestFormReset$1(formFiber);
            return action(formData);
          }
        );
      }
      function ensureFormComponentIsStateful(formFiber) {
        var existingStateHook = formFiber.memoizedState;
        if (null !== existingStateHook) return existingStateHook;
        existingStateHook = {
          memoizedState: NotPendingTransition,
          baseState: NotPendingTransition,
          baseQueue: null,
          queue: {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: NotPendingTransition
          },
          next: null
        };
        var initialResetState = {};
        existingStateHook.next = {
          memoizedState: initialResetState,
          baseState: initialResetState,
          baseQueue: null,
          queue: {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialResetState
          },
          next: null
        };
        formFiber.memoizedState = existingStateHook;
        formFiber = formFiber.alternate;
        null !== formFiber && (formFiber.memoizedState = existingStateHook);
        return existingStateHook;
      }
      function requestFormReset$1(formFiber) {
        null === ReactSharedInternals.T && console.error(
          "requestFormReset was called outside a transition or action. To fix, move to an action, or wrap with startTransition."
        );
        var resetStateQueue = ensureFormComponentIsStateful(formFiber).next.queue;
        dispatchSetStateInternal(
          formFiber,
          resetStateQueue,
          {},
          requestUpdateLane(formFiber)
        );
      }
      function mountTransition() {
        var stateHook = mountStateImpl(false);
        stateHook = startTransition.bind(
          null,
          currentlyRenderingFiber,
          stateHook.queue,
          true,
          false
        );
        mountWorkInProgressHook().memoizedState = stateHook;
        return [false, stateHook];
      }
      function updateTransition() {
        var booleanOrThenable = updateReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
        return [
          "boolean" === typeof booleanOrThenable ? booleanOrThenable : useThenable(booleanOrThenable),
          start
        ];
      }
      function rerenderTransition() {
        var booleanOrThenable = rerenderReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
        return [
          "boolean" === typeof booleanOrThenable ? booleanOrThenable : useThenable(booleanOrThenable),
          start
        ];
      }
      function useHostTransitionStatus() {
        return readContext(HostTransitionContext);
      }
      function mountId() {
        var hook = mountWorkInProgressHook(), identifierPrefix = workInProgressRoot.identifierPrefix;
        if (isHydrating) {
          var treeId = treeContextOverflow;
          var idWithLeadingBit = treeContextId;
          treeId = (idWithLeadingBit & ~(1 << 32 - clz32(idWithLeadingBit) - 1)).toString(32) + treeId;
          identifierPrefix = "\xAB" + identifierPrefix + "R" + treeId;
          treeId = localIdCounter++;
          0 < treeId && (identifierPrefix += "H" + treeId.toString(32));
          identifierPrefix += "\xBB";
        } else
          treeId = globalClientIdCounter++, identifierPrefix = "\xAB" + identifierPrefix + "r" + treeId.toString(32) + "\xBB";
        return hook.memoizedState = identifierPrefix;
      }
      function mountRefresh() {
        return mountWorkInProgressHook().memoizedState = refreshCache.bind(
          null,
          currentlyRenderingFiber
        );
      }
      function refreshCache(fiber, seedKey) {
        for (var provider = fiber.return; null !== provider; ) {
          switch (provider.tag) {
            case 24:
            case 3:
              var lane = requestUpdateLane(provider);
              fiber = createUpdate(lane);
              var root2 = enqueueUpdate(provider, fiber, lane);
              null !== root2 && (scheduleUpdateOnFiber(root2, provider, lane), entangleTransitions(root2, provider, lane));
              provider = createCache3();
              null !== seedKey && void 0 !== seedKey && null !== root2 && console.error(
                "The seed argument is not enabled outside experimental channels."
              );
              fiber.payload = { cache: provider };
              return;
          }
          provider = provider.return;
        }
      }
      function dispatchReducerAction(fiber, queue, action) {
        var args = arguments;
        "function" === typeof args[3] && console.error(
          "State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect()."
        );
        args = requestUpdateLane(fiber);
        var update = {
          lane: args,
          revertLane: 0,
          action,
          hasEagerState: false,
          eagerState: null,
          next: null
        };
        isRenderPhaseUpdate(fiber) ? enqueueRenderPhaseUpdate(queue, update) : (update = enqueueConcurrentHookUpdate(fiber, queue, update, args), null !== update && (scheduleUpdateOnFiber(update, fiber, args), entangleTransitionUpdate(update, queue, args)));
        markStateUpdateScheduled(fiber, args);
      }
      function dispatchSetState(fiber, queue, action) {
        var args = arguments;
        "function" === typeof args[3] && console.error(
          "State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect()."
        );
        args = requestUpdateLane(fiber);
        dispatchSetStateInternal(fiber, queue, action, args);
        markStateUpdateScheduled(fiber, args);
      }
      function dispatchSetStateInternal(fiber, queue, action, lane) {
        var update = {
          lane,
          revertLane: 0,
          action,
          hasEagerState: false,
          eagerState: null,
          next: null
        };
        if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
        else {
          var alternate = fiber.alternate;
          if (0 === fiber.lanes && (null === alternate || 0 === alternate.lanes) && (alternate = queue.lastRenderedReducer, null !== alternate)) {
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              var currentState = queue.lastRenderedState, eagerState = alternate(currentState, action);
              update.hasEagerState = true;
              update.eagerState = eagerState;
              if (objectIs(eagerState, currentState))
                return enqueueUpdate$1(fiber, queue, update, 0), null === workInProgressRoot && finishQueueingConcurrentUpdates(), false;
            } catch (error) {
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          }
          action = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
          if (null !== action)
            return scheduleUpdateOnFiber(action, fiber, lane), entangleTransitionUpdate(action, queue, lane), true;
        }
        return false;
      }
      function dispatchOptimisticSetState(fiber, throwIfDuringRender, queue, action) {
        null === ReactSharedInternals.T && 0 === currentEntangledLane && console.error(
          "An optimistic state update occurred outside a transition or action. To fix, move the update to an action, or wrap with startTransition."
        );
        action = {
          lane: 2,
          revertLane: requestTransitionLane(),
          action,
          hasEagerState: false,
          eagerState: null,
          next: null
        };
        if (isRenderPhaseUpdate(fiber)) {
          if (throwIfDuringRender)
            throw Error("Cannot update optimistic state while rendering.");
          console.error("Cannot call startTransition while rendering.");
        } else
          throwIfDuringRender = enqueueConcurrentHookUpdate(
            fiber,
            queue,
            action,
            2
          ), null !== throwIfDuringRender && scheduleUpdateOnFiber(throwIfDuringRender, fiber, 2);
        markStateUpdateScheduled(fiber, 2);
      }
      function isRenderPhaseUpdate(fiber) {
        var alternate = fiber.alternate;
        return fiber === currentlyRenderingFiber || null !== alternate && alternate === currentlyRenderingFiber;
      }
      function enqueueRenderPhaseUpdate(queue, update) {
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
        var pending = queue.pending;
        null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
        queue.pending = update;
      }
      function entangleTransitionUpdate(root2, queue, lane) {
        if (0 !== (lane & 4194048)) {
          var queueLanes = queue.lanes;
          queueLanes &= root2.pendingLanes;
          lane |= queueLanes;
          queue.lanes = lane;
          markRootEntangled(root2, lane);
        }
      }
      function pushDebugInfo(debugInfo) {
        var previousDebugInfo = currentDebugInfo;
        null != debugInfo && (currentDebugInfo = null === previousDebugInfo ? debugInfo : previousDebugInfo.concat(debugInfo));
        return previousDebugInfo;
      }
      function validateFragmentProps(element, fiber, returnFiber) {
        for (var keys = Object.keys(element.props), i = 0; i < keys.length; i++) {
          var key = keys[i];
          if ("children" !== key && "key" !== key) {
            null === fiber && (fiber = createFiberFromElement(element, returnFiber.mode, 0), fiber._debugInfo = currentDebugInfo, fiber.return = returnFiber);
            runWithFiberInDEV(
              fiber,
              function(erroredKey) {
                console.error(
                  "Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.",
                  erroredKey
                );
              },
              key
            );
            break;
          }
        }
      }
      function unwrapThenable(thenable) {
        var index = thenableIndexCounter;
        thenableIndexCounter += 1;
        null === thenableState && (thenableState = createThenableState());
        return trackUsedThenable(thenableState, thenable, index);
      }
      function coerceRef(workInProgress2, element) {
        element = element.props.ref;
        workInProgress2.ref = void 0 !== element ? element : null;
      }
      function throwOnInvalidObjectType(returnFiber, newChild) {
        if (newChild.$$typeof === REACT_LEGACY_ELEMENT_TYPE)
          throw Error(
            'A React Element from an older version of React was rendered. This is not supported. It can happen if:\n- Multiple copies of the "react" package is used.\n- A library pre-bundled an old copy of "react" or "react/jsx-runtime".\n- A compiler tries to "inline" JSX instead of using the runtime.'
          );
        returnFiber = Object.prototype.toString.call(newChild);
        throw Error(
          "Objects are not valid as a React child (found: " + ("[object Object]" === returnFiber ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : returnFiber) + "). If you meant to render a collection of children, use an array instead."
        );
      }
      function warnOnFunctionType(returnFiber, invalidChild) {
        var parentName = getComponentNameFromFiber(returnFiber) || "Component";
        ownerHasFunctionTypeWarning[parentName] || (ownerHasFunctionTypeWarning[parentName] = true, invalidChild = invalidChild.displayName || invalidChild.name || "Component", 3 === returnFiber.tag ? console.error(
          "Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.\n  root.render(%s)",
          invalidChild,
          invalidChild,
          invalidChild
        ) : console.error(
          "Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.\n  <%s>{%s}</%s>",
          invalidChild,
          invalidChild,
          parentName,
          invalidChild,
          parentName
        ));
      }
      function warnOnSymbolType(returnFiber, invalidChild) {
        var parentName = getComponentNameFromFiber(returnFiber) || "Component";
        ownerHasSymbolTypeWarning[parentName] || (ownerHasSymbolTypeWarning[parentName] = true, invalidChild = String(invalidChild), 3 === returnFiber.tag ? console.error(
          "Symbols are not valid as a React child.\n  root.render(%s)",
          invalidChild
        ) : console.error(
          "Symbols are not valid as a React child.\n  <%s>%s</%s>",
          parentName,
          invalidChild,
          parentName
        ));
      }
      function createChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
          if (shouldTrackSideEffects) {
            var deletions = returnFiber.deletions;
            null === deletions ? (returnFiber.deletions = [childToDelete], returnFiber.flags |= 16) : deletions.push(childToDelete);
          }
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
          if (!shouldTrackSideEffects) return null;
          for (; null !== currentFirstChild; )
            deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
          return null;
        }
        function mapRemainingChildren(currentFirstChild) {
          for (var existingChildren = /* @__PURE__ */ new Map(); null !== currentFirstChild; )
            null !== currentFirstChild.key ? existingChildren.set(currentFirstChild.key, currentFirstChild) : existingChildren.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
          return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
          fiber = createWorkInProgress(fiber, pendingProps);
          fiber.index = 0;
          fiber.sibling = null;
          return fiber;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
          newFiber.index = newIndex;
          if (!shouldTrackSideEffects)
            return newFiber.flags |= 1048576, lastPlacedIndex;
          newIndex = newFiber.alternate;
          if (null !== newIndex)
            return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.flags |= 67108866, lastPlacedIndex) : newIndex;
          newFiber.flags |= 67108866;
          return lastPlacedIndex;
        }
        function placeSingleChild(newFiber) {
          shouldTrackSideEffects && null === newFiber.alternate && (newFiber.flags |= 67108866);
          return newFiber;
        }
        function updateTextNode(returnFiber, current2, textContent, lanes) {
          if (null === current2 || 6 !== current2.tag)
            return current2 = createFiberFromText(
              textContent,
              returnFiber.mode,
              lanes
            ), current2.return = returnFiber, current2._debugOwner = returnFiber, current2._debugTask = returnFiber._debugTask, current2._debugInfo = currentDebugInfo, current2;
          current2 = useFiber(current2, textContent);
          current2.return = returnFiber;
          current2._debugInfo = currentDebugInfo;
          return current2;
        }
        function updateElement(returnFiber, current2, element, lanes) {
          var elementType = element.type;
          if (elementType === REACT_FRAGMENT_TYPE)
            return current2 = updateFragment(
              returnFiber,
              current2,
              element.props.children,
              lanes,
              element.key
            ), validateFragmentProps(element, current2, returnFiber), current2;
          if (null !== current2 && (current2.elementType === elementType || isCompatibleFamilyForHotReloading(current2, element) || "object" === typeof elementType && null !== elementType && elementType.$$typeof === REACT_LAZY_TYPE && callLazyInitInDEV(elementType) === current2.type))
            return current2 = useFiber(current2, element.props), coerceRef(current2, element), current2.return = returnFiber, current2._debugOwner = element._owner, current2._debugInfo = currentDebugInfo, current2;
          current2 = createFiberFromElement(element, returnFiber.mode, lanes);
          coerceRef(current2, element);
          current2.return = returnFiber;
          current2._debugInfo = currentDebugInfo;
          return current2;
        }
        function updatePortal(returnFiber, current2, portal, lanes) {
          if (null === current2 || 4 !== current2.tag || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation)
            return current2 = createFiberFromPortal(portal, returnFiber.mode, lanes), current2.return = returnFiber, current2._debugInfo = currentDebugInfo, current2;
          current2 = useFiber(current2, portal.children || []);
          current2.return = returnFiber;
          current2._debugInfo = currentDebugInfo;
          return current2;
        }
        function updateFragment(returnFiber, current2, fragment, lanes, key) {
          if (null === current2 || 7 !== current2.tag)
            return current2 = createFiberFromFragment(
              fragment,
              returnFiber.mode,
              lanes,
              key
            ), current2.return = returnFiber, current2._debugOwner = returnFiber, current2._debugTask = returnFiber._debugTask, current2._debugInfo = currentDebugInfo, current2;
          current2 = useFiber(current2, fragment);
          current2.return = returnFiber;
          current2._debugInfo = currentDebugInfo;
          return current2;
        }
        function createChild(returnFiber, newChild, lanes) {
          if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild)
            return newChild = createFiberFromText(
              "" + newChild,
              returnFiber.mode,
              lanes
            ), newChild.return = returnFiber, newChild._debugOwner = returnFiber, newChild._debugTask = returnFiber._debugTask, newChild._debugInfo = currentDebugInfo, newChild;
          if ("object" === typeof newChild && null !== newChild) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return lanes = createFiberFromElement(
                  newChild,
                  returnFiber.mode,
                  lanes
                ), coerceRef(lanes, newChild), lanes.return = returnFiber, returnFiber = pushDebugInfo(newChild._debugInfo), lanes._debugInfo = currentDebugInfo, currentDebugInfo = returnFiber, lanes;
              case REACT_PORTAL_TYPE:
                return newChild = createFiberFromPortal(
                  newChild,
                  returnFiber.mode,
                  lanes
                ), newChild.return = returnFiber, newChild._debugInfo = currentDebugInfo, newChild;
              case REACT_LAZY_TYPE:
                var _prevDebugInfo = pushDebugInfo(newChild._debugInfo);
                newChild = callLazyInitInDEV(newChild);
                returnFiber = createChild(returnFiber, newChild, lanes);
                currentDebugInfo = _prevDebugInfo;
                return returnFiber;
            }
            if (isArrayImpl(newChild) || getIteratorFn(newChild))
              return lanes = createFiberFromFragment(
                newChild,
                returnFiber.mode,
                lanes,
                null
              ), lanes.return = returnFiber, lanes._debugOwner = returnFiber, lanes._debugTask = returnFiber._debugTask, returnFiber = pushDebugInfo(newChild._debugInfo), lanes._debugInfo = currentDebugInfo, currentDebugInfo = returnFiber, lanes;
            if ("function" === typeof newChild.then)
              return _prevDebugInfo = pushDebugInfo(newChild._debugInfo), returnFiber = createChild(
                returnFiber,
                unwrapThenable(newChild),
                lanes
              ), currentDebugInfo = _prevDebugInfo, returnFiber;
            if (newChild.$$typeof === REACT_CONTEXT_TYPE)
              return createChild(
                returnFiber,
                readContextDuringReconciliation(returnFiber, newChild),
                lanes
              );
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          "function" === typeof newChild && warnOnFunctionType(returnFiber, newChild);
          "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
          return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
          var key = null !== oldFiber ? oldFiber.key : null;
          if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild)
            return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
          if ("object" === typeof newChild && null !== newChild) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return newChild.key === key ? (key = pushDebugInfo(newChild._debugInfo), returnFiber = updateElement(
                  returnFiber,
                  oldFiber,
                  newChild,
                  lanes
                ), currentDebugInfo = key, returnFiber) : null;
              case REACT_PORTAL_TYPE:
                return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, lanes) : null;
              case REACT_LAZY_TYPE:
                return key = pushDebugInfo(newChild._debugInfo), newChild = callLazyInitInDEV(newChild), returnFiber = updateSlot(
                  returnFiber,
                  oldFiber,
                  newChild,
                  lanes
                ), currentDebugInfo = key, returnFiber;
            }
            if (isArrayImpl(newChild) || getIteratorFn(newChild)) {
              if (null !== key) return null;
              key = pushDebugInfo(newChild._debugInfo);
              returnFiber = updateFragment(
                returnFiber,
                oldFiber,
                newChild,
                lanes,
                null
              );
              currentDebugInfo = key;
              return returnFiber;
            }
            if ("function" === typeof newChild.then)
              return key = pushDebugInfo(newChild._debugInfo), returnFiber = updateSlot(
                returnFiber,
                oldFiber,
                unwrapThenable(newChild),
                lanes
              ), currentDebugInfo = key, returnFiber;
            if (newChild.$$typeof === REACT_CONTEXT_TYPE)
              return updateSlot(
                returnFiber,
                oldFiber,
                readContextDuringReconciliation(returnFiber, newChild),
                lanes
              );
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          "function" === typeof newChild && warnOnFunctionType(returnFiber, newChild);
          "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
          return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
          if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild)
            return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, lanes);
          if ("object" === typeof newChild && null !== newChild) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return newIdx = existingChildren.get(
                  null === newChild.key ? newIdx : newChild.key
                ) || null, existingChildren = pushDebugInfo(newChild._debugInfo), returnFiber = updateElement(
                  returnFiber,
                  newIdx,
                  newChild,
                  lanes
                ), currentDebugInfo = existingChildren, returnFiber;
              case REACT_PORTAL_TYPE:
                return existingChildren = existingChildren.get(
                  null === newChild.key ? newIdx : newChild.key
                ) || null, updatePortal(returnFiber, existingChildren, newChild, lanes);
              case REACT_LAZY_TYPE:
                var _prevDebugInfo7 = pushDebugInfo(newChild._debugInfo);
                newChild = callLazyInitInDEV(newChild);
                returnFiber = updateFromMap(
                  existingChildren,
                  returnFiber,
                  newIdx,
                  newChild,
                  lanes
                );
                currentDebugInfo = _prevDebugInfo7;
                return returnFiber;
            }
            if (isArrayImpl(newChild) || getIteratorFn(newChild))
              return newIdx = existingChildren.get(newIdx) || null, existingChildren = pushDebugInfo(newChild._debugInfo), returnFiber = updateFragment(
                returnFiber,
                newIdx,
                newChild,
                lanes,
                null
              ), currentDebugInfo = existingChildren, returnFiber;
            if ("function" === typeof newChild.then)
              return _prevDebugInfo7 = pushDebugInfo(newChild._debugInfo), returnFiber = updateFromMap(
                existingChildren,
                returnFiber,
                newIdx,
                unwrapThenable(newChild),
                lanes
              ), currentDebugInfo = _prevDebugInfo7, returnFiber;
            if (newChild.$$typeof === REACT_CONTEXT_TYPE)
              return updateFromMap(
                existingChildren,
                returnFiber,
                newIdx,
                readContextDuringReconciliation(returnFiber, newChild),
                lanes
              );
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          "function" === typeof newChild && warnOnFunctionType(returnFiber, newChild);
          "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
          return null;
        }
        function warnOnInvalidKey(returnFiber, workInProgress2, child, knownKeys) {
          if ("object" !== typeof child || null === child) return knownKeys;
          switch (child.$$typeof) {
            case REACT_ELEMENT_TYPE:
            case REACT_PORTAL_TYPE:
              warnForMissingKey(returnFiber, workInProgress2, child);
              var key = child.key;
              if ("string" !== typeof key) break;
              if (null === knownKeys) {
                knownKeys = /* @__PURE__ */ new Set();
                knownKeys.add(key);
                break;
              }
              if (!knownKeys.has(key)) {
                knownKeys.add(key);
                break;
              }
              runWithFiberInDEV(workInProgress2, function() {
                console.error(
                  "Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.",
                  key
                );
              });
              break;
            case REACT_LAZY_TYPE:
              child = callLazyInitInDEV(child), warnOnInvalidKey(returnFiber, workInProgress2, child, knownKeys);
          }
          return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
          for (var knownKeys = null, resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
            oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
            var newFiber = updateSlot(
              returnFiber,
              oldFiber,
              newChildren[newIdx],
              lanes
            );
            if (null === newFiber) {
              null === oldFiber && (oldFiber = nextOldFiber);
              break;
            }
            knownKeys = warnOnInvalidKey(
              returnFiber,
              newFiber,
              newChildren[newIdx],
              knownKeys
            );
            shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
            currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
            null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }
          if (newIdx === newChildren.length)
            return deleteRemainingChildren(returnFiber, oldFiber), isHydrating && pushTreeFork(returnFiber, newIdx), resultingFirstChild;
          if (null === oldFiber) {
            for (; newIdx < newChildren.length; newIdx++)
              oldFiber = createChild(returnFiber, newChildren[newIdx], lanes), null !== oldFiber && (knownKeys = warnOnInvalidKey(
                returnFiber,
                oldFiber,
                newChildren[newIdx],
                knownKeys
              ), currentFirstChild = placeChild(
                oldFiber,
                currentFirstChild,
                newIdx
              ), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
            isHydrating && pushTreeFork(returnFiber, newIdx);
            return resultingFirstChild;
          }
          for (oldFiber = mapRemainingChildren(oldFiber); newIdx < newChildren.length; newIdx++)
            nextOldFiber = updateFromMap(
              oldFiber,
              returnFiber,
              newIdx,
              newChildren[newIdx],
              lanes
            ), null !== nextOldFiber && (knownKeys = warnOnInvalidKey(
              returnFiber,
              nextOldFiber,
              newChildren[newIdx],
              knownKeys
            ), shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(
              null === nextOldFiber.key ? newIdx : nextOldFiber.key
            ), currentFirstChild = placeChild(
              nextOldFiber,
              currentFirstChild,
              newIdx
            ), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
          shouldTrackSideEffects && oldFiber.forEach(function(child) {
            return deleteChild(returnFiber, child);
          });
          isHydrating && pushTreeFork(returnFiber, newIdx);
          return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildren, lanes) {
          if (null == newChildren)
            throw Error("An iterable object provided no iterator.");
          for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, knownKeys = null, step = newChildren.next(); null !== oldFiber && !step.done; newIdx++, step = newChildren.next()) {
            oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
            var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
            if (null === newFiber) {
              null === oldFiber && (oldFiber = nextOldFiber);
              break;
            }
            knownKeys = warnOnInvalidKey(
              returnFiber,
              newFiber,
              step.value,
              knownKeys
            );
            shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
            currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
            null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }
          if (step.done)
            return deleteRemainingChildren(returnFiber, oldFiber), isHydrating && pushTreeFork(returnFiber, newIdx), resultingFirstChild;
          if (null === oldFiber) {
            for (; !step.done; newIdx++, step = newChildren.next())
              oldFiber = createChild(returnFiber, step.value, lanes), null !== oldFiber && (knownKeys = warnOnInvalidKey(
                returnFiber,
                oldFiber,
                step.value,
                knownKeys
              ), currentFirstChild = placeChild(
                oldFiber,
                currentFirstChild,
                newIdx
              ), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
            isHydrating && pushTreeFork(returnFiber, newIdx);
            return resultingFirstChild;
          }
          for (oldFiber = mapRemainingChildren(oldFiber); !step.done; newIdx++, step = newChildren.next())
            nextOldFiber = updateFromMap(
              oldFiber,
              returnFiber,
              newIdx,
              step.value,
              lanes
            ), null !== nextOldFiber && (knownKeys = warnOnInvalidKey(
              returnFiber,
              nextOldFiber,
              step.value,
              knownKeys
            ), shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(
              null === nextOldFiber.key ? newIdx : nextOldFiber.key
            ), currentFirstChild = placeChild(
              nextOldFiber,
              currentFirstChild,
              newIdx
            ), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
          shouldTrackSideEffects && oldFiber.forEach(function(child) {
            return deleteChild(returnFiber, child);
          });
          isHydrating && pushTreeFork(returnFiber, newIdx);
          return resultingFirstChild;
        }
        function reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes) {
          "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key && (validateFragmentProps(newChild, null, returnFiber), newChild = newChild.props.children);
          if ("object" === typeof newChild && null !== newChild) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                var prevDebugInfo = pushDebugInfo(newChild._debugInfo);
                a: {
                  for (var key = newChild.key; null !== currentFirstChild; ) {
                    if (currentFirstChild.key === key) {
                      key = newChild.type;
                      if (key === REACT_FRAGMENT_TYPE) {
                        if (7 === currentFirstChild.tag) {
                          deleteRemainingChildren(
                            returnFiber,
                            currentFirstChild.sibling
                          );
                          lanes = useFiber(
                            currentFirstChild,
                            newChild.props.children
                          );
                          lanes.return = returnFiber;
                          lanes._debugOwner = newChild._owner;
                          lanes._debugInfo = currentDebugInfo;
                          validateFragmentProps(newChild, lanes, returnFiber);
                          returnFiber = lanes;
                          break a;
                        }
                      } else if (currentFirstChild.elementType === key || isCompatibleFamilyForHotReloading(
                        currentFirstChild,
                        newChild
                      ) || "object" === typeof key && null !== key && key.$$typeof === REACT_LAZY_TYPE && callLazyInitInDEV(key) === currentFirstChild.type) {
                        deleteRemainingChildren(
                          returnFiber,
                          currentFirstChild.sibling
                        );
                        lanes = useFiber(currentFirstChild, newChild.props);
                        coerceRef(lanes, newChild);
                        lanes.return = returnFiber;
                        lanes._debugOwner = newChild._owner;
                        lanes._debugInfo = currentDebugInfo;
                        returnFiber = lanes;
                        break a;
                      }
                      deleteRemainingChildren(returnFiber, currentFirstChild);
                      break;
                    } else deleteChild(returnFiber, currentFirstChild);
                    currentFirstChild = currentFirstChild.sibling;
                  }
                  newChild.type === REACT_FRAGMENT_TYPE ? (lanes = createFiberFromFragment(
                    newChild.props.children,
                    returnFiber.mode,
                    lanes,
                    newChild.key
                  ), lanes.return = returnFiber, lanes._debugOwner = returnFiber, lanes._debugTask = returnFiber._debugTask, lanes._debugInfo = currentDebugInfo, validateFragmentProps(newChild, lanes, returnFiber), returnFiber = lanes) : (lanes = createFiberFromElement(
                    newChild,
                    returnFiber.mode,
                    lanes
                  ), coerceRef(lanes, newChild), lanes.return = returnFiber, lanes._debugInfo = currentDebugInfo, returnFiber = lanes);
                }
                returnFiber = placeSingleChild(returnFiber);
                currentDebugInfo = prevDebugInfo;
                return returnFiber;
              case REACT_PORTAL_TYPE:
                a: {
                  prevDebugInfo = newChild;
                  for (newChild = prevDebugInfo.key; null !== currentFirstChild; ) {
                    if (currentFirstChild.key === newChild)
                      if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === prevDebugInfo.containerInfo && currentFirstChild.stateNode.implementation === prevDebugInfo.implementation) {
                        deleteRemainingChildren(
                          returnFiber,
                          currentFirstChild.sibling
                        );
                        lanes = useFiber(
                          currentFirstChild,
                          prevDebugInfo.children || []
                        );
                        lanes.return = returnFiber;
                        returnFiber = lanes;
                        break a;
                      } else {
                        deleteRemainingChildren(returnFiber, currentFirstChild);
                        break;
                      }
                    else deleteChild(returnFiber, currentFirstChild);
                    currentFirstChild = currentFirstChild.sibling;
                  }
                  lanes = createFiberFromPortal(
                    prevDebugInfo,
                    returnFiber.mode,
                    lanes
                  );
                  lanes.return = returnFiber;
                  returnFiber = lanes;
                }
                return placeSingleChild(returnFiber);
              case REACT_LAZY_TYPE:
                return prevDebugInfo = pushDebugInfo(newChild._debugInfo), newChild = callLazyInitInDEV(newChild), returnFiber = reconcileChildFibersImpl(
                  returnFiber,
                  currentFirstChild,
                  newChild,
                  lanes
                ), currentDebugInfo = prevDebugInfo, returnFiber;
            }
            if (isArrayImpl(newChild))
              return prevDebugInfo = pushDebugInfo(newChild._debugInfo), returnFiber = reconcileChildrenArray(
                returnFiber,
                currentFirstChild,
                newChild,
                lanes
              ), currentDebugInfo = prevDebugInfo, returnFiber;
            if (getIteratorFn(newChild)) {
              prevDebugInfo = pushDebugInfo(newChild._debugInfo);
              key = getIteratorFn(newChild);
              if ("function" !== typeof key)
                throw Error(
                  "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue."
                );
              var newChildren = key.call(newChild);
              if (newChildren === newChild) {
                if (0 !== returnFiber.tag || "[object GeneratorFunction]" !== Object.prototype.toString.call(returnFiber.type) || "[object Generator]" !== Object.prototype.toString.call(newChildren))
                  didWarnAboutGenerators || console.error(
                    "Using Iterators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. You can also use an Iterable that can iterate multiple times over the same items."
                  ), didWarnAboutGenerators = true;
              } else
                newChild.entries !== key || didWarnAboutMaps || (console.error(
                  "Using Maps as children is not supported. Use an array of keyed ReactElements instead."
                ), didWarnAboutMaps = true);
              returnFiber = reconcileChildrenIterator(
                returnFiber,
                currentFirstChild,
                newChildren,
                lanes
              );
              currentDebugInfo = prevDebugInfo;
              return returnFiber;
            }
            if ("function" === typeof newChild.then)
              return prevDebugInfo = pushDebugInfo(newChild._debugInfo), returnFiber = reconcileChildFibersImpl(
                returnFiber,
                currentFirstChild,
                unwrapThenable(newChild),
                lanes
              ), currentDebugInfo = prevDebugInfo, returnFiber;
            if (newChild.$$typeof === REACT_CONTEXT_TYPE)
              return reconcileChildFibersImpl(
                returnFiber,
                currentFirstChild,
                readContextDuringReconciliation(returnFiber, newChild),
                lanes
              );
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild)
            return prevDebugInfo = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(
              returnFiber,
              currentFirstChild.sibling
            ), lanes = useFiber(currentFirstChild, prevDebugInfo), lanes.return = returnFiber, returnFiber = lanes) : (deleteRemainingChildren(returnFiber, currentFirstChild), lanes = createFiberFromText(
              prevDebugInfo,
              returnFiber.mode,
              lanes
            ), lanes.return = returnFiber, lanes._debugOwner = returnFiber, lanes._debugTask = returnFiber._debugTask, lanes._debugInfo = currentDebugInfo, returnFiber = lanes), placeSingleChild(returnFiber);
          "function" === typeof newChild && warnOnFunctionType(returnFiber, newChild);
          "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
          return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return function(returnFiber, currentFirstChild, newChild, lanes) {
          var prevDebugInfo = currentDebugInfo;
          currentDebugInfo = null;
          try {
            thenableIndexCounter = 0;
            var firstChildFiber = reconcileChildFibersImpl(
              returnFiber,
              currentFirstChild,
              newChild,
              lanes
            );
            thenableState = null;
            return firstChildFiber;
          } catch (x) {
            if (x === SuspenseException || x === SuspenseActionException) throw x;
            var fiber = createFiber(29, x, null, returnFiber.mode);
            fiber.lanes = lanes;
            fiber.return = returnFiber;
            var debugInfo = fiber._debugInfo = currentDebugInfo;
            fiber._debugOwner = returnFiber._debugOwner;
            fiber._debugTask = returnFiber._debugTask;
            if (null != debugInfo) {
              for (var i = debugInfo.length - 1; 0 <= i; i--)
                if ("string" === typeof debugInfo[i].stack) {
                  fiber._debugOwner = debugInfo[i];
                  fiber._debugTask = debugInfo[i].debugTask;
                  break;
                }
            }
            return fiber;
          } finally {
            currentDebugInfo = prevDebugInfo;
          }
        };
      }
      function pushPrimaryTreeSuspenseHandler(handler) {
        var current2 = handler.alternate;
        push(
          suspenseStackCursor,
          suspenseStackCursor.current & SubtreeSuspenseContextMask,
          handler
        );
        push(suspenseHandlerStackCursor, handler, handler);
        null === shellBoundary && (null === current2 || null !== currentTreeHiddenStackCursor.current ? shellBoundary = handler : null !== current2.memoizedState && (shellBoundary = handler));
      }
      function pushOffscreenSuspenseHandler(fiber) {
        if (22 === fiber.tag) {
          if (push(suspenseStackCursor, suspenseStackCursor.current, fiber), push(suspenseHandlerStackCursor, fiber, fiber), null === shellBoundary) {
            var current2 = fiber.alternate;
            null !== current2 && null !== current2.memoizedState && (shellBoundary = fiber);
          }
        } else reuseSuspenseHandlerOnStack(fiber);
      }
      function reuseSuspenseHandlerOnStack(fiber) {
        push(suspenseStackCursor, suspenseStackCursor.current, fiber);
        push(
          suspenseHandlerStackCursor,
          suspenseHandlerStackCursor.current,
          fiber
        );
      }
      function popSuspenseHandler(fiber) {
        pop(suspenseHandlerStackCursor, fiber);
        shellBoundary === fiber && (shellBoundary = null);
        pop(suspenseStackCursor, fiber);
      }
      function findFirstSuspended(row) {
        for (var node2 = row; null !== node2; ) {
          if (13 === node2.tag) {
            var state = node2.memoizedState;
            if (null !== state && (state = state.dehydrated, null === state || state.data === SUSPENSE_PENDING_START_DATA || isSuspenseInstanceFallback(state)))
              return node2;
          } else if (19 === node2.tag && void 0 !== node2.memoizedProps.revealOrder) {
            if (0 !== (node2.flags & 128)) return node2;
          } else if (null !== node2.child) {
            node2.child.return = node2;
            node2 = node2.child;
            continue;
          }
          if (node2 === row) break;
          for (; null === node2.sibling; ) {
            if (null === node2.return || node2.return === row) return null;
            node2 = node2.return;
          }
          node2.sibling.return = node2.return;
          node2 = node2.sibling;
        }
        return null;
      }
      function warnOnInvalidCallback(callback) {
        if (null !== callback && "function" !== typeof callback) {
          var key = String(callback);
          didWarnOnInvalidCallback.has(key) || (didWarnOnInvalidCallback.add(key), console.error(
            "Expected the last optional `callback` argument to be a function. Instead received: %s.",
            callback
          ));
        }
      }
      function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress2.memoizedState, partialState = getDerivedStateFromProps(nextProps, prevState);
        if (workInProgress2.mode & StrictLegacyMode) {
          setIsStrictModeForDevtools(true);
          try {
            partialState = getDerivedStateFromProps(nextProps, prevState);
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
        void 0 === partialState && (ctor = getComponentNameFromType(ctor) || "Component", didWarnAboutUndefinedDerivedState.has(ctor) || (didWarnAboutUndefinedDerivedState.add(ctor), console.error(
          "%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.",
          ctor
        )));
        prevState = null === partialState || void 0 === partialState ? prevState : assign2({}, prevState, partialState);
        workInProgress2.memoizedState = prevState;
        0 === workInProgress2.lanes && (workInProgress2.updateQueue.baseState = prevState);
      }
      function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress2.stateNode;
        if ("function" === typeof instance.shouldComponentUpdate) {
          oldProps = instance.shouldComponentUpdate(
            newProps,
            newState,
            nextContext
          );
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              oldProps = instance.shouldComponentUpdate(
                newProps,
                newState,
                nextContext
              );
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          void 0 === oldProps && console.error(
            "%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.",
            getComponentNameFromType(ctor) || "Component"
          );
          return oldProps;
        }
        return ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : true;
      }
      function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
        var oldState = instance.state;
        "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, nextContext);
        "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        instance.state !== oldState && (workInProgress2 = getComponentNameFromFiber(workInProgress2) || "Component", didWarnAboutStateAssignmentForComponent.has(workInProgress2) || (didWarnAboutStateAssignmentForComponent.add(workInProgress2), console.error(
          "%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",
          workInProgress2
        )), classComponentUpdater.enqueueReplaceState(
          instance,
          instance.state,
          null
        ));
      }
      function resolveClassComponentProps(Component, baseProps) {
        var newProps = baseProps;
        if ("ref" in baseProps) {
          newProps = {};
          for (var propName in baseProps)
            "ref" !== propName && (newProps[propName] = baseProps[propName]);
        }
        if (Component = Component.defaultProps) {
          newProps === baseProps && (newProps = assign2({}, newProps));
          for (var _propName in Component)
            void 0 === newProps[_propName] && (newProps[_propName] = Component[_propName]);
        }
        return newProps;
      }
      function defaultOnUncaughtError(error) {
        reportGlobalError(error);
        console.warn(
          "%s\n\n%s\n",
          componentName ? "An error occurred in the <" + componentName + "> component." : "An error occurred in one of your React components.",
          "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://react.dev/link/error-boundaries to learn more about error boundaries."
        );
      }
      function defaultOnCaughtError(error) {
        var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component." : "The above error occurred in one of your React components.", recreateMessage = "React will try to recreate this component tree from scratch using the error boundary you provided, " + ((errorBoundaryName || "Anonymous") + ".");
        if ("object" === typeof error && null !== error && "string" === typeof error.environmentName) {
          var JSCompiler_inline_result = error.environmentName;
          error = [
            "%o\n\n%s\n\n%s\n",
            error,
            componentNameMessage,
            recreateMessage
          ].slice(0);
          "string" === typeof error[0] ? error.splice(
            0,
            1,
            badgeFormat + error[0],
            badgeStyle,
            pad + JSCompiler_inline_result + pad,
            resetStyle
          ) : error.splice(
            0,
            0,
            badgeFormat,
            badgeStyle,
            pad + JSCompiler_inline_result + pad,
            resetStyle
          );
          error.unshift(console);
          JSCompiler_inline_result = bind.apply(console.error, error);
          JSCompiler_inline_result();
        } else
          console.error(
            "%o\n\n%s\n\n%s\n",
            error,
            componentNameMessage,
            recreateMessage
          );
      }
      function defaultOnRecoverableError(error) {
        reportGlobalError(error);
      }
      function logUncaughtError(root2, errorInfo) {
        try {
          componentName = errorInfo.source ? getComponentNameFromFiber(errorInfo.source) : null;
          errorBoundaryName = null;
          var error = errorInfo.value;
          if (null !== ReactSharedInternals.actQueue)
            ReactSharedInternals.thrownErrors.push(error);
          else {
            var onUncaughtError = root2.onUncaughtError;
            onUncaughtError(error, { componentStack: errorInfo.stack });
          }
        } catch (e$5) {
          setTimeout(function() {
            throw e$5;
          });
        }
      }
      function logCaughtError(root2, boundary, errorInfo) {
        try {
          componentName = errorInfo.source ? getComponentNameFromFiber(errorInfo.source) : null;
          errorBoundaryName = getComponentNameFromFiber(boundary);
          var onCaughtError = root2.onCaughtError;
          onCaughtError(errorInfo.value, {
            componentStack: errorInfo.stack,
            errorBoundary: 1 === boundary.tag ? boundary.stateNode : null
          });
        } catch (e$6) {
          setTimeout(function() {
            throw e$6;
          });
        }
      }
      function createRootErrorUpdate(root2, errorInfo, lane) {
        lane = createUpdate(lane);
        lane.tag = CaptureUpdate;
        lane.payload = { element: null };
        lane.callback = function() {
          runWithFiberInDEV(errorInfo.source, logUncaughtError, root2, errorInfo);
        };
        return lane;
      }
      function createClassErrorUpdate(lane) {
        lane = createUpdate(lane);
        lane.tag = CaptureUpdate;
        return lane;
      }
      function initializeClassErrorUpdate(update, root2, fiber, errorInfo) {
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if ("function" === typeof getDerivedStateFromError) {
          var error = errorInfo.value;
          update.payload = function() {
            return getDerivedStateFromError(error);
          };
          update.callback = function() {
            markFailedErrorBoundaryForHotReloading(fiber);
            runWithFiberInDEV(
              errorInfo.source,
              logCaughtError,
              root2,
              fiber,
              errorInfo
            );
          };
        }
        var inst = fiber.stateNode;
        null !== inst && "function" === typeof inst.componentDidCatch && (update.callback = function() {
          markFailedErrorBoundaryForHotReloading(fiber);
          runWithFiberInDEV(
            errorInfo.source,
            logCaughtError,
            root2,
            fiber,
            errorInfo
          );
          "function" !== typeof getDerivedStateFromError && (null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([this]) : legacyErrorBoundariesThatAlreadyFailed.add(this));
          callComponentDidCatchInDEV(this, errorInfo);
          "function" === typeof getDerivedStateFromError || 0 === (fiber.lanes & 2) && console.error(
            "%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.",
            getComponentNameFromFiber(fiber) || "Unknown"
          );
        });
      }
      function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
        sourceFiber.flags |= 32768;
        isDevToolsPresent && restorePendingUpdaters(root2, rootRenderLanes);
        if (null !== value && "object" === typeof value && "function" === typeof value.then) {
          returnFiber = sourceFiber.alternate;
          null !== returnFiber && propagateParentContextChanges(
            returnFiber,
            sourceFiber,
            rootRenderLanes,
            true
          );
          isHydrating && (didSuspendOrErrorDEV = true);
          sourceFiber = suspenseHandlerStackCursor.current;
          if (null !== sourceFiber) {
            switch (sourceFiber.tag) {
              case 13:
                return null === shellBoundary ? renderDidSuspendDelayIfPossible() : null === sourceFiber.alternate && workInProgressRootExitStatus === RootInProgress && (workInProgressRootExitStatus = RootSuspended), sourceFiber.flags &= -257, sourceFiber.flags |= 65536, sourceFiber.lanes = rootRenderLanes, value === noopSuspenseyCommitThenable ? sourceFiber.flags |= 16384 : (returnFiber = sourceFiber.updateQueue, null === returnFiber ? sourceFiber.updateQueue = /* @__PURE__ */ new Set([value]) : returnFiber.add(value), attachPingListener(root2, value, rootRenderLanes)), false;
              case 22:
                return sourceFiber.flags |= 65536, value === noopSuspenseyCommitThenable ? sourceFiber.flags |= 16384 : (returnFiber = sourceFiber.updateQueue, null === returnFiber ? (returnFiber = {
                  transitions: null,
                  markerInstances: null,
                  retryQueue: /* @__PURE__ */ new Set([value])
                }, sourceFiber.updateQueue = returnFiber) : (sourceFiber = returnFiber.retryQueue, null === sourceFiber ? returnFiber.retryQueue = /* @__PURE__ */ new Set([value]) : sourceFiber.add(value)), attachPingListener(root2, value, rootRenderLanes)), false;
            }
            throw Error(
              "Unexpected Suspense handler tag (" + sourceFiber.tag + "). This is a bug in React."
            );
          }
          attachPingListener(root2, value, rootRenderLanes);
          renderDidSuspendDelayIfPossible();
          return false;
        }
        if (isHydrating)
          return didSuspendOrErrorDEV = true, returnFiber = suspenseHandlerStackCursor.current, null !== returnFiber ? (0 === (returnFiber.flags & 65536) && (returnFiber.flags |= 256), returnFiber.flags |= 65536, returnFiber.lanes = rootRenderLanes, value !== HydrationMismatchException && queueHydrationError(
            createCapturedValueAtFiber(
              Error(
                "There was an error while hydrating but React was able to recover by instead client rendering from the nearest Suspense boundary.",
                { cause: value }
              ),
              sourceFiber
            )
          )) : (value !== HydrationMismatchException && queueHydrationError(
            createCapturedValueAtFiber(
              Error(
                "There was an error while hydrating but React was able to recover by instead client rendering the entire root.",
                { cause: value }
              ),
              sourceFiber
            )
          ), root2 = root2.current.alternate, root2.flags |= 65536, rootRenderLanes &= -rootRenderLanes, root2.lanes |= rootRenderLanes, value = createCapturedValueAtFiber(value, sourceFiber), rootRenderLanes = createRootErrorUpdate(
            root2.stateNode,
            value,
            rootRenderLanes
          ), enqueueCapturedUpdate(root2, rootRenderLanes), workInProgressRootExitStatus !== RootSuspendedWithDelay && (workInProgressRootExitStatus = RootErrored)), false;
        var error = createCapturedValueAtFiber(
          Error(
            "There was an error during concurrent rendering but React was able to recover by instead synchronously rendering the entire root.",
            { cause: value }
          ),
          sourceFiber
        );
        null === workInProgressRootConcurrentErrors ? workInProgressRootConcurrentErrors = [error] : workInProgressRootConcurrentErrors.push(error);
        workInProgressRootExitStatus !== RootSuspendedWithDelay && (workInProgressRootExitStatus = RootErrored);
        if (null === returnFiber) return true;
        value = createCapturedValueAtFiber(value, sourceFiber);
        sourceFiber = returnFiber;
        do {
          switch (sourceFiber.tag) {
            case 3:
              return sourceFiber.flags |= 65536, root2 = rootRenderLanes & -rootRenderLanes, sourceFiber.lanes |= root2, root2 = createRootErrorUpdate(
                sourceFiber.stateNode,
                value,
                root2
              ), enqueueCapturedUpdate(sourceFiber, root2), false;
            case 1:
              if (returnFiber = sourceFiber.type, error = sourceFiber.stateNode, 0 === (sourceFiber.flags & 128) && ("function" === typeof returnFiber.getDerivedStateFromError || null !== error && "function" === typeof error.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(error))))
                return sourceFiber.flags |= 65536, rootRenderLanes &= -rootRenderLanes, sourceFiber.lanes |= rootRenderLanes, rootRenderLanes = createClassErrorUpdate(rootRenderLanes), initializeClassErrorUpdate(
                  rootRenderLanes,
                  root2,
                  sourceFiber,
                  value
                ), enqueueCapturedUpdate(sourceFiber, rootRenderLanes), false;
          }
          sourceFiber = sourceFiber.return;
        } while (null !== sourceFiber);
        return false;
      }
      function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
        workInProgress2.child = null === current2 ? mountChildFibers(workInProgress2, null, nextChildren, renderLanes2) : reconcileChildFibers(
          workInProgress2,
          current2.child,
          nextChildren,
          renderLanes2
        );
      }
      function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
        Component = Component.render;
        var ref = workInProgress2.ref;
        if ("ref" in nextProps) {
          var propsWithoutRef = {};
          for (var key in nextProps)
            "ref" !== key && (propsWithoutRef[key] = nextProps[key]);
        } else propsWithoutRef = nextProps;
        prepareToReadContext(workInProgress2);
        markComponentRenderStarted(workInProgress2);
        nextProps = renderWithHooks(
          current2,
          workInProgress2,
          Component,
          propsWithoutRef,
          ref,
          renderLanes2
        );
        key = checkDidRenderIdHook();
        markComponentRenderStopped();
        if (null !== current2 && !didReceiveUpdate)
          return bailoutHooks(current2, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        isHydrating && key && pushMaterializedTreeId(workInProgress2);
        workInProgress2.flags |= 1;
        reconcileChildren(current2, workInProgress2, nextProps, renderLanes2);
        return workInProgress2.child;
      }
      function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
        if (null === current2) {
          var type = Component.type;
          if ("function" === typeof type && !shouldConstruct(type) && void 0 === type.defaultProps && null === Component.compare)
            return Component = resolveFunctionForHotReloading(type), workInProgress2.tag = 15, workInProgress2.type = Component, validateFunctionComponentInDev(workInProgress2, type), updateSimpleMemoComponent(
              current2,
              workInProgress2,
              Component,
              nextProps,
              renderLanes2
            );
          current2 = createFiberFromTypeAndProps(
            Component.type,
            null,
            nextProps,
            workInProgress2,
            workInProgress2.mode,
            renderLanes2
          );
          current2.ref = workInProgress2.ref;
          current2.return = workInProgress2;
          return workInProgress2.child = current2;
        }
        type = current2.child;
        if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
          var prevProps = type.memoizedProps;
          Component = Component.compare;
          Component = null !== Component ? Component : shallowEqual;
          if (Component(prevProps, nextProps) && current2.ref === workInProgress2.ref)
            return bailoutOnAlreadyFinishedWork(
              current2,
              workInProgress2,
              renderLanes2
            );
        }
        workInProgress2.flags |= 1;
        current2 = createWorkInProgress(type, nextProps);
        current2.ref = workInProgress2.ref;
        current2.return = workInProgress2;
        return workInProgress2.child = current2;
      }
      function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
        if (null !== current2) {
          var prevProps = current2.memoizedProps;
          if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type)
            if (didReceiveUpdate = false, workInProgress2.pendingProps = nextProps = prevProps, checkScheduledUpdateOrContext(current2, renderLanes2))
              0 !== (current2.flags & 131072) && (didReceiveUpdate = true);
            else
              return workInProgress2.lanes = current2.lanes, bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        return updateFunctionComponent(
          current2,
          workInProgress2,
          Component,
          nextProps,
          renderLanes2
        );
      }
      function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps, nextChildren = nextProps.children, prevState = null !== current2 ? current2.memoizedState : null;
        if ("hidden" === nextProps.mode) {
          if (0 !== (workInProgress2.flags & 128)) {
            nextProps = null !== prevState ? prevState.baseLanes | renderLanes2 : renderLanes2;
            if (null !== current2) {
              nextChildren = workInProgress2.child = current2.child;
              for (prevState = 0; null !== nextChildren; )
                prevState = prevState | nextChildren.lanes | nextChildren.childLanes, nextChildren = nextChildren.sibling;
              workInProgress2.childLanes = prevState & ~nextProps;
            } else workInProgress2.childLanes = 0, workInProgress2.child = null;
            return deferHiddenOffscreenComponent(
              current2,
              workInProgress2,
              nextProps,
              renderLanes2
            );
          }
          if (0 !== (renderLanes2 & 536870912))
            workInProgress2.memoizedState = { baseLanes: 0, cachePool: null }, null !== current2 && pushTransition(
              workInProgress2,
              null !== prevState ? prevState.cachePool : null
            ), null !== prevState ? pushHiddenContext(workInProgress2, prevState) : reuseHiddenContextOnStack(workInProgress2), pushOffscreenSuspenseHandler(workInProgress2);
          else
            return workInProgress2.lanes = workInProgress2.childLanes = 536870912, deferHiddenOffscreenComponent(
              current2,
              workInProgress2,
              null !== prevState ? prevState.baseLanes | renderLanes2 : renderLanes2,
              renderLanes2
            );
        } else
          null !== prevState ? (pushTransition(workInProgress2, prevState.cachePool), pushHiddenContext(workInProgress2, prevState), reuseSuspenseHandlerOnStack(workInProgress2), workInProgress2.memoizedState = null) : (null !== current2 && pushTransition(workInProgress2, null), reuseHiddenContextOnStack(workInProgress2), reuseSuspenseHandlerOnStack(workInProgress2));
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function deferHiddenOffscreenComponent(current2, workInProgress2, nextBaseLanes, renderLanes2) {
        var JSCompiler_inline_result = peekCacheFromPool();
        JSCompiler_inline_result = null === JSCompiler_inline_result ? null : {
          parent: CacheContext._currentValue,
          pool: JSCompiler_inline_result
        };
        workInProgress2.memoizedState = {
          baseLanes: nextBaseLanes,
          cachePool: JSCompiler_inline_result
        };
        null !== current2 && pushTransition(workInProgress2, null);
        reuseHiddenContextOnStack(workInProgress2);
        pushOffscreenSuspenseHandler(workInProgress2);
        null !== current2 && propagateParentContextChanges(current2, workInProgress2, renderLanes2, true);
        return null;
      }
      function markRef(current2, workInProgress2) {
        var ref = workInProgress2.ref;
        if (null === ref)
          null !== current2 && null !== current2.ref && (workInProgress2.flags |= 4194816);
        else {
          if ("function" !== typeof ref && "object" !== typeof ref)
            throw Error(
              "Expected ref to be a function, an object returned by React.createRef(), or undefined/null."
            );
          if (null === current2 || current2.ref !== ref)
            workInProgress2.flags |= 4194816;
        }
      }
      function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
        if (Component.prototype && "function" === typeof Component.prototype.render) {
          var componentName2 = getComponentNameFromType(Component) || "Unknown";
          didWarnAboutBadClass[componentName2] || (console.error(
            "The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.",
            componentName2,
            componentName2
          ), didWarnAboutBadClass[componentName2] = true);
        }
        workInProgress2.mode & StrictLegacyMode && ReactStrictModeWarnings.recordLegacyContextWarning(
          workInProgress2,
          null
        );
        null === current2 && (validateFunctionComponentInDev(workInProgress2, workInProgress2.type), Component.contextTypes && (componentName2 = getComponentNameFromType(Component) || "Unknown", didWarnAboutContextTypes[componentName2] || (didWarnAboutContextTypes[componentName2] = true, console.error(
          "%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with React.useContext() instead. (https://react.dev/link/legacy-context)",
          componentName2
        ))));
        prepareToReadContext(workInProgress2);
        markComponentRenderStarted(workInProgress2);
        Component = renderWithHooks(
          current2,
          workInProgress2,
          Component,
          nextProps,
          void 0,
          renderLanes2
        );
        nextProps = checkDidRenderIdHook();
        markComponentRenderStopped();
        if (null !== current2 && !didReceiveUpdate)
          return bailoutHooks(current2, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        isHydrating && nextProps && pushMaterializedTreeId(workInProgress2);
        workInProgress2.flags |= 1;
        reconcileChildren(current2, workInProgress2, Component, renderLanes2);
        return workInProgress2.child;
      }
      function replayFunctionComponent(current2, workInProgress2, nextProps, Component, secondArg, renderLanes2) {
        prepareToReadContext(workInProgress2);
        markComponentRenderStarted(workInProgress2);
        hookTypesUpdateIndexDev = -1;
        ignorePreviousDependencies = null !== current2 && current2.type !== workInProgress2.type;
        workInProgress2.updateQueue = null;
        nextProps = renderWithHooksAgain(
          workInProgress2,
          Component,
          nextProps,
          secondArg
        );
        finishRenderingHooks(current2, workInProgress2);
        Component = checkDidRenderIdHook();
        markComponentRenderStopped();
        if (null !== current2 && !didReceiveUpdate)
          return bailoutHooks(current2, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        isHydrating && Component && pushMaterializedTreeId(workInProgress2);
        workInProgress2.flags |= 1;
        reconcileChildren(current2, workInProgress2, nextProps, renderLanes2);
        return workInProgress2.child;
      }
      function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
        switch (shouldErrorImpl(workInProgress2)) {
          case false:
            var _instance = workInProgress2.stateNode, state = new workInProgress2.type(
              workInProgress2.memoizedProps,
              _instance.context
            ).state;
            _instance.updater.enqueueSetState(_instance, state, null);
            break;
          case true:
            workInProgress2.flags |= 128;
            workInProgress2.flags |= 65536;
            _instance = Error("Simulated error coming from DevTools");
            var lane = renderLanes2 & -renderLanes2;
            workInProgress2.lanes |= lane;
            state = workInProgressRoot;
            if (null === state)
              throw Error(
                "Expected a work-in-progress root. This is a bug in React. Please file an issue."
              );
            lane = createClassErrorUpdate(lane);
            initializeClassErrorUpdate(
              lane,
              state,
              workInProgress2,
              createCapturedValueAtFiber(_instance, workInProgress2)
            );
            enqueueCapturedUpdate(workInProgress2, lane);
        }
        prepareToReadContext(workInProgress2);
        if (null === workInProgress2.stateNode) {
          state = emptyContextObject;
          _instance = Component.contextType;
          "contextType" in Component && null !== _instance && (void 0 === _instance || _instance.$$typeof !== REACT_CONTEXT_TYPE) && !didWarnAboutInvalidateContextType.has(Component) && (didWarnAboutInvalidateContextType.add(Component), lane = void 0 === _instance ? " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file." : "object" !== typeof _instance ? " However, it is set to a " + typeof _instance + "." : _instance.$$typeof === REACT_CONSUMER_TYPE ? " Did you accidentally pass the Context.Consumer instead?" : " However, it is set to an object with keys {" + Object.keys(_instance).join(", ") + "}.", console.error(
            "%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s",
            getComponentNameFromType(Component) || "Component",
            lane
          ));
          "object" === typeof _instance && null !== _instance && (state = readContext(_instance));
          _instance = new Component(nextProps, state);
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              _instance = new Component(nextProps, state);
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          state = workInProgress2.memoizedState = null !== _instance.state && void 0 !== _instance.state ? _instance.state : null;
          _instance.updater = classComponentUpdater;
          workInProgress2.stateNode = _instance;
          _instance._reactInternals = workInProgress2;
          _instance._reactInternalInstance = fakeInternalInstance;
          "function" === typeof Component.getDerivedStateFromProps && null === state && (state = getComponentNameFromType(Component) || "Component", didWarnAboutUninitializedState.has(state) || (didWarnAboutUninitializedState.add(state), console.error(
            "`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.",
            state,
            null === _instance.state ? "null" : "undefined",
            state
          )));
          if ("function" === typeof Component.getDerivedStateFromProps || "function" === typeof _instance.getSnapshotBeforeUpdate) {
            var foundWillUpdateName = lane = state = null;
            "function" === typeof _instance.componentWillMount && true !== _instance.componentWillMount.__suppressDeprecationWarning ? state = "componentWillMount" : "function" === typeof _instance.UNSAFE_componentWillMount && (state = "UNSAFE_componentWillMount");
            "function" === typeof _instance.componentWillReceiveProps && true !== _instance.componentWillReceiveProps.__suppressDeprecationWarning ? lane = "componentWillReceiveProps" : "function" === typeof _instance.UNSAFE_componentWillReceiveProps && (lane = "UNSAFE_componentWillReceiveProps");
            "function" === typeof _instance.componentWillUpdate && true !== _instance.componentWillUpdate.__suppressDeprecationWarning ? foundWillUpdateName = "componentWillUpdate" : "function" === typeof _instance.UNSAFE_componentWillUpdate && (foundWillUpdateName = "UNSAFE_componentWillUpdate");
            if (null !== state || null !== lane || null !== foundWillUpdateName) {
              _instance = getComponentNameFromType(Component) || "Component";
              var newApiName = "function" === typeof Component.getDerivedStateFromProps ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
              didWarnAboutLegacyLifecyclesAndDerivedState.has(_instance) || (didWarnAboutLegacyLifecyclesAndDerivedState.add(_instance), console.error(
                "Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://react.dev/link/unsafe-component-lifecycles",
                _instance,
                newApiName,
                null !== state ? "\n  " + state : "",
                null !== lane ? "\n  " + lane : "",
                null !== foundWillUpdateName ? "\n  " + foundWillUpdateName : ""
              ));
            }
          }
          _instance = workInProgress2.stateNode;
          state = getComponentNameFromType(Component) || "Component";
          _instance.render || (Component.prototype && "function" === typeof Component.prototype.render ? console.error(
            "No `render` method found on the %s instance: did you accidentally return an object from the constructor?",
            state
          ) : console.error(
            "No `render` method found on the %s instance: you may have forgotten to define `render`.",
            state
          ));
          !_instance.getInitialState || _instance.getInitialState.isReactClassApproved || _instance.state || console.error(
            "getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?",
            state
          );
          _instance.getDefaultProps && !_instance.getDefaultProps.isReactClassApproved && console.error(
            "getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.",
            state
          );
          _instance.contextType && console.error(
            "contextType was defined as an instance property on %s. Use a static property to define contextType instead.",
            state
          );
          Component.childContextTypes && !didWarnAboutChildContextTypes.has(Component) && (didWarnAboutChildContextTypes.add(Component), console.error(
            "%s uses the legacy childContextTypes API which was removed in React 19. Use React.createContext() instead. (https://react.dev/link/legacy-context)",
            state
          ));
          Component.contextTypes && !didWarnAboutContextTypes$1.has(Component) && (didWarnAboutContextTypes$1.add(Component), console.error(
            "%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with static contextType instead. (https://react.dev/link/legacy-context)",
            state
          ));
          "function" === typeof _instance.componentShouldUpdate && console.error(
            "%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",
            state
          );
          Component.prototype && Component.prototype.isPureReactComponent && "undefined" !== typeof _instance.shouldComponentUpdate && console.error(
            "%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.",
            getComponentNameFromType(Component) || "A pure component"
          );
          "function" === typeof _instance.componentDidUnmount && console.error(
            "%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?",
            state
          );
          "function" === typeof _instance.componentDidReceiveProps && console.error(
            "%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().",
            state
          );
          "function" === typeof _instance.componentWillRecieveProps && console.error(
            "%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",
            state
          );
          "function" === typeof _instance.UNSAFE_componentWillRecieveProps && console.error(
            "%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?",
            state
          );
          lane = _instance.props !== nextProps;
          void 0 !== _instance.props && lane && console.error(
            "When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.",
            state
          );
          _instance.defaultProps && console.error(
            "Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.",
            state,
            state
          );
          "function" !== typeof _instance.getSnapshotBeforeUpdate || "function" === typeof _instance.componentDidUpdate || didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(Component) || (didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(Component), console.error(
            "%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.",
            getComponentNameFromType(Component)
          ));
          "function" === typeof _instance.getDerivedStateFromProps && console.error(
            "%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.",
            state
          );
          "function" === typeof _instance.getDerivedStateFromError && console.error(
            "%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.",
            state
          );
          "function" === typeof Component.getSnapshotBeforeUpdate && console.error(
            "%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.",
            state
          );
          (lane = _instance.state) && ("object" !== typeof lane || isArrayImpl(lane)) && console.error("%s.state: must be set to an object or null", state);
          "function" === typeof _instance.getChildContext && "object" !== typeof Component.childContextTypes && console.error(
            "%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().",
            state
          );
          _instance = workInProgress2.stateNode;
          _instance.props = nextProps;
          _instance.state = workInProgress2.memoizedState;
          _instance.refs = {};
          initializeUpdateQueue(workInProgress2);
          state = Component.contextType;
          _instance.context = "object" === typeof state && null !== state ? readContext(state) : emptyContextObject;
          _instance.state === nextProps && (state = getComponentNameFromType(Component) || "Component", didWarnAboutDirectlyAssigningPropsToState.has(state) || (didWarnAboutDirectlyAssigningPropsToState.add(state), console.error(
            "%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.",
            state
          )));
          workInProgress2.mode & StrictLegacyMode && ReactStrictModeWarnings.recordLegacyContextWarning(
            workInProgress2,
            _instance
          );
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(
            workInProgress2,
            _instance
          );
          _instance.state = workInProgress2.memoizedState;
          state = Component.getDerivedStateFromProps;
          "function" === typeof state && (applyDerivedStateFromProps(
            workInProgress2,
            Component,
            state,
            nextProps
          ), _instance.state = workInProgress2.memoizedState);
          "function" === typeof Component.getDerivedStateFromProps || "function" === typeof _instance.getSnapshotBeforeUpdate || "function" !== typeof _instance.UNSAFE_componentWillMount && "function" !== typeof _instance.componentWillMount || (state = _instance.state, "function" === typeof _instance.componentWillMount && _instance.componentWillMount(), "function" === typeof _instance.UNSAFE_componentWillMount && _instance.UNSAFE_componentWillMount(), state !== _instance.state && (console.error(
            "%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",
            getComponentNameFromFiber(workInProgress2) || "Component"
          ), classComponentUpdater.enqueueReplaceState(
            _instance,
            _instance.state,
            null
          )), processUpdateQueue(workInProgress2, nextProps, _instance, renderLanes2), suspendIfUpdateReadFromEntangledAsyncAction(), _instance.state = workInProgress2.memoizedState);
          "function" === typeof _instance.componentDidMount && (workInProgress2.flags |= 4194308);
          (workInProgress2.mode & StrictEffectsMode) !== NoMode && (workInProgress2.flags |= 134217728);
          _instance = true;
        } else if (null === current2) {
          _instance = workInProgress2.stateNode;
          var unresolvedOldProps = workInProgress2.memoizedProps;
          lane = resolveClassComponentProps(Component, unresolvedOldProps);
          _instance.props = lane;
          var oldContext = _instance.context;
          foundWillUpdateName = Component.contextType;
          state = emptyContextObject;
          "object" === typeof foundWillUpdateName && null !== foundWillUpdateName && (state = readContext(foundWillUpdateName));
          newApiName = Component.getDerivedStateFromProps;
          foundWillUpdateName = "function" === typeof newApiName || "function" === typeof _instance.getSnapshotBeforeUpdate;
          unresolvedOldProps = workInProgress2.pendingProps !== unresolvedOldProps;
          foundWillUpdateName || "function" !== typeof _instance.UNSAFE_componentWillReceiveProps && "function" !== typeof _instance.componentWillReceiveProps || (unresolvedOldProps || oldContext !== state) && callComponentWillReceiveProps(
            workInProgress2,
            _instance,
            nextProps,
            state
          );
          hasForceUpdate = false;
          var oldState = workInProgress2.memoizedState;
          _instance.state = oldState;
          processUpdateQueue(workInProgress2, nextProps, _instance, renderLanes2);
          suspendIfUpdateReadFromEntangledAsyncAction();
          oldContext = workInProgress2.memoizedState;
          unresolvedOldProps || oldState !== oldContext || hasForceUpdate ? ("function" === typeof newApiName && (applyDerivedStateFromProps(
            workInProgress2,
            Component,
            newApiName,
            nextProps
          ), oldContext = workInProgress2.memoizedState), (lane = hasForceUpdate || checkShouldComponentUpdate(
            workInProgress2,
            Component,
            lane,
            nextProps,
            oldState,
            oldContext,
            state
          )) ? (foundWillUpdateName || "function" !== typeof _instance.UNSAFE_componentWillMount && "function" !== typeof _instance.componentWillMount || ("function" === typeof _instance.componentWillMount && _instance.componentWillMount(), "function" === typeof _instance.UNSAFE_componentWillMount && _instance.UNSAFE_componentWillMount()), "function" === typeof _instance.componentDidMount && (workInProgress2.flags |= 4194308), (workInProgress2.mode & StrictEffectsMode) !== NoMode && (workInProgress2.flags |= 134217728)) : ("function" === typeof _instance.componentDidMount && (workInProgress2.flags |= 4194308), (workInProgress2.mode & StrictEffectsMode) !== NoMode && (workInProgress2.flags |= 134217728), workInProgress2.memoizedProps = nextProps, workInProgress2.memoizedState = oldContext), _instance.props = nextProps, _instance.state = oldContext, _instance.context = state, _instance = lane) : ("function" === typeof _instance.componentDidMount && (workInProgress2.flags |= 4194308), (workInProgress2.mode & StrictEffectsMode) !== NoMode && (workInProgress2.flags |= 134217728), _instance = false);
        } else {
          _instance = workInProgress2.stateNode;
          cloneUpdateQueue(current2, workInProgress2);
          state = workInProgress2.memoizedProps;
          foundWillUpdateName = resolveClassComponentProps(Component, state);
          _instance.props = foundWillUpdateName;
          newApiName = workInProgress2.pendingProps;
          oldState = _instance.context;
          oldContext = Component.contextType;
          lane = emptyContextObject;
          "object" === typeof oldContext && null !== oldContext && (lane = readContext(oldContext));
          unresolvedOldProps = Component.getDerivedStateFromProps;
          (oldContext = "function" === typeof unresolvedOldProps || "function" === typeof _instance.getSnapshotBeforeUpdate) || "function" !== typeof _instance.UNSAFE_componentWillReceiveProps && "function" !== typeof _instance.componentWillReceiveProps || (state !== newApiName || oldState !== lane) && callComponentWillReceiveProps(
            workInProgress2,
            _instance,
            nextProps,
            lane
          );
          hasForceUpdate = false;
          oldState = workInProgress2.memoizedState;
          _instance.state = oldState;
          processUpdateQueue(workInProgress2, nextProps, _instance, renderLanes2);
          suspendIfUpdateReadFromEntangledAsyncAction();
          var newState = workInProgress2.memoizedState;
          state !== newApiName || oldState !== newState || hasForceUpdate || null !== current2 && null !== current2.dependencies && checkIfContextChanged(current2.dependencies) ? ("function" === typeof unresolvedOldProps && (applyDerivedStateFromProps(
            workInProgress2,
            Component,
            unresolvedOldProps,
            nextProps
          ), newState = workInProgress2.memoizedState), (foundWillUpdateName = hasForceUpdate || checkShouldComponentUpdate(
            workInProgress2,
            Component,
            foundWillUpdateName,
            nextProps,
            oldState,
            newState,
            lane
          ) || null !== current2 && null !== current2.dependencies && checkIfContextChanged(current2.dependencies)) ? (oldContext || "function" !== typeof _instance.UNSAFE_componentWillUpdate && "function" !== typeof _instance.componentWillUpdate || ("function" === typeof _instance.componentWillUpdate && _instance.componentWillUpdate(nextProps, newState, lane), "function" === typeof _instance.UNSAFE_componentWillUpdate && _instance.UNSAFE_componentWillUpdate(
            nextProps,
            newState,
            lane
          )), "function" === typeof _instance.componentDidUpdate && (workInProgress2.flags |= 4), "function" === typeof _instance.getSnapshotBeforeUpdate && (workInProgress2.flags |= 1024)) : ("function" !== typeof _instance.componentDidUpdate || state === current2.memoizedProps && oldState === current2.memoizedState || (workInProgress2.flags |= 4), "function" !== typeof _instance.getSnapshotBeforeUpdate || state === current2.memoizedProps && oldState === current2.memoizedState || (workInProgress2.flags |= 1024), workInProgress2.memoizedProps = nextProps, workInProgress2.memoizedState = newState), _instance.props = nextProps, _instance.state = newState, _instance.context = lane, _instance = foundWillUpdateName) : ("function" !== typeof _instance.componentDidUpdate || state === current2.memoizedProps && oldState === current2.memoizedState || (workInProgress2.flags |= 4), "function" !== typeof _instance.getSnapshotBeforeUpdate || state === current2.memoizedProps && oldState === current2.memoizedState || (workInProgress2.flags |= 1024), _instance = false);
        }
        lane = _instance;
        markRef(current2, workInProgress2);
        state = 0 !== (workInProgress2.flags & 128);
        if (lane || state) {
          lane = workInProgress2.stateNode;
          setCurrentFiber(workInProgress2);
          if (state && "function" !== typeof Component.getDerivedStateFromError)
            Component = null, profilerStartTime = -1;
          else {
            markComponentRenderStarted(workInProgress2);
            Component = callRenderInDEV(lane);
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                callRenderInDEV(lane);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            markComponentRenderStopped();
          }
          workInProgress2.flags |= 1;
          null !== current2 && state ? (workInProgress2.child = reconcileChildFibers(
            workInProgress2,
            current2.child,
            null,
            renderLanes2
          ), workInProgress2.child = reconcileChildFibers(
            workInProgress2,
            null,
            Component,
            renderLanes2
          )) : reconcileChildren(current2, workInProgress2, Component, renderLanes2);
          workInProgress2.memoizedState = lane.state;
          current2 = workInProgress2.child;
        } else
          current2 = bailoutOnAlreadyFinishedWork(
            current2,
            workInProgress2,
            renderLanes2
          );
        renderLanes2 = workInProgress2.stateNode;
        _instance && renderLanes2.props !== nextProps && (didWarnAboutReassigningProps || console.error(
          "It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.",
          getComponentNameFromFiber(workInProgress2) || "a component"
        ), didWarnAboutReassigningProps = true);
        return current2;
      }
      function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2) {
        resetHydrationState();
        workInProgress2.flags |= 256;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function validateFunctionComponentInDev(workInProgress2, Component) {
        Component && Component.childContextTypes && console.error(
          "childContextTypes cannot be defined on a function component.\n  %s.childContextTypes = ...",
          Component.displayName || Component.name || "Component"
        );
        "function" === typeof Component.getDerivedStateFromProps && (workInProgress2 = getComponentNameFromType(Component) || "Unknown", didWarnAboutGetDerivedStateOnFunctionComponent[workInProgress2] || (console.error(
          "%s: Function components do not support getDerivedStateFromProps.",
          workInProgress2
        ), didWarnAboutGetDerivedStateOnFunctionComponent[workInProgress2] = true));
        "object" === typeof Component.contextType && null !== Component.contextType && (Component = getComponentNameFromType(Component) || "Unknown", didWarnAboutContextTypeOnFunctionComponent[Component] || (console.error(
          "%s: Function components do not support contextType.",
          Component
        ), didWarnAboutContextTypeOnFunctionComponent[Component] = true));
      }
      function mountSuspenseOffscreenState(renderLanes2) {
        return { baseLanes: renderLanes2, cachePool: getSuspendedCache() };
      }
      function getRemainingWorkInPrimaryTree(current2, primaryTreeDidDefer, renderLanes2) {
        current2 = null !== current2 ? current2.childLanes & ~renderLanes2 : 0;
        primaryTreeDidDefer && (current2 |= workInProgressDeferredLane);
        return current2;
      }
      function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
        var JSCompiler_object_inline_digest_2451;
        var JSCompiler_object_inline_stack_2452 = workInProgress2.pendingProps;
        shouldSuspendImpl(workInProgress2) && (workInProgress2.flags |= 128);
        var JSCompiler_object_inline_componentStack_2453 = false;
        var didSuspend = 0 !== (workInProgress2.flags & 128);
        (JSCompiler_object_inline_digest_2451 = didSuspend) || (JSCompiler_object_inline_digest_2451 = null !== current2 && null === current2.memoizedState ? false : 0 !== (suspenseStackCursor.current & ForceSuspenseFallback));
        JSCompiler_object_inline_digest_2451 && (JSCompiler_object_inline_componentStack_2453 = true, workInProgress2.flags &= -129);
        JSCompiler_object_inline_digest_2451 = 0 !== (workInProgress2.flags & 32);
        workInProgress2.flags &= -33;
        if (null === current2) {
          if (isHydrating) {
            JSCompiler_object_inline_componentStack_2453 ? pushPrimaryTreeSuspenseHandler(workInProgress2) : reuseSuspenseHandlerOnStack(workInProgress2);
            if (isHydrating) {
              var JSCompiler_object_inline_message_2450 = nextHydratableInstance;
              var JSCompiler_temp;
              if (!(JSCompiler_temp = !JSCompiler_object_inline_message_2450)) {
                c: {
                  var instance = JSCompiler_object_inline_message_2450;
                  for (JSCompiler_temp = rootOrSingletonContext; 8 !== instance.nodeType; ) {
                    if (!JSCompiler_temp) {
                      JSCompiler_temp = null;
                      break c;
                    }
                    instance = getNextHydratable(instance.nextSibling);
                    if (null === instance) {
                      JSCompiler_temp = null;
                      break c;
                    }
                  }
                  JSCompiler_temp = instance;
                }
                null !== JSCompiler_temp ? (warnIfNotHydrating(), workInProgress2.memoizedState = {
                  dehydrated: JSCompiler_temp,
                  treeContext: null !== treeContextProvider ? { id: treeContextId, overflow: treeContextOverflow } : null,
                  retryLane: 536870912,
                  hydrationErrors: null
                }, instance = createFiber(18, null, null, NoMode), instance.stateNode = JSCompiler_temp, instance.return = workInProgress2, workInProgress2.child = instance, hydrationParentFiber = workInProgress2, nextHydratableInstance = null, JSCompiler_temp = true) : JSCompiler_temp = false;
                JSCompiler_temp = !JSCompiler_temp;
              }
              JSCompiler_temp && (warnNonHydratedInstance(
                workInProgress2,
                JSCompiler_object_inline_message_2450
              ), throwOnHydrationMismatch(workInProgress2));
            }
            JSCompiler_object_inline_message_2450 = workInProgress2.memoizedState;
            if (null !== JSCompiler_object_inline_message_2450 && (JSCompiler_object_inline_message_2450 = JSCompiler_object_inline_message_2450.dehydrated, null !== JSCompiler_object_inline_message_2450))
              return isSuspenseInstanceFallback(JSCompiler_object_inline_message_2450) ? workInProgress2.lanes = 32 : workInProgress2.lanes = 536870912, null;
            popSuspenseHandler(workInProgress2);
          }
          JSCompiler_object_inline_message_2450 = JSCompiler_object_inline_stack_2452.children;
          JSCompiler_object_inline_stack_2452 = JSCompiler_object_inline_stack_2452.fallback;
          if (JSCompiler_object_inline_componentStack_2453)
            return reuseSuspenseHandlerOnStack(workInProgress2), JSCompiler_object_inline_componentStack_2453 = workInProgress2.mode, JSCompiler_object_inline_message_2450 = mountWorkInProgressOffscreenFiber(
              {
                mode: "hidden",
                children: JSCompiler_object_inline_message_2450
              },
              JSCompiler_object_inline_componentStack_2453
            ), JSCompiler_object_inline_stack_2452 = createFiberFromFragment(
              JSCompiler_object_inline_stack_2452,
              JSCompiler_object_inline_componentStack_2453,
              renderLanes2,
              null
            ), JSCompiler_object_inline_message_2450.return = workInProgress2, JSCompiler_object_inline_stack_2452.return = workInProgress2, JSCompiler_object_inline_message_2450.sibling = JSCompiler_object_inline_stack_2452, workInProgress2.child = JSCompiler_object_inline_message_2450, JSCompiler_object_inline_componentStack_2453 = workInProgress2.child, JSCompiler_object_inline_componentStack_2453.memoizedState = mountSuspenseOffscreenState(renderLanes2), JSCompiler_object_inline_componentStack_2453.childLanes = getRemainingWorkInPrimaryTree(
              current2,
              JSCompiler_object_inline_digest_2451,
              renderLanes2
            ), workInProgress2.memoizedState = SUSPENDED_MARKER, JSCompiler_object_inline_stack_2452;
          pushPrimaryTreeSuspenseHandler(workInProgress2);
          return mountSuspensePrimaryChildren(
            workInProgress2,
            JSCompiler_object_inline_message_2450
          );
        }
        var prevState = current2.memoizedState;
        if (null !== prevState && (JSCompiler_object_inline_message_2450 = prevState.dehydrated, null !== JSCompiler_object_inline_message_2450)) {
          if (didSuspend)
            workInProgress2.flags & 256 ? (pushPrimaryTreeSuspenseHandler(workInProgress2), workInProgress2.flags &= -257, workInProgress2 = retrySuspenseComponentWithoutHydrating(
              current2,
              workInProgress2,
              renderLanes2
            )) : null !== workInProgress2.memoizedState ? (reuseSuspenseHandlerOnStack(workInProgress2), workInProgress2.child = current2.child, workInProgress2.flags |= 128, workInProgress2 = null) : (reuseSuspenseHandlerOnStack(workInProgress2), JSCompiler_object_inline_componentStack_2453 = JSCompiler_object_inline_stack_2452.fallback, JSCompiler_object_inline_message_2450 = workInProgress2.mode, JSCompiler_object_inline_stack_2452 = mountWorkInProgressOffscreenFiber(
              {
                mode: "visible",
                children: JSCompiler_object_inline_stack_2452.children
              },
              JSCompiler_object_inline_message_2450
            ), JSCompiler_object_inline_componentStack_2453 = createFiberFromFragment(
              JSCompiler_object_inline_componentStack_2453,
              JSCompiler_object_inline_message_2450,
              renderLanes2,
              null
            ), JSCompiler_object_inline_componentStack_2453.flags |= 2, JSCompiler_object_inline_stack_2452.return = workInProgress2, JSCompiler_object_inline_componentStack_2453.return = workInProgress2, JSCompiler_object_inline_stack_2452.sibling = JSCompiler_object_inline_componentStack_2453, workInProgress2.child = JSCompiler_object_inline_stack_2452, reconcileChildFibers(
              workInProgress2,
              current2.child,
              null,
              renderLanes2
            ), JSCompiler_object_inline_stack_2452 = workInProgress2.child, JSCompiler_object_inline_stack_2452.memoizedState = mountSuspenseOffscreenState(renderLanes2), JSCompiler_object_inline_stack_2452.childLanes = getRemainingWorkInPrimaryTree(
              current2,
              JSCompiler_object_inline_digest_2451,
              renderLanes2
            ), workInProgress2.memoizedState = SUSPENDED_MARKER, workInProgress2 = JSCompiler_object_inline_componentStack_2453);
          else if (pushPrimaryTreeSuspenseHandler(workInProgress2), isHydrating && console.error(
            "We should not be hydrating here. This is a bug in React. Please file a bug."
          ), isSuspenseInstanceFallback(JSCompiler_object_inline_message_2450)) {
            JSCompiler_object_inline_digest_2451 = JSCompiler_object_inline_message_2450.nextSibling && JSCompiler_object_inline_message_2450.nextSibling.dataset;
            if (JSCompiler_object_inline_digest_2451) {
              JSCompiler_temp = JSCompiler_object_inline_digest_2451.dgst;
              var message = JSCompiler_object_inline_digest_2451.msg;
              instance = JSCompiler_object_inline_digest_2451.stck;
              var componentStack = JSCompiler_object_inline_digest_2451.cstck;
            }
            JSCompiler_object_inline_message_2450 = message;
            JSCompiler_object_inline_digest_2451 = JSCompiler_temp;
            JSCompiler_object_inline_stack_2452 = instance;
            JSCompiler_temp = JSCompiler_object_inline_componentStack_2453 = componentStack;
            JSCompiler_object_inline_componentStack_2453 = JSCompiler_object_inline_message_2450 ? Error(JSCompiler_object_inline_message_2450) : Error(
              "The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering."
            );
            JSCompiler_object_inline_componentStack_2453.stack = JSCompiler_object_inline_stack_2452 || "";
            JSCompiler_object_inline_componentStack_2453.digest = JSCompiler_object_inline_digest_2451;
            JSCompiler_object_inline_digest_2451 = void 0 === JSCompiler_temp ? null : JSCompiler_temp;
            JSCompiler_object_inline_stack_2452 = {
              value: JSCompiler_object_inline_componentStack_2453,
              source: null,
              stack: JSCompiler_object_inline_digest_2451
            };
            "string" === typeof JSCompiler_object_inline_digest_2451 && CapturedStacks.set(
              JSCompiler_object_inline_componentStack_2453,
              JSCompiler_object_inline_stack_2452
            );
            queueHydrationError(JSCompiler_object_inline_stack_2452);
            workInProgress2 = retrySuspenseComponentWithoutHydrating(
              current2,
              workInProgress2,
              renderLanes2
            );
          } else if (didReceiveUpdate || propagateParentContextChanges(
            current2,
            workInProgress2,
            renderLanes2,
            false
          ), JSCompiler_object_inline_digest_2451 = 0 !== (renderLanes2 & current2.childLanes), didReceiveUpdate || JSCompiler_object_inline_digest_2451) {
            JSCompiler_object_inline_digest_2451 = workInProgressRoot;
            if (null !== JSCompiler_object_inline_digest_2451 && (JSCompiler_object_inline_stack_2452 = renderLanes2 & -renderLanes2, JSCompiler_object_inline_stack_2452 = 0 !== (JSCompiler_object_inline_stack_2452 & 42) ? 1 : getBumpedLaneForHydrationByLane(
              JSCompiler_object_inline_stack_2452
            ), JSCompiler_object_inline_stack_2452 = 0 !== (JSCompiler_object_inline_stack_2452 & (JSCompiler_object_inline_digest_2451.suspendedLanes | renderLanes2)) ? 0 : JSCompiler_object_inline_stack_2452, 0 !== JSCompiler_object_inline_stack_2452 && JSCompiler_object_inline_stack_2452 !== prevState.retryLane))
              throw prevState.retryLane = JSCompiler_object_inline_stack_2452, enqueueConcurrentRenderForLane(
                current2,
                JSCompiler_object_inline_stack_2452
              ), scheduleUpdateOnFiber(
                JSCompiler_object_inline_digest_2451,
                current2,
                JSCompiler_object_inline_stack_2452
              ), SelectiveHydrationException;
            JSCompiler_object_inline_message_2450.data === SUSPENSE_PENDING_START_DATA || renderDidSuspendDelayIfPossible();
            workInProgress2 = retrySuspenseComponentWithoutHydrating(
              current2,
              workInProgress2,
              renderLanes2
            );
          } else
            JSCompiler_object_inline_message_2450.data === SUSPENSE_PENDING_START_DATA ? (workInProgress2.flags |= 192, workInProgress2.child = current2.child, workInProgress2 = null) : (current2 = prevState.treeContext, nextHydratableInstance = getNextHydratable(
              JSCompiler_object_inline_message_2450.nextSibling
            ), hydrationParentFiber = workInProgress2, isHydrating = true, hydrationErrors = null, didSuspendOrErrorDEV = false, hydrationDiffRootDEV = null, rootOrSingletonContext = false, null !== current2 && (warnIfNotHydrating(), idStack[idStackIndex++] = treeContextId, idStack[idStackIndex++] = treeContextOverflow, idStack[idStackIndex++] = treeContextProvider, treeContextId = current2.id, treeContextOverflow = current2.overflow, treeContextProvider = workInProgress2), workInProgress2 = mountSuspensePrimaryChildren(
              workInProgress2,
              JSCompiler_object_inline_stack_2452.children
            ), workInProgress2.flags |= 4096);
          return workInProgress2;
        }
        if (JSCompiler_object_inline_componentStack_2453)
          return reuseSuspenseHandlerOnStack(workInProgress2), JSCompiler_object_inline_componentStack_2453 = JSCompiler_object_inline_stack_2452.fallback, JSCompiler_object_inline_message_2450 = workInProgress2.mode, JSCompiler_temp = current2.child, instance = JSCompiler_temp.sibling, JSCompiler_object_inline_stack_2452 = createWorkInProgress(
            JSCompiler_temp,
            {
              mode: "hidden",
              children: JSCompiler_object_inline_stack_2452.children
            }
          ), JSCompiler_object_inline_stack_2452.subtreeFlags = JSCompiler_temp.subtreeFlags & 65011712, null !== instance ? JSCompiler_object_inline_componentStack_2453 = createWorkInProgress(
            instance,
            JSCompiler_object_inline_componentStack_2453
          ) : (JSCompiler_object_inline_componentStack_2453 = createFiberFromFragment(
            JSCompiler_object_inline_componentStack_2453,
            JSCompiler_object_inline_message_2450,
            renderLanes2,
            null
          ), JSCompiler_object_inline_componentStack_2453.flags |= 2), JSCompiler_object_inline_componentStack_2453.return = workInProgress2, JSCompiler_object_inline_stack_2452.return = workInProgress2, JSCompiler_object_inline_stack_2452.sibling = JSCompiler_object_inline_componentStack_2453, workInProgress2.child = JSCompiler_object_inline_stack_2452, JSCompiler_object_inline_stack_2452 = JSCompiler_object_inline_componentStack_2453, JSCompiler_object_inline_componentStack_2453 = workInProgress2.child, JSCompiler_object_inline_message_2450 = current2.child.memoizedState, null === JSCompiler_object_inline_message_2450 ? JSCompiler_object_inline_message_2450 = mountSuspenseOffscreenState(renderLanes2) : (JSCompiler_temp = JSCompiler_object_inline_message_2450.cachePool, null !== JSCompiler_temp ? (instance = CacheContext._currentValue, JSCompiler_temp = JSCompiler_temp.parent !== instance ? { parent: instance, pool: instance } : JSCompiler_temp) : JSCompiler_temp = getSuspendedCache(), JSCompiler_object_inline_message_2450 = {
            baseLanes: JSCompiler_object_inline_message_2450.baseLanes | renderLanes2,
            cachePool: JSCompiler_temp
          }), JSCompiler_object_inline_componentStack_2453.memoizedState = JSCompiler_object_inline_message_2450, JSCompiler_object_inline_componentStack_2453.childLanes = getRemainingWorkInPrimaryTree(
            current2,
            JSCompiler_object_inline_digest_2451,
            renderLanes2
          ), workInProgress2.memoizedState = SUSPENDED_MARKER, JSCompiler_object_inline_stack_2452;
        pushPrimaryTreeSuspenseHandler(workInProgress2);
        renderLanes2 = current2.child;
        current2 = renderLanes2.sibling;
        renderLanes2 = createWorkInProgress(renderLanes2, {
          mode: "visible",
          children: JSCompiler_object_inline_stack_2452.children
        });
        renderLanes2.return = workInProgress2;
        renderLanes2.sibling = null;
        null !== current2 && (JSCompiler_object_inline_digest_2451 = workInProgress2.deletions, null === JSCompiler_object_inline_digest_2451 ? (workInProgress2.deletions = [current2], workInProgress2.flags |= 16) : JSCompiler_object_inline_digest_2451.push(current2));
        workInProgress2.child = renderLanes2;
        workInProgress2.memoizedState = null;
        return renderLanes2;
      }
      function mountSuspensePrimaryChildren(workInProgress2, primaryChildren) {
        primaryChildren = mountWorkInProgressOffscreenFiber(
          { mode: "visible", children: primaryChildren },
          workInProgress2.mode
        );
        primaryChildren.return = workInProgress2;
        return workInProgress2.child = primaryChildren;
      }
      function mountWorkInProgressOffscreenFiber(offscreenProps, mode) {
        offscreenProps = createFiber(22, offscreenProps, null, mode);
        offscreenProps.lanes = 0;
        offscreenProps.stateNode = {
          _visibility: OffscreenVisible,
          _pendingMarkers: null,
          _retryCache: null,
          _transitions: null
        };
        return offscreenProps;
      }
      function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2) {
        reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
        current2 = mountSuspensePrimaryChildren(
          workInProgress2,
          workInProgress2.pendingProps.children
        );
        current2.flags |= 2;
        workInProgress2.memoizedState = null;
        return current2;
      }
      function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
        fiber.lanes |= renderLanes2;
        var alternate = fiber.alternate;
        null !== alternate && (alternate.lanes |= renderLanes2);
        scheduleContextWorkOnParentPath(
          fiber.return,
          renderLanes2,
          propagationRoot
        );
      }
      function validateSuspenseListNestedChild(childSlot, index) {
        var isAnArray = isArrayImpl(childSlot);
        childSlot = !isAnArray && "function" === typeof getIteratorFn(childSlot);
        return isAnArray || childSlot ? (isAnArray = isAnArray ? "array" : "iterable", console.error(
          "A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>",
          isAnArray,
          index,
          isAnArray
        ), false) : true;
      }
      function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
        var renderState = workInProgress2.memoizedState;
        null === renderState ? workInProgress2.memoizedState = {
          isBackwards,
          rendering: null,
          renderingStartTime: 0,
          last: lastContentRow,
          tail,
          tailMode
        } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.renderingStartTime = 0, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailMode = tailMode);
      }
      function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps, revealOrder = nextProps.revealOrder, tailMode = nextProps.tail;
        nextProps = nextProps.children;
        if (void 0 !== revealOrder && "forwards" !== revealOrder && "backwards" !== revealOrder && "together" !== revealOrder && !didWarnAboutRevealOrder[revealOrder])
          if (didWarnAboutRevealOrder[revealOrder] = true, "string" === typeof revealOrder)
            switch (revealOrder.toLowerCase()) {
              case "together":
              case "forwards":
              case "backwards":
                console.error(
                  '"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.',
                  revealOrder,
                  revealOrder.toLowerCase()
                );
                break;
              case "forward":
              case "backward":
                console.error(
                  '"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.',
                  revealOrder,
                  revealOrder.toLowerCase()
                );
                break;
              default:
                console.error(
                  '"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',
                  revealOrder
                );
            }
          else
            console.error(
              '%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',
              revealOrder
            );
        void 0 === tailMode || didWarnAboutTailOptions[tailMode] || ("collapsed" !== tailMode && "hidden" !== tailMode ? (didWarnAboutTailOptions[tailMode] = true, console.error(
          '"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?',
          tailMode
        )) : "forwards" !== revealOrder && "backwards" !== revealOrder && (didWarnAboutTailOptions[tailMode] = true, console.error(
          '<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?',
          tailMode
        )));
        a: if (("forwards" === revealOrder || "backwards" === revealOrder) && void 0 !== nextProps && null !== nextProps && false !== nextProps)
          if (isArrayImpl(nextProps))
            for (var i = 0; i < nextProps.length; i++) {
              if (!validateSuspenseListNestedChild(nextProps[i], i)) break a;
            }
          else if (i = getIteratorFn(nextProps), "function" === typeof i) {
            if (i = i.call(nextProps))
              for (var step = i.next(), _i = 0; !step.done; step = i.next()) {
                if (!validateSuspenseListNestedChild(step.value, _i)) break a;
                _i++;
              }
          } else
            console.error(
              'A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?',
              revealOrder
            );
        reconcileChildren(current2, workInProgress2, nextProps, renderLanes2);
        nextProps = suspenseStackCursor.current;
        if (0 !== (nextProps & ForceSuspenseFallback))
          nextProps = nextProps & SubtreeSuspenseContextMask | ForceSuspenseFallback, workInProgress2.flags |= 128;
        else {
          if (null !== current2 && 0 !== (current2.flags & 128))
            a: for (current2 = workInProgress2.child; null !== current2; ) {
              if (13 === current2.tag)
                null !== current2.memoizedState && scheduleSuspenseWorkOnFiber(
                  current2,
                  renderLanes2,
                  workInProgress2
                );
              else if (19 === current2.tag)
                scheduleSuspenseWorkOnFiber(current2, renderLanes2, workInProgress2);
              else if (null !== current2.child) {
                current2.child.return = current2;
                current2 = current2.child;
                continue;
              }
              if (current2 === workInProgress2) break a;
              for (; null === current2.sibling; ) {
                if (null === current2.return || current2.return === workInProgress2)
                  break a;
                current2 = current2.return;
              }
              current2.sibling.return = current2.return;
              current2 = current2.sibling;
            }
          nextProps &= SubtreeSuspenseContextMask;
        }
        push(suspenseStackCursor, nextProps, workInProgress2);
        switch (revealOrder) {
          case "forwards":
            renderLanes2 = workInProgress2.child;
            for (revealOrder = null; null !== renderLanes2; )
              current2 = renderLanes2.alternate, null !== current2 && null === findFirstSuspended(current2) && (revealOrder = renderLanes2), renderLanes2 = renderLanes2.sibling;
            renderLanes2 = revealOrder;
            null === renderLanes2 ? (revealOrder = workInProgress2.child, workInProgress2.child = null) : (revealOrder = renderLanes2.sibling, renderLanes2.sibling = null);
            initSuspenseListRenderState(
              workInProgress2,
              false,
              revealOrder,
              renderLanes2,
              tailMode
            );
            break;
          case "backwards":
            renderLanes2 = null;
            revealOrder = workInProgress2.child;
            for (workInProgress2.child = null; null !== revealOrder; ) {
              current2 = revealOrder.alternate;
              if (null !== current2 && null === findFirstSuspended(current2)) {
                workInProgress2.child = revealOrder;
                break;
              }
              current2 = revealOrder.sibling;
              revealOrder.sibling = renderLanes2;
              renderLanes2 = revealOrder;
              revealOrder = current2;
            }
            initSuspenseListRenderState(
              workInProgress2,
              true,
              renderLanes2,
              null,
              tailMode
            );
            break;
          case "together":
            initSuspenseListRenderState(workInProgress2, false, null, null, void 0);
            break;
          default:
            workInProgress2.memoizedState = null;
        }
        return workInProgress2.child;
      }
      function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
        null !== current2 && (workInProgress2.dependencies = current2.dependencies);
        profilerStartTime = -1;
        workInProgressRootSkippedLanes |= workInProgress2.lanes;
        if (0 === (renderLanes2 & workInProgress2.childLanes))
          if (null !== current2) {
            if (propagateParentContextChanges(
              current2,
              workInProgress2,
              renderLanes2,
              false
            ), 0 === (renderLanes2 & workInProgress2.childLanes))
              return null;
          } else return null;
        if (null !== current2 && workInProgress2.child !== current2.child)
          throw Error("Resuming work not yet implemented.");
        if (null !== workInProgress2.child) {
          current2 = workInProgress2.child;
          renderLanes2 = createWorkInProgress(current2, current2.pendingProps);
          workInProgress2.child = renderLanes2;
          for (renderLanes2.return = workInProgress2; null !== current2.sibling; )
            current2 = current2.sibling, renderLanes2 = renderLanes2.sibling = createWorkInProgress(current2, current2.pendingProps), renderLanes2.return = workInProgress2;
          renderLanes2.sibling = null;
        }
        return workInProgress2.child;
      }
      function checkScheduledUpdateOrContext(current2, renderLanes2) {
        if (0 !== (current2.lanes & renderLanes2)) return true;
        current2 = current2.dependencies;
        return null !== current2 && checkIfContextChanged(current2) ? true : false;
      }
      function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
        switch (workInProgress2.tag) {
          case 3:
            pushHostContainer(
              workInProgress2,
              workInProgress2.stateNode.containerInfo
            );
            pushProvider(
              workInProgress2,
              CacheContext,
              current2.memoizedState.cache
            );
            resetHydrationState();
            break;
          case 27:
          case 5:
            pushHostContext(workInProgress2);
            break;
          case 4:
            pushHostContainer(
              workInProgress2,
              workInProgress2.stateNode.containerInfo
            );
            break;
          case 10:
            pushProvider(
              workInProgress2,
              workInProgress2.type,
              workInProgress2.memoizedProps.value
            );
            break;
          case 12:
            0 !== (renderLanes2 & workInProgress2.childLanes) && (workInProgress2.flags |= 4);
            workInProgress2.flags |= 2048;
            var stateNode = workInProgress2.stateNode;
            stateNode.effectDuration = -0;
            stateNode.passiveEffectDuration = -0;
            break;
          case 13:
            stateNode = workInProgress2.memoizedState;
            if (null !== stateNode) {
              if (null !== stateNode.dehydrated)
                return pushPrimaryTreeSuspenseHandler(workInProgress2), workInProgress2.flags |= 128, null;
              if (0 !== (renderLanes2 & workInProgress2.child.childLanes))
                return updateSuspenseComponent(
                  current2,
                  workInProgress2,
                  renderLanes2
                );
              pushPrimaryTreeSuspenseHandler(workInProgress2);
              current2 = bailoutOnAlreadyFinishedWork(
                current2,
                workInProgress2,
                renderLanes2
              );
              return null !== current2 ? current2.sibling : null;
            }
            pushPrimaryTreeSuspenseHandler(workInProgress2);
            break;
          case 19:
            var didSuspendBefore = 0 !== (current2.flags & 128);
            stateNode = 0 !== (renderLanes2 & workInProgress2.childLanes);
            stateNode || (propagateParentContextChanges(
              current2,
              workInProgress2,
              renderLanes2,
              false
            ), stateNode = 0 !== (renderLanes2 & workInProgress2.childLanes));
            if (didSuspendBefore) {
              if (stateNode)
                return updateSuspenseListComponent(
                  current2,
                  workInProgress2,
                  renderLanes2
                );
              workInProgress2.flags |= 128;
            }
            didSuspendBefore = workInProgress2.memoizedState;
            null !== didSuspendBefore && (didSuspendBefore.rendering = null, didSuspendBefore.tail = null, didSuspendBefore.lastEffect = null);
            push(
              suspenseStackCursor,
              suspenseStackCursor.current,
              workInProgress2
            );
            if (stateNode) break;
            else return null;
          case 22:
          case 23:
            return workInProgress2.lanes = 0, updateOffscreenComponent(current2, workInProgress2, renderLanes2);
          case 24:
            pushProvider(
              workInProgress2,
              CacheContext,
              current2.memoizedState.cache
            );
        }
        return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
      }
      function beginWork(current2, workInProgress2, renderLanes2) {
        if (workInProgress2._debugNeedsRemount && null !== current2) {
          renderLanes2 = createFiberFromTypeAndProps(
            workInProgress2.type,
            workInProgress2.key,
            workInProgress2.pendingProps,
            workInProgress2._debugOwner || null,
            workInProgress2.mode,
            workInProgress2.lanes
          );
          renderLanes2._debugStack = workInProgress2._debugStack;
          renderLanes2._debugTask = workInProgress2._debugTask;
          var returnFiber = workInProgress2.return;
          if (null === returnFiber) throw Error("Cannot swap the root fiber.");
          current2.alternate = null;
          workInProgress2.alternate = null;
          renderLanes2.index = workInProgress2.index;
          renderLanes2.sibling = workInProgress2.sibling;
          renderLanes2.return = workInProgress2.return;
          renderLanes2.ref = workInProgress2.ref;
          renderLanes2._debugInfo = workInProgress2._debugInfo;
          if (workInProgress2 === returnFiber.child)
            returnFiber.child = renderLanes2;
          else {
            var prevSibling = returnFiber.child;
            if (null === prevSibling)
              throw Error("Expected parent to have a child.");
            for (; prevSibling.sibling !== workInProgress2; )
              if (prevSibling = prevSibling.sibling, null === prevSibling)
                throw Error("Expected to find the previous sibling.");
            prevSibling.sibling = renderLanes2;
          }
          workInProgress2 = returnFiber.deletions;
          null === workInProgress2 ? (returnFiber.deletions = [current2], returnFiber.flags |= 16) : workInProgress2.push(current2);
          renderLanes2.flags |= 2;
          return renderLanes2;
        }
        if (null !== current2)
          if (current2.memoizedProps !== workInProgress2.pendingProps || workInProgress2.type !== current2.type)
            didReceiveUpdate = true;
          else {
            if (!checkScheduledUpdateOrContext(current2, renderLanes2) && 0 === (workInProgress2.flags & 128))
              return didReceiveUpdate = false, attemptEarlyBailoutIfNoScheduledUpdate(
                current2,
                workInProgress2,
                renderLanes2
              );
            didReceiveUpdate = 0 !== (current2.flags & 131072) ? true : false;
          }
        else {
          didReceiveUpdate = false;
          if (returnFiber = isHydrating)
            warnIfNotHydrating(), returnFiber = 0 !== (workInProgress2.flags & 1048576);
          returnFiber && (returnFiber = workInProgress2.index, warnIfNotHydrating(), pushTreeId(workInProgress2, treeForkCount, returnFiber));
        }
        workInProgress2.lanes = 0;
        switch (workInProgress2.tag) {
          case 16:
            a: if (returnFiber = workInProgress2.pendingProps, current2 = callLazyInitInDEV(workInProgress2.elementType), workInProgress2.type = current2, "function" === typeof current2)
              shouldConstruct(current2) ? (returnFiber = resolveClassComponentProps(
                current2,
                returnFiber
              ), workInProgress2.tag = 1, workInProgress2.type = current2 = resolveFunctionForHotReloading(current2), workInProgress2 = updateClassComponent(
                null,
                workInProgress2,
                current2,
                returnFiber,
                renderLanes2
              )) : (workInProgress2.tag = 0, validateFunctionComponentInDev(workInProgress2, current2), workInProgress2.type = current2 = resolveFunctionForHotReloading(current2), workInProgress2 = updateFunctionComponent(
                null,
                workInProgress2,
                current2,
                returnFiber,
                renderLanes2
              ));
            else {
              if (void 0 !== current2 && null !== current2) {
                if (prevSibling = current2.$$typeof, prevSibling === REACT_FORWARD_REF_TYPE) {
                  workInProgress2.tag = 11;
                  workInProgress2.type = current2 = resolveForwardRefForHotReloading(current2);
                  workInProgress2 = updateForwardRef(
                    null,
                    workInProgress2,
                    current2,
                    returnFiber,
                    renderLanes2
                  );
                  break a;
                } else if (prevSibling === REACT_MEMO_TYPE) {
                  workInProgress2.tag = 14;
                  workInProgress2 = updateMemoComponent(
                    null,
                    workInProgress2,
                    current2,
                    returnFiber,
                    renderLanes2
                  );
                  break a;
                }
              }
              workInProgress2 = "";
              null !== current2 && "object" === typeof current2 && current2.$$typeof === REACT_LAZY_TYPE && (workInProgress2 = " Did you wrap a component in React.lazy() more than once?");
              current2 = getComponentNameFromType(current2) || current2;
              throw Error(
                "Element type is invalid. Received a promise that resolves to: " + current2 + ". Lazy element type must resolve to a class or function." + workInProgress2
              );
            }
            return workInProgress2;
          case 0:
            return updateFunctionComponent(
              current2,
              workInProgress2,
              workInProgress2.type,
              workInProgress2.pendingProps,
              renderLanes2
            );
          case 1:
            return returnFiber = workInProgress2.type, prevSibling = resolveClassComponentProps(
              returnFiber,
              workInProgress2.pendingProps
            ), updateClassComponent(
              current2,
              workInProgress2,
              returnFiber,
              prevSibling,
              renderLanes2
            );
          case 3:
            a: {
              pushHostContainer(
                workInProgress2,
                workInProgress2.stateNode.containerInfo
              );
              if (null === current2)
                throw Error(
                  "Should have a current fiber. This is a bug in React."
                );
              returnFiber = workInProgress2.pendingProps;
              var prevState = workInProgress2.memoizedState;
              prevSibling = prevState.element;
              cloneUpdateQueue(current2, workInProgress2);
              processUpdateQueue(workInProgress2, returnFiber, null, renderLanes2);
              var nextState = workInProgress2.memoizedState;
              returnFiber = nextState.cache;
              pushProvider(workInProgress2, CacheContext, returnFiber);
              returnFiber !== prevState.cache && propagateContextChanges(
                workInProgress2,
                [CacheContext],
                renderLanes2,
                true
              );
              suspendIfUpdateReadFromEntangledAsyncAction();
              returnFiber = nextState.element;
              if (prevState.isDehydrated)
                if (prevState = {
                  element: returnFiber,
                  isDehydrated: false,
                  cache: nextState.cache
                }, workInProgress2.updateQueue.baseState = prevState, workInProgress2.memoizedState = prevState, workInProgress2.flags & 256) {
                  workInProgress2 = mountHostRootWithoutHydrating(
                    current2,
                    workInProgress2,
                    returnFiber,
                    renderLanes2
                  );
                  break a;
                } else if (returnFiber !== prevSibling) {
                  prevSibling = createCapturedValueAtFiber(
                    Error(
                      "This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."
                    ),
                    workInProgress2
                  );
                  queueHydrationError(prevSibling);
                  workInProgress2 = mountHostRootWithoutHydrating(
                    current2,
                    workInProgress2,
                    returnFiber,
                    renderLanes2
                  );
                  break a;
                } else {
                  current2 = workInProgress2.stateNode.containerInfo;
                  switch (current2.nodeType) {
                    case 9:
                      current2 = current2.body;
                      break;
                    default:
                      current2 = "HTML" === current2.nodeName ? current2.ownerDocument.body : current2;
                  }
                  nextHydratableInstance = getNextHydratable(current2.firstChild);
                  hydrationParentFiber = workInProgress2;
                  isHydrating = true;
                  hydrationErrors = null;
                  didSuspendOrErrorDEV = false;
                  hydrationDiffRootDEV = null;
                  rootOrSingletonContext = true;
                  current2 = mountChildFibers(
                    workInProgress2,
                    null,
                    returnFiber,
                    renderLanes2
                  );
                  for (workInProgress2.child = current2; current2; )
                    current2.flags = current2.flags & -3 | 4096, current2 = current2.sibling;
                }
              else {
                resetHydrationState();
                if (returnFiber === prevSibling) {
                  workInProgress2 = bailoutOnAlreadyFinishedWork(
                    current2,
                    workInProgress2,
                    renderLanes2
                  );
                  break a;
                }
                reconcileChildren(
                  current2,
                  workInProgress2,
                  returnFiber,
                  renderLanes2
                );
              }
              workInProgress2 = workInProgress2.child;
            }
            return workInProgress2;
          case 26:
            return markRef(current2, workInProgress2), null === current2 ? (current2 = getResource(
              workInProgress2.type,
              null,
              workInProgress2.pendingProps,
              null
            )) ? workInProgress2.memoizedState = current2 : isHydrating || (current2 = workInProgress2.type, renderLanes2 = workInProgress2.pendingProps, returnFiber = requiredContext(
              rootInstanceStackCursor.current
            ), returnFiber = getOwnerDocumentFromRootContainer(
              returnFiber
            ).createElement(current2), returnFiber[internalInstanceKey] = workInProgress2, returnFiber[internalPropsKey] = renderLanes2, setInitialProperties(returnFiber, current2, renderLanes2), markNodeAsHoistable(returnFiber), workInProgress2.stateNode = returnFiber) : workInProgress2.memoizedState = getResource(
              workInProgress2.type,
              current2.memoizedProps,
              workInProgress2.pendingProps,
              current2.memoizedState
            ), null;
          case 27:
            return pushHostContext(workInProgress2), null === current2 && isHydrating && (returnFiber = requiredContext(rootInstanceStackCursor.current), prevSibling = getHostContext(), returnFiber = workInProgress2.stateNode = resolveSingletonInstance(
              workInProgress2.type,
              workInProgress2.pendingProps,
              returnFiber,
              prevSibling,
              false
            ), didSuspendOrErrorDEV || (prevSibling = diffHydratedProperties(
              returnFiber,
              workInProgress2.type,
              workInProgress2.pendingProps,
              prevSibling
            ), null !== prevSibling && (buildHydrationDiffNode(workInProgress2, 0).serverProps = prevSibling)), hydrationParentFiber = workInProgress2, rootOrSingletonContext = true, prevSibling = nextHydratableInstance, isSingletonScope(workInProgress2.type) ? (previousHydratableOnEnteringScopedSingleton = prevSibling, nextHydratableInstance = getNextHydratable(
              returnFiber.firstChild
            )) : nextHydratableInstance = prevSibling), reconcileChildren(
              current2,
              workInProgress2,
              workInProgress2.pendingProps.children,
              renderLanes2
            ), markRef(current2, workInProgress2), null === current2 && (workInProgress2.flags |= 4194304), workInProgress2.child;
          case 5:
            return null === current2 && isHydrating && (prevState = getHostContext(), returnFiber = validateDOMNesting(
              workInProgress2.type,
              prevState.ancestorInfo
            ), prevSibling = nextHydratableInstance, (nextState = !prevSibling) || (nextState = canHydrateInstance(
              prevSibling,
              workInProgress2.type,
              workInProgress2.pendingProps,
              rootOrSingletonContext
            ), null !== nextState ? (workInProgress2.stateNode = nextState, didSuspendOrErrorDEV || (prevState = diffHydratedProperties(
              nextState,
              workInProgress2.type,
              workInProgress2.pendingProps,
              prevState
            ), null !== prevState && (buildHydrationDiffNode(workInProgress2, 0).serverProps = prevState)), hydrationParentFiber = workInProgress2, nextHydratableInstance = getNextHydratable(
              nextState.firstChild
            ), rootOrSingletonContext = false, prevState = true) : prevState = false, nextState = !prevState), nextState && (returnFiber && warnNonHydratedInstance(workInProgress2, prevSibling), throwOnHydrationMismatch(workInProgress2))), pushHostContext(workInProgress2), prevSibling = workInProgress2.type, prevState = workInProgress2.pendingProps, nextState = null !== current2 ? current2.memoizedProps : null, returnFiber = prevState.children, shouldSetTextContent(prevSibling, prevState) ? returnFiber = null : null !== nextState && shouldSetTextContent(prevSibling, nextState) && (workInProgress2.flags |= 32), null !== workInProgress2.memoizedState && (prevSibling = renderWithHooks(
              current2,
              workInProgress2,
              TransitionAwareHostComponent,
              null,
              null,
              renderLanes2
            ), HostTransitionContext._currentValue = prevSibling), markRef(current2, workInProgress2), reconcileChildren(
              current2,
              workInProgress2,
              returnFiber,
              renderLanes2
            ), workInProgress2.child;
          case 6:
            return null === current2 && isHydrating && (current2 = workInProgress2.pendingProps, renderLanes2 = getHostContext(), returnFiber = renderLanes2.ancestorInfo.current, current2 = null != returnFiber ? validateTextNesting(
              current2,
              returnFiber.tag,
              renderLanes2.ancestorInfo.implicitRootScope
            ) : true, renderLanes2 = nextHydratableInstance, (returnFiber = !renderLanes2) || (returnFiber = canHydrateTextInstance(
              renderLanes2,
              workInProgress2.pendingProps,
              rootOrSingletonContext
            ), null !== returnFiber ? (workInProgress2.stateNode = returnFiber, hydrationParentFiber = workInProgress2, nextHydratableInstance = null, returnFiber = true) : returnFiber = false, returnFiber = !returnFiber), returnFiber && (current2 && warnNonHydratedInstance(workInProgress2, renderLanes2), throwOnHydrationMismatch(workInProgress2))), null;
          case 13:
            return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
          case 4:
            return pushHostContainer(
              workInProgress2,
              workInProgress2.stateNode.containerInfo
            ), returnFiber = workInProgress2.pendingProps, null === current2 ? workInProgress2.child = reconcileChildFibers(
              workInProgress2,
              null,
              returnFiber,
              renderLanes2
            ) : reconcileChildren(
              current2,
              workInProgress2,
              returnFiber,
              renderLanes2
            ), workInProgress2.child;
          case 11:
            return updateForwardRef(
              current2,
              workInProgress2,
              workInProgress2.type,
              workInProgress2.pendingProps,
              renderLanes2
            );
          case 7:
            return reconcileChildren(
              current2,
              workInProgress2,
              workInProgress2.pendingProps,
              renderLanes2
            ), workInProgress2.child;
          case 8:
            return reconcileChildren(
              current2,
              workInProgress2,
              workInProgress2.pendingProps.children,
              renderLanes2
            ), workInProgress2.child;
          case 12:
            return workInProgress2.flags |= 4, workInProgress2.flags |= 2048, returnFiber = workInProgress2.stateNode, returnFiber.effectDuration = -0, returnFiber.passiveEffectDuration = -0, reconcileChildren(
              current2,
              workInProgress2,
              workInProgress2.pendingProps.children,
              renderLanes2
            ), workInProgress2.child;
          case 10:
            return returnFiber = workInProgress2.type, prevSibling = workInProgress2.pendingProps, prevState = prevSibling.value, "value" in prevSibling || hasWarnedAboutUsingNoValuePropOnContextProvider || (hasWarnedAboutUsingNoValuePropOnContextProvider = true, console.error(
              "The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?"
            )), pushProvider(workInProgress2, returnFiber, prevState), reconcileChildren(
              current2,
              workInProgress2,
              prevSibling.children,
              renderLanes2
            ), workInProgress2.child;
          case 9:
            return prevSibling = workInProgress2.type._context, returnFiber = workInProgress2.pendingProps.children, "function" !== typeof returnFiber && console.error(
              "A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."
            ), prepareToReadContext(workInProgress2), prevSibling = readContext(prevSibling), markComponentRenderStarted(workInProgress2), returnFiber = callComponentInDEV(
              returnFiber,
              prevSibling,
              void 0
            ), markComponentRenderStopped(), workInProgress2.flags |= 1, reconcileChildren(
              current2,
              workInProgress2,
              returnFiber,
              renderLanes2
            ), workInProgress2.child;
          case 14:
            return updateMemoComponent(
              current2,
              workInProgress2,
              workInProgress2.type,
              workInProgress2.pendingProps,
              renderLanes2
            );
          case 15:
            return updateSimpleMemoComponent(
              current2,
              workInProgress2,
              workInProgress2.type,
              workInProgress2.pendingProps,
              renderLanes2
            );
          case 19:
            return updateSuspenseListComponent(
              current2,
              workInProgress2,
              renderLanes2
            );
          case 31:
            return returnFiber = workInProgress2.pendingProps, renderLanes2 = workInProgress2.mode, returnFiber = {
              mode: returnFiber.mode,
              children: returnFiber.children
            }, null === current2 ? (current2 = mountWorkInProgressOffscreenFiber(
              returnFiber,
              renderLanes2
            ), current2.ref = workInProgress2.ref, workInProgress2.child = current2, current2.return = workInProgress2, workInProgress2 = current2) : (current2 = createWorkInProgress(current2.child, returnFiber), current2.ref = workInProgress2.ref, workInProgress2.child = current2, current2.return = workInProgress2, workInProgress2 = current2), workInProgress2;
          case 22:
            return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
          case 24:
            return prepareToReadContext(workInProgress2), returnFiber = readContext(CacheContext), null === current2 ? (prevSibling = peekCacheFromPool(), null === prevSibling && (prevSibling = workInProgressRoot, prevState = createCache3(), prevSibling.pooledCache = prevState, retainCache(prevState), null !== prevState && (prevSibling.pooledCacheLanes |= renderLanes2), prevSibling = prevState), workInProgress2.memoizedState = {
              parent: returnFiber,
              cache: prevSibling
            }, initializeUpdateQueue(workInProgress2), pushProvider(workInProgress2, CacheContext, prevSibling)) : (0 !== (current2.lanes & renderLanes2) && (cloneUpdateQueue(current2, workInProgress2), processUpdateQueue(workInProgress2, null, null, renderLanes2), suspendIfUpdateReadFromEntangledAsyncAction()), prevSibling = current2.memoizedState, prevState = workInProgress2.memoizedState, prevSibling.parent !== returnFiber ? (prevSibling = {
              parent: returnFiber,
              cache: returnFiber
            }, workInProgress2.memoizedState = prevSibling, 0 === workInProgress2.lanes && (workInProgress2.memoizedState = workInProgress2.updateQueue.baseState = prevSibling), pushProvider(workInProgress2, CacheContext, returnFiber)) : (returnFiber = prevState.cache, pushProvider(workInProgress2, CacheContext, returnFiber), returnFiber !== prevSibling.cache && propagateContextChanges(
              workInProgress2,
              [CacheContext],
              renderLanes2,
              true
            ))), reconcileChildren(
              current2,
              workInProgress2,
              workInProgress2.pendingProps.children,
              renderLanes2
            ), workInProgress2.child;
          case 29:
            throw workInProgress2.pendingProps;
        }
        throw Error(
          "Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue."
        );
      }
      function markUpdate(workInProgress2) {
        workInProgress2.flags |= 4;
      }
      function preloadResourceAndSuspendIfNeeded(workInProgress2, resource) {
        if ("stylesheet" !== resource.type || (resource.state.loading & Inserted) !== NotLoaded)
          workInProgress2.flags &= -16777217;
        else if (workInProgress2.flags |= 16777216, !preloadResource(resource)) {
          resource = suspenseHandlerStackCursor.current;
          if (null !== resource && ((workInProgressRootRenderLanes & 4194048) === workInProgressRootRenderLanes ? null !== shellBoundary : (workInProgressRootRenderLanes & 62914560) !== workInProgressRootRenderLanes && 0 === (workInProgressRootRenderLanes & 536870912) || resource !== shellBoundary))
            throw suspendedThenable = noopSuspenseyCommitThenable, SuspenseyCommitException;
          workInProgress2.flags |= 8192;
        }
      }
      function scheduleRetryEffect(workInProgress2, retryQueue) {
        null !== retryQueue && (workInProgress2.flags |= 4);
        workInProgress2.flags & 16384 && (retryQueue = 22 !== workInProgress2.tag ? claimNextRetryLane() : 536870912, workInProgress2.lanes |= retryQueue, workInProgressSuspendedRetryLanes |= retryQueue);
      }
      function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (!isHydrating)
          switch (renderState.tailMode) {
            case "hidden":
              hasRenderedATailFallback = renderState.tail;
              for (var lastTailNode = null; null !== hasRenderedATailFallback; )
                null !== hasRenderedATailFallback.alternate && (lastTailNode = hasRenderedATailFallback), hasRenderedATailFallback = hasRenderedATailFallback.sibling;
              null === lastTailNode ? renderState.tail = null : lastTailNode.sibling = null;
              break;
            case "collapsed":
              lastTailNode = renderState.tail;
              for (var _lastTailNode = null; null !== lastTailNode; )
                null !== lastTailNode.alternate && (_lastTailNode = lastTailNode), lastTailNode = lastTailNode.sibling;
              null === _lastTailNode ? hasRenderedATailFallback || null === renderState.tail ? renderState.tail = null : renderState.tail.sibling = null : _lastTailNode.sibling = null;
          }
      }
      function bubbleProperties(completedWork) {
        var didBailout = null !== completedWork.alternate && completedWork.alternate.child === completedWork.child, newChildLanes = 0, subtreeFlags = 0;
        if (didBailout)
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            for (var _treeBaseDuration = completedWork.selfBaseDuration, _child2 = completedWork.child; null !== _child2; )
              newChildLanes |= _child2.lanes | _child2.childLanes, subtreeFlags |= _child2.subtreeFlags & 65011712, subtreeFlags |= _child2.flags & 65011712, _treeBaseDuration += _child2.treeBaseDuration, _child2 = _child2.sibling;
            completedWork.treeBaseDuration = _treeBaseDuration;
          } else
            for (_treeBaseDuration = completedWork.child; null !== _treeBaseDuration; )
              newChildLanes |= _treeBaseDuration.lanes | _treeBaseDuration.childLanes, subtreeFlags |= _treeBaseDuration.subtreeFlags & 65011712, subtreeFlags |= _treeBaseDuration.flags & 65011712, _treeBaseDuration.return = completedWork, _treeBaseDuration = _treeBaseDuration.sibling;
        else if ((completedWork.mode & ProfileMode) !== NoMode) {
          _treeBaseDuration = completedWork.actualDuration;
          _child2 = completedWork.selfBaseDuration;
          for (var child = completedWork.child; null !== child; )
            newChildLanes |= child.lanes | child.childLanes, subtreeFlags |= child.subtreeFlags, subtreeFlags |= child.flags, _treeBaseDuration += child.actualDuration, _child2 += child.treeBaseDuration, child = child.sibling;
          completedWork.actualDuration = _treeBaseDuration;
          completedWork.treeBaseDuration = _child2;
        } else
          for (_treeBaseDuration = completedWork.child; null !== _treeBaseDuration; )
            newChildLanes |= _treeBaseDuration.lanes | _treeBaseDuration.childLanes, subtreeFlags |= _treeBaseDuration.subtreeFlags, subtreeFlags |= _treeBaseDuration.flags, _treeBaseDuration.return = completedWork, _treeBaseDuration = _treeBaseDuration.sibling;
        completedWork.subtreeFlags |= subtreeFlags;
        completedWork.childLanes = newChildLanes;
        return didBailout;
      }
      function completeWork(current2, workInProgress2, renderLanes2) {
        var newProps = workInProgress2.pendingProps;
        popTreeContext(workInProgress2);
        switch (workInProgress2.tag) {
          case 31:
          case 16:
          case 15:
          case 0:
          case 11:
          case 7:
          case 8:
          case 12:
          case 9:
          case 14:
            return bubbleProperties(workInProgress2), null;
          case 1:
            return bubbleProperties(workInProgress2), null;
          case 3:
            renderLanes2 = workInProgress2.stateNode;
            newProps = null;
            null !== current2 && (newProps = current2.memoizedState.cache);
            workInProgress2.memoizedState.cache !== newProps && (workInProgress2.flags |= 2048);
            popProvider(CacheContext, workInProgress2);
            popHostContainer(workInProgress2);
            renderLanes2.pendingContext && (renderLanes2.context = renderLanes2.pendingContext, renderLanes2.pendingContext = null);
            if (null === current2 || null === current2.child)
              popHydrationState(workInProgress2) ? (emitPendingHydrationWarnings(), markUpdate(workInProgress2)) : null === current2 || current2.memoizedState.isDehydrated && 0 === (workInProgress2.flags & 256) || (workInProgress2.flags |= 1024, upgradeHydrationErrorsToRecoverable());
            bubbleProperties(workInProgress2);
            return null;
          case 26:
            return renderLanes2 = workInProgress2.memoizedState, null === current2 ? (markUpdate(workInProgress2), null !== renderLanes2 ? (bubbleProperties(workInProgress2), preloadResourceAndSuspendIfNeeded(
              workInProgress2,
              renderLanes2
            )) : (bubbleProperties(workInProgress2), workInProgress2.flags &= -16777217)) : renderLanes2 ? renderLanes2 !== current2.memoizedState ? (markUpdate(workInProgress2), bubbleProperties(workInProgress2), preloadResourceAndSuspendIfNeeded(
              workInProgress2,
              renderLanes2
            )) : (bubbleProperties(workInProgress2), workInProgress2.flags &= -16777217) : (current2.memoizedProps !== newProps && markUpdate(workInProgress2), bubbleProperties(workInProgress2), workInProgress2.flags &= -16777217), null;
          case 27:
            popHostContext(workInProgress2);
            renderLanes2 = requiredContext(rootInstanceStackCursor.current);
            var _type = workInProgress2.type;
            if (null !== current2 && null != workInProgress2.stateNode)
              current2.memoizedProps !== newProps && markUpdate(workInProgress2);
            else {
              if (!newProps) {
                if (null === workInProgress2.stateNode)
                  throw Error(
                    "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
                  );
                bubbleProperties(workInProgress2);
                return null;
              }
              current2 = getHostContext();
              popHydrationState(workInProgress2) ? prepareToHydrateHostInstance(workInProgress2, current2) : (current2 = resolveSingletonInstance(
                _type,
                newProps,
                renderLanes2,
                current2,
                true
              ), workInProgress2.stateNode = current2, markUpdate(workInProgress2));
            }
            bubbleProperties(workInProgress2);
            return null;
          case 5:
            popHostContext(workInProgress2);
            renderLanes2 = workInProgress2.type;
            if (null !== current2 && null != workInProgress2.stateNode)
              current2.memoizedProps !== newProps && markUpdate(workInProgress2);
            else {
              if (!newProps) {
                if (null === workInProgress2.stateNode)
                  throw Error(
                    "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
                  );
                bubbleProperties(workInProgress2);
                return null;
              }
              _type = getHostContext();
              if (popHydrationState(workInProgress2))
                prepareToHydrateHostInstance(workInProgress2, _type);
              else {
                current2 = requiredContext(rootInstanceStackCursor.current);
                validateDOMNesting(renderLanes2, _type.ancestorInfo);
                _type = _type.context;
                current2 = getOwnerDocumentFromRootContainer(current2);
                switch (_type) {
                  case HostContextNamespaceSvg:
                    current2 = current2.createElementNS(SVG_NAMESPACE, renderLanes2);
                    break;
                  case HostContextNamespaceMath:
                    current2 = current2.createElementNS(
                      MATH_NAMESPACE,
                      renderLanes2
                    );
                    break;
                  default:
                    switch (renderLanes2) {
                      case "svg":
                        current2 = current2.createElementNS(
                          SVG_NAMESPACE,
                          renderLanes2
                        );
                        break;
                      case "math":
                        current2 = current2.createElementNS(
                          MATH_NAMESPACE,
                          renderLanes2
                        );
                        break;
                      case "script":
                        current2 = current2.createElement("div");
                        current2.innerHTML = "<script></script>";
                        current2 = current2.removeChild(current2.firstChild);
                        break;
                      case "select":
                        current2 = "string" === typeof newProps.is ? current2.createElement("select", { is: newProps.is }) : current2.createElement("select");
                        newProps.multiple ? current2.multiple = true : newProps.size && (current2.size = newProps.size);
                        break;
                      default:
                        current2 = "string" === typeof newProps.is ? current2.createElement(renderLanes2, {
                          is: newProps.is
                        }) : current2.createElement(renderLanes2), -1 === renderLanes2.indexOf("-") && (renderLanes2 !== renderLanes2.toLowerCase() && console.error(
                          "<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.",
                          renderLanes2
                        ), "[object HTMLUnknownElement]" !== Object.prototype.toString.call(current2) || hasOwnProperty.call(
                          warnedUnknownTags,
                          renderLanes2
                        ) || (warnedUnknownTags[renderLanes2] = true, console.error(
                          "The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.",
                          renderLanes2
                        )));
                    }
                }
                current2[internalInstanceKey] = workInProgress2;
                current2[internalPropsKey] = newProps;
                a: for (_type = workInProgress2.child; null !== _type; ) {
                  if (5 === _type.tag || 6 === _type.tag)
                    current2.appendChild(_type.stateNode);
                  else if (4 !== _type.tag && 27 !== _type.tag && null !== _type.child) {
                    _type.child.return = _type;
                    _type = _type.child;
                    continue;
                  }
                  if (_type === workInProgress2) break a;
                  for (; null === _type.sibling; ) {
                    if (null === _type.return || _type.return === workInProgress2)
                      break a;
                    _type = _type.return;
                  }
                  _type.sibling.return = _type.return;
                  _type = _type.sibling;
                }
                workInProgress2.stateNode = current2;
                a: switch (setInitialProperties(current2, renderLanes2, newProps), renderLanes2) {
                  case "button":
                  case "input":
                  case "select":
                  case "textarea":
                    current2 = !!newProps.autoFocus;
                    break a;
                  case "img":
                    current2 = true;
                    break a;
                  default:
                    current2 = false;
                }
                current2 && markUpdate(workInProgress2);
              }
            }
            bubbleProperties(workInProgress2);
            workInProgress2.flags &= -16777217;
            return null;
          case 6:
            if (current2 && null != workInProgress2.stateNode)
              current2.memoizedProps !== newProps && markUpdate(workInProgress2);
            else {
              if ("string" !== typeof newProps && null === workInProgress2.stateNode)
                throw Error(
                  "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
                );
              current2 = requiredContext(rootInstanceStackCursor.current);
              renderLanes2 = getHostContext();
              if (popHydrationState(workInProgress2)) {
                current2 = workInProgress2.stateNode;
                renderLanes2 = workInProgress2.memoizedProps;
                _type = !didSuspendOrErrorDEV;
                newProps = null;
                var returnFiber = hydrationParentFiber;
                if (null !== returnFiber)
                  switch (returnFiber.tag) {
                    case 3:
                      _type && (_type = diffHydratedTextForDevWarnings(
                        current2,
                        renderLanes2,
                        newProps
                      ), null !== _type && (buildHydrationDiffNode(workInProgress2, 0).serverProps = _type));
                      break;
                    case 27:
                    case 5:
                      newProps = returnFiber.memoizedProps, _type && (_type = diffHydratedTextForDevWarnings(
                        current2,
                        renderLanes2,
                        newProps
                      ), null !== _type && (buildHydrationDiffNode(
                        workInProgress2,
                        0
                      ).serverProps = _type));
                  }
                current2[internalInstanceKey] = workInProgress2;
                current2 = current2.nodeValue === renderLanes2 || null !== newProps && true === newProps.suppressHydrationWarning || checkForUnmatchedText(current2.nodeValue, renderLanes2) ? true : false;
                current2 || throwOnHydrationMismatch(workInProgress2);
              } else
                _type = renderLanes2.ancestorInfo.current, null != _type && validateTextNesting(
                  newProps,
                  _type.tag,
                  renderLanes2.ancestorInfo.implicitRootScope
                ), current2 = getOwnerDocumentFromRootContainer(current2).createTextNode(
                  newProps
                ), current2[internalInstanceKey] = workInProgress2, workInProgress2.stateNode = current2;
            }
            bubbleProperties(workInProgress2);
            return null;
          case 13:
            newProps = workInProgress2.memoizedState;
            if (null === current2 || null !== current2.memoizedState && null !== current2.memoizedState.dehydrated) {
              _type = popHydrationState(workInProgress2);
              if (null !== newProps && null !== newProps.dehydrated) {
                if (null === current2) {
                  if (!_type)
                    throw Error(
                      "A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React."
                    );
                  _type = workInProgress2.memoizedState;
                  _type = null !== _type ? _type.dehydrated : null;
                  if (!_type)
                    throw Error(
                      "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue."
                    );
                  _type[internalInstanceKey] = workInProgress2;
                  bubbleProperties(workInProgress2);
                  (workInProgress2.mode & ProfileMode) !== NoMode && null !== newProps && (_type = workInProgress2.child, null !== _type && (workInProgress2.treeBaseDuration -= _type.treeBaseDuration));
                } else
                  emitPendingHydrationWarnings(), resetHydrationState(), 0 === (workInProgress2.flags & 128) && (workInProgress2.memoizedState = null), workInProgress2.flags |= 4, bubbleProperties(workInProgress2), (workInProgress2.mode & ProfileMode) !== NoMode && null !== newProps && (_type = workInProgress2.child, null !== _type && (workInProgress2.treeBaseDuration -= _type.treeBaseDuration));
                _type = false;
              } else
                _type = upgradeHydrationErrorsToRecoverable(), null !== current2 && null !== current2.memoizedState && (current2.memoizedState.hydrationErrors = _type), _type = true;
              if (!_type) {
                if (workInProgress2.flags & 256)
                  return popSuspenseHandler(workInProgress2), workInProgress2;
                popSuspenseHandler(workInProgress2);
                return null;
              }
            }
            popSuspenseHandler(workInProgress2);
            if (0 !== (workInProgress2.flags & 128))
              return workInProgress2.lanes = renderLanes2, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2;
            renderLanes2 = null !== newProps;
            current2 = null !== current2 && null !== current2.memoizedState;
            renderLanes2 && (newProps = workInProgress2.child, _type = null, null !== newProps.alternate && null !== newProps.alternate.memoizedState && null !== newProps.alternate.memoizedState.cachePool && (_type = newProps.alternate.memoizedState.cachePool.pool), returnFiber = null, null !== newProps.memoizedState && null !== newProps.memoizedState.cachePool && (returnFiber = newProps.memoizedState.cachePool.pool), returnFiber !== _type && (newProps.flags |= 2048));
            renderLanes2 !== current2 && renderLanes2 && (workInProgress2.child.flags |= 8192);
            scheduleRetryEffect(workInProgress2, workInProgress2.updateQueue);
            bubbleProperties(workInProgress2);
            (workInProgress2.mode & ProfileMode) !== NoMode && renderLanes2 && (current2 = workInProgress2.child, null !== current2 && (workInProgress2.treeBaseDuration -= current2.treeBaseDuration));
            return null;
          case 4:
            return popHostContainer(workInProgress2), null === current2 && listenToAllSupportedEvents(
              workInProgress2.stateNode.containerInfo
            ), bubbleProperties(workInProgress2), null;
          case 10:
            return popProvider(workInProgress2.type, workInProgress2), bubbleProperties(workInProgress2), null;
          case 19:
            pop(suspenseStackCursor, workInProgress2);
            _type = workInProgress2.memoizedState;
            if (null === _type) return bubbleProperties(workInProgress2), null;
            newProps = 0 !== (workInProgress2.flags & 128);
            returnFiber = _type.rendering;
            if (null === returnFiber)
              if (newProps) cutOffTailIfNeeded(_type, false);
              else {
                if (workInProgressRootExitStatus !== RootInProgress || null !== current2 && 0 !== (current2.flags & 128))
                  for (current2 = workInProgress2.child; null !== current2; ) {
                    returnFiber = findFirstSuspended(current2);
                    if (null !== returnFiber) {
                      workInProgress2.flags |= 128;
                      cutOffTailIfNeeded(_type, false);
                      current2 = returnFiber.updateQueue;
                      workInProgress2.updateQueue = current2;
                      scheduleRetryEffect(workInProgress2, current2);
                      workInProgress2.subtreeFlags = 0;
                      current2 = renderLanes2;
                      for (renderLanes2 = workInProgress2.child; null !== renderLanes2; )
                        resetWorkInProgress(renderLanes2, current2), renderLanes2 = renderLanes2.sibling;
                      push(
                        suspenseStackCursor,
                        suspenseStackCursor.current & SubtreeSuspenseContextMask | ForceSuspenseFallback,
                        workInProgress2
                      );
                      return workInProgress2.child;
                    }
                    current2 = current2.sibling;
                  }
                null !== _type.tail && now$1() > workInProgressRootRenderTargetTime && (workInProgress2.flags |= 128, newProps = true, cutOffTailIfNeeded(_type, false), workInProgress2.lanes = 4194304);
              }
            else {
              if (!newProps)
                if (current2 = findFirstSuspended(returnFiber), null !== current2) {
                  if (workInProgress2.flags |= 128, newProps = true, current2 = current2.updateQueue, workInProgress2.updateQueue = current2, scheduleRetryEffect(workInProgress2, current2), cutOffTailIfNeeded(_type, true), null === _type.tail && "hidden" === _type.tailMode && !returnFiber.alternate && !isHydrating)
                    return bubbleProperties(workInProgress2), null;
                } else
                  2 * now$1() - _type.renderingStartTime > workInProgressRootRenderTargetTime && 536870912 !== renderLanes2 && (workInProgress2.flags |= 128, newProps = true, cutOffTailIfNeeded(_type, false), workInProgress2.lanes = 4194304);
              _type.isBackwards ? (returnFiber.sibling = workInProgress2.child, workInProgress2.child = returnFiber) : (current2 = _type.last, null !== current2 ? current2.sibling = returnFiber : workInProgress2.child = returnFiber, _type.last = returnFiber);
            }
            if (null !== _type.tail)
              return current2 = _type.tail, _type.rendering = current2, _type.tail = current2.sibling, _type.renderingStartTime = now$1(), current2.sibling = null, renderLanes2 = suspenseStackCursor.current, renderLanes2 = newProps ? renderLanes2 & SubtreeSuspenseContextMask | ForceSuspenseFallback : renderLanes2 & SubtreeSuspenseContextMask, push(suspenseStackCursor, renderLanes2, workInProgress2), current2;
            bubbleProperties(workInProgress2);
            return null;
          case 22:
          case 23:
            return popSuspenseHandler(workInProgress2), popHiddenContext(workInProgress2), newProps = null !== workInProgress2.memoizedState, null !== current2 ? null !== current2.memoizedState !== newProps && (workInProgress2.flags |= 8192) : newProps && (workInProgress2.flags |= 8192), newProps ? 0 !== (renderLanes2 & 536870912) && 0 === (workInProgress2.flags & 128) && (bubbleProperties(workInProgress2), workInProgress2.subtreeFlags & 6 && (workInProgress2.flags |= 8192)) : bubbleProperties(workInProgress2), renderLanes2 = workInProgress2.updateQueue, null !== renderLanes2 && scheduleRetryEffect(workInProgress2, renderLanes2.retryQueue), renderLanes2 = null, null !== current2 && null !== current2.memoizedState && null !== current2.memoizedState.cachePool && (renderLanes2 = current2.memoizedState.cachePool.pool), newProps = null, null !== workInProgress2.memoizedState && null !== workInProgress2.memoizedState.cachePool && (newProps = workInProgress2.memoizedState.cachePool.pool), newProps !== renderLanes2 && (workInProgress2.flags |= 2048), null !== current2 && pop(resumedCache, workInProgress2), null;
          case 24:
            return renderLanes2 = null, null !== current2 && (renderLanes2 = current2.memoizedState.cache), workInProgress2.memoizedState.cache !== renderLanes2 && (workInProgress2.flags |= 2048), popProvider(CacheContext, workInProgress2), bubbleProperties(workInProgress2), null;
          case 25:
            return null;
          case 30:
            return null;
        }
        throw Error(
          "Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue."
        );
      }
      function unwindWork(current2, workInProgress2) {
        popTreeContext(workInProgress2);
        switch (workInProgress2.tag) {
          case 1:
            return current2 = workInProgress2.flags, current2 & 65536 ? (workInProgress2.flags = current2 & -65537 | 128, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2) : null;
          case 3:
            return popProvider(CacheContext, workInProgress2), popHostContainer(workInProgress2), current2 = workInProgress2.flags, 0 !== (current2 & 65536) && 0 === (current2 & 128) ? (workInProgress2.flags = current2 & -65537 | 128, workInProgress2) : null;
          case 26:
          case 27:
          case 5:
            return popHostContext(workInProgress2), null;
          case 13:
            popSuspenseHandler(workInProgress2);
            current2 = workInProgress2.memoizedState;
            if (null !== current2 && null !== current2.dehydrated) {
              if (null === workInProgress2.alternate)
                throw Error(
                  "Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue."
                );
              resetHydrationState();
            }
            current2 = workInProgress2.flags;
            return current2 & 65536 ? (workInProgress2.flags = current2 & -65537 | 128, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2) : null;
          case 19:
            return pop(suspenseStackCursor, workInProgress2), null;
          case 4:
            return popHostContainer(workInProgress2), null;
          case 10:
            return popProvider(workInProgress2.type, workInProgress2), null;
          case 22:
          case 23:
            return popSuspenseHandler(workInProgress2), popHiddenContext(workInProgress2), null !== current2 && pop(resumedCache, workInProgress2), current2 = workInProgress2.flags, current2 & 65536 ? (workInProgress2.flags = current2 & -65537 | 128, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2) : null;
          case 24:
            return popProvider(CacheContext, workInProgress2), null;
          case 25:
            return null;
          default:
            return null;
        }
      }
      function unwindInterruptedWork(current2, interruptedWork) {
        popTreeContext(interruptedWork);
        switch (interruptedWork.tag) {
          case 3:
            popProvider(CacheContext, interruptedWork);
            popHostContainer(interruptedWork);
            break;
          case 26:
          case 27:
          case 5:
            popHostContext(interruptedWork);
            break;
          case 4:
            popHostContainer(interruptedWork);
            break;
          case 13:
            popSuspenseHandler(interruptedWork);
            break;
          case 19:
            pop(suspenseStackCursor, interruptedWork);
            break;
          case 10:
            popProvider(interruptedWork.type, interruptedWork);
            break;
          case 22:
          case 23:
            popSuspenseHandler(interruptedWork);
            popHiddenContext(interruptedWork);
            null !== current2 && pop(resumedCache, interruptedWork);
            break;
          case 24:
            popProvider(CacheContext, interruptedWork);
        }
      }
      function shouldProfile(current2) {
        return (current2.mode & ProfileMode) !== NoMode;
      }
      function commitHookLayoutEffects(finishedWork, hookFlags) {
        shouldProfile(finishedWork) ? (startEffectTimer(), commitHookEffectListMount(hookFlags, finishedWork), recordEffectDuration()) : commitHookEffectListMount(hookFlags, finishedWork);
      }
      function commitHookLayoutUnmountEffects(finishedWork, nearestMountedAncestor, hookFlags) {
        shouldProfile(finishedWork) ? (startEffectTimer(), commitHookEffectListUnmount(
          hookFlags,
          finishedWork,
          nearestMountedAncestor
        ), recordEffectDuration()) : commitHookEffectListUnmount(
          hookFlags,
          finishedWork,
          nearestMountedAncestor
        );
      }
      function commitHookEffectListMount(flags, finishedWork) {
        try {
          var updateQueue = finishedWork.updateQueue, lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
          if (null !== lastEffect) {
            var firstEffect = lastEffect.next;
            updateQueue = firstEffect;
            do {
              if ((updateQueue.tag & flags) === flags && ((flags & Passive) !== NoFlags ? null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted && injectedProfilingHooks.markComponentPassiveEffectMountStarted(
                finishedWork
              ) : (flags & Layout) !== NoFlags && null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted && injectedProfilingHooks.markComponentLayoutEffectMountStarted(
                finishedWork
              ), lastEffect = void 0, (flags & Insertion7) !== NoFlags && (isRunningInsertionEffect = true), lastEffect = runWithFiberInDEV(
                finishedWork,
                callCreateInDEV,
                updateQueue
              ), (flags & Insertion7) !== NoFlags && (isRunningInsertionEffect = false), (flags & Passive) !== NoFlags ? null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped && injectedProfilingHooks.markComponentPassiveEffectMountStopped() : (flags & Layout) !== NoFlags && null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped && injectedProfilingHooks.markComponentLayoutEffectMountStopped(), void 0 !== lastEffect && "function" !== typeof lastEffect)) {
                var hookName = void 0;
                hookName = 0 !== (updateQueue.tag & Layout) ? "useLayoutEffect" : 0 !== (updateQueue.tag & Insertion7) ? "useInsertionEffect" : "useEffect";
                var addendum = void 0;
                addendum = null === lastEffect ? " You returned null. If your effect does not require clean up, return undefined (or nothing)." : "function" === typeof lastEffect.then ? "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://react.dev/link/hooks-data-fetching" : " You returned: " + lastEffect;
                runWithFiberInDEV(
                  finishedWork,
                  function(n, a) {
                    console.error(
                      "%s must not return anything besides a function, which is used for clean-up.%s",
                      n,
                      a
                    );
                  },
                  hookName,
                  addendum
                );
              }
              updateQueue = updateQueue.next;
            } while (updateQueue !== firstEffect);
          }
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
      }
      function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
        try {
          var updateQueue = finishedWork.updateQueue, lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
          if (null !== lastEffect) {
            var firstEffect = lastEffect.next;
            updateQueue = firstEffect;
            do {
              if ((updateQueue.tag & flags) === flags) {
                var inst = updateQueue.inst, destroy = inst.destroy;
                void 0 !== destroy && (inst.destroy = void 0, (flags & Passive) !== NoFlags ? null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted && injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(
                  finishedWork
                ) : (flags & Layout) !== NoFlags && null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted && injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(
                  finishedWork
                ), (flags & Insertion7) !== NoFlags && (isRunningInsertionEffect = true), lastEffect = finishedWork, runWithFiberInDEV(
                  lastEffect,
                  callDestroyInDEV,
                  lastEffect,
                  nearestMountedAncestor,
                  destroy
                ), (flags & Insertion7) !== NoFlags && (isRunningInsertionEffect = false), (flags & Passive) !== NoFlags ? null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped && injectedProfilingHooks.markComponentPassiveEffectUnmountStopped() : (flags & Layout) !== NoFlags && null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped && injectedProfilingHooks.markComponentLayoutEffectUnmountStopped());
              }
              updateQueue = updateQueue.next;
            } while (updateQueue !== firstEffect);
          }
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
      }
      function commitHookPassiveMountEffects(finishedWork, hookFlags) {
        shouldProfile(finishedWork) ? (startEffectTimer(), commitHookEffectListMount(hookFlags, finishedWork), recordEffectDuration()) : commitHookEffectListMount(hookFlags, finishedWork);
      }
      function commitHookPassiveUnmountEffects(finishedWork, nearestMountedAncestor, hookFlags) {
        shouldProfile(finishedWork) ? (startEffectTimer(), commitHookEffectListUnmount(
          hookFlags,
          finishedWork,
          nearestMountedAncestor
        ), recordEffectDuration()) : commitHookEffectListUnmount(
          hookFlags,
          finishedWork,
          nearestMountedAncestor
        );
      }
      function commitClassCallbacks(finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        if (null !== updateQueue) {
          var instance = finishedWork.stateNode;
          finishedWork.type.defaultProps || "ref" in finishedWork.memoizedProps || didWarnAboutReassigningProps || (instance.props !== finishedWork.memoizedProps && console.error(
            "Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
            getComponentNameFromFiber(finishedWork) || "instance"
          ), instance.state !== finishedWork.memoizedState && console.error(
            "Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
            getComponentNameFromFiber(finishedWork) || "instance"
          ));
          try {
            runWithFiberInDEV(
              finishedWork,
              commitCallbacks,
              updateQueue,
              instance
            );
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
      }
      function callGetSnapshotBeforeUpdates(instance, prevProps, prevState) {
        return instance.getSnapshotBeforeUpdate(prevProps, prevState);
      }
      function commitClassSnapshot(finishedWork, current2) {
        var prevProps = current2.memoizedProps, prevState = current2.memoizedState;
        current2 = finishedWork.stateNode;
        finishedWork.type.defaultProps || "ref" in finishedWork.memoizedProps || didWarnAboutReassigningProps || (current2.props !== finishedWork.memoizedProps && console.error(
          "Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
          getComponentNameFromFiber(finishedWork) || "instance"
        ), current2.state !== finishedWork.memoizedState && console.error(
          "Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
          getComponentNameFromFiber(finishedWork) || "instance"
        ));
        try {
          var resolvedPrevProps = resolveClassComponentProps(
            finishedWork.type,
            prevProps,
            finishedWork.elementType === finishedWork.type
          );
          var snapshot = runWithFiberInDEV(
            finishedWork,
            callGetSnapshotBeforeUpdates,
            current2,
            resolvedPrevProps,
            prevState
          );
          prevProps = didWarnAboutUndefinedSnapshotBeforeUpdate;
          void 0 !== snapshot || prevProps.has(finishedWork.type) || (prevProps.add(finishedWork.type), runWithFiberInDEV(finishedWork, function() {
            console.error(
              "%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.",
              getComponentNameFromFiber(finishedWork)
            );
          }));
          current2.__reactInternalSnapshotBeforeUpdate = snapshot;
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
      }
      function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
        instance.props = resolveClassComponentProps(
          current2.type,
          current2.memoizedProps
        );
        instance.state = current2.memoizedState;
        shouldProfile(current2) ? (startEffectTimer(), runWithFiberInDEV(
          current2,
          callComponentWillUnmountInDEV,
          current2,
          nearestMountedAncestor,
          instance
        ), recordEffectDuration()) : runWithFiberInDEV(
          current2,
          callComponentWillUnmountInDEV,
          current2,
          nearestMountedAncestor,
          instance
        );
      }
      function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (null !== ref) {
          switch (finishedWork.tag) {
            case 26:
            case 27:
            case 5:
              var instanceToUse = finishedWork.stateNode;
              break;
            case 30:
              instanceToUse = finishedWork.stateNode;
              break;
            default:
              instanceToUse = finishedWork.stateNode;
          }
          if ("function" === typeof ref)
            if (shouldProfile(finishedWork))
              try {
                startEffectTimer(), finishedWork.refCleanup = ref(instanceToUse);
              } finally {
                recordEffectDuration();
              }
            else finishedWork.refCleanup = ref(instanceToUse);
          else
            "string" === typeof ref ? console.error("String refs are no longer supported.") : ref.hasOwnProperty("current") || console.error(
              "Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().",
              getComponentNameFromFiber(finishedWork)
            ), ref.current = instanceToUse;
        }
      }
      function safelyAttachRef(current2, nearestMountedAncestor) {
        try {
          runWithFiberInDEV(current2, commitAttachRef, current2);
        } catch (error) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error);
        }
      }
      function safelyDetachRef(current2, nearestMountedAncestor) {
        var ref = current2.ref, refCleanup = current2.refCleanup;
        if (null !== ref)
          if ("function" === typeof refCleanup)
            try {
              if (shouldProfile(current2))
                try {
                  startEffectTimer(), runWithFiberInDEV(current2, refCleanup);
                } finally {
                  recordEffectDuration(current2);
                }
              else runWithFiberInDEV(current2, refCleanup);
            } catch (error) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error);
            } finally {
              current2.refCleanup = null, current2 = current2.alternate, null != current2 && (current2.refCleanup = null);
            }
          else if ("function" === typeof ref)
            try {
              if (shouldProfile(current2))
                try {
                  startEffectTimer(), runWithFiberInDEV(current2, ref, null);
                } finally {
                  recordEffectDuration(current2);
                }
              else runWithFiberInDEV(current2, ref, null);
            } catch (error$7) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error$7);
            }
          else ref.current = null;
      }
      function commitProfiler(finishedWork, current2, commitStartTime2, effectDuration) {
        var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onCommit = _finishedWork$memoize.onCommit;
        _finishedWork$memoize = _finishedWork$memoize.onRender;
        current2 = null === current2 ? "mount" : "update";
        currentUpdateIsNested && (current2 = "nested-update");
        "function" === typeof _finishedWork$memoize && _finishedWork$memoize(
          id,
          current2,
          finishedWork.actualDuration,
          finishedWork.treeBaseDuration,
          finishedWork.actualStartTime,
          commitStartTime2
        );
        "function" === typeof onCommit && onCommit(
          finishedWork.memoizedProps.id,
          current2,
          effectDuration,
          commitStartTime2
        );
      }
      function commitProfilerPostCommitImpl(finishedWork, current2, commitStartTime2, passiveEffectDuration) {
        var _finishedWork$memoize2 = finishedWork.memoizedProps;
        finishedWork = _finishedWork$memoize2.id;
        _finishedWork$memoize2 = _finishedWork$memoize2.onPostCommit;
        current2 = null === current2 ? "mount" : "update";
        currentUpdateIsNested && (current2 = "nested-update");
        "function" === typeof _finishedWork$memoize2 && _finishedWork$memoize2(
          finishedWork,
          current2,
          passiveEffectDuration,
          commitStartTime2
        );
      }
      function commitHostMount(finishedWork) {
        var type = finishedWork.type, props = finishedWork.memoizedProps, instance = finishedWork.stateNode;
        try {
          runWithFiberInDEV(
            finishedWork,
            commitMount,
            instance,
            type,
            props,
            finishedWork
          );
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
      }
      function commitHostUpdate(finishedWork, newProps, oldProps) {
        try {
          runWithFiberInDEV(
            finishedWork,
            commitUpdate,
            finishedWork.stateNode,
            finishedWork.type,
            oldProps,
            newProps,
            finishedWork
          );
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
      }
      function isHostParent(fiber) {
        return 5 === fiber.tag || 3 === fiber.tag || 26 === fiber.tag || 27 === fiber.tag && isSingletonScope(fiber.type) || 4 === fiber.tag;
      }
      function getHostSibling(fiber) {
        a: for (; ; ) {
          for (; null === fiber.sibling; ) {
            if (null === fiber.return || isHostParent(fiber.return)) return null;
            fiber = fiber.return;
          }
          fiber.sibling.return = fiber.return;
          for (fiber = fiber.sibling; 5 !== fiber.tag && 6 !== fiber.tag && 18 !== fiber.tag; ) {
            if (27 === fiber.tag && isSingletonScope(fiber.type)) continue a;
            if (fiber.flags & 2) continue a;
            if (null === fiber.child || 4 === fiber.tag) continue a;
            else fiber.child.return = fiber, fiber = fiber.child;
          }
          if (!(fiber.flags & 2)) return fiber.stateNode;
        }
      }
      function insertOrAppendPlacementNodeIntoContainer(node2, before, parent) {
        var tag = node2.tag;
        if (5 === tag || 6 === tag)
          node2 = node2.stateNode, before ? (9 === parent.nodeType ? parent.body : "HTML" === parent.nodeName ? parent.ownerDocument.body : parent).insertBefore(node2, before) : (before = 9 === parent.nodeType ? parent.body : "HTML" === parent.nodeName ? parent.ownerDocument.body : parent, before.appendChild(node2), parent = parent._reactRootContainer, null !== parent && void 0 !== parent || null !== before.onclick || (before.onclick = noop$1));
        else if (4 !== tag && (27 === tag && isSingletonScope(node2.type) && (parent = node2.stateNode, before = null), node2 = node2.child, null !== node2))
          for (insertOrAppendPlacementNodeIntoContainer(node2, before, parent), node2 = node2.sibling; null !== node2; )
            insertOrAppendPlacementNodeIntoContainer(node2, before, parent), node2 = node2.sibling;
      }
      function insertOrAppendPlacementNode(node2, before, parent) {
        var tag = node2.tag;
        if (5 === tag || 6 === tag)
          node2 = node2.stateNode, before ? parent.insertBefore(node2, before) : parent.appendChild(node2);
        else if (4 !== tag && (27 === tag && isSingletonScope(node2.type) && (parent = node2.stateNode), node2 = node2.child, null !== node2))
          for (insertOrAppendPlacementNode(node2, before, parent), node2 = node2.sibling; null !== node2; )
            insertOrAppendPlacementNode(node2, before, parent), node2 = node2.sibling;
      }
      function commitPlacement(finishedWork) {
        for (var hostParentFiber, parentFiber = finishedWork.return; null !== parentFiber; ) {
          if (isHostParent(parentFiber)) {
            hostParentFiber = parentFiber;
            break;
          }
          parentFiber = parentFiber.return;
        }
        if (null == hostParentFiber)
          throw Error(
            "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."
          );
        switch (hostParentFiber.tag) {
          case 27:
            hostParentFiber = hostParentFiber.stateNode;
            parentFiber = getHostSibling(finishedWork);
            insertOrAppendPlacementNode(
              finishedWork,
              parentFiber,
              hostParentFiber
            );
            break;
          case 5:
            parentFiber = hostParentFiber.stateNode;
            hostParentFiber.flags & 32 && (resetTextContent(parentFiber), hostParentFiber.flags &= -33);
            hostParentFiber = getHostSibling(finishedWork);
            insertOrAppendPlacementNode(
              finishedWork,
              hostParentFiber,
              parentFiber
            );
            break;
          case 3:
          case 4:
            hostParentFiber = hostParentFiber.stateNode.containerInfo;
            parentFiber = getHostSibling(finishedWork);
            insertOrAppendPlacementNodeIntoContainer(
              finishedWork,
              parentFiber,
              hostParentFiber
            );
            break;
          default:
            throw Error(
              "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue."
            );
        }
      }
      function commitHostSingletonAcquisition(finishedWork) {
        var singleton = finishedWork.stateNode, props = finishedWork.memoizedProps;
        try {
          runWithFiberInDEV(
            finishedWork,
            acquireSingletonInstance,
            finishedWork.type,
            props,
            singleton,
            finishedWork
          );
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
      }
      function commitBeforeMutationEffects(root2, firstChild) {
        root2 = root2.containerInfo;
        eventsEnabled = _enabled;
        root2 = getActiveElementDeep(root2);
        if (hasSelectionCapabilities(root2)) {
          if ("selectionStart" in root2)
            var JSCompiler_temp = {
              start: root2.selectionStart,
              end: root2.selectionEnd
            };
          else
            a: {
              JSCompiler_temp = (JSCompiler_temp = root2.ownerDocument) && JSCompiler_temp.defaultView || window;
              var selection = JSCompiler_temp.getSelection && JSCompiler_temp.getSelection();
              if (selection && 0 !== selection.rangeCount) {
                JSCompiler_temp = selection.anchorNode;
                var anchorOffset = selection.anchorOffset, focusNode = selection.focusNode;
                selection = selection.focusOffset;
                try {
                  JSCompiler_temp.nodeType, focusNode.nodeType;
                } catch (e$2) {
                  JSCompiler_temp = null;
                  break a;
                }
                var length2 = 0, start = -1, end = -1, indexWithinAnchor = 0, indexWithinFocus = 0, node2 = root2, parentNode = null;
                b: for (; ; ) {
                  for (var next2; ; ) {
                    node2 !== JSCompiler_temp || 0 !== anchorOffset && 3 !== node2.nodeType || (start = length2 + anchorOffset);
                    node2 !== focusNode || 0 !== selection && 3 !== node2.nodeType || (end = length2 + selection);
                    3 === node2.nodeType && (length2 += node2.nodeValue.length);
                    if (null === (next2 = node2.firstChild)) break;
                    parentNode = node2;
                    node2 = next2;
                  }
                  for (; ; ) {
                    if (node2 === root2) break b;
                    parentNode === JSCompiler_temp && ++indexWithinAnchor === anchorOffset && (start = length2);
                    parentNode === focusNode && ++indexWithinFocus === selection && (end = length2);
                    if (null !== (next2 = node2.nextSibling)) break;
                    node2 = parentNode;
                    parentNode = node2.parentNode;
                  }
                  node2 = next2;
                }
                JSCompiler_temp = -1 === start || -1 === end ? null : { start, end };
              } else JSCompiler_temp = null;
            }
          JSCompiler_temp = JSCompiler_temp || { start: 0, end: 0 };
        } else JSCompiler_temp = null;
        selectionInformation = {
          focusedElem: root2,
          selectionRange: JSCompiler_temp
        };
        _enabled = false;
        for (nextEffect = firstChild; null !== nextEffect; )
          if (firstChild = nextEffect, root2 = firstChild.child, 0 !== (firstChild.subtreeFlags & 1024) && null !== root2)
            root2.return = firstChild, nextEffect = root2;
          else
            for (; null !== nextEffect; ) {
              root2 = firstChild = nextEffect;
              JSCompiler_temp = root2.alternate;
              anchorOffset = root2.flags;
              switch (root2.tag) {
                case 0:
                  break;
                case 11:
                case 15:
                  break;
                case 1:
                  0 !== (anchorOffset & 1024) && null !== JSCompiler_temp && commitClassSnapshot(root2, JSCompiler_temp);
                  break;
                case 3:
                  if (0 !== (anchorOffset & 1024)) {
                    if (root2 = root2.stateNode.containerInfo, JSCompiler_temp = root2.nodeType, 9 === JSCompiler_temp)
                      clearContainerSparingly(root2);
                    else if (1 === JSCompiler_temp)
                      switch (root2.nodeName) {
                        case "HEAD":
                        case "HTML":
                        case "BODY":
                          clearContainerSparingly(root2);
                          break;
                        default:
                          root2.textContent = "";
                      }
                  }
                  break;
                case 5:
                case 26:
                case 27:
                case 6:
                case 4:
                case 17:
                  break;
                default:
                  if (0 !== (anchorOffset & 1024))
                    throw Error(
                      "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."
                    );
              }
              root2 = firstChild.sibling;
              if (null !== root2) {
                root2.return = firstChild.return;
                nextEffect = root2;
                break;
              }
              nextEffect = firstChild.return;
            }
      }
      function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork) {
        var flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case 0:
          case 11:
          case 15:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            flags & 4 && commitHookLayoutEffects(finishedWork, Layout | HasEffect);
            break;
          case 1:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            if (flags & 4)
              if (finishedRoot = finishedWork.stateNode, null === current2)
                finishedWork.type.defaultProps || "ref" in finishedWork.memoizedProps || didWarnAboutReassigningProps || (finishedRoot.props !== finishedWork.memoizedProps && console.error(
                  "Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
                  getComponentNameFromFiber(finishedWork) || "instance"
                ), finishedRoot.state !== finishedWork.memoizedState && console.error(
                  "Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
                  getComponentNameFromFiber(finishedWork) || "instance"
                )), shouldProfile(finishedWork) ? (startEffectTimer(), runWithFiberInDEV(
                  finishedWork,
                  callComponentDidMountInDEV,
                  finishedWork,
                  finishedRoot
                ), recordEffectDuration()) : runWithFiberInDEV(
                  finishedWork,
                  callComponentDidMountInDEV,
                  finishedWork,
                  finishedRoot
                );
              else {
                var prevProps = resolveClassComponentProps(
                  finishedWork.type,
                  current2.memoizedProps
                );
                current2 = current2.memoizedState;
                finishedWork.type.defaultProps || "ref" in finishedWork.memoizedProps || didWarnAboutReassigningProps || (finishedRoot.props !== finishedWork.memoizedProps && console.error(
                  "Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
                  getComponentNameFromFiber(finishedWork) || "instance"
                ), finishedRoot.state !== finishedWork.memoizedState && console.error(
                  "Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
                  getComponentNameFromFiber(finishedWork) || "instance"
                ));
                shouldProfile(finishedWork) ? (startEffectTimer(), runWithFiberInDEV(
                  finishedWork,
                  callComponentDidUpdateInDEV,
                  finishedWork,
                  finishedRoot,
                  prevProps,
                  current2,
                  finishedRoot.__reactInternalSnapshotBeforeUpdate
                ), recordEffectDuration()) : runWithFiberInDEV(
                  finishedWork,
                  callComponentDidUpdateInDEV,
                  finishedWork,
                  finishedRoot,
                  prevProps,
                  current2,
                  finishedRoot.__reactInternalSnapshotBeforeUpdate
                );
              }
            flags & 64 && commitClassCallbacks(finishedWork);
            flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
            break;
          case 3:
            current2 = pushNestedEffectDurations();
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            if (flags & 64 && (flags = finishedWork.updateQueue, null !== flags)) {
              prevProps = null;
              if (null !== finishedWork.child)
                switch (finishedWork.child.tag) {
                  case 27:
                  case 5:
                    prevProps = finishedWork.child.stateNode;
                    break;
                  case 1:
                    prevProps = finishedWork.child.stateNode;
                }
              try {
                runWithFiberInDEV(
                  finishedWork,
                  commitCallbacks,
                  flags,
                  prevProps
                );
              } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
              }
            }
            finishedRoot.effectDuration += popNestedEffectDurations(current2);
            break;
          case 27:
            null === current2 && flags & 4 && commitHostSingletonAcquisition(finishedWork);
          case 26:
          case 5:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            null === current2 && flags & 4 && commitHostMount(finishedWork);
            flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
            break;
          case 12:
            if (flags & 4) {
              flags = pushNestedEffectDurations();
              recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
              finishedRoot = finishedWork.stateNode;
              finishedRoot.effectDuration += bubbleNestedEffectDurations(flags);
              try {
                runWithFiberInDEV(
                  finishedWork,
                  commitProfiler,
                  finishedWork,
                  current2,
                  commitStartTime,
                  finishedRoot.effectDuration
                );
              } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
              }
            } else recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            break;
          case 13:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            flags & 4 && commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
            flags & 64 && (finishedRoot = finishedWork.memoizedState, null !== finishedRoot && (finishedRoot = finishedRoot.dehydrated, null !== finishedRoot && (finishedWork = retryDehydratedSuspenseBoundary.bind(
              null,
              finishedWork
            ), registerSuspenseInstanceRetry(finishedRoot, finishedWork))));
            break;
          case 22:
            flags = null !== finishedWork.memoizedState || offscreenSubtreeIsHidden;
            if (!flags) {
              current2 = null !== current2 && null !== current2.memoizedState || offscreenSubtreeWasHidden;
              prevProps = offscreenSubtreeIsHidden;
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeIsHidden = flags;
              (offscreenSubtreeWasHidden = current2) && !prevOffscreenSubtreeWasHidden ? recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                0 !== (finishedWork.subtreeFlags & 8772)
              ) : recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
              offscreenSubtreeIsHidden = prevProps;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            }
            break;
          case 30:
            break;
          default:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
        }
      }
      function detachFiberAfterEffects(fiber) {
        var alternate = fiber.alternate;
        null !== alternate && (fiber.alternate = null, detachFiberAfterEffects(alternate));
        fiber.child = null;
        fiber.deletions = null;
        fiber.sibling = null;
        5 === fiber.tag && (alternate = fiber.stateNode, null !== alternate && detachDeletedInstance(alternate));
        fiber.stateNode = null;
        fiber._debugOwner = null;
        fiber.return = null;
        fiber.dependencies = null;
        fiber.memoizedProps = null;
        fiber.memoizedState = null;
        fiber.pendingProps = null;
        fiber.stateNode = null;
        fiber.updateQueue = null;
      }
      function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
        for (parent = parent.child; null !== parent; )
          commitDeletionEffectsOnFiber(
            finishedRoot,
            nearestMountedAncestor,
            parent
          ), parent = parent.sibling;
      }
      function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
        if (injectedHook && "function" === typeof injectedHook.onCommitFiberUnmount)
          try {
            injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);
          } catch (err) {
            hasLoggedError || (hasLoggedError = true, console.error(
              "React instrumentation encountered an error: %s",
              err
            ));
          }
        switch (deletedFiber.tag) {
          case 26:
            offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
            deletedFiber.memoizedState ? deletedFiber.memoizedState.count-- : deletedFiber.stateNode && (deletedFiber = deletedFiber.stateNode, deletedFiber.parentNode.removeChild(deletedFiber));
            break;
          case 27:
            offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
            var prevHostParent = hostParent, prevHostParentIsContainer = hostParentIsContainer;
            isSingletonScope(deletedFiber.type) && (hostParent = deletedFiber.stateNode, hostParentIsContainer = false);
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
            runWithFiberInDEV(
              deletedFiber,
              releaseSingletonInstance,
              deletedFiber.stateNode
            );
            hostParent = prevHostParent;
            hostParentIsContainer = prevHostParentIsContainer;
            break;
          case 5:
            offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
          case 6:
            prevHostParent = hostParent;
            prevHostParentIsContainer = hostParentIsContainer;
            hostParent = null;
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
            hostParent = prevHostParent;
            hostParentIsContainer = prevHostParentIsContainer;
            if (null !== hostParent)
              if (hostParentIsContainer)
                try {
                  runWithFiberInDEV(
                    deletedFiber,
                    removeChildFromContainer,
                    hostParent,
                    deletedFiber.stateNode
                  );
                } catch (error) {
                  captureCommitPhaseError(
                    deletedFiber,
                    nearestMountedAncestor,
                    error
                  );
                }
              else
                try {
                  runWithFiberInDEV(
                    deletedFiber,
                    removeChild,
                    hostParent,
                    deletedFiber.stateNode
                  );
                } catch (error) {
                  captureCommitPhaseError(
                    deletedFiber,
                    nearestMountedAncestor,
                    error
                  );
                }
            break;
          case 18:
            null !== hostParent && (hostParentIsContainer ? (finishedRoot = hostParent, clearSuspenseBoundary(
              9 === finishedRoot.nodeType ? finishedRoot.body : "HTML" === finishedRoot.nodeName ? finishedRoot.ownerDocument.body : finishedRoot,
              deletedFiber.stateNode
            ), retryIfBlockedOn(finishedRoot)) : clearSuspenseBoundary(hostParent, deletedFiber.stateNode));
            break;
          case 4:
            prevHostParent = hostParent;
            prevHostParentIsContainer = hostParentIsContainer;
            hostParent = deletedFiber.stateNode.containerInfo;
            hostParentIsContainer = true;
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
            hostParent = prevHostParent;
            hostParentIsContainer = prevHostParentIsContainer;
            break;
          case 0:
          case 11:
          case 14:
          case 15:
            offscreenSubtreeWasHidden || commitHookEffectListUnmount(
              Insertion7,
              deletedFiber,
              nearestMountedAncestor
            );
            offscreenSubtreeWasHidden || commitHookLayoutUnmountEffects(
              deletedFiber,
              nearestMountedAncestor,
              Layout
            );
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
            break;
          case 1:
            offscreenSubtreeWasHidden || (safelyDetachRef(deletedFiber, nearestMountedAncestor), prevHostParent = deletedFiber.stateNode, "function" === typeof prevHostParent.componentWillUnmount && safelyCallComponentWillUnmount(
              deletedFiber,
              nearestMountedAncestor,
              prevHostParent
            ));
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
            break;
          case 21:
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
            break;
          case 22:
            offscreenSubtreeWasHidden = (prevHostParent = offscreenSubtreeWasHidden) || null !== deletedFiber.memoizedState;
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
            offscreenSubtreeWasHidden = prevHostParent;
            break;
          default:
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
        }
      }
      function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        if (null === finishedWork.memoizedState && (finishedRoot = finishedWork.alternate, null !== finishedRoot && (finishedRoot = finishedRoot.memoizedState, null !== finishedRoot && (finishedRoot = finishedRoot.dehydrated, null !== finishedRoot))))
          try {
            runWithFiberInDEV(
              finishedWork,
              commitHydratedSuspenseInstance,
              finishedRoot
            );
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
      }
      function getRetryCache(finishedWork) {
        switch (finishedWork.tag) {
          case 13:
          case 19:
            var retryCache = finishedWork.stateNode;
            null === retryCache && (retryCache = finishedWork.stateNode = new PossiblyWeakSet());
            return retryCache;
          case 22:
            return finishedWork = finishedWork.stateNode, retryCache = finishedWork._retryCache, null === retryCache && (retryCache = finishedWork._retryCache = new PossiblyWeakSet()), retryCache;
          default:
            throw Error(
              "Unexpected Suspense handler tag (" + finishedWork.tag + "). This is a bug in React."
            );
        }
      }
      function attachSuspenseRetryListeners(finishedWork, wakeables) {
        var retryCache = getRetryCache(finishedWork);
        wakeables.forEach(function(wakeable) {
          var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
          if (!retryCache.has(wakeable)) {
            retryCache.add(wakeable);
            if (isDevToolsPresent)
              if (null !== inProgressLanes && null !== inProgressRoot)
                restorePendingUpdaters(inProgressRoot, inProgressLanes);
              else
                throw Error(
                  "Expected finished root and lanes to be set. This is a bug in React."
                );
            wakeable.then(retry, retry);
          }
        });
      }
      function recursivelyTraverseMutationEffects(root$jscomp$0, parentFiber) {
        var deletions = parentFiber.deletions;
        if (null !== deletions)
          for (var i = 0; i < deletions.length; i++) {
            var root2 = root$jscomp$0, returnFiber = parentFiber, deletedFiber = deletions[i], parent = returnFiber;
            a: for (; null !== parent; ) {
              switch (parent.tag) {
                case 27:
                  if (isSingletonScope(parent.type)) {
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break a;
                  }
                  break;
                case 5:
                  hostParent = parent.stateNode;
                  hostParentIsContainer = false;
                  break a;
                case 3:
                case 4:
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break a;
              }
              parent = parent.return;
            }
            if (null === hostParent)
              throw Error(
                "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."
              );
            commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
            hostParent = null;
            hostParentIsContainer = false;
            root2 = deletedFiber;
            returnFiber = root2.alternate;
            null !== returnFiber && (returnFiber.return = null);
            root2.return = null;
          }
        if (parentFiber.subtreeFlags & 13878)
          for (parentFiber = parentFiber.child; null !== parentFiber; )
            commitMutationEffectsOnFiber(parentFiber, root$jscomp$0), parentFiber = parentFiber.sibling;
      }
      function commitMutationEffectsOnFiber(finishedWork, root2) {
        var current2 = finishedWork.alternate, flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 4 && (commitHookEffectListUnmount(
              Insertion7 | HasEffect,
              finishedWork,
              finishedWork.return
            ), commitHookEffectListMount(Insertion7 | HasEffect, finishedWork), commitHookLayoutUnmountEffects(
              finishedWork,
              finishedWork.return,
              Layout | HasEffect
            ));
            break;
          case 1:
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 512 && (offscreenSubtreeWasHidden || null === current2 || safelyDetachRef(current2, current2.return));
            flags & 64 && offscreenSubtreeIsHidden && (finishedWork = finishedWork.updateQueue, null !== finishedWork && (flags = finishedWork.callbacks, null !== flags && (current2 = finishedWork.shared.hiddenCallbacks, finishedWork.shared.hiddenCallbacks = null === current2 ? flags : current2.concat(flags))));
            break;
          case 26:
            var hoistableRoot = currentHoistableRoot;
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 512 && (offscreenSubtreeWasHidden || null === current2 || safelyDetachRef(current2, current2.return));
            if (flags & 4)
              if (root2 = null !== current2 ? current2.memoizedState : null, flags = finishedWork.memoizedState, null === current2)
                if (null === flags)
                  if (null === finishedWork.stateNode) {
                    a: {
                      flags = finishedWork.type;
                      current2 = finishedWork.memoizedProps;
                      root2 = hoistableRoot.ownerDocument || hoistableRoot;
                      b: switch (flags) {
                        case "title":
                          hoistableRoot = root2.getElementsByTagName("title")[0];
                          if (!hoistableRoot || hoistableRoot[internalHoistableMarker] || hoistableRoot[internalInstanceKey] || hoistableRoot.namespaceURI === SVG_NAMESPACE || hoistableRoot.hasAttribute("itemprop"))
                            hoistableRoot = root2.createElement(flags), root2.head.insertBefore(
                              hoistableRoot,
                              root2.querySelector("head > title")
                            );
                          setInitialProperties(hoistableRoot, flags, current2);
                          hoistableRoot[internalInstanceKey] = finishedWork;
                          markNodeAsHoistable(hoistableRoot);
                          flags = hoistableRoot;
                          break a;
                        case "link":
                          var maybeNodes = getHydratableHoistableCache(
                            "link",
                            "href",
                            root2
                          ).get(flags + (current2.href || ""));
                          if (maybeNodes) {
                            for (var i = 0; i < maybeNodes.length; i++)
                              if (hoistableRoot = maybeNodes[i], hoistableRoot.getAttribute("href") === (null == current2.href || "" === current2.href ? null : current2.href) && hoistableRoot.getAttribute("rel") === (null == current2.rel ? null : current2.rel) && hoistableRoot.getAttribute("title") === (null == current2.title ? null : current2.title) && hoistableRoot.getAttribute("crossorigin") === (null == current2.crossOrigin ? null : current2.crossOrigin)) {
                                maybeNodes.splice(i, 1);
                                break b;
                              }
                          }
                          hoistableRoot = root2.createElement(flags);
                          setInitialProperties(hoistableRoot, flags, current2);
                          root2.head.appendChild(hoistableRoot);
                          break;
                        case "meta":
                          if (maybeNodes = getHydratableHoistableCache(
                            "meta",
                            "content",
                            root2
                          ).get(flags + (current2.content || ""))) {
                            for (i = 0; i < maybeNodes.length; i++)
                              if (hoistableRoot = maybeNodes[i], checkAttributeStringCoercion(
                                current2.content,
                                "content"
                              ), hoistableRoot.getAttribute("content") === (null == current2.content ? null : "" + current2.content) && hoistableRoot.getAttribute("name") === (null == current2.name ? null : current2.name) && hoistableRoot.getAttribute("property") === (null == current2.property ? null : current2.property) && hoistableRoot.getAttribute("http-equiv") === (null == current2.httpEquiv ? null : current2.httpEquiv) && hoistableRoot.getAttribute("charset") === (null == current2.charSet ? null : current2.charSet)) {
                                maybeNodes.splice(i, 1);
                                break b;
                              }
                          }
                          hoistableRoot = root2.createElement(flags);
                          setInitialProperties(hoistableRoot, flags, current2);
                          root2.head.appendChild(hoistableRoot);
                          break;
                        default:
                          throw Error(
                            'getNodesForType encountered a type it did not expect: "' + flags + '". This is a bug in React.'
                          );
                      }
                      hoistableRoot[internalInstanceKey] = finishedWork;
                      markNodeAsHoistable(hoistableRoot);
                      flags = hoistableRoot;
                    }
                    finishedWork.stateNode = flags;
                  } else
                    mountHoistable(
                      hoistableRoot,
                      finishedWork.type,
                      finishedWork.stateNode
                    );
                else
                  finishedWork.stateNode = acquireResource(
                    hoistableRoot,
                    flags,
                    finishedWork.memoizedProps
                  );
              else
                root2 !== flags ? (null === root2 ? null !== current2.stateNode && (current2 = current2.stateNode, current2.parentNode.removeChild(current2)) : root2.count--, null === flags ? mountHoistable(
                  hoistableRoot,
                  finishedWork.type,
                  finishedWork.stateNode
                ) : acquireResource(
                  hoistableRoot,
                  flags,
                  finishedWork.memoizedProps
                )) : null === flags && null !== finishedWork.stateNode && commitHostUpdate(
                  finishedWork,
                  finishedWork.memoizedProps,
                  current2.memoizedProps
                );
            break;
          case 27:
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 512 && (offscreenSubtreeWasHidden || null === current2 || safelyDetachRef(current2, current2.return));
            null !== current2 && flags & 4 && commitHostUpdate(
              finishedWork,
              finishedWork.memoizedProps,
              current2.memoizedProps
            );
            break;
          case 5:
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 512 && (offscreenSubtreeWasHidden || null === current2 || safelyDetachRef(current2, current2.return));
            if (finishedWork.flags & 32) {
              root2 = finishedWork.stateNode;
              try {
                runWithFiberInDEV(finishedWork, resetTextContent, root2);
              } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
              }
            }
            flags & 4 && null != finishedWork.stateNode && (root2 = finishedWork.memoizedProps, commitHostUpdate(
              finishedWork,
              root2,
              null !== current2 ? current2.memoizedProps : root2
            ));
            flags & 1024 && (needsFormReset = true, "form" !== finishedWork.type && console.error(
              "Unexpected host component type. Expected a form. This is a bug in React."
            ));
            break;
          case 6:
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & 4) {
              if (null === finishedWork.stateNode)
                throw Error(
                  "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue."
                );
              flags = finishedWork.memoizedProps;
              current2 = null !== current2 ? current2.memoizedProps : flags;
              root2 = finishedWork.stateNode;
              try {
                runWithFiberInDEV(
                  finishedWork,
                  commitTextUpdate,
                  root2,
                  current2,
                  flags
                );
              } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
              }
            }
            break;
          case 3:
            hoistableRoot = pushNestedEffectDurations();
            tagCaches = null;
            maybeNodes = currentHoistableRoot;
            currentHoistableRoot = getHoistableRoot(root2.containerInfo);
            recursivelyTraverseMutationEffects(root2, finishedWork);
            currentHoistableRoot = maybeNodes;
            commitReconciliationEffects(finishedWork);
            if (flags & 4 && null !== current2 && current2.memoizedState.isDehydrated)
              try {
                runWithFiberInDEV(
                  finishedWork,
                  commitHydratedContainer,
                  root2.containerInfo
                );
              } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
              }
            needsFormReset && (needsFormReset = false, recursivelyResetForms(finishedWork));
            root2.effectDuration += popNestedEffectDurations(hoistableRoot);
            break;
          case 4:
            flags = currentHoistableRoot;
            currentHoistableRoot = getHoistableRoot(
              finishedWork.stateNode.containerInfo
            );
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            currentHoistableRoot = flags;
            break;
          case 12:
            flags = pushNestedEffectDurations();
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            finishedWork.stateNode.effectDuration += bubbleNestedEffectDurations(flags);
            break;
          case 13:
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            finishedWork.child.flags & 8192 && null !== finishedWork.memoizedState !== (null !== current2 && null !== current2.memoizedState) && (globalMostRecentFallbackTime = now$1());
            flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
            break;
          case 22:
            hoistableRoot = null !== finishedWork.memoizedState;
            var wasHidden = null !== current2 && null !== current2.memoizedState, prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden, prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
            offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden || hoistableRoot;
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || wasHidden;
            recursivelyTraverseMutationEffects(root2, finishedWork);
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
            commitReconciliationEffects(finishedWork);
            if (flags & 8192)
              a: for (root2 = finishedWork.stateNode, root2._visibility = hoistableRoot ? root2._visibility & ~OffscreenVisible : root2._visibility | OffscreenVisible, hoistableRoot && (null === current2 || wasHidden || offscreenSubtreeIsHidden || offscreenSubtreeWasHidden || recursivelyTraverseDisappearLayoutEffects(finishedWork)), current2 = null, root2 = finishedWork; ; ) {
                if (5 === root2.tag || 26 === root2.tag) {
                  if (null === current2) {
                    wasHidden = current2 = root2;
                    try {
                      maybeNodes = wasHidden.stateNode, hoistableRoot ? runWithFiberInDEV(wasHidden, hideInstance, maybeNodes) : runWithFiberInDEV(
                        wasHidden,
                        unhideInstance,
                        wasHidden.stateNode,
                        wasHidden.memoizedProps
                      );
                    } catch (error) {
                      captureCommitPhaseError(wasHidden, wasHidden.return, error);
                    }
                  }
                } else if (6 === root2.tag) {
                  if (null === current2) {
                    wasHidden = root2;
                    try {
                      i = wasHidden.stateNode, hoistableRoot ? runWithFiberInDEV(wasHidden, hideTextInstance, i) : runWithFiberInDEV(
                        wasHidden,
                        unhideTextInstance,
                        i,
                        wasHidden.memoizedProps
                      );
                    } catch (error) {
                      captureCommitPhaseError(wasHidden, wasHidden.return, error);
                    }
                  }
                } else if ((22 !== root2.tag && 23 !== root2.tag || null === root2.memoizedState || root2 === finishedWork) && null !== root2.child) {
                  root2.child.return = root2;
                  root2 = root2.child;
                  continue;
                }
                if (root2 === finishedWork) break a;
                for (; null === root2.sibling; ) {
                  if (null === root2.return || root2.return === finishedWork)
                    break a;
                  current2 === root2 && (current2 = null);
                  root2 = root2.return;
                }
                current2 === root2 && (current2 = null);
                root2.sibling.return = root2.return;
                root2 = root2.sibling;
              }
            flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (current2 = flags.retryQueue, null !== current2 && (flags.retryQueue = null, attachSuspenseRetryListeners(finishedWork, current2))));
            break;
          case 19:
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
            break;
          case 30:
            break;
          case 21:
            break;
          default:
            recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork);
        }
      }
      function commitReconciliationEffects(finishedWork) {
        var flags = finishedWork.flags;
        if (flags & 2) {
          try {
            runWithFiberInDEV(finishedWork, commitPlacement, finishedWork);
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
          finishedWork.flags &= -3;
        }
        flags & 4096 && (finishedWork.flags &= -4097);
      }
      function recursivelyResetForms(parentFiber) {
        if (parentFiber.subtreeFlags & 1024)
          for (parentFiber = parentFiber.child; null !== parentFiber; ) {
            var fiber = parentFiber;
            recursivelyResetForms(fiber);
            5 === fiber.tag && fiber.flags & 1024 && fiber.stateNode.reset();
            parentFiber = parentFiber.sibling;
          }
      }
      function recursivelyTraverseLayoutEffects(root2, parentFiber) {
        if (parentFiber.subtreeFlags & 8772)
          for (parentFiber = parentFiber.child; null !== parentFiber; )
            commitLayoutEffectOnFiber(root2, parentFiber.alternate, parentFiber), parentFiber = parentFiber.sibling;
      }
      function disappearLayoutEffects(finishedWork) {
        switch (finishedWork.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
            commitHookLayoutUnmountEffects(
              finishedWork,
              finishedWork.return,
              Layout
            );
            recursivelyTraverseDisappearLayoutEffects(finishedWork);
            break;
          case 1:
            safelyDetachRef(finishedWork, finishedWork.return);
            var instance = finishedWork.stateNode;
            "function" === typeof instance.componentWillUnmount && safelyCallComponentWillUnmount(
              finishedWork,
              finishedWork.return,
              instance
            );
            recursivelyTraverseDisappearLayoutEffects(finishedWork);
            break;
          case 27:
            runWithFiberInDEV(
              finishedWork,
              releaseSingletonInstance,
              finishedWork.stateNode
            );
          case 26:
          case 5:
            safelyDetachRef(finishedWork, finishedWork.return);
            recursivelyTraverseDisappearLayoutEffects(finishedWork);
            break;
          case 22:
            null === finishedWork.memoizedState && recursivelyTraverseDisappearLayoutEffects(finishedWork);
            break;
          case 30:
            recursivelyTraverseDisappearLayoutEffects(finishedWork);
            break;
          default:
            recursivelyTraverseDisappearLayoutEffects(finishedWork);
        }
      }
      function recursivelyTraverseDisappearLayoutEffects(parentFiber) {
        for (parentFiber = parentFiber.child; null !== parentFiber; )
          disappearLayoutEffects(parentFiber), parentFiber = parentFiber.sibling;
      }
      function reappearLayoutEffects(finishedRoot, current2, finishedWork, includeWorkInProgressEffects) {
        var flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case 0:
          case 11:
          case 15:
            recursivelyTraverseReappearLayoutEffects(
              finishedRoot,
              finishedWork,
              includeWorkInProgressEffects
            );
            commitHookLayoutEffects(finishedWork, Layout);
            break;
          case 1:
            recursivelyTraverseReappearLayoutEffects(
              finishedRoot,
              finishedWork,
              includeWorkInProgressEffects
            );
            current2 = finishedWork.stateNode;
            "function" === typeof current2.componentDidMount && runWithFiberInDEV(
              finishedWork,
              callComponentDidMountInDEV,
              finishedWork,
              current2
            );
            current2 = finishedWork.updateQueue;
            if (null !== current2) {
              finishedRoot = finishedWork.stateNode;
              try {
                runWithFiberInDEV(
                  finishedWork,
                  commitHiddenCallbacks,
                  current2,
                  finishedRoot
                );
              } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
              }
            }
            includeWorkInProgressEffects && flags & 64 && commitClassCallbacks(finishedWork);
            safelyAttachRef(finishedWork, finishedWork.return);
            break;
          case 27:
            commitHostSingletonAcquisition(finishedWork);
          case 26:
          case 5:
            recursivelyTraverseReappearLayoutEffects(
              finishedRoot,
              finishedWork,
              includeWorkInProgressEffects
            );
            includeWorkInProgressEffects && null === current2 && flags & 4 && commitHostMount(finishedWork);
            safelyAttachRef(finishedWork, finishedWork.return);
            break;
          case 12:
            if (includeWorkInProgressEffects && flags & 4) {
              flags = pushNestedEffectDurations();
              recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
              includeWorkInProgressEffects = finishedWork.stateNode;
              includeWorkInProgressEffects.effectDuration += bubbleNestedEffectDurations(flags);
              try {
                runWithFiberInDEV(
                  finishedWork,
                  commitProfiler,
                  finishedWork,
                  current2,
                  commitStartTime,
                  includeWorkInProgressEffects.effectDuration
                );
              } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
              }
            } else
              recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
            break;
          case 13:
            recursivelyTraverseReappearLayoutEffects(
              finishedRoot,
              finishedWork,
              includeWorkInProgressEffects
            );
            includeWorkInProgressEffects && flags & 4 && commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
            break;
          case 22:
            null === finishedWork.memoizedState && recursivelyTraverseReappearLayoutEffects(
              finishedRoot,
              finishedWork,
              includeWorkInProgressEffects
            );
            safelyAttachRef(finishedWork, finishedWork.return);
            break;
          case 30:
            break;
          default:
            recursivelyTraverseReappearLayoutEffects(
              finishedRoot,
              finishedWork,
              includeWorkInProgressEffects
            );
        }
      }
      function recursivelyTraverseReappearLayoutEffects(finishedRoot, parentFiber, includeWorkInProgressEffects) {
        includeWorkInProgressEffects = includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 8772);
        for (parentFiber = parentFiber.child; null !== parentFiber; )
          reappearLayoutEffects(
            finishedRoot,
            parentFiber.alternate,
            parentFiber,
            includeWorkInProgressEffects
          ), parentFiber = parentFiber.sibling;
      }
      function commitOffscreenPassiveMountEffects(current2, finishedWork) {
        var previousCache = null;
        null !== current2 && null !== current2.memoizedState && null !== current2.memoizedState.cachePool && (previousCache = current2.memoizedState.cachePool.pool);
        current2 = null;
        null !== finishedWork.memoizedState && null !== finishedWork.memoizedState.cachePool && (current2 = finishedWork.memoizedState.cachePool.pool);
        current2 !== previousCache && (null != current2 && retainCache(current2), null != previousCache && releaseCache(previousCache));
      }
      function commitCachePassiveMountEffect(current2, finishedWork) {
        current2 = null;
        null !== finishedWork.alternate && (current2 = finishedWork.alternate.memoizedState.cache);
        finishedWork = finishedWork.memoizedState.cache;
        finishedWork !== current2 && (retainCache(finishedWork), null != current2 && releaseCache(current2));
      }
      function recursivelyTraversePassiveMountEffects(root2, parentFiber, committedLanes, committedTransitions) {
        if (parentFiber.subtreeFlags & 10256)
          for (parentFiber = parentFiber.child; null !== parentFiber; )
            commitPassiveMountOnFiber(
              root2,
              parentFiber,
              committedLanes,
              committedTransitions
            ), parentFiber = parentFiber.sibling;
      }
      function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
        var flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case 0:
          case 11:
          case 15:
            recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            );
            flags & 2048 && commitHookPassiveMountEffects(finishedWork, Passive | HasEffect);
            break;
          case 1:
            recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            );
            break;
          case 3:
            var prevEffectDuration = pushNestedEffectDurations();
            recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            );
            flags & 2048 && (committedLanes = null, null !== finishedWork.alternate && (committedLanes = finishedWork.alternate.memoizedState.cache), finishedWork = finishedWork.memoizedState.cache, finishedWork !== committedLanes && (retainCache(finishedWork), null != committedLanes && releaseCache(committedLanes)));
            finishedRoot.passiveEffectDuration += popNestedEffectDurations(prevEffectDuration);
            break;
          case 12:
            if (flags & 2048) {
              flags = pushNestedEffectDurations();
              recursivelyTraversePassiveMountEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions
              );
              finishedRoot = finishedWork.stateNode;
              finishedRoot.passiveEffectDuration += bubbleNestedEffectDurations(flags);
              try {
                runWithFiberInDEV(
                  finishedWork,
                  commitProfilerPostCommitImpl,
                  finishedWork,
                  finishedWork.alternate,
                  commitStartTime,
                  finishedRoot.passiveEffectDuration
                );
              } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
              }
            } else
              recursivelyTraversePassiveMountEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions
              );
            break;
          case 13:
            recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            );
            break;
          case 23:
            break;
          case 22:
            prevEffectDuration = finishedWork.stateNode;
            var _current = finishedWork.alternate;
            null !== finishedWork.memoizedState ? prevEffectDuration._visibility & OffscreenPassiveEffectsConnected ? recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            ) : recursivelyTraverseAtomicPassiveEffects(
              finishedRoot,
              finishedWork
            ) : prevEffectDuration._visibility & OffscreenPassiveEffectsConnected ? recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            ) : (prevEffectDuration._visibility |= OffscreenPassiveEffectsConnected, recursivelyTraverseReconnectPassiveEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions,
              0 !== (finishedWork.subtreeFlags & 10256)
            ));
            flags & 2048 && commitOffscreenPassiveMountEffects(_current, finishedWork);
            break;
          case 24:
            recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            );
            flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
            break;
          default:
            recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            );
        }
      }
      function recursivelyTraverseReconnectPassiveEffects(finishedRoot, parentFiber, committedLanes, committedTransitions, includeWorkInProgressEffects) {
        includeWorkInProgressEffects = includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 10256);
        for (parentFiber = parentFiber.child; null !== parentFiber; )
          reconnectPassiveEffects(
            finishedRoot,
            parentFiber,
            committedLanes,
            committedTransitions,
            includeWorkInProgressEffects
          ), parentFiber = parentFiber.sibling;
      }
      function reconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects) {
        var flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case 0:
          case 11:
          case 15:
            recursivelyTraverseReconnectPassiveEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions,
              includeWorkInProgressEffects
            );
            commitHookPassiveMountEffects(finishedWork, Passive);
            break;
          case 23:
            break;
          case 22:
            var _instance2 = finishedWork.stateNode;
            null !== finishedWork.memoizedState ? _instance2._visibility & OffscreenPassiveEffectsConnected ? recursivelyTraverseReconnectPassiveEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions,
              includeWorkInProgressEffects
            ) : recursivelyTraverseAtomicPassiveEffects(
              finishedRoot,
              finishedWork
            ) : (_instance2._visibility |= OffscreenPassiveEffectsConnected, recursivelyTraverseReconnectPassiveEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions,
              includeWorkInProgressEffects
            ));
            includeWorkInProgressEffects && flags & 2048 && commitOffscreenPassiveMountEffects(
              finishedWork.alternate,
              finishedWork
            );
            break;
          case 24:
            recursivelyTraverseReconnectPassiveEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions,
              includeWorkInProgressEffects
            );
            includeWorkInProgressEffects && flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
            break;
          default:
            recursivelyTraverseReconnectPassiveEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions,
              includeWorkInProgressEffects
            );
        }
      }
      function recursivelyTraverseAtomicPassiveEffects(finishedRoot$jscomp$0, parentFiber) {
        if (parentFiber.subtreeFlags & 10256)
          for (parentFiber = parentFiber.child; null !== parentFiber; ) {
            var finishedRoot = finishedRoot$jscomp$0, finishedWork = parentFiber, flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case 22:
                recursivelyTraverseAtomicPassiveEffects(
                  finishedRoot,
                  finishedWork
                );
                flags & 2048 && commitOffscreenPassiveMountEffects(
                  finishedWork.alternate,
                  finishedWork
                );
                break;
              case 24:
                recursivelyTraverseAtomicPassiveEffects(
                  finishedRoot,
                  finishedWork
                );
                flags & 2048 && commitCachePassiveMountEffect(
                  finishedWork.alternate,
                  finishedWork
                );
                break;
              default:
                recursivelyTraverseAtomicPassiveEffects(
                  finishedRoot,
                  finishedWork
                );
            }
            parentFiber = parentFiber.sibling;
          }
      }
      function recursivelyAccumulateSuspenseyCommit(parentFiber) {
        if (parentFiber.subtreeFlags & suspenseyCommitFlag)
          for (parentFiber = parentFiber.child; null !== parentFiber; )
            accumulateSuspenseyCommitOnFiber(parentFiber), parentFiber = parentFiber.sibling;
      }
      function accumulateSuspenseyCommitOnFiber(fiber) {
        switch (fiber.tag) {
          case 26:
            recursivelyAccumulateSuspenseyCommit(fiber);
            fiber.flags & suspenseyCommitFlag && null !== fiber.memoizedState && suspendResource(
              currentHoistableRoot,
              fiber.memoizedState,
              fiber.memoizedProps
            );
            break;
          case 5:
            recursivelyAccumulateSuspenseyCommit(fiber);
            break;
          case 3:
          case 4:
            var previousHoistableRoot = currentHoistableRoot;
            currentHoistableRoot = getHoistableRoot(
              fiber.stateNode.containerInfo
            );
            recursivelyAccumulateSuspenseyCommit(fiber);
            currentHoistableRoot = previousHoistableRoot;
            break;
          case 22:
            null === fiber.memoizedState && (previousHoistableRoot = fiber.alternate, null !== previousHoistableRoot && null !== previousHoistableRoot.memoizedState ? (previousHoistableRoot = suspenseyCommitFlag, suspenseyCommitFlag = 16777216, recursivelyAccumulateSuspenseyCommit(fiber), suspenseyCommitFlag = previousHoistableRoot) : recursivelyAccumulateSuspenseyCommit(fiber));
            break;
          default:
            recursivelyAccumulateSuspenseyCommit(fiber);
        }
      }
      function detachAlternateSiblings(parentFiber) {
        var previousFiber = parentFiber.alternate;
        if (null !== previousFiber && (parentFiber = previousFiber.child, null !== parentFiber)) {
          previousFiber.child = null;
          do
            previousFiber = parentFiber.sibling, parentFiber.sibling = null, parentFiber = previousFiber;
          while (null !== parentFiber);
        }
      }
      function recursivelyTraversePassiveUnmountEffects(parentFiber) {
        var deletions = parentFiber.deletions;
        if (0 !== (parentFiber.flags & 16)) {
          if (null !== deletions)
            for (var i = 0; i < deletions.length; i++) {
              var childToDelete = deletions[i];
              nextEffect = childToDelete;
              commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
                childToDelete,
                parentFiber
              );
            }
          detachAlternateSiblings(parentFiber);
        }
        if (parentFiber.subtreeFlags & 10256)
          for (parentFiber = parentFiber.child; null !== parentFiber; )
            commitPassiveUnmountOnFiber(parentFiber), parentFiber = parentFiber.sibling;
      }
      function commitPassiveUnmountOnFiber(finishedWork) {
        switch (finishedWork.tag) {
          case 0:
          case 11:
          case 15:
            recursivelyTraversePassiveUnmountEffects(finishedWork);
            finishedWork.flags & 2048 && commitHookPassiveUnmountEffects(
              finishedWork,
              finishedWork.return,
              Passive | HasEffect
            );
            break;
          case 3:
            var prevEffectDuration = pushNestedEffectDurations();
            recursivelyTraversePassiveUnmountEffects(finishedWork);
            finishedWork.stateNode.passiveEffectDuration += popNestedEffectDurations(prevEffectDuration);
            break;
          case 12:
            prevEffectDuration = pushNestedEffectDurations();
            recursivelyTraversePassiveUnmountEffects(finishedWork);
            finishedWork.stateNode.passiveEffectDuration += bubbleNestedEffectDurations(prevEffectDuration);
            break;
          case 22:
            prevEffectDuration = finishedWork.stateNode;
            null !== finishedWork.memoizedState && prevEffectDuration._visibility & OffscreenPassiveEffectsConnected && (null === finishedWork.return || 13 !== finishedWork.return.tag) ? (prevEffectDuration._visibility &= ~OffscreenPassiveEffectsConnected, recursivelyTraverseDisconnectPassiveEffects(finishedWork)) : recursivelyTraversePassiveUnmountEffects(finishedWork);
            break;
          default:
            recursivelyTraversePassiveUnmountEffects(finishedWork);
        }
      }
      function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {
        var deletions = parentFiber.deletions;
        if (0 !== (parentFiber.flags & 16)) {
          if (null !== deletions)
            for (var i = 0; i < deletions.length; i++) {
              var childToDelete = deletions[i];
              nextEffect = childToDelete;
              commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
                childToDelete,
                parentFiber
              );
            }
          detachAlternateSiblings(parentFiber);
        }
        for (parentFiber = parentFiber.child; null !== parentFiber; )
          disconnectPassiveEffect(parentFiber), parentFiber = parentFiber.sibling;
      }
      function disconnectPassiveEffect(finishedWork) {
        switch (finishedWork.tag) {
          case 0:
          case 11:
          case 15:
            commitHookPassiveUnmountEffects(
              finishedWork,
              finishedWork.return,
              Passive
            );
            recursivelyTraverseDisconnectPassiveEffects(finishedWork);
            break;
          case 22:
            var instance = finishedWork.stateNode;
            instance._visibility & OffscreenPassiveEffectsConnected && (instance._visibility &= ~OffscreenPassiveEffectsConnected, recursivelyTraverseDisconnectPassiveEffects(finishedWork));
            break;
          default:
            recursivelyTraverseDisconnectPassiveEffects(finishedWork);
        }
      }
      function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
        for (; null !== nextEffect; ) {
          var fiber = nextEffect, current2 = fiber;
          switch (current2.tag) {
            case 0:
            case 11:
            case 15:
              commitHookPassiveUnmountEffects(
                current2,
                nearestMountedAncestor,
                Passive
              );
              break;
            case 23:
            case 22:
              null !== current2.memoizedState && null !== current2.memoizedState.cachePool && (current2 = current2.memoizedState.cachePool.pool, null != current2 && retainCache(current2));
              break;
            case 24:
              releaseCache(current2.memoizedState.cache);
          }
          current2 = fiber.child;
          if (null !== current2) current2.return = fiber, nextEffect = current2;
          else
            a: for (fiber = deletedSubtreeRoot; null !== nextEffect; ) {
              current2 = nextEffect;
              var sibling = current2.sibling, returnFiber = current2.return;
              detachFiberAfterEffects(current2);
              if (current2 === fiber) {
                nextEffect = null;
                break a;
              }
              if (null !== sibling) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                break a;
              }
              nextEffect = returnFiber;
            }
        }
      }
      function onCommitRoot() {
        commitHooks.forEach(function(commitHook) {
          return commitHook();
        });
      }
      function isConcurrentActEnvironment() {
        var isReactActEnvironmentGlobal = "undefined" !== typeof IS_REACT_ACT_ENVIRONMENT ? IS_REACT_ACT_ENVIRONMENT : void 0;
        isReactActEnvironmentGlobal || null === ReactSharedInternals.actQueue || console.error(
          "The current testing environment is not configured to support act(...)"
        );
        return isReactActEnvironmentGlobal;
      }
      function requestUpdateLane(fiber) {
        if ((executionContext & RenderContext) !== NoContext && 0 !== workInProgressRootRenderLanes)
          return workInProgressRootRenderLanes & -workInProgressRootRenderLanes;
        var transition = ReactSharedInternals.T;
        return null !== transition ? (transition._updatedFibers || (transition._updatedFibers = /* @__PURE__ */ new Set()), transition._updatedFibers.add(fiber), fiber = currentEntangledLane, 0 !== fiber ? fiber : requestTransitionLane()) : resolveUpdatePriority();
      }
      function requestDeferredLane() {
        0 === workInProgressDeferredLane && (workInProgressDeferredLane = 0 === (workInProgressRootRenderLanes & 536870912) || isHydrating ? claimNextTransitionLane() : 536870912);
        var suspenseHandler = suspenseHandlerStackCursor.current;
        null !== suspenseHandler && (suspenseHandler.flags |= 32);
        return workInProgressDeferredLane;
      }
      function scheduleUpdateOnFiber(root2, fiber, lane) {
        isRunningInsertionEffect && console.error("useInsertionEffect must not schedule updates.");
        isFlushingPassiveEffects && (didScheduleUpdateDuringPassiveEffects = true);
        if (root2 === workInProgressRoot && (workInProgressSuspendedReason === SuspendedOnData || workInProgressSuspendedReason === SuspendedOnAction) || null !== root2.cancelPendingCommit)
          prepareFreshStack(root2, 0), markRootSuspended(
            root2,
            workInProgressRootRenderLanes,
            workInProgressDeferredLane,
            false
          );
        markRootUpdated$1(root2, lane);
        if (0 !== (executionContext & RenderContext) && root2 === workInProgressRoot) {
          if (isRendering)
            switch (fiber.tag) {
              case 0:
              case 11:
              case 15:
                root2 = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                didWarnAboutUpdateInRenderForAnotherComponent.has(root2) || (didWarnAboutUpdateInRenderForAnotherComponent.add(root2), fiber = getComponentNameFromFiber(fiber) || "Unknown", console.error(
                  "Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://react.dev/link/setstate-in-render",
                  fiber,
                  root2,
                  root2
                ));
                break;
              case 1:
                didWarnAboutUpdateInRender || (console.error(
                  "Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."
                ), didWarnAboutUpdateInRender = true);
            }
        } else
          isDevToolsPresent && addFiberToLanesMap(root2, fiber, lane), warnIfUpdatesNotWrappedWithActDEV(fiber), root2 === workInProgressRoot && ((executionContext & RenderContext) === NoContext && (workInProgressRootInterleavedUpdatedLanes |= lane), workInProgressRootExitStatus === RootSuspendedWithDelay && markRootSuspended(
            root2,
            workInProgressRootRenderLanes,
            workInProgressDeferredLane,
            false
          )), ensureRootIsScheduled(root2);
      }
      function performWorkOnRoot(root2, lanes, forceSync) {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
          throw Error("Should not already be working.");
        var shouldTimeSlice = !forceSync && 0 === (lanes & 124) && 0 === (lanes & root2.expiredLanes) || checkIfRootIsPrerendering(root2, lanes), exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes, true), renderWasConcurrent = shouldTimeSlice;
        do {
          if (exitStatus === RootInProgress) {
            workInProgressRootIsPrerendering && !shouldTimeSlice && markRootSuspended(root2, lanes, 0, false);
            break;
          } else {
            forceSync = root2.current.alternate;
            if (renderWasConcurrent && !isRenderConsistentWithExternalStores(forceSync)) {
              exitStatus = renderRootSync(root2, lanes, false);
              renderWasConcurrent = false;
              continue;
            }
            if (exitStatus === RootErrored) {
              renderWasConcurrent = lanes;
              if (root2.errorRecoveryDisabledLanes & renderWasConcurrent)
                var errorRetryLanes = 0;
              else
                errorRetryLanes = root2.pendingLanes & -536870913, errorRetryLanes = 0 !== errorRetryLanes ? errorRetryLanes : errorRetryLanes & 536870912 ? 536870912 : 0;
              if (0 !== errorRetryLanes) {
                lanes = errorRetryLanes;
                a: {
                  exitStatus = root2;
                  var errorRetryLanes$jscomp$0 = errorRetryLanes;
                  errorRetryLanes = workInProgressRootConcurrentErrors;
                  var wasRootDehydrated = exitStatus.current.memoizedState.isDehydrated;
                  wasRootDehydrated && (prepareFreshStack(
                    exitStatus,
                    errorRetryLanes$jscomp$0
                  ).flags |= 256);
                  errorRetryLanes$jscomp$0 = renderRootSync(
                    exitStatus,
                    errorRetryLanes$jscomp$0,
                    false
                  );
                  if (errorRetryLanes$jscomp$0 !== RootErrored) {
                    if (workInProgressRootDidAttachPingListener && !wasRootDehydrated) {
                      exitStatus.errorRecoveryDisabledLanes |= renderWasConcurrent;
                      workInProgressRootInterleavedUpdatedLanes |= renderWasConcurrent;
                      exitStatus = RootSuspendedWithDelay;
                      break a;
                    }
                    exitStatus = workInProgressRootRecoverableErrors;
                    workInProgressRootRecoverableErrors = errorRetryLanes;
                    null !== exitStatus && (null === workInProgressRootRecoverableErrors ? workInProgressRootRecoverableErrors = exitStatus : workInProgressRootRecoverableErrors.push.apply(
                      workInProgressRootRecoverableErrors,
                      exitStatus
                    ));
                  }
                  exitStatus = errorRetryLanes$jscomp$0;
                }
                renderWasConcurrent = false;
                if (exitStatus !== RootErrored) continue;
              }
            }
            if (exitStatus === RootFatalErrored) {
              prepareFreshStack(root2, 0);
              markRootSuspended(root2, lanes, 0, true);
              break;
            }
            a: {
              shouldTimeSlice = root2;
              switch (exitStatus) {
                case RootInProgress:
                case RootFatalErrored:
                  throw Error("Root did not complete. This is a bug in React.");
                case RootSuspendedWithDelay:
                  if ((lanes & 4194048) !== lanes) break;
                case RootSuspendedAtTheShell:
                  markRootSuspended(
                    shouldTimeSlice,
                    lanes,
                    workInProgressDeferredLane,
                    !workInProgressRootDidSkipSuspendedSiblings
                  );
                  break a;
                case RootErrored:
                  workInProgressRootRecoverableErrors = null;
                  break;
                case RootSuspended:
                case RootCompleted:
                  break;
                default:
                  throw Error("Unknown root exit status.");
              }
              if (null !== ReactSharedInternals.actQueue)
                commitRoot(
                  shouldTimeSlice,
                  forceSync,
                  lanes,
                  workInProgressRootRecoverableErrors,
                  workInProgressTransitions,
                  workInProgressRootDidIncludeRecursiveRenderUpdate,
                  workInProgressDeferredLane,
                  workInProgressRootInterleavedUpdatedLanes,
                  workInProgressSuspendedRetryLanes
                );
              else {
                if ((lanes & 62914560) === lanes && (renderWasConcurrent = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now$1(), 10 < renderWasConcurrent)) {
                  markRootSuspended(
                    shouldTimeSlice,
                    lanes,
                    workInProgressDeferredLane,
                    !workInProgressRootDidSkipSuspendedSiblings
                  );
                  if (0 !== getNextLanes(shouldTimeSlice, 0, true)) break a;
                  shouldTimeSlice.timeoutHandle = scheduleTimeout(
                    commitRootWhenReady.bind(
                      null,
                      shouldTimeSlice,
                      forceSync,
                      workInProgressRootRecoverableErrors,
                      workInProgressTransitions,
                      workInProgressRootDidIncludeRecursiveRenderUpdate,
                      lanes,
                      workInProgressDeferredLane,
                      workInProgressRootInterleavedUpdatedLanes,
                      workInProgressSuspendedRetryLanes,
                      workInProgressRootDidSkipSuspendedSiblings,
                      exitStatus,
                      THROTTLED_COMMIT,
                      renderStartTime,
                      0
                    ),
                    renderWasConcurrent
                  );
                  break a;
                }
                commitRootWhenReady(
                  shouldTimeSlice,
                  forceSync,
                  workInProgressRootRecoverableErrors,
                  workInProgressTransitions,
                  workInProgressRootDidIncludeRecursiveRenderUpdate,
                  lanes,
                  workInProgressDeferredLane,
                  workInProgressRootInterleavedUpdatedLanes,
                  workInProgressSuspendedRetryLanes,
                  workInProgressRootDidSkipSuspendedSiblings,
                  exitStatus,
                  IMMEDIATE_COMMIT,
                  renderStartTime,
                  0
                );
              }
            }
          }
          break;
        } while (1);
        ensureRootIsScheduled(root2);
      }
      function commitRootWhenReady(root2, finishedWork, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, lanes, spawnedLane, updatedLanes, suspendedRetryLanes, didSkipSuspendedSiblings, exitStatus, suspendedCommitReason, completedRenderStartTime, completedRenderEndTime) {
        root2.timeoutHandle = noTimeout;
        suspendedCommitReason = finishedWork.subtreeFlags;
        if (suspendedCommitReason & 8192 || 16785408 === (suspendedCommitReason & 16785408)) {
          if (suspendedState = { stylesheets: null, count: 0, unsuspend: noop }, accumulateSuspenseyCommitOnFiber(finishedWork), suspendedCommitReason = waitForCommitToBeReady(), null !== suspendedCommitReason) {
            root2.cancelPendingCommit = suspendedCommitReason(
              commitRoot.bind(
                null,
                root2,
                finishedWork,
                lanes,
                recoverableErrors,
                transitions,
                didIncludeRenderPhaseUpdate,
                spawnedLane,
                updatedLanes,
                suspendedRetryLanes,
                exitStatus,
                SUSPENDED_COMMIT,
                completedRenderStartTime,
                completedRenderEndTime
              )
            );
            markRootSuspended(
              root2,
              lanes,
              spawnedLane,
              !didSkipSuspendedSiblings
            );
            return;
          }
        }
        commitRoot(
          root2,
          finishedWork,
          lanes,
          recoverableErrors,
          transitions,
          didIncludeRenderPhaseUpdate,
          spawnedLane,
          updatedLanes,
          suspendedRetryLanes
        );
      }
      function isRenderConsistentWithExternalStores(finishedWork) {
        for (var node2 = finishedWork; ; ) {
          var tag = node2.tag;
          if ((0 === tag || 11 === tag || 15 === tag) && node2.flags & 16384 && (tag = node2.updateQueue, null !== tag && (tag = tag.stores, null !== tag)))
            for (var i = 0; i < tag.length; i++) {
              var check = tag[i], getSnapshot = check.getSnapshot;
              check = check.value;
              try {
                if (!objectIs(getSnapshot(), check)) return false;
              } catch (error) {
                return false;
              }
            }
          tag = node2.child;
          if (node2.subtreeFlags & 16384 && null !== tag)
            tag.return = node2, node2 = tag;
          else {
            if (node2 === finishedWork) break;
            for (; null === node2.sibling; ) {
              if (null === node2.return || node2.return === finishedWork) return true;
              node2 = node2.return;
            }
            node2.sibling.return = node2.return;
            node2 = node2.sibling;
          }
        }
        return true;
      }
      function markRootSuspended(root2, suspendedLanes, spawnedLane, didAttemptEntireTree) {
        suspendedLanes &= ~workInProgressRootPingedLanes;
        suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;
        root2.suspendedLanes |= suspendedLanes;
        root2.pingedLanes &= ~suspendedLanes;
        didAttemptEntireTree && (root2.warmLanes |= suspendedLanes);
        didAttemptEntireTree = root2.expirationTimes;
        for (var lanes = suspendedLanes; 0 < lanes; ) {
          var index = 31 - clz32(lanes), lane = 1 << index;
          didAttemptEntireTree[index] = -1;
          lanes &= ~lane;
        }
        0 !== spawnedLane && markSpawnedDeferredLane(root2, spawnedLane, suspendedLanes);
      }
      function flushSyncWork$1() {
        return (executionContext & (RenderContext | CommitContext)) === NoContext ? (flushSyncWorkAcrossRoots_impl(0, false), false) : true;
      }
      function resetWorkInProgressStack() {
        if (null !== workInProgress) {
          if (workInProgressSuspendedReason === NotSuspended)
            var interruptedWork = workInProgress.return;
          else
            interruptedWork = workInProgress, resetContextDependencies(), resetHooksOnUnwind(interruptedWork), thenableState = null, thenableIndexCounter = 0, interruptedWork = workInProgress;
          for (; null !== interruptedWork; )
            unwindInterruptedWork(interruptedWork.alternate, interruptedWork), interruptedWork = interruptedWork.return;
          workInProgress = null;
        }
      }
      function prepareFreshStack(root2, lanes) {
        var timeoutHandle = root2.timeoutHandle;
        timeoutHandle !== noTimeout && (root2.timeoutHandle = noTimeout, cancelTimeout(timeoutHandle));
        timeoutHandle = root2.cancelPendingCommit;
        null !== timeoutHandle && (root2.cancelPendingCommit = null, timeoutHandle());
        resetWorkInProgressStack();
        workInProgressRoot = root2;
        workInProgress = timeoutHandle = createWorkInProgress(root2.current, null);
        workInProgressRootRenderLanes = lanes;
        workInProgressSuspendedReason = NotSuspended;
        workInProgressThrownValue = null;
        workInProgressRootDidSkipSuspendedSiblings = false;
        workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root2, lanes);
        workInProgressRootDidAttachPingListener = false;
        workInProgressRootExitStatus = RootInProgress;
        workInProgressSuspendedRetryLanes = workInProgressDeferredLane = workInProgressRootPingedLanes = workInProgressRootInterleavedUpdatedLanes = workInProgressRootSkippedLanes = 0;
        workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors = null;
        workInProgressRootDidIncludeRecursiveRenderUpdate = false;
        0 !== (lanes & 8) && (lanes |= lanes & 32);
        var allEntangledLanes = root2.entangledLanes;
        if (0 !== allEntangledLanes)
          for (root2 = root2.entanglements, allEntangledLanes &= lanes; 0 < allEntangledLanes; ) {
            var index = 31 - clz32(allEntangledLanes), lane = 1 << index;
            lanes |= root2[index];
            allEntangledLanes &= ~lane;
          }
        entangledRenderLanes = lanes;
        finishQueueingConcurrentUpdates();
        lanes = getCurrentTime();
        1e3 < lanes - lastResetTime && (ReactSharedInternals.recentlyCreatedOwnerStacks = 0, lastResetTime = lanes);
        ReactStrictModeWarnings.discardPendingWarnings();
        return timeoutHandle;
      }
      function handleThrow(root2, thrownValue) {
        currentlyRenderingFiber = null;
        ReactSharedInternals.H = ContextOnlyDispatcher;
        ReactSharedInternals.getCurrentStack = null;
        isRendering = false;
        current = null;
        thrownValue === SuspenseException || thrownValue === SuspenseActionException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = SuspendedOnImmediate) : thrownValue === SuspenseyCommitException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = SuspendedOnInstance) : workInProgressSuspendedReason = thrownValue === SelectiveHydrationException ? SuspendedOnHydration : null !== thrownValue && "object" === typeof thrownValue && "function" === typeof thrownValue.then ? SuspendedOnDeprecatedThrowPromise : SuspendedOnError;
        workInProgressThrownValue = thrownValue;
        var erroredWork = workInProgress;
        if (null === erroredWork)
          workInProgressRootExitStatus = RootFatalErrored, logUncaughtError(
            root2,
            createCapturedValueAtFiber(thrownValue, root2.current)
          );
        else
          switch (erroredWork.mode & ProfileMode && stopProfilerTimerIfRunningAndRecordDuration(erroredWork), markComponentRenderStopped(), workInProgressSuspendedReason) {
            case SuspendedOnError:
              null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentErrored && injectedProfilingHooks.markComponentErrored(
                erroredWork,
                thrownValue,
                workInProgressRootRenderLanes
              );
              break;
            case SuspendedOnData:
            case SuspendedOnAction:
            case SuspendedOnImmediate:
            case SuspendedOnDeprecatedThrowPromise:
            case SuspendedAndReadyToContinue:
              null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentSuspended && injectedProfilingHooks.markComponentSuspended(
                erroredWork,
                thrownValue,
                workInProgressRootRenderLanes
              );
          }
      }
      function pushDispatcher() {
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = ContextOnlyDispatcher;
        return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;
      }
      function pushAsyncDispatcher() {
        var prevAsyncDispatcher = ReactSharedInternals.A;
        ReactSharedInternals.A = DefaultAsyncDispatcher;
        return prevAsyncDispatcher;
      }
      function renderDidSuspendDelayIfPossible() {
        workInProgressRootExitStatus = RootSuspendedWithDelay;
        workInProgressRootDidSkipSuspendedSiblings || (workInProgressRootRenderLanes & 4194048) !== workInProgressRootRenderLanes && null !== suspenseHandlerStackCursor.current || (workInProgressRootIsPrerendering = true);
        0 === (workInProgressRootSkippedLanes & 134217727) && 0 === (workInProgressRootInterleavedUpdatedLanes & 134217727) || null === workInProgressRoot || markRootSuspended(
          workInProgressRoot,
          workInProgressRootRenderLanes,
          workInProgressDeferredLane,
          false
        );
      }
      function renderRootSync(root2, lanes, shouldYieldForPrerendering) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(), prevAsyncDispatcher = pushAsyncDispatcher();
        if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
          if (isDevToolsPresent) {
            var memoizedUpdaters = root2.memoizedUpdaters;
            0 < memoizedUpdaters.size && (restorePendingUpdaters(root2, workInProgressRootRenderLanes), memoizedUpdaters.clear());
            movePendingFibersToMemoized(root2, lanes);
          }
          workInProgressTransitions = null;
          prepareFreshStack(root2, lanes);
        }
        markRenderStarted(lanes);
        lanes = false;
        memoizedUpdaters = workInProgressRootExitStatus;
        a: do
          try {
            if (workInProgressSuspendedReason !== NotSuspended && null !== workInProgress) {
              var unitOfWork = workInProgress, thrownValue = workInProgressThrownValue;
              switch (workInProgressSuspendedReason) {
                case SuspendedOnHydration:
                  resetWorkInProgressStack();
                  memoizedUpdaters = RootSuspendedAtTheShell;
                  break a;
                case SuspendedOnImmediate:
                case SuspendedOnData:
                case SuspendedOnAction:
                case SuspendedOnDeprecatedThrowPromise:
                  null === suspenseHandlerStackCursor.current && (lanes = true);
                  var reason = workInProgressSuspendedReason;
                  workInProgressSuspendedReason = NotSuspended;
                  workInProgressThrownValue = null;
                  throwAndUnwindWorkLoop(root2, unitOfWork, thrownValue, reason);
                  if (shouldYieldForPrerendering && workInProgressRootIsPrerendering) {
                    memoizedUpdaters = RootInProgress;
                    break a;
                  }
                  break;
                default:
                  reason = workInProgressSuspendedReason, workInProgressSuspendedReason = NotSuspended, workInProgressThrownValue = null, throwAndUnwindWorkLoop(root2, unitOfWork, thrownValue, reason);
              }
            }
            workLoopSync();
            memoizedUpdaters = workInProgressRootExitStatus;
            break;
          } catch (thrownValue$8) {
            handleThrow(root2, thrownValue$8);
          }
        while (1);
        lanes && root2.shellSuspendCounter++;
        resetContextDependencies();
        executionContext = prevExecutionContext;
        ReactSharedInternals.H = prevDispatcher;
        ReactSharedInternals.A = prevAsyncDispatcher;
        markRenderStopped();
        null === workInProgress && (workInProgressRoot = null, workInProgressRootRenderLanes = 0, finishQueueingConcurrentUpdates());
        return memoizedUpdaters;
      }
      function workLoopSync() {
        for (; null !== workInProgress; ) performUnitOfWork(workInProgress);
      }
      function renderRootConcurrent(root2, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(), prevAsyncDispatcher = pushAsyncDispatcher();
        if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
          if (isDevToolsPresent) {
            var memoizedUpdaters = root2.memoizedUpdaters;
            0 < memoizedUpdaters.size && (restorePendingUpdaters(root2, workInProgressRootRenderLanes), memoizedUpdaters.clear());
            movePendingFibersToMemoized(root2, lanes);
          }
          workInProgressTransitions = null;
          workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS;
          prepareFreshStack(root2, lanes);
        } else
          workInProgressRootIsPrerendering = checkIfRootIsPrerendering(
            root2,
            lanes
          );
        markRenderStarted(lanes);
        a: do
          try {
            if (workInProgressSuspendedReason !== NotSuspended && null !== workInProgress)
              b: switch (lanes = workInProgress, memoizedUpdaters = workInProgressThrownValue, workInProgressSuspendedReason) {
                case SuspendedOnError:
                  workInProgressSuspendedReason = NotSuspended;
                  workInProgressThrownValue = null;
                  throwAndUnwindWorkLoop(
                    root2,
                    lanes,
                    memoizedUpdaters,
                    SuspendedOnError
                  );
                  break;
                case SuspendedOnData:
                case SuspendedOnAction:
                  if (isThenableResolved(memoizedUpdaters)) {
                    workInProgressSuspendedReason = NotSuspended;
                    workInProgressThrownValue = null;
                    replaySuspendedUnitOfWork(lanes);
                    break;
                  }
                  lanes = function() {
                    workInProgressSuspendedReason !== SuspendedOnData && workInProgressSuspendedReason !== SuspendedOnAction || workInProgressRoot !== root2 || (workInProgressSuspendedReason = SuspendedAndReadyToContinue);
                    ensureRootIsScheduled(root2);
                  };
                  memoizedUpdaters.then(lanes, lanes);
                  break a;
                case SuspendedOnImmediate:
                  workInProgressSuspendedReason = SuspendedAndReadyToContinue;
                  break a;
                case SuspendedOnInstance:
                  workInProgressSuspendedReason = SuspendedOnInstanceAndReadyToContinue;
                  break a;
                case SuspendedAndReadyToContinue:
                  isThenableResolved(memoizedUpdaters) ? (workInProgressSuspendedReason = NotSuspended, workInProgressThrownValue = null, replaySuspendedUnitOfWork(lanes)) : (workInProgressSuspendedReason = NotSuspended, workInProgressThrownValue = null, throwAndUnwindWorkLoop(
                    root2,
                    lanes,
                    memoizedUpdaters,
                    SuspendedAndReadyToContinue
                  ));
                  break;
                case SuspendedOnInstanceAndReadyToContinue:
                  var resource = null;
                  switch (workInProgress.tag) {
                    case 26:
                      resource = workInProgress.memoizedState;
                    case 5:
                    case 27:
                      var hostFiber = workInProgress;
                      if (resource ? preloadResource(resource) : 1) {
                        workInProgressSuspendedReason = NotSuspended;
                        workInProgressThrownValue = null;
                        var sibling = hostFiber.sibling;
                        if (null !== sibling) workInProgress = sibling;
                        else {
                          var returnFiber = hostFiber.return;
                          null !== returnFiber ? (workInProgress = returnFiber, completeUnitOfWork(returnFiber)) : workInProgress = null;
                        }
                        break b;
                      }
                      break;
                    default:
                      console.error(
                        "Unexpected type of fiber triggered a suspensey commit. This is a bug in React."
                      );
                  }
                  workInProgressSuspendedReason = NotSuspended;
                  workInProgressThrownValue = null;
                  throwAndUnwindWorkLoop(
                    root2,
                    lanes,
                    memoizedUpdaters,
                    SuspendedOnInstanceAndReadyToContinue
                  );
                  break;
                case SuspendedOnDeprecatedThrowPromise:
                  workInProgressSuspendedReason = NotSuspended;
                  workInProgressThrownValue = null;
                  throwAndUnwindWorkLoop(
                    root2,
                    lanes,
                    memoizedUpdaters,
                    SuspendedOnDeprecatedThrowPromise
                  );
                  break;
                case SuspendedOnHydration:
                  resetWorkInProgressStack();
                  workInProgressRootExitStatus = RootSuspendedAtTheShell;
                  break a;
                default:
                  throw Error(
                    "Unexpected SuspendedReason. This is a bug in React."
                  );
              }
            null !== ReactSharedInternals.actQueue ? workLoopSync() : workLoopConcurrentByScheduler();
            break;
          } catch (thrownValue$9) {
            handleThrow(root2, thrownValue$9);
          }
        while (1);
        resetContextDependencies();
        ReactSharedInternals.H = prevDispatcher;
        ReactSharedInternals.A = prevAsyncDispatcher;
        executionContext = prevExecutionContext;
        if (null !== workInProgress)
          return null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markRenderYielded && injectedProfilingHooks.markRenderYielded(), RootInProgress;
        markRenderStopped();
        workInProgressRoot = null;
        workInProgressRootRenderLanes = 0;
        finishQueueingConcurrentUpdates();
        return workInProgressRootExitStatus;
      }
      function workLoopConcurrentByScheduler() {
        for (; null !== workInProgress && !shouldYield(); )
          performUnitOfWork(workInProgress);
      }
      function performUnitOfWork(unitOfWork) {
        var current2 = unitOfWork.alternate;
        (unitOfWork.mode & ProfileMode) !== NoMode ? (startProfilerTimer(unitOfWork), current2 = runWithFiberInDEV(
          unitOfWork,
          beginWork,
          current2,
          unitOfWork,
          entangledRenderLanes
        ), stopProfilerTimerIfRunningAndRecordDuration(unitOfWork)) : current2 = runWithFiberInDEV(
          unitOfWork,
          beginWork,
          current2,
          unitOfWork,
          entangledRenderLanes
        );
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        null === current2 ? completeUnitOfWork(unitOfWork) : workInProgress = current2;
      }
      function replaySuspendedUnitOfWork(unitOfWork) {
        var next2 = runWithFiberInDEV(unitOfWork, replayBeginWork, unitOfWork);
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        null === next2 ? completeUnitOfWork(unitOfWork) : workInProgress = next2;
      }
      function replayBeginWork(unitOfWork) {
        var current2 = unitOfWork.alternate, isProfilingMode = (unitOfWork.mode & ProfileMode) !== NoMode;
        isProfilingMode && startProfilerTimer(unitOfWork);
        switch (unitOfWork.tag) {
          case 15:
          case 0:
            current2 = replayFunctionComponent(
              current2,
              unitOfWork,
              unitOfWork.pendingProps,
              unitOfWork.type,
              void 0,
              workInProgressRootRenderLanes
            );
            break;
          case 11:
            current2 = replayFunctionComponent(
              current2,
              unitOfWork,
              unitOfWork.pendingProps,
              unitOfWork.type.render,
              unitOfWork.ref,
              workInProgressRootRenderLanes
            );
            break;
          case 5:
            resetHooksOnUnwind(unitOfWork);
          default:
            unwindInterruptedWork(current2, unitOfWork), unitOfWork = workInProgress = resetWorkInProgress(unitOfWork, entangledRenderLanes), current2 = beginWork(current2, unitOfWork, entangledRenderLanes);
        }
        isProfilingMode && stopProfilerTimerIfRunningAndRecordDuration(unitOfWork);
        return current2;
      }
      function throwAndUnwindWorkLoop(root2, unitOfWork, thrownValue, suspendedReason) {
        resetContextDependencies();
        resetHooksOnUnwind(unitOfWork);
        thenableState = null;
        thenableIndexCounter = 0;
        var returnFiber = unitOfWork.return;
        try {
          if (throwException(
            root2,
            returnFiber,
            unitOfWork,
            thrownValue,
            workInProgressRootRenderLanes
          )) {
            workInProgressRootExitStatus = RootFatalErrored;
            logUncaughtError(
              root2,
              createCapturedValueAtFiber(thrownValue, root2.current)
            );
            workInProgress = null;
            return;
          }
        } catch (error) {
          if (null !== returnFiber) throw workInProgress = returnFiber, error;
          workInProgressRootExitStatus = RootFatalErrored;
          logUncaughtError(
            root2,
            createCapturedValueAtFiber(thrownValue, root2.current)
          );
          workInProgress = null;
          return;
        }
        if (unitOfWork.flags & 32768) {
          if (isHydrating || suspendedReason === SuspendedOnError) root2 = true;
          else if (workInProgressRootIsPrerendering || 0 !== (workInProgressRootRenderLanes & 536870912))
            root2 = false;
          else if (workInProgressRootDidSkipSuspendedSiblings = root2 = true, suspendedReason === SuspendedOnData || suspendedReason === SuspendedOnAction || suspendedReason === SuspendedOnImmediate || suspendedReason === SuspendedOnDeprecatedThrowPromise)
            suspendedReason = suspenseHandlerStackCursor.current, null !== suspendedReason && 13 === suspendedReason.tag && (suspendedReason.flags |= 16384);
          unwindUnitOfWork(unitOfWork, root2);
        } else completeUnitOfWork(unitOfWork);
      }
      function completeUnitOfWork(unitOfWork) {
        var completedWork = unitOfWork;
        do {
          if (0 !== (completedWork.flags & 32768)) {
            unwindUnitOfWork(
              completedWork,
              workInProgressRootDidSkipSuspendedSiblings
            );
            return;
          }
          var current2 = completedWork.alternate;
          unitOfWork = completedWork.return;
          startProfilerTimer(completedWork);
          current2 = runWithFiberInDEV(
            completedWork,
            completeWork,
            current2,
            completedWork,
            entangledRenderLanes
          );
          (completedWork.mode & ProfileMode) !== NoMode && stopProfilerTimerIfRunningAndRecordIncompleteDuration(completedWork);
          if (null !== current2) {
            workInProgress = current2;
            return;
          }
          completedWork = completedWork.sibling;
          if (null !== completedWork) {
            workInProgress = completedWork;
            return;
          }
          workInProgress = completedWork = unitOfWork;
        } while (null !== completedWork);
        workInProgressRootExitStatus === RootInProgress && (workInProgressRootExitStatus = RootCompleted);
      }
      function unwindUnitOfWork(unitOfWork, skipSiblings) {
        do {
          var next2 = unwindWork(unitOfWork.alternate, unitOfWork);
          if (null !== next2) {
            next2.flags &= 32767;
            workInProgress = next2;
            return;
          }
          if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            stopProfilerTimerIfRunningAndRecordIncompleteDuration(unitOfWork);
            next2 = unitOfWork.actualDuration;
            for (var child = unitOfWork.child; null !== child; )
              next2 += child.actualDuration, child = child.sibling;
            unitOfWork.actualDuration = next2;
          }
          next2 = unitOfWork.return;
          null !== next2 && (next2.flags |= 32768, next2.subtreeFlags = 0, next2.deletions = null);
          if (!skipSiblings && (unitOfWork = unitOfWork.sibling, null !== unitOfWork)) {
            workInProgress = unitOfWork;
            return;
          }
          workInProgress = unitOfWork = next2;
        } while (null !== unitOfWork);
        workInProgressRootExitStatus = RootSuspendedAtTheShell;
        workInProgress = null;
      }
      function commitRoot(root2, finishedWork, lanes, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, spawnedLane, updatedLanes, suspendedRetryLanes) {
        root2.cancelPendingCommit = null;
        do
          flushPendingEffects();
        while (pendingEffectsStatus !== NO_PENDING_EFFECTS);
        ReactStrictModeWarnings.flushLegacyContextWarning();
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
          throw Error("Should not already be working.");
        null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markCommitStarted && injectedProfilingHooks.markCommitStarted(lanes);
        if (null === finishedWork) markCommitStopped();
        else {
          0 === lanes && console.error(
            "finishedLanes should not be empty during a commit. This is a bug in React."
          );
          if (finishedWork === root2.current)
            throw Error(
              "Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue."
            );
          didIncludeRenderPhaseUpdate = finishedWork.lanes | finishedWork.childLanes;
          didIncludeRenderPhaseUpdate |= concurrentlyUpdatedLanes;
          markRootFinished(
            root2,
            lanes,
            didIncludeRenderPhaseUpdate,
            spawnedLane,
            updatedLanes,
            suspendedRetryLanes
          );
          root2 === workInProgressRoot && (workInProgress = workInProgressRoot = null, workInProgressRootRenderLanes = 0);
          pendingFinishedWork = finishedWork;
          pendingEffectsRoot = root2;
          pendingEffectsLanes = lanes;
          pendingEffectsRemainingLanes = didIncludeRenderPhaseUpdate;
          pendingPassiveTransitions = transitions;
          pendingRecoverableErrors = recoverableErrors;
          0 !== (finishedWork.subtreeFlags & 10256) || 0 !== (finishedWork.flags & 10256) ? (root2.callbackNode = null, root2.callbackPriority = 0, scheduleCallback$1(NormalPriority$1, function() {
            flushPassiveEffects(true);
            return null;
          })) : (root2.callbackNode = null, root2.callbackPriority = 0);
          commitStartTime = now();
          recoverableErrors = 0 !== (finishedWork.flags & 13878);
          if (0 !== (finishedWork.subtreeFlags & 13878) || recoverableErrors) {
            recoverableErrors = ReactSharedInternals.T;
            ReactSharedInternals.T = null;
            transitions = ReactDOMSharedInternals.p;
            ReactDOMSharedInternals.p = DiscreteEventPriority;
            spawnedLane = executionContext;
            executionContext |= CommitContext;
            try {
              commitBeforeMutationEffects(root2, finishedWork, lanes);
            } finally {
              executionContext = spawnedLane, ReactDOMSharedInternals.p = transitions, ReactSharedInternals.T = recoverableErrors;
            }
          }
          pendingEffectsStatus = PENDING_MUTATION_PHASE;
          flushMutationEffects();
          flushLayoutEffects();
          flushSpawnedWork();
        }
      }
      function flushMutationEffects() {
        if (pendingEffectsStatus === PENDING_MUTATION_PHASE) {
          pendingEffectsStatus = NO_PENDING_EFFECTS;
          var root2 = pendingEffectsRoot, finishedWork = pendingFinishedWork, lanes = pendingEffectsLanes, rootMutationHasEffect = 0 !== (finishedWork.flags & 13878);
          if (0 !== (finishedWork.subtreeFlags & 13878) || rootMutationHasEffect) {
            rootMutationHasEffect = ReactSharedInternals.T;
            ReactSharedInternals.T = null;
            var previousPriority = ReactDOMSharedInternals.p;
            ReactDOMSharedInternals.p = DiscreteEventPriority;
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            try {
              inProgressLanes = lanes;
              inProgressRoot = root2;
              commitMutationEffectsOnFiber(finishedWork, root2);
              inProgressRoot = inProgressLanes = null;
              lanes = selectionInformation;
              var curFocusedElem = getActiveElementDeep(root2.containerInfo), priorFocusedElem = lanes.focusedElem, priorSelectionRange = lanes.selectionRange;
              if (curFocusedElem !== priorFocusedElem && priorFocusedElem && priorFocusedElem.ownerDocument && containsNode(
                priorFocusedElem.ownerDocument.documentElement,
                priorFocusedElem
              )) {
                if (null !== priorSelectionRange && hasSelectionCapabilities(priorFocusedElem)) {
                  var start = priorSelectionRange.start, end = priorSelectionRange.end;
                  void 0 === end && (end = start);
                  if ("selectionStart" in priorFocusedElem)
                    priorFocusedElem.selectionStart = start, priorFocusedElem.selectionEnd = Math.min(
                      end,
                      priorFocusedElem.value.length
                    );
                  else {
                    var doc = priorFocusedElem.ownerDocument || document, win = doc && doc.defaultView || window;
                    if (win.getSelection) {
                      var selection = win.getSelection(), length2 = priorFocusedElem.textContent.length, start$jscomp$0 = Math.min(
                        priorSelectionRange.start,
                        length2
                      ), end$jscomp$0 = void 0 === priorSelectionRange.end ? start$jscomp$0 : Math.min(priorSelectionRange.end, length2);
                      !selection.extend && start$jscomp$0 > end$jscomp$0 && (curFocusedElem = end$jscomp$0, end$jscomp$0 = start$jscomp$0, start$jscomp$0 = curFocusedElem);
                      var startMarker = getNodeForCharacterOffset(
                        priorFocusedElem,
                        start$jscomp$0
                      ), endMarker = getNodeForCharacterOffset(
                        priorFocusedElem,
                        end$jscomp$0
                      );
                      if (startMarker && endMarker && (1 !== selection.rangeCount || selection.anchorNode !== startMarker.node || selection.anchorOffset !== startMarker.offset || selection.focusNode !== endMarker.node || selection.focusOffset !== endMarker.offset)) {
                        var range = doc.createRange();
                        range.setStart(startMarker.node, startMarker.offset);
                        selection.removeAllRanges();
                        start$jscomp$0 > end$jscomp$0 ? (selection.addRange(range), selection.extend(endMarker.node, endMarker.offset)) : (range.setEnd(endMarker.node, endMarker.offset), selection.addRange(range));
                      }
                    }
                  }
                }
                doc = [];
                for (selection = priorFocusedElem; selection = selection.parentNode; )
                  1 === selection.nodeType && doc.push({
                    element: selection,
                    left: selection.scrollLeft,
                    top: selection.scrollTop
                  });
                "function" === typeof priorFocusedElem.focus && priorFocusedElem.focus();
                for (priorFocusedElem = 0; priorFocusedElem < doc.length; priorFocusedElem++) {
                  var info = doc[priorFocusedElem];
                  info.element.scrollLeft = info.left;
                  info.element.scrollTop = info.top;
                }
              }
              _enabled = !!eventsEnabled;
              selectionInformation = eventsEnabled = null;
            } finally {
              executionContext = prevExecutionContext, ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = rootMutationHasEffect;
            }
          }
          root2.current = finishedWork;
          pendingEffectsStatus = PENDING_LAYOUT_PHASE;
        }
      }
      function flushLayoutEffects() {
        if (pendingEffectsStatus === PENDING_LAYOUT_PHASE) {
          pendingEffectsStatus = NO_PENDING_EFFECTS;
          var root2 = pendingEffectsRoot, finishedWork = pendingFinishedWork, lanes = pendingEffectsLanes, rootHasLayoutEffect = 0 !== (finishedWork.flags & 8772);
          if (0 !== (finishedWork.subtreeFlags & 8772) || rootHasLayoutEffect) {
            rootHasLayoutEffect = ReactSharedInternals.T;
            ReactSharedInternals.T = null;
            var previousPriority = ReactDOMSharedInternals.p;
            ReactDOMSharedInternals.p = DiscreteEventPriority;
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            try {
              null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markLayoutEffectsStarted && injectedProfilingHooks.markLayoutEffectsStarted(lanes), inProgressLanes = lanes, inProgressRoot = root2, commitLayoutEffectOnFiber(
                root2,
                finishedWork.alternate,
                finishedWork
              ), inProgressRoot = inProgressLanes = null, null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markLayoutEffectsStopped && injectedProfilingHooks.markLayoutEffectsStopped();
            } finally {
              executionContext = prevExecutionContext, ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = rootHasLayoutEffect;
            }
          }
          pendingEffectsStatus = PENDING_AFTER_MUTATION_PHASE;
        }
      }
      function flushSpawnedWork() {
        if (pendingEffectsStatus === PENDING_SPAWNED_WORK || pendingEffectsStatus === PENDING_AFTER_MUTATION_PHASE) {
          pendingEffectsStatus = NO_PENDING_EFFECTS;
          requestPaint();
          var root2 = pendingEffectsRoot, finishedWork = pendingFinishedWork, lanes = pendingEffectsLanes, recoverableErrors = pendingRecoverableErrors, rootDidHavePassiveEffects = 0 !== (finishedWork.subtreeFlags & 10256) || 0 !== (finishedWork.flags & 10256);
          rootDidHavePassiveEffects ? pendingEffectsStatus = PENDING_PASSIVE_PHASE : (pendingEffectsStatus = NO_PENDING_EFFECTS, pendingFinishedWork = pendingEffectsRoot = null, releaseRootPooledCache(root2, root2.pendingLanes), nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null);
          var remainingLanes = root2.pendingLanes;
          0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null);
          rootDidHavePassiveEffects || commitDoubleInvokeEffectsInDEV(root2);
          rootDidHavePassiveEffects = lanesToEventPriority(lanes);
          finishedWork = finishedWork.stateNode;
          if (injectedHook && "function" === typeof injectedHook.onCommitFiberRoot)
            try {
              var didError = 128 === (finishedWork.current.flags & 128);
              switch (rootDidHavePassiveEffects) {
                case DiscreteEventPriority:
                  var schedulerPriority = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriority = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriority = NormalPriority$1;
                  break;
                case IdleEventPriority:
                  schedulerPriority = IdlePriority;
                  break;
                default:
                  schedulerPriority = NormalPriority$1;
              }
              injectedHook.onCommitFiberRoot(
                rendererID,
                finishedWork,
                schedulerPriority,
                didError
              );
            } catch (err) {
              hasLoggedError || (hasLoggedError = true, console.error(
                "React instrumentation encountered an error: %s",
                err
              ));
            }
          isDevToolsPresent && root2.memoizedUpdaters.clear();
          onCommitRoot();
          if (null !== recoverableErrors) {
            didError = ReactSharedInternals.T;
            schedulerPriority = ReactDOMSharedInternals.p;
            ReactDOMSharedInternals.p = DiscreteEventPriority;
            ReactSharedInternals.T = null;
            try {
              var onRecoverableError = root2.onRecoverableError;
              for (finishedWork = 0; finishedWork < recoverableErrors.length; finishedWork++) {
                var recoverableError = recoverableErrors[finishedWork], errorInfo = makeErrorInfo(recoverableError.stack);
                runWithFiberInDEV(
                  recoverableError.source,
                  onRecoverableError,
                  recoverableError.value,
                  errorInfo
                );
              }
            } finally {
              ReactSharedInternals.T = didError, ReactDOMSharedInternals.p = schedulerPriority;
            }
          }
          0 !== (pendingEffectsLanes & 3) && flushPendingEffects();
          ensureRootIsScheduled(root2);
          remainingLanes = root2.pendingLanes;
          0 !== (lanes & 4194090) && 0 !== (remainingLanes & 42) ? (nestedUpdateScheduled = true, root2 === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root2)) : nestedUpdateCount = 0;
          flushSyncWorkAcrossRoots_impl(0, false);
          markCommitStopped();
        }
      }
      function makeErrorInfo(componentStack) {
        componentStack = { componentStack };
        Object.defineProperty(componentStack, "digest", {
          get: function() {
            console.error(
              'You are accessing "digest" from the errorInfo object passed to onRecoverableError. This property is no longer provided as part of errorInfo but can be accessed as a property of the Error instance itself.'
            );
          }
        });
        return componentStack;
      }
      function releaseRootPooledCache(root2, remainingLanes) {
        0 === (root2.pooledCacheLanes &= remainingLanes) && (remainingLanes = root2.pooledCache, null != remainingLanes && (root2.pooledCache = null, releaseCache(remainingLanes)));
      }
      function flushPendingEffects(wasDelayedCommit) {
        flushMutationEffects();
        flushLayoutEffects();
        flushSpawnedWork();
        return flushPassiveEffects(wasDelayedCommit);
      }
      function flushPassiveEffects() {
        if (pendingEffectsStatus !== PENDING_PASSIVE_PHASE) return false;
        var root2 = pendingEffectsRoot, remainingLanes = pendingEffectsRemainingLanes;
        pendingEffectsRemainingLanes = 0;
        var renderPriority = lanesToEventPriority(pendingEffectsLanes), priority = 0 === DefaultEventPriority || DefaultEventPriority > renderPriority ? DefaultEventPriority : renderPriority;
        renderPriority = ReactSharedInternals.T;
        var previousPriority = ReactDOMSharedInternals.p;
        try {
          ReactDOMSharedInternals.p = priority;
          ReactSharedInternals.T = null;
          priority = pendingPassiveTransitions;
          pendingPassiveTransitions = null;
          var root$jscomp$0 = pendingEffectsRoot, lanes = pendingEffectsLanes;
          pendingEffectsStatus = NO_PENDING_EFFECTS;
          pendingFinishedWork = pendingEffectsRoot = null;
          pendingEffectsLanes = 0;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
            throw Error("Cannot flush passive effects while already rendering.");
          isFlushingPassiveEffects = true;
          didScheduleUpdateDuringPassiveEffects = false;
          null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markPassiveEffectsStarted && injectedProfilingHooks.markPassiveEffectsStarted(lanes);
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          commitPassiveUnmountOnFiber(root$jscomp$0.current);
          commitPassiveMountOnFiber(
            root$jscomp$0,
            root$jscomp$0.current,
            lanes,
            priority
          );
          null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markPassiveEffectsStopped && injectedProfilingHooks.markPassiveEffectsStopped();
          commitDoubleInvokeEffectsInDEV(root$jscomp$0);
          executionContext = prevExecutionContext;
          flushSyncWorkAcrossRoots_impl(0, false);
          didScheduleUpdateDuringPassiveEffects ? root$jscomp$0 === rootWithPassiveNestedUpdates ? nestedPassiveUpdateCount++ : (nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = root$jscomp$0) : nestedPassiveUpdateCount = 0;
          didScheduleUpdateDuringPassiveEffects = isFlushingPassiveEffects = false;
          if (injectedHook && "function" === typeof injectedHook.onPostCommitFiberRoot)
            try {
              injectedHook.onPostCommitFiberRoot(rendererID, root$jscomp$0);
            } catch (err) {
              hasLoggedError || (hasLoggedError = true, console.error(
                "React instrumentation encountered an error: %s",
                err
              ));
            }
          var stateNode = root$jscomp$0.current.stateNode;
          stateNode.effectDuration = 0;
          stateNode.passiveEffectDuration = 0;
          return true;
        } finally {
          ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = renderPriority, releaseRootPooledCache(root2, remainingLanes);
        }
      }
      function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
        sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
        sourceFiber = createRootErrorUpdate(rootFiber.stateNode, sourceFiber, 2);
        rootFiber = enqueueUpdate(rootFiber, sourceFiber, 2);
        null !== rootFiber && (markRootUpdated$1(rootFiber, 2), ensureRootIsScheduled(rootFiber));
      }
      function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error) {
        isRunningInsertionEffect = false;
        if (3 === sourceFiber.tag)
          captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
        else {
          for (; null !== nearestMountedAncestor; ) {
            if (3 === nearestMountedAncestor.tag) {
              captureCommitPhaseErrorOnRoot(
                nearestMountedAncestor,
                sourceFiber,
                error
              );
              return;
            }
            if (1 === nearestMountedAncestor.tag) {
              var instance = nearestMountedAncestor.stateNode;
              if ("function" === typeof nearestMountedAncestor.type.getDerivedStateFromError || "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
                sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
                error = createClassErrorUpdate(2);
                instance = enqueueUpdate(nearestMountedAncestor, error, 2);
                null !== instance && (initializeClassErrorUpdate(
                  error,
                  instance,
                  nearestMountedAncestor,
                  sourceFiber
                ), markRootUpdated$1(instance, 2), ensureRootIsScheduled(instance));
                return;
              }
            }
            nearestMountedAncestor = nearestMountedAncestor.return;
          }
          console.error(
            "Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Potential causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s",
            error
          );
        }
      }
      function attachPingListener(root2, wakeable, lanes) {
        var pingCache = root2.pingCache;
        if (null === pingCache) {
          pingCache = root2.pingCache = new PossiblyWeakMap();
          var threadIDs = /* @__PURE__ */ new Set();
          pingCache.set(wakeable, threadIDs);
        } else
          threadIDs = pingCache.get(wakeable), void 0 === threadIDs && (threadIDs = /* @__PURE__ */ new Set(), pingCache.set(wakeable, threadIDs));
        threadIDs.has(lanes) || (workInProgressRootDidAttachPingListener = true, threadIDs.add(lanes), pingCache = pingSuspendedRoot.bind(null, root2, wakeable, lanes), isDevToolsPresent && restorePendingUpdaters(root2, lanes), wakeable.then(pingCache, pingCache));
      }
      function pingSuspendedRoot(root2, wakeable, pingedLanes) {
        var pingCache = root2.pingCache;
        null !== pingCache && pingCache.delete(wakeable);
        root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
        root2.warmLanes &= ~pingedLanes;
        isConcurrentActEnvironment() && null === ReactSharedInternals.actQueue && console.error(
          "A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act"
        );
        workInProgressRoot === root2 && (workInProgressRootRenderLanes & pingedLanes) === pingedLanes && (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && (workInProgressRootRenderLanes & 62914560) === workInProgressRootRenderLanes && now$1() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS ? (executionContext & RenderContext) === NoContext && prepareFreshStack(root2, 0) : workInProgressRootPingedLanes |= pingedLanes, workInProgressSuspendedRetryLanes === workInProgressRootRenderLanes && (workInProgressSuspendedRetryLanes = 0));
        ensureRootIsScheduled(root2);
      }
      function retryTimedOutBoundary(boundaryFiber, retryLane) {
        0 === retryLane && (retryLane = claimNextRetryLane());
        boundaryFiber = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
        null !== boundaryFiber && (markRootUpdated$1(boundaryFiber, retryLane), ensureRootIsScheduled(boundaryFiber));
      }
      function retryDehydratedSuspenseBoundary(boundaryFiber) {
        var suspenseState = boundaryFiber.memoizedState, retryLane = 0;
        null !== suspenseState && (retryLane = suspenseState.retryLane);
        retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = 0;
        switch (boundaryFiber.tag) {
          case 13:
            var retryCache = boundaryFiber.stateNode;
            var suspenseState = boundaryFiber.memoizedState;
            null !== suspenseState && (retryLane = suspenseState.retryLane);
            break;
          case 19:
            retryCache = boundaryFiber.stateNode;
            break;
          case 22:
            retryCache = boundaryFiber.stateNode._retryCache;
            break;
          default:
            throw Error(
              "Pinged unknown suspense boundary type. This is probably a bug in React."
            );
        }
        null !== retryCache && retryCache.delete(wakeable);
        retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function recursivelyTraverseAndDoubleInvokeEffectsInDEV(root$jscomp$0, parentFiber, isInStrictMode) {
        if (0 !== (parentFiber.subtreeFlags & 67117056))
          for (parentFiber = parentFiber.child; null !== parentFiber; ) {
            var root2 = root$jscomp$0, fiber = parentFiber, isStrictModeFiber = fiber.type === REACT_STRICT_MODE_TYPE;
            isStrictModeFiber = isInStrictMode || isStrictModeFiber;
            22 !== fiber.tag ? fiber.flags & 67108864 ? isStrictModeFiber && runWithFiberInDEV(
              fiber,
              doubleInvokeEffectsOnFiber,
              root2,
              fiber,
              (fiber.mode & NoStrictPassiveEffectsMode) === NoMode
            ) : recursivelyTraverseAndDoubleInvokeEffectsInDEV(
              root2,
              fiber,
              isStrictModeFiber
            ) : null === fiber.memoizedState && (isStrictModeFiber && fiber.flags & 8192 ? runWithFiberInDEV(
              fiber,
              doubleInvokeEffectsOnFiber,
              root2,
              fiber
            ) : fiber.subtreeFlags & 67108864 && runWithFiberInDEV(
              fiber,
              recursivelyTraverseAndDoubleInvokeEffectsInDEV,
              root2,
              fiber,
              isStrictModeFiber
            ));
            parentFiber = parentFiber.sibling;
          }
      }
      function doubleInvokeEffectsOnFiber(root2, fiber) {
        var shouldDoubleInvokePassiveEffects = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : true;
        setIsStrictModeForDevtools(true);
        try {
          disappearLayoutEffects(fiber), shouldDoubleInvokePassiveEffects && disconnectPassiveEffect(fiber), reappearLayoutEffects(root2, fiber.alternate, fiber, false), shouldDoubleInvokePassiveEffects && reconnectPassiveEffects(root2, fiber, 0, null, false, 0);
        } finally {
          setIsStrictModeForDevtools(false);
        }
      }
      function commitDoubleInvokeEffectsInDEV(root2) {
        var doubleInvokeEffects = true;
        root2.current.mode & (StrictLegacyMode | StrictEffectsMode) || (doubleInvokeEffects = false);
        recursivelyTraverseAndDoubleInvokeEffectsInDEV(
          root2,
          root2.current,
          doubleInvokeEffects
        );
      }
      function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        if ((executionContext & RenderContext) === NoContext) {
          var tag = fiber.tag;
          if (3 === tag || 1 === tag || 0 === tag || 11 === tag || 14 === tag || 15 === tag) {
            tag = getComponentNameFromFiber(fiber) || "ReactComponent";
            if (null !== didWarnStateUpdateForNotYetMountedComponent) {
              if (didWarnStateUpdateForNotYetMountedComponent.has(tag)) return;
              didWarnStateUpdateForNotYetMountedComponent.add(tag);
            } else didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([tag]);
            runWithFiberInDEV(fiber, function() {
              console.error(
                "Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead."
              );
            });
          }
        }
      }
      function restorePendingUpdaters(root2, lanes) {
        isDevToolsPresent && root2.memoizedUpdaters.forEach(function(schedulingFiber) {
          addFiberToLanesMap(root2, schedulingFiber, lanes);
        });
      }
      function scheduleCallback$1(priorityLevel, callback) {
        var actQueue = ReactSharedInternals.actQueue;
        return null !== actQueue ? (actQueue.push(callback), fakeActCallbackNode$1) : scheduleCallback$3(priorityLevel, callback);
      }
      function warnIfUpdatesNotWrappedWithActDEV(fiber) {
        isConcurrentActEnvironment() && null === ReactSharedInternals.actQueue && runWithFiberInDEV(fiber, function() {
          console.error(
            "An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act",
            getComponentNameFromFiber(fiber)
          );
        });
      }
      function ensureRootIsScheduled(root2) {
        root2 !== lastScheduledRoot && null === root2.next && (null === lastScheduledRoot ? firstScheduledRoot = lastScheduledRoot = root2 : lastScheduledRoot = lastScheduledRoot.next = root2);
        mightHavePendingSyncWork = true;
        null !== ReactSharedInternals.actQueue ? didScheduleMicrotask_act || (didScheduleMicrotask_act = true, scheduleImmediateRootScheduleTask()) : didScheduleMicrotask || (didScheduleMicrotask = true, scheduleImmediateRootScheduleTask());
      }
      function flushSyncWorkAcrossRoots_impl(syncTransitionLanes, onlyLegacy) {
        if (!isFlushingWork && mightHavePendingSyncWork) {
          isFlushingWork = true;
          do {
            var didPerformSomeWork = false;
            for (var root2 = firstScheduledRoot; null !== root2; ) {
              if (!onlyLegacy)
                if (0 !== syncTransitionLanes) {
                  var pendingLanes = root2.pendingLanes;
                  if (0 === pendingLanes) var nextLanes = 0;
                  else {
                    var suspendedLanes = root2.suspendedLanes, pingedLanes = root2.pingedLanes;
                    nextLanes = (1 << 31 - clz32(42 | syncTransitionLanes) + 1) - 1;
                    nextLanes &= pendingLanes & ~(suspendedLanes & ~pingedLanes);
                    nextLanes = nextLanes & 201326741 ? nextLanes & 201326741 | 1 : nextLanes ? nextLanes | 2 : 0;
                  }
                  0 !== nextLanes && (didPerformSomeWork = true, performSyncWorkOnRoot(root2, nextLanes));
                } else
                  nextLanes = workInProgressRootRenderLanes, nextLanes = getNextLanes(
                    root2,
                    root2 === workInProgressRoot ? nextLanes : 0,
                    null !== root2.cancelPendingCommit || root2.timeoutHandle !== noTimeout
                  ), 0 === (nextLanes & 3) || checkIfRootIsPrerendering(root2, nextLanes) || (didPerformSomeWork = true, performSyncWorkOnRoot(root2, nextLanes));
              root2 = root2.next;
            }
          } while (didPerformSomeWork);
          isFlushingWork = false;
        }
      }
      function processRootScheduleInImmediateTask() {
        processRootScheduleInMicrotask();
      }
      function processRootScheduleInMicrotask() {
        mightHavePendingSyncWork = didScheduleMicrotask_act = didScheduleMicrotask = false;
        var syncTransitionLanes = 0;
        0 !== currentEventTransitionLane && (shouldAttemptEagerTransition() && (syncTransitionLanes = currentEventTransitionLane), currentEventTransitionLane = 0);
        for (var currentTime = now$1(), prev2 = null, root2 = firstScheduledRoot; null !== root2; ) {
          var next2 = root2.next, nextLanes = scheduleTaskForRootDuringMicrotask(root2, currentTime);
          if (0 === nextLanes)
            root2.next = null, null === prev2 ? firstScheduledRoot = next2 : prev2.next = next2, null === next2 && (lastScheduledRoot = prev2);
          else if (prev2 = root2, 0 !== syncTransitionLanes || 0 !== (nextLanes & 3))
            mightHavePendingSyncWork = true;
          root2 = next2;
        }
        flushSyncWorkAcrossRoots_impl(syncTransitionLanes, false);
      }
      function scheduleTaskForRootDuringMicrotask(root2, currentTime) {
        for (var suspendedLanes = root2.suspendedLanes, pingedLanes = root2.pingedLanes, expirationTimes = root2.expirationTimes, lanes = root2.pendingLanes & -62914561; 0 < lanes; ) {
          var index = 31 - clz32(lanes), lane = 1 << index, expirationTime = expirationTimes[index];
          if (-1 === expirationTime) {
            if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes))
              expirationTimes[index] = computeExpirationTime(lane, currentTime);
          } else expirationTime <= currentTime && (root2.expiredLanes |= lane);
          lanes &= ~lane;
        }
        currentTime = workInProgressRoot;
        suspendedLanes = workInProgressRootRenderLanes;
        suspendedLanes = getNextLanes(
          root2,
          root2 === currentTime ? suspendedLanes : 0,
          null !== root2.cancelPendingCommit || root2.timeoutHandle !== noTimeout
        );
        pingedLanes = root2.callbackNode;
        if (0 === suspendedLanes || root2 === currentTime && (workInProgressSuspendedReason === SuspendedOnData || workInProgressSuspendedReason === SuspendedOnAction) || null !== root2.cancelPendingCommit)
          return null !== pingedLanes && cancelCallback(pingedLanes), root2.callbackNode = null, root2.callbackPriority = 0;
        if (0 === (suspendedLanes & 3) || checkIfRootIsPrerendering(root2, suspendedLanes)) {
          currentTime = suspendedLanes & -suspendedLanes;
          if (currentTime !== root2.callbackPriority || null !== ReactSharedInternals.actQueue && pingedLanes !== fakeActCallbackNode)
            cancelCallback(pingedLanes);
          else return currentTime;
          switch (lanesToEventPriority(suspendedLanes)) {
            case DiscreteEventPriority:
            case ContinuousEventPriority:
              suspendedLanes = UserBlockingPriority;
              break;
            case DefaultEventPriority:
              suspendedLanes = NormalPriority$1;
              break;
            case IdleEventPriority:
              suspendedLanes = IdlePriority;
              break;
            default:
              suspendedLanes = NormalPriority$1;
          }
          pingedLanes = performWorkOnRootViaSchedulerTask.bind(null, root2);
          null !== ReactSharedInternals.actQueue ? (ReactSharedInternals.actQueue.push(pingedLanes), suspendedLanes = fakeActCallbackNode) : suspendedLanes = scheduleCallback$3(suspendedLanes, pingedLanes);
          root2.callbackPriority = currentTime;
          root2.callbackNode = suspendedLanes;
          return currentTime;
        }
        null !== pingedLanes && cancelCallback(pingedLanes);
        root2.callbackPriority = 2;
        root2.callbackNode = null;
        return 2;
      }
      function performWorkOnRootViaSchedulerTask(root2, didTimeout) {
        nestedUpdateScheduled = currentUpdateIsNested = false;
        if (pendingEffectsStatus !== NO_PENDING_EFFECTS && pendingEffectsStatus !== PENDING_PASSIVE_PHASE)
          return root2.callbackNode = null, root2.callbackPriority = 0, null;
        var originalCallbackNode = root2.callbackNode;
        if (flushPendingEffects(true) && root2.callbackNode !== originalCallbackNode)
          return null;
        var workInProgressRootRenderLanes$jscomp$0 = workInProgressRootRenderLanes;
        workInProgressRootRenderLanes$jscomp$0 = getNextLanes(
          root2,
          root2 === workInProgressRoot ? workInProgressRootRenderLanes$jscomp$0 : 0,
          null !== root2.cancelPendingCommit || root2.timeoutHandle !== noTimeout
        );
        if (0 === workInProgressRootRenderLanes$jscomp$0) return null;
        performWorkOnRoot(
          root2,
          workInProgressRootRenderLanes$jscomp$0,
          didTimeout
        );
        scheduleTaskForRootDuringMicrotask(root2, now$1());
        return null != root2.callbackNode && root2.callbackNode === originalCallbackNode ? performWorkOnRootViaSchedulerTask.bind(null, root2) : null;
      }
      function performSyncWorkOnRoot(root2, lanes) {
        if (flushPendingEffects()) return null;
        currentUpdateIsNested = nestedUpdateScheduled;
        nestedUpdateScheduled = false;
        performWorkOnRoot(root2, lanes, true);
      }
      function cancelCallback(callbackNode) {
        callbackNode !== fakeActCallbackNode && null !== callbackNode && cancelCallback$1(callbackNode);
      }
      function scheduleImmediateRootScheduleTask() {
        null !== ReactSharedInternals.actQueue && ReactSharedInternals.actQueue.push(function() {
          processRootScheduleInMicrotask();
          return null;
        });
        scheduleMicrotask(function() {
          (executionContext & (RenderContext | CommitContext)) !== NoContext ? scheduleCallback$3(
            ImmediatePriority,
            processRootScheduleInImmediateTask
          ) : processRootScheduleInMicrotask();
        });
      }
      function requestTransitionLane() {
        0 === currentEventTransitionLane && (currentEventTransitionLane = claimNextTransitionLane());
        return currentEventTransitionLane;
      }
      function coerceFormActionProp(actionProp) {
        if (null == actionProp || "symbol" === typeof actionProp || "boolean" === typeof actionProp)
          return null;
        if ("function" === typeof actionProp) return actionProp;
        checkAttributeStringCoercion(actionProp, "action");
        return sanitizeURL("" + actionProp);
      }
      function createFormDataWithSubmitter(form, submitter) {
        var temp = submitter.ownerDocument.createElement("input");
        temp.name = submitter.name;
        temp.value = submitter.value;
        form.id && temp.setAttribute("form", form.id);
        submitter.parentNode.insertBefore(temp, submitter);
        form = new FormData(form);
        temp.parentNode.removeChild(temp);
        return form;
      }
      function extractEvents$1(dispatchQueue, domEventName, maybeTargetInst, nativeEvent, nativeEventTarget) {
        if ("submit" === domEventName && maybeTargetInst && maybeTargetInst.stateNode === nativeEventTarget) {
          var action = coerceFormActionProp(
            (nativeEventTarget[internalPropsKey] || null).action
          ), submitter = nativeEvent.submitter;
          submitter && (domEventName = (domEventName = submitter[internalPropsKey] || null) ? coerceFormActionProp(domEventName.formAction) : submitter.getAttribute("formAction"), null !== domEventName && (action = domEventName, submitter = null));
          var event = new SyntheticEvent(
            "action",
            "action",
            null,
            nativeEvent,
            nativeEventTarget
          );
          dispatchQueue.push({
            event,
            listeners: [
              {
                instance: null,
                listener: function() {
                  if (nativeEvent.defaultPrevented) {
                    if (0 !== currentEventTransitionLane) {
                      var formData = submitter ? createFormDataWithSubmitter(
                        nativeEventTarget,
                        submitter
                      ) : new FormData(nativeEventTarget), pendingState = {
                        pending: true,
                        data: formData,
                        method: nativeEventTarget.method,
                        action
                      };
                      Object.freeze(pendingState);
                      startHostTransition(
                        maybeTargetInst,
                        pendingState,
                        null,
                        formData
                      );
                    }
                  } else
                    "function" === typeof action && (event.preventDefault(), formData = submitter ? createFormDataWithSubmitter(
                      nativeEventTarget,
                      submitter
                    ) : new FormData(nativeEventTarget), pendingState = {
                      pending: true,
                      data: formData,
                      method: nativeEventTarget.method,
                      action
                    }, Object.freeze(pendingState), startHostTransition(
                      maybeTargetInst,
                      pendingState,
                      action,
                      formData
                    ));
                },
                currentTarget: nativeEventTarget
              }
            ]
          });
        }
      }
      function executeDispatch(event, listener, currentTarget) {
        event.currentTarget = currentTarget;
        try {
          listener(event);
        } catch (error) {
          reportGlobalError(error);
        }
        event.currentTarget = null;
      }
      function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        eventSystemFlags = 0 !== (eventSystemFlags & 4);
        for (var i = 0; i < dispatchQueue.length; i++) {
          var _dispatchQueue$i = dispatchQueue[i];
          a: {
            var previousInstance = void 0, event = _dispatchQueue$i.event;
            _dispatchQueue$i = _dispatchQueue$i.listeners;
            if (eventSystemFlags)
              for (var i$jscomp$0 = _dispatchQueue$i.length - 1; 0 <= i$jscomp$0; i$jscomp$0--) {
                var _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget;
                _dispatchListeners$i = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped())
                  break a;
                null !== instance ? runWithFiberInDEV(
                  instance,
                  executeDispatch,
                  event,
                  _dispatchListeners$i,
                  currentTarget
                ) : executeDispatch(event, _dispatchListeners$i, currentTarget);
                previousInstance = instance;
              }
            else
              for (i$jscomp$0 = 0; i$jscomp$0 < _dispatchQueue$i.length; i$jscomp$0++) {
                _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0];
                instance = _dispatchListeners$i.instance;
                currentTarget = _dispatchListeners$i.currentTarget;
                _dispatchListeners$i = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped())
                  break a;
                null !== instance ? runWithFiberInDEV(
                  instance,
                  executeDispatch,
                  event,
                  _dispatchListeners$i,
                  currentTarget
                ) : executeDispatch(event, _dispatchListeners$i, currentTarget);
                previousInstance = instance;
              }
          }
        }
      }
      function listenToNonDelegatedEvent(domEventName, targetElement) {
        nonDelegatedEvents.has(domEventName) || console.error(
          'Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.',
          domEventName
        );
        var listenerSet = targetElement[internalEventHandlersKey];
        void 0 === listenerSet && (listenerSet = targetElement[internalEventHandlersKey] = /* @__PURE__ */ new Set());
        var listenerSetKey = domEventName + "__bubble";
        listenerSet.has(listenerSetKey) || (addTrappedEventListener(targetElement, domEventName, 2, false), listenerSet.add(listenerSetKey));
      }
      function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
        nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener && console.error(
          'Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.',
          domEventName
        );
        var eventSystemFlags = 0;
        isCapturePhaseListener && (eventSystemFlags |= 4);
        addTrappedEventListener(
          target,
          domEventName,
          eventSystemFlags,
          isCapturePhaseListener
        );
      }
      function listenToAllSupportedEvents(rootContainerElement) {
        if (!rootContainerElement[listeningMarker]) {
          rootContainerElement[listeningMarker] = true;
          allNativeEvents.forEach(function(domEventName) {
            "selectionchange" !== domEventName && (nonDelegatedEvents.has(domEventName) || listenToNativeEvent(domEventName, false, rootContainerElement), listenToNativeEvent(domEventName, true, rootContainerElement));
          });
          var ownerDocument = 9 === rootContainerElement.nodeType ? rootContainerElement : rootContainerElement.ownerDocument;
          null === ownerDocument || ownerDocument[listeningMarker] || (ownerDocument[listeningMarker] = true, listenToNativeEvent("selectionchange", false, ownerDocument));
        }
      }
      function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener) {
        switch (getEventPriority(domEventName)) {
          case DiscreteEventPriority:
            var listenerWrapper = dispatchDiscreteEvent;
            break;
          case ContinuousEventPriority:
            listenerWrapper = dispatchContinuousEvent;
            break;
          default:
            listenerWrapper = dispatchEvent;
        }
        eventSystemFlags = listenerWrapper.bind(
          null,
          domEventName,
          eventSystemFlags,
          targetContainer
        );
        listenerWrapper = void 0;
        !passiveBrowserEventsSupported || "touchstart" !== domEventName && "touchmove" !== domEventName && "wheel" !== domEventName || (listenerWrapper = true);
        isCapturePhaseListener ? void 0 !== listenerWrapper ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
          capture: true,
          passive: listenerWrapper
        }) : targetContainer.addEventListener(domEventName, eventSystemFlags, true) : void 0 !== listenerWrapper ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
          passive: listenerWrapper
        }) : targetContainer.addEventListener(
          domEventName,
          eventSystemFlags,
          false
        );
      }
      function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst$jscomp$0, targetContainer) {
        var ancestorInst = targetInst$jscomp$0;
        if (0 === (eventSystemFlags & 1) && 0 === (eventSystemFlags & 2) && null !== targetInst$jscomp$0)
          a: for (; ; ) {
            if (null === targetInst$jscomp$0) return;
            var nodeTag = targetInst$jscomp$0.tag;
            if (3 === nodeTag || 4 === nodeTag) {
              var container = targetInst$jscomp$0.stateNode.containerInfo;
              if (container === targetContainer) break;
              if (4 === nodeTag)
                for (nodeTag = targetInst$jscomp$0.return; null !== nodeTag; ) {
                  var grandTag = nodeTag.tag;
                  if ((3 === grandTag || 4 === grandTag) && nodeTag.stateNode.containerInfo === targetContainer)
                    return;
                  nodeTag = nodeTag.return;
                }
              for (; null !== container; ) {
                nodeTag = getClosestInstanceFromNode(container);
                if (null === nodeTag) return;
                grandTag = nodeTag.tag;
                if (5 === grandTag || 6 === grandTag || 26 === grandTag || 27 === grandTag) {
                  targetInst$jscomp$0 = ancestorInst = nodeTag;
                  continue a;
                }
                container = container.parentNode;
              }
            }
            targetInst$jscomp$0 = targetInst$jscomp$0.return;
          }
        batchedUpdates$1(function() {
          var targetInst = ancestorInst, nativeEventTarget = getEventTarget(nativeEvent), dispatchQueue = [];
          a: {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (void 0 !== reactName) {
              var SyntheticEventCtor = SyntheticEvent, reactEventType = domEventName;
              switch (domEventName) {
                case "keypress":
                  if (0 === getEventCharCode(nativeEvent)) break a;
                case "keydown":
                case "keyup":
                  SyntheticEventCtor = SyntheticKeyboardEvent;
                  break;
                case "focusin":
                  reactEventType = "focus";
                  SyntheticEventCtor = SyntheticFocusEvent;
                  break;
                case "focusout":
                  reactEventType = "blur";
                  SyntheticEventCtor = SyntheticFocusEvent;
                  break;
                case "beforeblur":
                case "afterblur":
                  SyntheticEventCtor = SyntheticFocusEvent;
                  break;
                case "click":
                  if (2 === nativeEvent.button) break a;
                case "auxclick":
                case "dblclick":
                case "mousedown":
                case "mousemove":
                case "mouseup":
                case "mouseout":
                case "mouseover":
                case "contextmenu":
                  SyntheticEventCtor = SyntheticMouseEvent;
                  break;
                case "drag":
                case "dragend":
                case "dragenter":
                case "dragexit":
                case "dragleave":
                case "dragover":
                case "dragstart":
                case "drop":
                  SyntheticEventCtor = SyntheticDragEvent;
                  break;
                case "touchcancel":
                case "touchend":
                case "touchmove":
                case "touchstart":
                  SyntheticEventCtor = SyntheticTouchEvent;
                  break;
                case ANIMATION_END:
                case ANIMATION_ITERATION:
                case ANIMATION_START:
                  SyntheticEventCtor = SyntheticAnimationEvent;
                  break;
                case TRANSITION_END:
                  SyntheticEventCtor = SyntheticTransitionEvent;
                  break;
                case "scroll":
                case "scrollend":
                  SyntheticEventCtor = SyntheticUIEvent;
                  break;
                case "wheel":
                  SyntheticEventCtor = SyntheticWheelEvent;
                  break;
                case "copy":
                case "cut":
                case "paste":
                  SyntheticEventCtor = SyntheticClipboardEvent;
                  break;
                case "gotpointercapture":
                case "lostpointercapture":
                case "pointercancel":
                case "pointerdown":
                case "pointermove":
                case "pointerout":
                case "pointerover":
                case "pointerup":
                  SyntheticEventCtor = SyntheticPointerEvent;
                  break;
                case "toggle":
                case "beforetoggle":
                  SyntheticEventCtor = SyntheticToggleEvent;
              }
              var inCapturePhase = 0 !== (eventSystemFlags & 4), accumulateTargetOnly = !inCapturePhase && ("scroll" === domEventName || "scrollend" === domEventName), reactEventName = inCapturePhase ? null !== reactName ? reactName + "Capture" : null : reactName;
              inCapturePhase = [];
              for (var instance = targetInst, lastHostComponent; null !== instance; ) {
                var _instance2 = instance;
                lastHostComponent = _instance2.stateNode;
                _instance2 = _instance2.tag;
                5 !== _instance2 && 26 !== _instance2 && 27 !== _instance2 || null === lastHostComponent || null === reactEventName || (_instance2 = getListener(instance, reactEventName), null != _instance2 && inCapturePhase.push(
                  createDispatchListener(
                    instance,
                    _instance2,
                    lastHostComponent
                  )
                ));
                if (accumulateTargetOnly) break;
                instance = instance.return;
              }
              0 < inCapturePhase.length && (reactName = new SyntheticEventCtor(
                reactName,
                reactEventType,
                null,
                nativeEvent,
                nativeEventTarget
              ), dispatchQueue.push({
                event: reactName,
                listeners: inCapturePhase
              }));
            }
          }
          if (0 === (eventSystemFlags & 7)) {
            a: {
              reactName = "mouseover" === domEventName || "pointerover" === domEventName;
              SyntheticEventCtor = "mouseout" === domEventName || "pointerout" === domEventName;
              if (reactName && nativeEvent !== currentReplayingEvent && (reactEventType = nativeEvent.relatedTarget || nativeEvent.fromElement) && (getClosestInstanceFromNode(reactEventType) || reactEventType[internalContainerInstanceKey]))
                break a;
              if (SyntheticEventCtor || reactName) {
                reactName = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget : (reactName = nativeEventTarget.ownerDocument) ? reactName.defaultView || reactName.parentWindow : window;
                if (SyntheticEventCtor) {
                  if (reactEventType = nativeEvent.relatedTarget || nativeEvent.toElement, SyntheticEventCtor = targetInst, reactEventType = reactEventType ? getClosestInstanceFromNode(reactEventType) : null, null !== reactEventType && (accumulateTargetOnly = getNearestMountedFiber(reactEventType), inCapturePhase = reactEventType.tag, reactEventType !== accumulateTargetOnly || 5 !== inCapturePhase && 27 !== inCapturePhase && 6 !== inCapturePhase))
                    reactEventType = null;
                } else SyntheticEventCtor = null, reactEventType = targetInst;
                if (SyntheticEventCtor !== reactEventType) {
                  inCapturePhase = SyntheticMouseEvent;
                  _instance2 = "onMouseLeave";
                  reactEventName = "onMouseEnter";
                  instance = "mouse";
                  if ("pointerout" === domEventName || "pointerover" === domEventName)
                    inCapturePhase = SyntheticPointerEvent, _instance2 = "onPointerLeave", reactEventName = "onPointerEnter", instance = "pointer";
                  accumulateTargetOnly = null == SyntheticEventCtor ? reactName : getNodeFromInstance(SyntheticEventCtor);
                  lastHostComponent = null == reactEventType ? reactName : getNodeFromInstance(reactEventType);
                  reactName = new inCapturePhase(
                    _instance2,
                    instance + "leave",
                    SyntheticEventCtor,
                    nativeEvent,
                    nativeEventTarget
                  );
                  reactName.target = accumulateTargetOnly;
                  reactName.relatedTarget = lastHostComponent;
                  _instance2 = null;
                  getClosestInstanceFromNode(nativeEventTarget) === targetInst && (inCapturePhase = new inCapturePhase(
                    reactEventName,
                    instance + "enter",
                    reactEventType,
                    nativeEvent,
                    nativeEventTarget
                  ), inCapturePhase.target = lastHostComponent, inCapturePhase.relatedTarget = accumulateTargetOnly, _instance2 = inCapturePhase);
                  accumulateTargetOnly = _instance2;
                  if (SyntheticEventCtor && reactEventType)
                    b: {
                      inCapturePhase = SyntheticEventCtor;
                      reactEventName = reactEventType;
                      instance = 0;
                      for (lastHostComponent = inCapturePhase; lastHostComponent; lastHostComponent = getParent(lastHostComponent))
                        instance++;
                      lastHostComponent = 0;
                      for (_instance2 = reactEventName; _instance2; _instance2 = getParent(_instance2))
                        lastHostComponent++;
                      for (; 0 < instance - lastHostComponent; )
                        inCapturePhase = getParent(inCapturePhase), instance--;
                      for (; 0 < lastHostComponent - instance; )
                        reactEventName = getParent(reactEventName), lastHostComponent--;
                      for (; instance--; ) {
                        if (inCapturePhase === reactEventName || null !== reactEventName && inCapturePhase === reactEventName.alternate)
                          break b;
                        inCapturePhase = getParent(inCapturePhase);
                        reactEventName = getParent(reactEventName);
                      }
                      inCapturePhase = null;
                    }
                  else inCapturePhase = null;
                  null !== SyntheticEventCtor && accumulateEnterLeaveListenersForEvent(
                    dispatchQueue,
                    reactName,
                    SyntheticEventCtor,
                    inCapturePhase,
                    false
                  );
                  null !== reactEventType && null !== accumulateTargetOnly && accumulateEnterLeaveListenersForEvent(
                    dispatchQueue,
                    accumulateTargetOnly,
                    reactEventType,
                    inCapturePhase,
                    true
                  );
                }
              }
            }
            a: {
              reactName = targetInst ? getNodeFromInstance(targetInst) : window;
              SyntheticEventCtor = reactName.nodeName && reactName.nodeName.toLowerCase();
              if ("select" === SyntheticEventCtor || "input" === SyntheticEventCtor && "file" === reactName.type)
                var getTargetInstFunc = getTargetInstForChangeEvent;
              else if (isTextInputElement(reactName))
                if (isInputEventSupported)
                  getTargetInstFunc = getTargetInstForInputOrChangeEvent;
                else {
                  getTargetInstFunc = getTargetInstForInputEventPolyfill;
                  var handleEventFunc = handleEventsForInputEventPolyfill;
                }
              else
                SyntheticEventCtor = reactName.nodeName, !SyntheticEventCtor || "input" !== SyntheticEventCtor.toLowerCase() || "checkbox" !== reactName.type && "radio" !== reactName.type ? targetInst && isCustomElement(targetInst.elementType) && (getTargetInstFunc = getTargetInstForChangeEvent) : getTargetInstFunc = getTargetInstForClickEvent;
              if (getTargetInstFunc && (getTargetInstFunc = getTargetInstFunc(domEventName, targetInst))) {
                createAndAccumulateChangeEvent(
                  dispatchQueue,
                  getTargetInstFunc,
                  nativeEvent,
                  nativeEventTarget
                );
                break a;
              }
              handleEventFunc && handleEventFunc(domEventName, reactName, targetInst);
              "focusout" === domEventName && targetInst && "number" === reactName.type && null != targetInst.memoizedProps.value && setDefaultValue(reactName, "number", reactName.value);
            }
            handleEventFunc = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(handleEventFunc) || "true" === handleEventFunc.contentEditable)
                  activeElement = handleEventFunc, activeElementInst = targetInst, lastSelection = null;
                break;
              case "focusout":
                lastSelection = activeElementInst = activeElement = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(
                  dispatchQueue,
                  nativeEvent,
                  nativeEventTarget
                );
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) break;
              case "keydown":
              case "keyup":
                constructSelectEvent(
                  dispatchQueue,
                  nativeEvent,
                  nativeEventTarget
                );
            }
            var fallbackData;
            if (canUseCompositionEvent)
              b: {
                switch (domEventName) {
                  case "compositionstart":
                    var eventType = "onCompositionStart";
                    break b;
                  case "compositionend":
                    eventType = "onCompositionEnd";
                    break b;
                  case "compositionupdate":
                    eventType = "onCompositionUpdate";
                    break b;
                }
                eventType = void 0;
              }
            else
              isComposing ? isFallbackCompositionEnd(domEventName, nativeEvent) && (eventType = "onCompositionEnd") : "keydown" === domEventName && nativeEvent.keyCode === START_KEYCODE && (eventType = "onCompositionStart");
            eventType && (useFallbackCompositionData && "ko" !== nativeEvent.locale && (isComposing || "onCompositionStart" !== eventType ? "onCompositionEnd" === eventType && isComposing && (fallbackData = getData()) : (root = nativeEventTarget, startText = "value" in root ? root.value : root.textContent, isComposing = true)), handleEventFunc = accumulateTwoPhaseListeners(
              targetInst,
              eventType
            ), 0 < handleEventFunc.length && (eventType = new SyntheticCompositionEvent(
              eventType,
              domEventName,
              null,
              nativeEvent,
              nativeEventTarget
            ), dispatchQueue.push({
              event: eventType,
              listeners: handleEventFunc
            }), fallbackData ? eventType.data = fallbackData : (fallbackData = getDataFromCustomEvent(nativeEvent), null !== fallbackData && (eventType.data = fallbackData))));
            if (fallbackData = canUseTextInputEvent ? getNativeBeforeInputChars(domEventName, nativeEvent) : getFallbackBeforeInputChars(domEventName, nativeEvent))
              eventType = accumulateTwoPhaseListeners(
                targetInst,
                "onBeforeInput"
              ), 0 < eventType.length && (handleEventFunc = new SyntheticInputEvent(
                "onBeforeInput",
                "beforeinput",
                null,
                nativeEvent,
                nativeEventTarget
              ), dispatchQueue.push({
                event: handleEventFunc,
                listeners: eventType
              }), handleEventFunc.data = fallbackData);
            extractEvents$1(
              dispatchQueue,
              domEventName,
              targetInst,
              nativeEvent,
              nativeEventTarget
            );
          }
          processDispatchQueue(dispatchQueue, eventSystemFlags);
        });
      }
      function createDispatchListener(instance, listener, currentTarget) {
        return {
          instance,
          listener,
          currentTarget
        };
      }
      function accumulateTwoPhaseListeners(targetFiber, reactName) {
        for (var captureName = reactName + "Capture", listeners = []; null !== targetFiber; ) {
          var _instance3 = targetFiber, stateNode = _instance3.stateNode;
          _instance3 = _instance3.tag;
          5 !== _instance3 && 26 !== _instance3 && 27 !== _instance3 || null === stateNode || (_instance3 = getListener(targetFiber, captureName), null != _instance3 && listeners.unshift(
            createDispatchListener(targetFiber, _instance3, stateNode)
          ), _instance3 = getListener(targetFiber, reactName), null != _instance3 && listeners.push(
            createDispatchListener(targetFiber, _instance3, stateNode)
          ));
          if (3 === targetFiber.tag) return listeners;
          targetFiber = targetFiber.return;
        }
        return [];
      }
      function getParent(inst) {
        if (null === inst) return null;
        do
          inst = inst.return;
        while (inst && 5 !== inst.tag && 27 !== inst.tag);
        return inst ? inst : null;
      }
      function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
        for (var registrationName = event._reactName, listeners = []; null !== target && target !== common; ) {
          var _instance4 = target, alternate = _instance4.alternate, stateNode = _instance4.stateNode;
          _instance4 = _instance4.tag;
          if (null !== alternate && alternate === common) break;
          5 !== _instance4 && 26 !== _instance4 && 27 !== _instance4 || null === stateNode || (alternate = stateNode, inCapturePhase ? (stateNode = getListener(target, registrationName), null != stateNode && listeners.unshift(
            createDispatchListener(target, stateNode, alternate)
          )) : inCapturePhase || (stateNode = getListener(target, registrationName), null != stateNode && listeners.push(
            createDispatchListener(target, stateNode, alternate)
          )));
          target = target.return;
        }
        0 !== listeners.length && dispatchQueue.push({ event, listeners });
      }
      function validatePropertiesInDevelopment(type, props) {
        validateProperties$2(type, props);
        "input" !== type && "textarea" !== type && "select" !== type || null == props || null !== props.value || didWarnValueNull || (didWarnValueNull = true, "select" === type && props.multiple ? console.error(
          "`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.",
          type
        ) : console.error(
          "`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.",
          type
        ));
        var eventRegistry = {
          registrationNameDependencies,
          possibleRegistrationNames
        };
        isCustomElement(type) || "string" === typeof props.is || warnUnknownProperties(type, props, eventRegistry);
        props.contentEditable && !props.suppressContentEditableWarning && null != props.children && console.error(
          "A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."
        );
      }
      function warnForPropDifference(propName, serverValue, clientValue, serverDifferences) {
        serverValue !== clientValue && (clientValue = normalizeMarkupForTextOrAttribute(clientValue), normalizeMarkupForTextOrAttribute(serverValue) !== clientValue && (serverDifferences[propName] = serverValue));
      }
      function warnForExtraAttributes(domElement, attributeNames, serverDifferences) {
        attributeNames.forEach(function(attributeName) {
          serverDifferences[getPropNameFromAttributeName(attributeName)] = "style" === attributeName ? getStylesObjectFromElement(domElement) : domElement.getAttribute(attributeName);
        });
      }
      function warnForInvalidEventListener(registrationName, listener) {
        false === listener ? console.error(
          "Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.",
          registrationName,
          registrationName,
          registrationName
        ) : console.error(
          "Expected `%s` listener to be a function, instead got a value of `%s` type.",
          registrationName,
          typeof listener
        );
      }
      function normalizeHTML(parent, html) {
        parent = parent.namespaceURI === MATH_NAMESPACE || parent.namespaceURI === SVG_NAMESPACE ? parent.ownerDocument.createElementNS(
          parent.namespaceURI,
          parent.tagName
        ) : parent.ownerDocument.createElement(parent.tagName);
        parent.innerHTML = html;
        return parent.innerHTML;
      }
      function normalizeMarkupForTextOrAttribute(markup) {
        willCoercionThrow(markup) && (console.error(
          "The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before using it here.",
          typeName(markup)
        ), testStringCoercion(markup));
        return ("string" === typeof markup ? markup : "" + markup).replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
      }
      function checkForUnmatchedText(serverText, clientText) {
        clientText = normalizeMarkupForTextOrAttribute(clientText);
        return normalizeMarkupForTextOrAttribute(serverText) === clientText ? true : false;
      }
      function noop$1() {
      }
      function setProp(domElement, tag, key, value, props, prevValue) {
        switch (key) {
          case "children":
            if ("string" === typeof value)
              validateTextNesting(value, tag, false), "body" === tag || "textarea" === tag && "" === value || setTextContent(domElement, value);
            else if ("number" === typeof value || "bigint" === typeof value)
              validateTextNesting("" + value, tag, false), "body" !== tag && setTextContent(domElement, "" + value);
            break;
          case "className":
            setValueForKnownAttribute(domElement, "class", value);
            break;
          case "tabIndex":
            setValueForKnownAttribute(domElement, "tabindex", value);
            break;
          case "dir":
          case "role":
          case "viewBox":
          case "width":
          case "height":
            setValueForKnownAttribute(domElement, key, value);
            break;
          case "style":
            setValueForStyles(domElement, value, prevValue);
            break;
          case "data":
            if ("object" !== tag) {
              setValueForKnownAttribute(domElement, "data", value);
              break;
            }
          case "src":
          case "href":
            if ("" === value && ("a" !== tag || "href" !== key)) {
              "src" === key ? console.error(
                'An empty string ("") was passed to the %s attribute. This may cause the browser to download the whole page again over the network. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',
                key,
                key
              ) : console.error(
                'An empty string ("") was passed to the %s attribute. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',
                key,
                key
              );
              domElement.removeAttribute(key);
              break;
            }
            if (null == value || "function" === typeof value || "symbol" === typeof value || "boolean" === typeof value) {
              domElement.removeAttribute(key);
              break;
            }
            checkAttributeStringCoercion(value, key);
            value = sanitizeURL("" + value);
            domElement.setAttribute(key, value);
            break;
          case "action":
          case "formAction":
            null != value && ("form" === tag ? "formAction" === key ? console.error(
              "You can only pass the formAction prop to <input> or <button>. Use the action prop on <form>."
            ) : "function" === typeof value && (null == props.encType && null == props.method || didWarnFormActionMethod || (didWarnFormActionMethod = true, console.error(
              "Cannot specify a encType or method for a form that specifies a function as the action. React provides those automatically. They will get overridden."
            )), null == props.target || didWarnFormActionTarget || (didWarnFormActionTarget = true, console.error(
              "Cannot specify a target for a form that specifies a function as the action. The function will always be executed in the same window."
            ))) : "input" === tag || "button" === tag ? "action" === key ? console.error(
              "You can only pass the action prop to <form>. Use the formAction prop on <input> or <button>."
            ) : "input" !== tag || "submit" === props.type || "image" === props.type || didWarnFormActionType ? "button" !== tag || null == props.type || "submit" === props.type || didWarnFormActionType ? "function" === typeof value && (null == props.name || didWarnFormActionName || (didWarnFormActionName = true, console.error(
              'Cannot specify a "name" prop for a button that specifies a function as a formAction. React needs it to encode which action should be invoked. It will get overridden.'
            )), null == props.formEncType && null == props.formMethod || didWarnFormActionMethod || (didWarnFormActionMethod = true, console.error(
              "Cannot specify a formEncType or formMethod for a button that specifies a function as a formAction. React provides those automatically. They will get overridden."
            )), null == props.formTarget || didWarnFormActionTarget || (didWarnFormActionTarget = true, console.error(
              "Cannot specify a formTarget for a button that specifies a function as a formAction. The function will always be executed in the same window."
            ))) : (didWarnFormActionType = true, console.error(
              'A button can only specify a formAction along with type="submit" or no type.'
            )) : (didWarnFormActionType = true, console.error(
              'An input can only specify a formAction along with type="submit" or type="image".'
            )) : "action" === key ? console.error(
              "You can only pass the action prop to <form>."
            ) : console.error(
              "You can only pass the formAction prop to <input> or <button>."
            ));
            if ("function" === typeof value) {
              domElement.setAttribute(
                key,
                "javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')"
              );
              break;
            } else
              "function" === typeof prevValue && ("formAction" === key ? ("input" !== tag && setProp(domElement, tag, "name", props.name, props, null), setProp(
                domElement,
                tag,
                "formEncType",
                props.formEncType,
                props,
                null
              ), setProp(
                domElement,
                tag,
                "formMethod",
                props.formMethod,
                props,
                null
              ), setProp(
                domElement,
                tag,
                "formTarget",
                props.formTarget,
                props,
                null
              )) : (setProp(
                domElement,
                tag,
                "encType",
                props.encType,
                props,
                null
              ), setProp(domElement, tag, "method", props.method, props, null), setProp(
                domElement,
                tag,
                "target",
                props.target,
                props,
                null
              )));
            if (null == value || "symbol" === typeof value || "boolean" === typeof value) {
              domElement.removeAttribute(key);
              break;
            }
            checkAttributeStringCoercion(value, key);
            value = sanitizeURL("" + value);
            domElement.setAttribute(key, value);
            break;
          case "onClick":
            null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), domElement.onclick = noop$1);
            break;
          case "onScroll":
            null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), listenToNonDelegatedEvent("scroll", domElement));
            break;
          case "onScrollEnd":
            null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), listenToNonDelegatedEvent("scrollend", domElement));
            break;
          case "dangerouslySetInnerHTML":
            if (null != value) {
              if ("object" !== typeof value || !("__html" in value))
                throw Error(
                  "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information."
                );
              key = value.__html;
              if (null != key) {
                if (null != props.children)
                  throw Error(
                    "Can only set one of `children` or `props.dangerouslySetInnerHTML`."
                  );
                domElement.innerHTML = key;
              }
            }
            break;
          case "multiple":
            domElement.multiple = value && "function" !== typeof value && "symbol" !== typeof value;
            break;
          case "muted":
            domElement.muted = value && "function" !== typeof value && "symbol" !== typeof value;
            break;
          case "suppressContentEditableWarning":
          case "suppressHydrationWarning":
          case "defaultValue":
          case "defaultChecked":
          case "innerHTML":
          case "ref":
            break;
          case "autoFocus":
            break;
          case "xlinkHref":
            if (null == value || "function" === typeof value || "boolean" === typeof value || "symbol" === typeof value) {
              domElement.removeAttribute("xlink:href");
              break;
            }
            checkAttributeStringCoercion(value, key);
            key = sanitizeURL("" + value);
            domElement.setAttributeNS(xlinkNamespace, "xlink:href", key);
            break;
          case "contentEditable":
          case "spellCheck":
          case "draggable":
          case "value":
          case "autoReverse":
          case "externalResourcesRequired":
          case "focusable":
          case "preserveAlpha":
            null != value && "function" !== typeof value && "symbol" !== typeof value ? (checkAttributeStringCoercion(value, key), domElement.setAttribute(key, "" + value)) : domElement.removeAttribute(key);
            break;
          case "inert":
            "" !== value || didWarnForNewBooleanPropsWithEmptyValue[key] || (didWarnForNewBooleanPropsWithEmptyValue[key] = true, console.error(
              "Received an empty string for a boolean attribute `%s`. This will treat the attribute as if it were false. Either pass `false` to silence this warning, or pass `true` if you used an empty string in earlier versions of React to indicate this attribute is true.",
              key
            ));
          case "allowFullScreen":
          case "async":
          case "autoPlay":
          case "controls":
          case "default":
          case "defer":
          case "disabled":
          case "disablePictureInPicture":
          case "disableRemotePlayback":
          case "formNoValidate":
          case "hidden":
          case "loop":
          case "noModule":
          case "noValidate":
          case "open":
          case "playsInline":
          case "readOnly":
          case "required":
          case "reversed":
          case "scoped":
          case "seamless":
          case "itemScope":
            value && "function" !== typeof value && "symbol" !== typeof value ? domElement.setAttribute(key, "") : domElement.removeAttribute(key);
            break;
          case "capture":
          case "download":
            true === value ? domElement.setAttribute(key, "") : false !== value && null != value && "function" !== typeof value && "symbol" !== typeof value ? (checkAttributeStringCoercion(value, key), domElement.setAttribute(key, value)) : domElement.removeAttribute(key);
            break;
          case "cols":
          case "rows":
          case "size":
          case "span":
            null != value && "function" !== typeof value && "symbol" !== typeof value && !isNaN(value) && 1 <= value ? (checkAttributeStringCoercion(value, key), domElement.setAttribute(key, value)) : domElement.removeAttribute(key);
            break;
          case "rowSpan":
          case "start":
            null == value || "function" === typeof value || "symbol" === typeof value || isNaN(value) ? domElement.removeAttribute(key) : (checkAttributeStringCoercion(value, key), domElement.setAttribute(key, value));
            break;
          case "popover":
            listenToNonDelegatedEvent("beforetoggle", domElement);
            listenToNonDelegatedEvent("toggle", domElement);
            setValueForAttribute(domElement, "popover", value);
            break;
          case "xlinkActuate":
            setValueForNamespacedAttribute(
              domElement,
              xlinkNamespace,
              "xlink:actuate",
              value
            );
            break;
          case "xlinkArcrole":
            setValueForNamespacedAttribute(
              domElement,
              xlinkNamespace,
              "xlink:arcrole",
              value
            );
            break;
          case "xlinkRole":
            setValueForNamespacedAttribute(
              domElement,
              xlinkNamespace,
              "xlink:role",
              value
            );
            break;
          case "xlinkShow":
            setValueForNamespacedAttribute(
              domElement,
              xlinkNamespace,
              "xlink:show",
              value
            );
            break;
          case "xlinkTitle":
            setValueForNamespacedAttribute(
              domElement,
              xlinkNamespace,
              "xlink:title",
              value
            );
            break;
          case "xlinkType":
            setValueForNamespacedAttribute(
              domElement,
              xlinkNamespace,
              "xlink:type",
              value
            );
            break;
          case "xmlBase":
            setValueForNamespacedAttribute(
              domElement,
              xmlNamespace,
              "xml:base",
              value
            );
            break;
          case "xmlLang":
            setValueForNamespacedAttribute(
              domElement,
              xmlNamespace,
              "xml:lang",
              value
            );
            break;
          case "xmlSpace":
            setValueForNamespacedAttribute(
              domElement,
              xmlNamespace,
              "xml:space",
              value
            );
            break;
          case "is":
            null != prevValue && console.error(
              'Cannot update the "is" prop after it has been initialized.'
            );
            setValueForAttribute(domElement, "is", value);
            break;
          case "innerText":
          case "textContent":
            break;
          case "popoverTarget":
            didWarnPopoverTargetObject || null == value || "object" !== typeof value || (didWarnPopoverTargetObject = true, console.error(
              "The `popoverTarget` prop expects the ID of an Element as a string. Received %s instead.",
              value
            ));
          default:
            !(2 < key.length) || "o" !== key[0] && "O" !== key[0] || "n" !== key[1] && "N" !== key[1] ? (key = getAttributeAlias(key), setValueForAttribute(domElement, key, value)) : registrationNameDependencies.hasOwnProperty(key) && null != value && "function" !== typeof value && warnForInvalidEventListener(key, value);
        }
      }
      function setPropOnCustomElement(domElement, tag, key, value, props, prevValue) {
        switch (key) {
          case "style":
            setValueForStyles(domElement, value, prevValue);
            break;
          case "dangerouslySetInnerHTML":
            if (null != value) {
              if ("object" !== typeof value || !("__html" in value))
                throw Error(
                  "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information."
                );
              key = value.__html;
              if (null != key) {
                if (null != props.children)
                  throw Error(
                    "Can only set one of `children` or `props.dangerouslySetInnerHTML`."
                  );
                domElement.innerHTML = key;
              }
            }
            break;
          case "children":
            "string" === typeof value ? setTextContent(domElement, value) : ("number" === typeof value || "bigint" === typeof value) && setTextContent(domElement, "" + value);
            break;
          case "onScroll":
            null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), listenToNonDelegatedEvent("scroll", domElement));
            break;
          case "onScrollEnd":
            null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), listenToNonDelegatedEvent("scrollend", domElement));
            break;
          case "onClick":
            null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), domElement.onclick = noop$1);
            break;
          case "suppressContentEditableWarning":
          case "suppressHydrationWarning":
          case "innerHTML":
          case "ref":
            break;
          case "innerText":
          case "textContent":
            break;
          default:
            if (registrationNameDependencies.hasOwnProperty(key))
              null != value && "function" !== typeof value && warnForInvalidEventListener(key, value);
            else
              a: {
                if ("o" === key[0] && "n" === key[1] && (props = key.endsWith("Capture"), tag = key.slice(2, props ? key.length - 7 : void 0), prevValue = domElement[internalPropsKey] || null, prevValue = null != prevValue ? prevValue[key] : null, "function" === typeof prevValue && domElement.removeEventListener(tag, prevValue, props), "function" === typeof value)) {
                  "function" !== typeof prevValue && null !== prevValue && (key in domElement ? domElement[key] = null : domElement.hasAttribute(key) && domElement.removeAttribute(key));
                  domElement.addEventListener(tag, value, props);
                  break a;
                }
                key in domElement ? domElement[key] = value : true === value ? domElement.setAttribute(key, "") : setValueForAttribute(domElement, key, value);
              }
        }
      }
      function setInitialProperties(domElement, tag, props) {
        validatePropertiesInDevelopment(tag, props);
        switch (tag) {
          case "div":
          case "span":
          case "svg":
          case "path":
          case "a":
          case "g":
          case "p":
          case "li":
            break;
          case "img":
            listenToNonDelegatedEvent("error", domElement);
            listenToNonDelegatedEvent("load", domElement);
            var hasSrc = false, hasSrcSet = false, propKey;
            for (propKey in props)
              if (props.hasOwnProperty(propKey)) {
                var propValue = props[propKey];
                if (null != propValue)
                  switch (propKey) {
                    case "src":
                      hasSrc = true;
                      break;
                    case "srcSet":
                      hasSrcSet = true;
                      break;
                    case "children":
                    case "dangerouslySetInnerHTML":
                      throw Error(
                        tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                      );
                    default:
                      setProp(domElement, tag, propKey, propValue, props, null);
                  }
              }
            hasSrcSet && setProp(domElement, tag, "srcSet", props.srcSet, props, null);
            hasSrc && setProp(domElement, tag, "src", props.src, props, null);
            return;
          case "input":
            checkControlledValueProps("input", props);
            listenToNonDelegatedEvent("invalid", domElement);
            var defaultValue = propKey = propValue = hasSrcSet = null, checked = null, defaultChecked = null;
            for (hasSrc in props)
              if (props.hasOwnProperty(hasSrc)) {
                var _propValue = props[hasSrc];
                if (null != _propValue)
                  switch (hasSrc) {
                    case "name":
                      hasSrcSet = _propValue;
                      break;
                    case "type":
                      propValue = _propValue;
                      break;
                    case "checked":
                      checked = _propValue;
                      break;
                    case "defaultChecked":
                      defaultChecked = _propValue;
                      break;
                    case "value":
                      propKey = _propValue;
                      break;
                    case "defaultValue":
                      defaultValue = _propValue;
                      break;
                    case "children":
                    case "dangerouslySetInnerHTML":
                      if (null != _propValue)
                        throw Error(
                          tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                        );
                      break;
                    default:
                      setProp(domElement, tag, hasSrc, _propValue, props, null);
                  }
              }
            validateInputProps(domElement, props);
            initInput(
              domElement,
              propKey,
              defaultValue,
              checked,
              defaultChecked,
              propValue,
              hasSrcSet,
              false
            );
            track(domElement);
            return;
          case "select":
            checkControlledValueProps("select", props);
            listenToNonDelegatedEvent("invalid", domElement);
            hasSrc = propValue = propKey = null;
            for (hasSrcSet in props)
              if (props.hasOwnProperty(hasSrcSet) && (defaultValue = props[hasSrcSet], null != defaultValue))
                switch (hasSrcSet) {
                  case "value":
                    propKey = defaultValue;
                    break;
                  case "defaultValue":
                    propValue = defaultValue;
                    break;
                  case "multiple":
                    hasSrc = defaultValue;
                  default:
                    setProp(
                      domElement,
                      tag,
                      hasSrcSet,
                      defaultValue,
                      props,
                      null
                    );
                }
            validateSelectProps(domElement, props);
            tag = propKey;
            props = propValue;
            domElement.multiple = !!hasSrc;
            null != tag ? updateOptions(domElement, !!hasSrc, tag, false) : null != props && updateOptions(domElement, !!hasSrc, props, true);
            return;
          case "textarea":
            checkControlledValueProps("textarea", props);
            listenToNonDelegatedEvent("invalid", domElement);
            propKey = hasSrcSet = hasSrc = null;
            for (propValue in props)
              if (props.hasOwnProperty(propValue) && (defaultValue = props[propValue], null != defaultValue))
                switch (propValue) {
                  case "value":
                    hasSrc = defaultValue;
                    break;
                  case "defaultValue":
                    hasSrcSet = defaultValue;
                    break;
                  case "children":
                    propKey = defaultValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    if (null != defaultValue)
                      throw Error(
                        "`dangerouslySetInnerHTML` does not make sense on <textarea>."
                      );
                    break;
                  default:
                    setProp(
                      domElement,
                      tag,
                      propValue,
                      defaultValue,
                      props,
                      null
                    );
                }
            validateTextareaProps(domElement, props);
            initTextarea(domElement, hasSrc, hasSrcSet, propKey);
            track(domElement);
            return;
          case "option":
            validateOptionProps(domElement, props);
            for (checked in props)
              if (props.hasOwnProperty(checked) && (hasSrc = props[checked], null != hasSrc))
                switch (checked) {
                  case "selected":
                    domElement.selected = hasSrc && "function" !== typeof hasSrc && "symbol" !== typeof hasSrc;
                    break;
                  default:
                    setProp(domElement, tag, checked, hasSrc, props, null);
                }
            return;
          case "dialog":
            listenToNonDelegatedEvent("beforetoggle", domElement);
            listenToNonDelegatedEvent("toggle", domElement);
            listenToNonDelegatedEvent("cancel", domElement);
            listenToNonDelegatedEvent("close", domElement);
            break;
          case "iframe":
          case "object":
            listenToNonDelegatedEvent("load", domElement);
            break;
          case "video":
          case "audio":
            for (hasSrc = 0; hasSrc < mediaEventTypes.length; hasSrc++)
              listenToNonDelegatedEvent(mediaEventTypes[hasSrc], domElement);
            break;
          case "image":
            listenToNonDelegatedEvent("error", domElement);
            listenToNonDelegatedEvent("load", domElement);
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", domElement);
            break;
          case "embed":
          case "source":
          case "link":
            listenToNonDelegatedEvent("error", domElement), listenToNonDelegatedEvent("load", domElement);
          case "area":
          case "base":
          case "br":
          case "col":
          case "hr":
          case "keygen":
          case "meta":
          case "param":
          case "track":
          case "wbr":
          case "menuitem":
            for (defaultChecked in props)
              if (props.hasOwnProperty(defaultChecked) && (hasSrc = props[defaultChecked], null != hasSrc))
                switch (defaultChecked) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw Error(
                      tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                    );
                  default:
                    setProp(domElement, tag, defaultChecked, hasSrc, props, null);
                }
            return;
          default:
            if (isCustomElement(tag)) {
              for (_propValue in props)
                props.hasOwnProperty(_propValue) && (hasSrc = props[_propValue], void 0 !== hasSrc && setPropOnCustomElement(
                  domElement,
                  tag,
                  _propValue,
                  hasSrc,
                  props,
                  void 0
                ));
              return;
            }
        }
        for (defaultValue in props)
          props.hasOwnProperty(defaultValue) && (hasSrc = props[defaultValue], null != hasSrc && setProp(domElement, tag, defaultValue, hasSrc, props, null));
      }
      function updateProperties(domElement, tag, lastProps, nextProps) {
        validatePropertiesInDevelopment(tag, nextProps);
        switch (tag) {
          case "div":
          case "span":
          case "svg":
          case "path":
          case "a":
          case "g":
          case "p":
          case "li":
            break;
          case "input":
            var name = null, type = null, value = null, defaultValue = null, lastDefaultValue = null, checked = null, defaultChecked = null;
            for (propKey in lastProps) {
              var lastProp = lastProps[propKey];
              if (lastProps.hasOwnProperty(propKey) && null != lastProp)
                switch (propKey) {
                  case "checked":
                    break;
                  case "value":
                    break;
                  case "defaultValue":
                    lastDefaultValue = lastProp;
                  default:
                    nextProps.hasOwnProperty(propKey) || setProp(
                      domElement,
                      tag,
                      propKey,
                      null,
                      nextProps,
                      lastProp
                    );
                }
            }
            for (var _propKey8 in nextProps) {
              var propKey = nextProps[_propKey8];
              lastProp = lastProps[_propKey8];
              if (nextProps.hasOwnProperty(_propKey8) && (null != propKey || null != lastProp))
                switch (_propKey8) {
                  case "type":
                    type = propKey;
                    break;
                  case "name":
                    name = propKey;
                    break;
                  case "checked":
                    checked = propKey;
                    break;
                  case "defaultChecked":
                    defaultChecked = propKey;
                    break;
                  case "value":
                    value = propKey;
                    break;
                  case "defaultValue":
                    defaultValue = propKey;
                    break;
                  case "children":
                  case "dangerouslySetInnerHTML":
                    if (null != propKey)
                      throw Error(
                        tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                      );
                    break;
                  default:
                    propKey !== lastProp && setProp(
                      domElement,
                      tag,
                      _propKey8,
                      propKey,
                      nextProps,
                      lastProp
                    );
                }
            }
            tag = "checkbox" === lastProps.type || "radio" === lastProps.type ? null != lastProps.checked : null != lastProps.value;
            nextProps = "checkbox" === nextProps.type || "radio" === nextProps.type ? null != nextProps.checked : null != nextProps.value;
            tag || !nextProps || didWarnUncontrolledToControlled || (console.error(
              "A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://react.dev/link/controlled-components"
            ), didWarnUncontrolledToControlled = true);
            !tag || nextProps || didWarnControlledToUncontrolled || (console.error(
              "A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://react.dev/link/controlled-components"
            ), didWarnControlledToUncontrolled = true);
            updateInput(
              domElement,
              value,
              defaultValue,
              lastDefaultValue,
              checked,
              defaultChecked,
              type,
              name
            );
            return;
          case "select":
            propKey = value = defaultValue = _propKey8 = null;
            for (type in lastProps)
              if (lastDefaultValue = lastProps[type], lastProps.hasOwnProperty(type) && null != lastDefaultValue)
                switch (type) {
                  case "value":
                    break;
                  case "multiple":
                    propKey = lastDefaultValue;
                  default:
                    nextProps.hasOwnProperty(type) || setProp(
                      domElement,
                      tag,
                      type,
                      null,
                      nextProps,
                      lastDefaultValue
                    );
                }
            for (name in nextProps)
              if (type = nextProps[name], lastDefaultValue = lastProps[name], nextProps.hasOwnProperty(name) && (null != type || null != lastDefaultValue))
                switch (name) {
                  case "value":
                    _propKey8 = type;
                    break;
                  case "defaultValue":
                    defaultValue = type;
                    break;
                  case "multiple":
                    value = type;
                  default:
                    type !== lastDefaultValue && setProp(
                      domElement,
                      tag,
                      name,
                      type,
                      nextProps,
                      lastDefaultValue
                    );
                }
            nextProps = defaultValue;
            tag = value;
            lastProps = propKey;
            null != _propKey8 ? updateOptions(domElement, !!tag, _propKey8, false) : !!lastProps !== !!tag && (null != nextProps ? updateOptions(domElement, !!tag, nextProps, true) : updateOptions(domElement, !!tag, tag ? [] : "", false));
            return;
          case "textarea":
            propKey = _propKey8 = null;
            for (defaultValue in lastProps)
              if (name = lastProps[defaultValue], lastProps.hasOwnProperty(defaultValue) && null != name && !nextProps.hasOwnProperty(defaultValue))
                switch (defaultValue) {
                  case "value":
                    break;
                  case "children":
                    break;
                  default:
                    setProp(domElement, tag, defaultValue, null, nextProps, name);
                }
            for (value in nextProps)
              if (name = nextProps[value], type = lastProps[value], nextProps.hasOwnProperty(value) && (null != name || null != type))
                switch (value) {
                  case "value":
                    _propKey8 = name;
                    break;
                  case "defaultValue":
                    propKey = name;
                    break;
                  case "children":
                    break;
                  case "dangerouslySetInnerHTML":
                    if (null != name)
                      throw Error(
                        "`dangerouslySetInnerHTML` does not make sense on <textarea>."
                      );
                    break;
                  default:
                    name !== type && setProp(domElement, tag, value, name, nextProps, type);
                }
            updateTextarea(domElement, _propKey8, propKey);
            return;
          case "option":
            for (var _propKey13 in lastProps)
              if (_propKey8 = lastProps[_propKey13], lastProps.hasOwnProperty(_propKey13) && null != _propKey8 && !nextProps.hasOwnProperty(_propKey13))
                switch (_propKey13) {
                  case "selected":
                    domElement.selected = false;
                    break;
                  default:
                    setProp(
                      domElement,
                      tag,
                      _propKey13,
                      null,
                      nextProps,
                      _propKey8
                    );
                }
            for (lastDefaultValue in nextProps)
              if (_propKey8 = nextProps[lastDefaultValue], propKey = lastProps[lastDefaultValue], nextProps.hasOwnProperty(lastDefaultValue) && _propKey8 !== propKey && (null != _propKey8 || null != propKey))
                switch (lastDefaultValue) {
                  case "selected":
                    domElement.selected = _propKey8 && "function" !== typeof _propKey8 && "symbol" !== typeof _propKey8;
                    break;
                  default:
                    setProp(
                      domElement,
                      tag,
                      lastDefaultValue,
                      _propKey8,
                      nextProps,
                      propKey
                    );
                }
            return;
          case "img":
          case "link":
          case "area":
          case "base":
          case "br":
          case "col":
          case "embed":
          case "hr":
          case "keygen":
          case "meta":
          case "param":
          case "source":
          case "track":
          case "wbr":
          case "menuitem":
            for (var _propKey15 in lastProps)
              _propKey8 = lastProps[_propKey15], lastProps.hasOwnProperty(_propKey15) && null != _propKey8 && !nextProps.hasOwnProperty(_propKey15) && setProp(
                domElement,
                tag,
                _propKey15,
                null,
                nextProps,
                _propKey8
              );
            for (checked in nextProps)
              if (_propKey8 = nextProps[checked], propKey = lastProps[checked], nextProps.hasOwnProperty(checked) && _propKey8 !== propKey && (null != _propKey8 || null != propKey))
                switch (checked) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    if (null != _propKey8)
                      throw Error(
                        tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                      );
                    break;
                  default:
                    setProp(
                      domElement,
                      tag,
                      checked,
                      _propKey8,
                      nextProps,
                      propKey
                    );
                }
            return;
          default:
            if (isCustomElement(tag)) {
              for (var _propKey17 in lastProps)
                _propKey8 = lastProps[_propKey17], lastProps.hasOwnProperty(_propKey17) && void 0 !== _propKey8 && !nextProps.hasOwnProperty(_propKey17) && setPropOnCustomElement(
                  domElement,
                  tag,
                  _propKey17,
                  void 0,
                  nextProps,
                  _propKey8
                );
              for (defaultChecked in nextProps)
                _propKey8 = nextProps[defaultChecked], propKey = lastProps[defaultChecked], !nextProps.hasOwnProperty(defaultChecked) || _propKey8 === propKey || void 0 === _propKey8 && void 0 === propKey || setPropOnCustomElement(
                  domElement,
                  tag,
                  defaultChecked,
                  _propKey8,
                  nextProps,
                  propKey
                );
              return;
            }
        }
        for (var _propKey19 in lastProps)
          _propKey8 = lastProps[_propKey19], lastProps.hasOwnProperty(_propKey19) && null != _propKey8 && !nextProps.hasOwnProperty(_propKey19) && setProp(domElement, tag, _propKey19, null, nextProps, _propKey8);
        for (lastProp in nextProps)
          _propKey8 = nextProps[lastProp], propKey = lastProps[lastProp], !nextProps.hasOwnProperty(lastProp) || _propKey8 === propKey || null == _propKey8 && null == propKey || setProp(domElement, tag, lastProp, _propKey8, nextProps, propKey);
      }
      function getPropNameFromAttributeName(attrName) {
        switch (attrName) {
          case "class":
            return "className";
          case "for":
            return "htmlFor";
          default:
            return attrName;
        }
      }
      function getStylesObjectFromElement(domElement) {
        var serverValueInObjectForm = {};
        domElement = domElement.style;
        for (var i = 0; i < domElement.length; i++) {
          var styleName = domElement[i];
          serverValueInObjectForm[styleName] = domElement.getPropertyValue(styleName);
        }
        return serverValueInObjectForm;
      }
      function diffHydratedStyles(domElement, value$jscomp$0, serverDifferences) {
        if (null != value$jscomp$0 && "object" !== typeof value$jscomp$0)
          console.error(
            "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX."
          );
        else {
          var clientValue;
          var delimiter2 = clientValue = "", styleName;
          for (styleName in value$jscomp$0)
            if (value$jscomp$0.hasOwnProperty(styleName)) {
              var value = value$jscomp$0[styleName];
              null != value && "boolean" !== typeof value && "" !== value && (0 === styleName.indexOf("--") ? (checkCSSPropertyStringCoercion(value, styleName), clientValue += delimiter2 + styleName + ":" + ("" + value).trim()) : "number" !== typeof value || 0 === value || unitlessNumbers.has(styleName) ? (checkCSSPropertyStringCoercion(value, styleName), clientValue += delimiter2 + styleName.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-") + ":" + ("" + value).trim()) : clientValue += delimiter2 + styleName.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-") + ":" + value + "px", delimiter2 = ";");
            }
          clientValue = clientValue || null;
          value$jscomp$0 = domElement.getAttribute("style");
          value$jscomp$0 !== clientValue && (clientValue = normalizeMarkupForTextOrAttribute(clientValue), normalizeMarkupForTextOrAttribute(value$jscomp$0) !== clientValue && (serverDifferences.style = getStylesObjectFromElement(domElement)));
        }
      }
      function hydrateAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
        extraAttributes.delete(attributeName);
        domElement = domElement.getAttribute(attributeName);
        if (null === domElement)
          switch (typeof value) {
            case "undefined":
            case "function":
            case "symbol":
            case "boolean":
              return;
          }
        else if (null != value)
          switch (typeof value) {
            case "function":
            case "symbol":
            case "boolean":
              break;
            default:
              if (checkAttributeStringCoercion(value, propKey), domElement === "" + value)
                return;
          }
        warnForPropDifference(propKey, domElement, value, serverDifferences);
      }
      function hydrateBooleanAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
        extraAttributes.delete(attributeName);
        domElement = domElement.getAttribute(attributeName);
        if (null === domElement) {
          switch (typeof value) {
            case "function":
            case "symbol":
              return;
          }
          if (!value) return;
        } else
          switch (typeof value) {
            case "function":
            case "symbol":
              break;
            default:
              if (value) return;
          }
        warnForPropDifference(propKey, domElement, value, serverDifferences);
      }
      function hydrateBooleanishAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
        extraAttributes.delete(attributeName);
        domElement = domElement.getAttribute(attributeName);
        if (null === domElement)
          switch (typeof value) {
            case "undefined":
            case "function":
            case "symbol":
              return;
          }
        else if (null != value)
          switch (typeof value) {
            case "function":
            case "symbol":
              break;
            default:
              if (checkAttributeStringCoercion(value, attributeName), domElement === "" + value)
                return;
          }
        warnForPropDifference(propKey, domElement, value, serverDifferences);
      }
      function hydrateNumericAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
        extraAttributes.delete(attributeName);
        domElement = domElement.getAttribute(attributeName);
        if (null === domElement)
          switch (typeof value) {
            case "undefined":
            case "function":
            case "symbol":
            case "boolean":
              return;
            default:
              if (isNaN(value)) return;
          }
        else if (null != value)
          switch (typeof value) {
            case "function":
            case "symbol":
            case "boolean":
              break;
            default:
              if (!isNaN(value) && (checkAttributeStringCoercion(value, propKey), domElement === "" + value))
                return;
          }
        warnForPropDifference(propKey, domElement, value, serverDifferences);
      }
      function hydrateSanitizedAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
        extraAttributes.delete(attributeName);
        domElement = domElement.getAttribute(attributeName);
        if (null === domElement)
          switch (typeof value) {
            case "undefined":
            case "function":
            case "symbol":
            case "boolean":
              return;
          }
        else if (null != value)
          switch (typeof value) {
            case "function":
            case "symbol":
            case "boolean":
              break;
            default:
              if (checkAttributeStringCoercion(value, propKey), attributeName = sanitizeURL("" + value), domElement === attributeName)
                return;
          }
        warnForPropDifference(propKey, domElement, value, serverDifferences);
      }
      function diffHydratedProperties(domElement, tag, props, hostContext) {
        for (var serverDifferences = {}, extraAttributes = /* @__PURE__ */ new Set(), attributes = domElement.attributes, i = 0; i < attributes.length; i++)
          switch (attributes[i].name.toLowerCase()) {
            case "value":
              break;
            case "checked":
              break;
            case "selected":
              break;
            default:
              extraAttributes.add(attributes[i].name);
          }
        if (isCustomElement(tag))
          for (var propKey in props) {
            if (props.hasOwnProperty(propKey)) {
              var value = props[propKey];
              if (null != value) {
                if (registrationNameDependencies.hasOwnProperty(propKey))
                  "function" !== typeof value && warnForInvalidEventListener(propKey, value);
                else if (true !== props.suppressHydrationWarning)
                  switch (propKey) {
                    case "children":
                      "string" !== typeof value && "number" !== typeof value || warnForPropDifference(
                        "children",
                        domElement.textContent,
                        value,
                        serverDifferences
                      );
                      continue;
                    case "suppressContentEditableWarning":
                    case "suppressHydrationWarning":
                    case "defaultValue":
                    case "defaultChecked":
                    case "innerHTML":
                    case "ref":
                      continue;
                    case "dangerouslySetInnerHTML":
                      attributes = domElement.innerHTML;
                      value = value ? value.__html : void 0;
                      null != value && (value = normalizeHTML(domElement, value), warnForPropDifference(
                        propKey,
                        attributes,
                        value,
                        serverDifferences
                      ));
                      continue;
                    case "style":
                      extraAttributes.delete(propKey);
                      diffHydratedStyles(domElement, value, serverDifferences);
                      continue;
                    case "offsetParent":
                    case "offsetTop":
                    case "offsetLeft":
                    case "offsetWidth":
                    case "offsetHeight":
                    case "isContentEditable":
                    case "outerText":
                    case "outerHTML":
                      extraAttributes.delete(propKey.toLowerCase());
                      console.error(
                        "Assignment to read-only property will result in a no-op: `%s`",
                        propKey
                      );
                      continue;
                    case "className":
                      extraAttributes.delete("class");
                      attributes = getValueForAttributeOnCustomComponent(
                        domElement,
                        "class",
                        value
                      );
                      warnForPropDifference(
                        "className",
                        attributes,
                        value,
                        serverDifferences
                      );
                      continue;
                    default:
                      hostContext.context === HostContextNamespaceNone && "svg" !== tag && "math" !== tag ? extraAttributes.delete(propKey.toLowerCase()) : extraAttributes.delete(propKey), attributes = getValueForAttributeOnCustomComponent(
                        domElement,
                        propKey,
                        value
                      ), warnForPropDifference(
                        propKey,
                        attributes,
                        value,
                        serverDifferences
                      );
                  }
              }
            }
          }
        else
          for (value in props)
            if (props.hasOwnProperty(value) && (propKey = props[value], null != propKey)) {
              if (registrationNameDependencies.hasOwnProperty(value))
                "function" !== typeof propKey && warnForInvalidEventListener(value, propKey);
              else if (true !== props.suppressHydrationWarning)
                switch (value) {
                  case "children":
                    "string" !== typeof propKey && "number" !== typeof propKey || warnForPropDifference(
                      "children",
                      domElement.textContent,
                      propKey,
                      serverDifferences
                    );
                    continue;
                  case "suppressContentEditableWarning":
                  case "suppressHydrationWarning":
                  case "value":
                  case "checked":
                  case "selected":
                  case "defaultValue":
                  case "defaultChecked":
                  case "innerHTML":
                  case "ref":
                    continue;
                  case "dangerouslySetInnerHTML":
                    attributes = domElement.innerHTML;
                    propKey = propKey ? propKey.__html : void 0;
                    null != propKey && (propKey = normalizeHTML(domElement, propKey), attributes !== propKey && (serverDifferences[value] = { __html: attributes }));
                    continue;
                  case "className":
                    hydrateAttribute(
                      domElement,
                      value,
                      "class",
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "tabIndex":
                    hydrateAttribute(
                      domElement,
                      value,
                      "tabindex",
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "style":
                    extraAttributes.delete(value);
                    diffHydratedStyles(domElement, propKey, serverDifferences);
                    continue;
                  case "multiple":
                    extraAttributes.delete(value);
                    warnForPropDifference(
                      value,
                      domElement.multiple,
                      propKey,
                      serverDifferences
                    );
                    continue;
                  case "muted":
                    extraAttributes.delete(value);
                    warnForPropDifference(
                      value,
                      domElement.muted,
                      propKey,
                      serverDifferences
                    );
                    continue;
                  case "autoFocus":
                    extraAttributes.delete("autofocus");
                    warnForPropDifference(
                      value,
                      domElement.autofocus,
                      propKey,
                      serverDifferences
                    );
                    continue;
                  case "data":
                    if ("object" !== tag) {
                      extraAttributes.delete(value);
                      attributes = domElement.getAttribute("data");
                      warnForPropDifference(
                        value,
                        attributes,
                        propKey,
                        serverDifferences
                      );
                      continue;
                    }
                  case "src":
                  case "href":
                    if (!("" !== propKey || "a" === tag && "href" === value || "object" === tag && "data" === value)) {
                      "src" === value ? console.error(
                        'An empty string ("") was passed to the %s attribute. This may cause the browser to download the whole page again over the network. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',
                        value,
                        value
                      ) : console.error(
                        'An empty string ("") was passed to the %s attribute. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',
                        value,
                        value
                      );
                      continue;
                    }
                    hydrateSanitizedAttribute(
                      domElement,
                      value,
                      value,
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "action":
                  case "formAction":
                    attributes = domElement.getAttribute(value);
                    if ("function" === typeof propKey) {
                      extraAttributes.delete(value.toLowerCase());
                      "formAction" === value ? (extraAttributes.delete("name"), extraAttributes.delete("formenctype"), extraAttributes.delete("formmethod"), extraAttributes.delete("formtarget")) : (extraAttributes.delete("enctype"), extraAttributes.delete("method"), extraAttributes.delete("target"));
                      continue;
                    } else if (attributes === EXPECTED_FORM_ACTION_URL) {
                      extraAttributes.delete(value.toLowerCase());
                      warnForPropDifference(
                        value,
                        "function",
                        propKey,
                        serverDifferences
                      );
                      continue;
                    }
                    hydrateSanitizedAttribute(
                      domElement,
                      value,
                      value.toLowerCase(),
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "xlinkHref":
                    hydrateSanitizedAttribute(
                      domElement,
                      value,
                      "xlink:href",
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "contentEditable":
                    hydrateBooleanishAttribute(
                      domElement,
                      value,
                      "contenteditable",
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "spellCheck":
                    hydrateBooleanishAttribute(
                      domElement,
                      value,
                      "spellcheck",
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "draggable":
                  case "autoReverse":
                  case "externalResourcesRequired":
                  case "focusable":
                  case "preserveAlpha":
                    hydrateBooleanishAttribute(
                      domElement,
                      value,
                      value,
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "allowFullScreen":
                  case "async":
                  case "autoPlay":
                  case "controls":
                  case "default":
                  case "defer":
                  case "disabled":
                  case "disablePictureInPicture":
                  case "disableRemotePlayback":
                  case "formNoValidate":
                  case "hidden":
                  case "loop":
                  case "noModule":
                  case "noValidate":
                  case "open":
                  case "playsInline":
                  case "readOnly":
                  case "required":
                  case "reversed":
                  case "scoped":
                  case "seamless":
                  case "itemScope":
                    hydrateBooleanAttribute(
                      domElement,
                      value,
                      value.toLowerCase(),
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "capture":
                  case "download":
                    a: {
                      i = domElement;
                      var attributeName = attributes = value, serverDifferences$jscomp$0 = serverDifferences;
                      extraAttributes.delete(attributeName);
                      i = i.getAttribute(attributeName);
                      if (null === i)
                        switch (typeof propKey) {
                          case "undefined":
                          case "function":
                          case "symbol":
                            break a;
                          default:
                            if (false === propKey) break a;
                        }
                      else if (null != propKey)
                        switch (typeof propKey) {
                          case "function":
                          case "symbol":
                            break;
                          case "boolean":
                            if (true === propKey && "" === i) break a;
                            break;
                          default:
                            if (checkAttributeStringCoercion(propKey, attributes), i === "" + propKey)
                              break a;
                        }
                      warnForPropDifference(
                        attributes,
                        i,
                        propKey,
                        serverDifferences$jscomp$0
                      );
                    }
                    continue;
                  case "cols":
                  case "rows":
                  case "size":
                  case "span":
                    a: {
                      i = domElement;
                      attributeName = attributes = value;
                      serverDifferences$jscomp$0 = serverDifferences;
                      extraAttributes.delete(attributeName);
                      i = i.getAttribute(attributeName);
                      if (null === i)
                        switch (typeof propKey) {
                          case "undefined":
                          case "function":
                          case "symbol":
                          case "boolean":
                            break a;
                          default:
                            if (isNaN(propKey) || 1 > propKey) break a;
                        }
                      else if (null != propKey)
                        switch (typeof propKey) {
                          case "function":
                          case "symbol":
                          case "boolean":
                            break;
                          default:
                            if (!(isNaN(propKey) || 1 > propKey) && (checkAttributeStringCoercion(propKey, attributes), i === "" + propKey))
                              break a;
                        }
                      warnForPropDifference(
                        attributes,
                        i,
                        propKey,
                        serverDifferences$jscomp$0
                      );
                    }
                    continue;
                  case "rowSpan":
                    hydrateNumericAttribute(
                      domElement,
                      value,
                      "rowspan",
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "start":
                    hydrateNumericAttribute(
                      domElement,
                      value,
                      value,
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "xHeight":
                    hydrateAttribute(
                      domElement,
                      value,
                      "x-height",
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "xlinkActuate":
                    hydrateAttribute(
                      domElement,
                      value,
                      "xlink:actuate",
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "xlinkArcrole":
                    hydrateAttribute(
                      domElement,
                      value,
                      "xlink:arcrole",
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "xlinkRole":
                    hydrateAttribute(
                      domElement,
                      value,
                      "xlink:role",
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "xlinkShow":
                    hydrateAttribute(
                      domElement,
                      value,
                      "xlink:show",
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "xlinkTitle":
                    hydrateAttribute(
                      domElement,
                      value,
                      "xlink:title",
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "xlinkType":
                    hydrateAttribute(
                      domElement,
                      value,
                      "xlink:type",
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "xmlBase":
                    hydrateAttribute(
                      domElement,
                      value,
                      "xml:base",
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "xmlLang":
                    hydrateAttribute(
                      domElement,
                      value,
                      "xml:lang",
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "xmlSpace":
                    hydrateAttribute(
                      domElement,
                      value,
                      "xml:space",
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "inert":
                    "" !== propKey || didWarnForNewBooleanPropsWithEmptyValue[value] || (didWarnForNewBooleanPropsWithEmptyValue[value] = true, console.error(
                      "Received an empty string for a boolean attribute `%s`. This will treat the attribute as if it were false. Either pass `false` to silence this warning, or pass `true` if you used an empty string in earlier versions of React to indicate this attribute is true.",
                      value
                    ));
                    hydrateBooleanAttribute(
                      domElement,
                      value,
                      value,
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  default:
                    if (!(2 < value.length) || "o" !== value[0] && "O" !== value[0] || "n" !== value[1] && "N" !== value[1]) {
                      i = getAttributeAlias(value);
                      attributes = false;
                      hostContext.context === HostContextNamespaceNone && "svg" !== tag && "math" !== tag ? extraAttributes.delete(i.toLowerCase()) : (attributeName = value.toLowerCase(), attributeName = possibleStandardNames.hasOwnProperty(
                        attributeName
                      ) ? possibleStandardNames[attributeName] || null : null, null !== attributeName && attributeName !== value && (attributes = true, extraAttributes.delete(attributeName)), extraAttributes.delete(i));
                      a: if (attributeName = domElement, serverDifferences$jscomp$0 = i, i = propKey, isAttributeNameSafe(serverDifferences$jscomp$0))
                        if (attributeName.hasAttribute(serverDifferences$jscomp$0))
                          attributeName = attributeName.getAttribute(
                            serverDifferences$jscomp$0
                          ), checkAttributeStringCoercion(
                            i,
                            serverDifferences$jscomp$0
                          ), i = attributeName === "" + i ? i : attributeName;
                        else {
                          switch (typeof i) {
                            case "function":
                            case "symbol":
                              break a;
                            case "boolean":
                              if (attributeName = serverDifferences$jscomp$0.toLowerCase().slice(0, 5), "data-" !== attributeName && "aria-" !== attributeName)
                                break a;
                          }
                          i = void 0 === i ? void 0 : null;
                        }
                      else i = void 0;
                      attributes || warnForPropDifference(
                        value,
                        i,
                        propKey,
                        serverDifferences
                      );
                    }
                }
            }
        0 < extraAttributes.size && true !== props.suppressHydrationWarning && warnForExtraAttributes(domElement, extraAttributes, serverDifferences);
        return 0 === Object.keys(serverDifferences).length ? null : serverDifferences;
      }
      function propNamesListJoin(list, combinator) {
        switch (list.length) {
          case 0:
            return "";
          case 1:
            return list[0];
          case 2:
            return list[0] + " " + combinator + " " + list[1];
          default:
            return list.slice(0, -1).join(", ") + ", " + combinator + " " + list[list.length - 1];
        }
      }
      function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return 9 === rootContainerElement.nodeType ? rootContainerElement : rootContainerElement.ownerDocument;
      }
      function getOwnHostContext(namespaceURI) {
        switch (namespaceURI) {
          case SVG_NAMESPACE:
            return HostContextNamespaceSvg;
          case MATH_NAMESPACE:
            return HostContextNamespaceMath;
          default:
            return HostContextNamespaceNone;
        }
      }
      function getChildHostContextProd(parentNamespace, type) {
        if (parentNamespace === HostContextNamespaceNone)
          switch (type) {
            case "svg":
              return HostContextNamespaceSvg;
            case "math":
              return HostContextNamespaceMath;
            default:
              return HostContextNamespaceNone;
          }
        return parentNamespace === HostContextNamespaceSvg && "foreignObject" === type ? HostContextNamespaceNone : parentNamespace;
      }
      function shouldSetTextContent(type, props) {
        return "textarea" === type || "noscript" === type || "string" === typeof props.children || "number" === typeof props.children || "bigint" === typeof props.children || "object" === typeof props.dangerouslySetInnerHTML && null !== props.dangerouslySetInnerHTML && null != props.dangerouslySetInnerHTML.__html;
      }
      function shouldAttemptEagerTransition() {
        var event = window.event;
        if (event && "popstate" === event.type) {
          if (event === currentPopstateTransitionEvent) return false;
          currentPopstateTransitionEvent = event;
          return true;
        }
        currentPopstateTransitionEvent = null;
        return false;
      }
      function handleErrorInNextTick(error) {
        setTimeout(function() {
          throw error;
        });
      }
      function commitMount(domElement, type, newProps) {
        switch (type) {
          case "button":
          case "input":
          case "select":
          case "textarea":
            newProps.autoFocus && domElement.focus();
            break;
          case "img":
            newProps.src ? domElement.src = newProps.src : newProps.srcSet && (domElement.srcset = newProps.srcSet);
        }
      }
      function commitUpdate(domElement, type, oldProps, newProps) {
        updateProperties(domElement, type, oldProps, newProps);
        domElement[internalPropsKey] = newProps;
      }
      function resetTextContent(domElement) {
        setTextContent(domElement, "");
      }
      function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
      }
      function isSingletonScope(type) {
        return "head" === type;
      }
      function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
      }
      function removeChildFromContainer(container, child) {
        (9 === container.nodeType ? container.body : "HTML" === container.nodeName ? container.ownerDocument.body : container).removeChild(child);
      }
      function clearSuspenseBoundary(parentInstance, suspenseInstance) {
        var node2 = suspenseInstance, possiblePreambleContribution = 0, depth = 0;
        do {
          var nextNode = node2.nextSibling;
          parentInstance.removeChild(node2);
          if (nextNode && 8 === nextNode.nodeType)
            if (node2 = nextNode.data, node2 === SUSPENSE_END_DATA) {
              if (0 < possiblePreambleContribution && 8 > possiblePreambleContribution) {
                node2 = possiblePreambleContribution;
                var ownerDocument = parentInstance.ownerDocument;
                node2 & PREAMBLE_CONTRIBUTION_HTML && releaseSingletonInstance(ownerDocument.documentElement);
                node2 & PREAMBLE_CONTRIBUTION_BODY && releaseSingletonInstance(ownerDocument.body);
                if (node2 & PREAMBLE_CONTRIBUTION_HEAD)
                  for (node2 = ownerDocument.head, releaseSingletonInstance(node2), ownerDocument = node2.firstChild; ownerDocument; ) {
                    var nextNode$jscomp$0 = ownerDocument.nextSibling, nodeName = ownerDocument.nodeName;
                    ownerDocument[internalHoistableMarker] || "SCRIPT" === nodeName || "STYLE" === nodeName || "LINK" === nodeName && "stylesheet" === ownerDocument.rel.toLowerCase() || node2.removeChild(ownerDocument);
                    ownerDocument = nextNode$jscomp$0;
                  }
              }
              if (0 === depth) {
                parentInstance.removeChild(nextNode);
                retryIfBlockedOn(suspenseInstance);
                return;
              }
              depth--;
            } else
              node2 === SUSPENSE_START_DATA || node2 === SUSPENSE_PENDING_START_DATA || node2 === SUSPENSE_FALLBACK_START_DATA ? depth++ : possiblePreambleContribution = node2.charCodeAt(0) - 48;
          else possiblePreambleContribution = 0;
          node2 = nextNode;
        } while (node2);
        retryIfBlockedOn(suspenseInstance);
      }
      function hideInstance(instance) {
        instance = instance.style;
        "function" === typeof instance.setProperty ? instance.setProperty("display", "none", "important") : instance.display = "none";
      }
      function hideTextInstance(textInstance) {
        textInstance.nodeValue = "";
      }
      function unhideInstance(instance, props) {
        props = props[STYLE];
        props = void 0 !== props && null !== props && props.hasOwnProperty("display") ? props.display : null;
        instance.style.display = null == props || "boolean" === typeof props ? "" : ("" + props).trim();
      }
      function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text;
      }
      function clearContainerSparingly(container) {
        var nextNode = container.firstChild;
        nextNode && 10 === nextNode.nodeType && (nextNode = nextNode.nextSibling);
        for (; nextNode; ) {
          var node2 = nextNode;
          nextNode = nextNode.nextSibling;
          switch (node2.nodeName) {
            case "HTML":
            case "HEAD":
            case "BODY":
              clearContainerSparingly(node2);
              detachDeletedInstance(node2);
              continue;
            case "SCRIPT":
            case "STYLE":
              continue;
            case "LINK":
              if ("stylesheet" === node2.rel.toLowerCase()) continue;
          }
          container.removeChild(node2);
        }
      }
      function canHydrateInstance(instance, type, props, inRootOrSingleton) {
        for (; 1 === instance.nodeType; ) {
          var anyProps = props;
          if (instance.nodeName.toLowerCase() !== type.toLowerCase()) {
            if (!inRootOrSingleton && ("INPUT" !== instance.nodeName || "hidden" !== instance.type))
              break;
          } else if (!inRootOrSingleton)
            if ("input" === type && "hidden" === instance.type) {
              checkAttributeStringCoercion(anyProps.name, "name");
              var name = null == anyProps.name ? null : "" + anyProps.name;
              if ("hidden" === anyProps.type && instance.getAttribute("name") === name)
                return instance;
            } else return instance;
          else if (!instance[internalHoistableMarker])
            switch (type) {
              case "meta":
                if (!instance.hasAttribute("itemprop")) break;
                return instance;
              case "link":
                name = instance.getAttribute("rel");
                if ("stylesheet" === name && instance.hasAttribute("data-precedence"))
                  break;
                else if (name !== anyProps.rel || instance.getAttribute("href") !== (null == anyProps.href || "" === anyProps.href ? null : anyProps.href) || instance.getAttribute("crossorigin") !== (null == anyProps.crossOrigin ? null : anyProps.crossOrigin) || instance.getAttribute("title") !== (null == anyProps.title ? null : anyProps.title))
                  break;
                return instance;
              case "style":
                if (instance.hasAttribute("data-precedence")) break;
                return instance;
              case "script":
                name = instance.getAttribute("src");
                if ((name !== (null == anyProps.src ? null : anyProps.src) || instance.getAttribute("type") !== (null == anyProps.type ? null : anyProps.type) || instance.getAttribute("crossorigin") !== (null == anyProps.crossOrigin ? null : anyProps.crossOrigin)) && name && instance.hasAttribute("async") && !instance.hasAttribute("itemprop"))
                  break;
                return instance;
              default:
                return instance;
            }
          instance = getNextHydratable(instance.nextSibling);
          if (null === instance) break;
        }
        return null;
      }
      function canHydrateTextInstance(instance, text, inRootOrSingleton) {
        if ("" === text) return null;
        for (; 3 !== instance.nodeType; ) {
          if ((1 !== instance.nodeType || "INPUT" !== instance.nodeName || "hidden" !== instance.type) && !inRootOrSingleton)
            return null;
          instance = getNextHydratable(instance.nextSibling);
          if (null === instance) return null;
        }
        return instance;
      }
      function isSuspenseInstanceFallback(instance) {
        return instance.data === SUSPENSE_FALLBACK_START_DATA || instance.data === SUSPENSE_PENDING_START_DATA && instance.ownerDocument.readyState === DOCUMENT_READY_STATE_COMPLETE;
      }
      function registerSuspenseInstanceRetry(instance, callback) {
        var ownerDocument = instance.ownerDocument;
        if (instance.data !== SUSPENSE_PENDING_START_DATA || ownerDocument.readyState === DOCUMENT_READY_STATE_COMPLETE)
          callback();
        else {
          var listener = function() {
            callback();
            ownerDocument.removeEventListener("DOMContentLoaded", listener);
          };
          ownerDocument.addEventListener("DOMContentLoaded", listener);
          instance._reactRetry = listener;
        }
      }
      function getNextHydratable(node2) {
        for (; null != node2; node2 = node2.nextSibling) {
          var nodeType = node2.nodeType;
          if (1 === nodeType || 3 === nodeType) break;
          if (8 === nodeType) {
            nodeType = node2.data;
            if (nodeType === SUSPENSE_START_DATA || nodeType === SUSPENSE_FALLBACK_START_DATA || nodeType === SUSPENSE_PENDING_START_DATA || nodeType === FORM_STATE_IS_MATCHING || nodeType === FORM_STATE_IS_NOT_MATCHING)
              break;
            if (nodeType === SUSPENSE_END_DATA) return null;
          }
        }
        return node2;
      }
      function describeHydratableInstanceForDevWarnings(instance) {
        if (1 === instance.nodeType) {
          for (var JSCompiler_temp_const = instance.nodeName.toLowerCase(), serverDifferences = {}, attributes = instance.attributes, i = 0; i < attributes.length; i++) {
            var attr = attributes[i];
            serverDifferences[getPropNameFromAttributeName(attr.name)] = "style" === attr.name.toLowerCase() ? getStylesObjectFromElement(instance) : attr.value;
          }
          return { type: JSCompiler_temp_const, props: serverDifferences };
        }
        return 8 === instance.nodeType ? { type: "Suspense", props: {} } : instance.nodeValue;
      }
      function diffHydratedTextForDevWarnings(textInstance, text, parentProps) {
        return null === parentProps || true !== parentProps[SUPPRESS_HYDRATION_WARNING] ? (textInstance.nodeValue === text ? textInstance = null : (text = normalizeMarkupForTextOrAttribute(text), textInstance = normalizeMarkupForTextOrAttribute(textInstance.nodeValue) === text ? null : textInstance.nodeValue), textInstance) : null;
      }
      function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        suspenseInstance = suspenseInstance.nextSibling;
        for (var depth = 0; suspenseInstance; ) {
          if (8 === suspenseInstance.nodeType) {
            var data = suspenseInstance.data;
            if (data === SUSPENSE_END_DATA) {
              if (0 === depth)
                return getNextHydratable(suspenseInstance.nextSibling);
              depth--;
            } else
              data !== SUSPENSE_START_DATA && data !== SUSPENSE_FALLBACK_START_DATA && data !== SUSPENSE_PENDING_START_DATA || depth++;
          }
          suspenseInstance = suspenseInstance.nextSibling;
        }
        return null;
      }
      function getParentSuspenseInstance(targetInstance) {
        targetInstance = targetInstance.previousSibling;
        for (var depth = 0; targetInstance; ) {
          if (8 === targetInstance.nodeType) {
            var data = targetInstance.data;
            if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
              if (0 === depth) return targetInstance;
              depth--;
            } else data === SUSPENSE_END_DATA && depth++;
          }
          targetInstance = targetInstance.previousSibling;
        }
        return null;
      }
      function commitHydratedContainer(container) {
        retryIfBlockedOn(container);
      }
      function commitHydratedSuspenseInstance(suspenseInstance) {
        retryIfBlockedOn(suspenseInstance);
      }
      function resolveSingletonInstance(type, props, rootContainerInstance, hostContext, validateDOMNestingDev) {
        validateDOMNestingDev && validateDOMNesting(type, hostContext.ancestorInfo);
        props = getOwnerDocumentFromRootContainer(rootContainerInstance);
        switch (type) {
          case "html":
            type = props.documentElement;
            if (!type)
              throw Error(
                "React expected an <html> element (document.documentElement) to exist in the Document but one was not found. React never removes the documentElement for any Document it renders into so the cause is likely in some other script running on this page."
              );
            return type;
          case "head":
            type = props.head;
            if (!type)
              throw Error(
                "React expected a <head> element (document.head) to exist in the Document but one was not found. React never removes the head for any Document it renders into so the cause is likely in some other script running on this page."
              );
            return type;
          case "body":
            type = props.body;
            if (!type)
              throw Error(
                "React expected a <body> element (document.body) to exist in the Document but one was not found. React never removes the body for any Document it renders into so the cause is likely in some other script running on this page."
              );
            return type;
          default:
            throw Error(
              "resolveSingletonInstance was called with an element type that is not supported. This is a bug in React."
            );
        }
      }
      function acquireSingletonInstance(type, props, instance, internalInstanceHandle) {
        if (!instance[internalContainerInstanceKey] && getInstanceFromNode(instance)) {
          var tagName = instance.tagName.toLowerCase();
          console.error(
            "You are mounting a new %s component when a previous one has not first unmounted. It is an error to render more than one %s component at a time and attributes and children of these components will likely fail in unpredictable ways. Please only render a single instance of <%s> and if you need to mount a new one, ensure any previous ones have unmounted first.",
            tagName,
            tagName,
            tagName
          );
        }
        switch (type) {
          case "html":
          case "head":
          case "body":
            break;
          default:
            console.error(
              "acquireSingletonInstance was called with an element type that is not supported. This is a bug in React."
            );
        }
        for (tagName = instance.attributes; tagName.length; )
          instance.removeAttributeNode(tagName[0]);
        setInitialProperties(instance, type, props);
        instance[internalInstanceKey] = internalInstanceHandle;
        instance[internalPropsKey] = props;
      }
      function releaseSingletonInstance(instance) {
        for (var attributes = instance.attributes; attributes.length; )
          instance.removeAttributeNode(attributes[0]);
        detachDeletedInstance(instance);
      }
      function getHoistableRoot(container) {
        return "function" === typeof container.getRootNode ? container.getRootNode() : 9 === container.nodeType ? container : container.ownerDocument;
      }
      function preconnectAs(rel, href, crossOrigin) {
        var ownerDocument = globalDocument;
        if (ownerDocument && "string" === typeof href && href) {
          var limitedEscapedHref = escapeSelectorAttributeValueInsideDoubleQuotes(href);
          limitedEscapedHref = 'link[rel="' + rel + '"][href="' + limitedEscapedHref + '"]';
          "string" === typeof crossOrigin && (limitedEscapedHref += '[crossorigin="' + crossOrigin + '"]');
          preconnectsSet.has(limitedEscapedHref) || (preconnectsSet.add(limitedEscapedHref), rel = { rel, crossOrigin, href }, null === ownerDocument.querySelector(limitedEscapedHref) && (href = ownerDocument.createElement("link"), setInitialProperties(href, "link", rel), markNodeAsHoistable(href), ownerDocument.head.appendChild(href)));
        }
      }
      function getResource(type, currentProps, pendingProps, currentResource) {
        var resourceRoot = (resourceRoot = rootInstanceStackCursor.current) ? getHoistableRoot(resourceRoot) : null;
        if (!resourceRoot)
          throw Error(
            '"resourceRoot" was expected to exist. This is a bug in React.'
          );
        switch (type) {
          case "meta":
          case "title":
            return null;
          case "style":
            return "string" === typeof pendingProps.precedence && "string" === typeof pendingProps.href ? (pendingProps = getStyleKey(pendingProps.href), currentProps = getResourcesFromRoot(resourceRoot).hoistableStyles, currentResource = currentProps.get(pendingProps), currentResource || (currentResource = {
              type: "style",
              instance: null,
              count: 0,
              state: null
            }, currentProps.set(pendingProps, currentResource)), currentResource) : { type: "void", instance: null, count: 0, state: null };
          case "link":
            if ("stylesheet" === pendingProps.rel && "string" === typeof pendingProps.href && "string" === typeof pendingProps.precedence) {
              type = getStyleKey(pendingProps.href);
              var _styles = getResourcesFromRoot(resourceRoot).hoistableStyles, _resource = _styles.get(type);
              if (!_resource && (resourceRoot = resourceRoot.ownerDocument || resourceRoot, _resource = {
                type: "stylesheet",
                instance: null,
                count: 0,
                state: { loading: NotLoaded, preload: null }
              }, _styles.set(type, _resource), (_styles = resourceRoot.querySelector(
                getStylesheetSelectorFromKey(type)
              )) && !_styles._p && (_resource.instance = _styles, _resource.state.loading = Loaded | Inserted), !preloadPropsMap.has(type))) {
                var preloadProps = {
                  rel: "preload",
                  as: "style",
                  href: pendingProps.href,
                  crossOrigin: pendingProps.crossOrigin,
                  integrity: pendingProps.integrity,
                  media: pendingProps.media,
                  hrefLang: pendingProps.hrefLang,
                  referrerPolicy: pendingProps.referrerPolicy
                };
                preloadPropsMap.set(type, preloadProps);
                _styles || preloadStylesheet(
                  resourceRoot,
                  type,
                  preloadProps,
                  _resource.state
                );
              }
              if (currentProps && null === currentResource)
                throw pendingProps = "\n\n  - " + describeLinkForResourceErrorDEV(currentProps) + "\n  + " + describeLinkForResourceErrorDEV(pendingProps), Error(
                  "Expected <link> not to update to be updated to a stylesheet with precedence. Check the `rel`, `href`, and `precedence` props of this component. Alternatively, check whether two different <link> components render in the same slot or share the same key." + pendingProps
                );
              return _resource;
            }
            if (currentProps && null !== currentResource)
              throw pendingProps = "\n\n  - " + describeLinkForResourceErrorDEV(currentProps) + "\n  + " + describeLinkForResourceErrorDEV(pendingProps), Error(
                "Expected stylesheet with precedence to not be updated to a different kind of <link>. Check the `rel`, `href`, and `precedence` props of this component. Alternatively, check whether two different <link> components render in the same slot or share the same key." + pendingProps
              );
            return null;
          case "script":
            return currentProps = pendingProps.async, pendingProps = pendingProps.src, "string" === typeof pendingProps && currentProps && "function" !== typeof currentProps && "symbol" !== typeof currentProps ? (pendingProps = getScriptKey(pendingProps), currentProps = getResourcesFromRoot(resourceRoot).hoistableScripts, currentResource = currentProps.get(pendingProps), currentResource || (currentResource = {
              type: "script",
              instance: null,
              count: 0,
              state: null
            }, currentProps.set(pendingProps, currentResource)), currentResource) : { type: "void", instance: null, count: 0, state: null };
          default:
            throw Error(
              'getResource encountered a type it did not expect: "' + type + '". this is a bug in React.'
            );
        }
      }
      function describeLinkForResourceErrorDEV(props) {
        var describedProps = 0, description = "<link";
        "string" === typeof props.rel ? (describedProps++, description += ' rel="' + props.rel + '"') : hasOwnProperty.call(props, "rel") && (describedProps++, description += ' rel="' + (null === props.rel ? "null" : "invalid type " + typeof props.rel) + '"');
        "string" === typeof props.href ? (describedProps++, description += ' href="' + props.href + '"') : hasOwnProperty.call(props, "href") && (describedProps++, description += ' href="' + (null === props.href ? "null" : "invalid type " + typeof props.href) + '"');
        "string" === typeof props.precedence ? (describedProps++, description += ' precedence="' + props.precedence + '"') : hasOwnProperty.call(props, "precedence") && (describedProps++, description += " precedence={" + (null === props.precedence ? "null" : "invalid type " + typeof props.precedence) + "}");
        Object.getOwnPropertyNames(props).length > describedProps && (description += " ...");
        return description + " />";
      }
      function getStyleKey(href) {
        return 'href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"';
      }
      function getStylesheetSelectorFromKey(key) {
        return 'link[rel="stylesheet"][' + key + "]";
      }
      function stylesheetPropsFromRawProps(rawProps) {
        return assign2({}, rawProps, {
          "data-precedence": rawProps.precedence,
          precedence: null
        });
      }
      function preloadStylesheet(ownerDocument, key, preloadProps, state) {
        ownerDocument.querySelector(
          'link[rel="preload"][as="style"][' + key + "]"
        ) ? state.loading = Loaded : (key = ownerDocument.createElement("link"), state.preload = key, key.addEventListener("load", function() {
          return state.loading |= Loaded;
        }), key.addEventListener("error", function() {
          return state.loading |= Errored;
        }), setInitialProperties(key, "link", preloadProps), markNodeAsHoistable(key), ownerDocument.head.appendChild(key));
      }
      function getScriptKey(src) {
        return '[src="' + escapeSelectorAttributeValueInsideDoubleQuotes(src) + '"]';
      }
      function getScriptSelectorFromKey(key) {
        return "script[async]" + key;
      }
      function acquireResource(hoistableRoot, resource, props) {
        resource.count++;
        if (null === resource.instance)
          switch (resource.type) {
            case "style":
              var instance = hoistableRoot.querySelector(
                'style[data-href~="' + escapeSelectorAttributeValueInsideDoubleQuotes(props.href) + '"]'
              );
              if (instance)
                return resource.instance = instance, markNodeAsHoistable(instance), instance;
              var styleProps = assign2({}, props, {
                "data-href": props.href,
                "data-precedence": props.precedence,
                href: null,
                precedence: null
              });
              instance = (hoistableRoot.ownerDocument || hoistableRoot).createElement("style");
              markNodeAsHoistable(instance);
              setInitialProperties(instance, "style", styleProps);
              insertStylesheet(instance, props.precedence, hoistableRoot);
              return resource.instance = instance;
            case "stylesheet":
              styleProps = getStyleKey(props.href);
              var _instance = hoistableRoot.querySelector(
                getStylesheetSelectorFromKey(styleProps)
              );
              if (_instance)
                return resource.state.loading |= Inserted, resource.instance = _instance, markNodeAsHoistable(_instance), _instance;
              instance = stylesheetPropsFromRawProps(props);
              (styleProps = preloadPropsMap.get(styleProps)) && adoptPreloadPropsForStylesheet(instance, styleProps);
              _instance = (hoistableRoot.ownerDocument || hoistableRoot).createElement("link");
              markNodeAsHoistable(_instance);
              var linkInstance = _instance;
              linkInstance._p = new Promise(function(resolve, reject) {
                linkInstance.onload = resolve;
                linkInstance.onerror = reject;
              });
              setInitialProperties(_instance, "link", instance);
              resource.state.loading |= Inserted;
              insertStylesheet(_instance, props.precedence, hoistableRoot);
              return resource.instance = _instance;
            case "script":
              _instance = getScriptKey(props.src);
              if (styleProps = hoistableRoot.querySelector(
                getScriptSelectorFromKey(_instance)
              ))
                return resource.instance = styleProps, markNodeAsHoistable(styleProps), styleProps;
              instance = props;
              if (styleProps = preloadPropsMap.get(_instance))
                instance = assign2({}, props), adoptPreloadPropsForScript(instance, styleProps);
              hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
              styleProps = hoistableRoot.createElement("script");
              markNodeAsHoistable(styleProps);
              setInitialProperties(styleProps, "link", instance);
              hoistableRoot.head.appendChild(styleProps);
              return resource.instance = styleProps;
            case "void":
              return null;
            default:
              throw Error(
                'acquireResource encountered a resource type it did not expect: "' + resource.type + '". this is a bug in React.'
              );
          }
        else
          "stylesheet" === resource.type && (resource.state.loading & Inserted) === NotLoaded && (instance = resource.instance, resource.state.loading |= Inserted, insertStylesheet(instance, props.precedence, hoistableRoot));
        return resource.instance;
      }
      function insertStylesheet(instance, precedence, root2) {
        for (var nodes = root2.querySelectorAll(
          'link[rel="stylesheet"][data-precedence],style[data-precedence]'
        ), last = nodes.length ? nodes[nodes.length - 1] : null, prior = last, i = 0; i < nodes.length; i++) {
          var node2 = nodes[i];
          if (node2.dataset.precedence === precedence) prior = node2;
          else if (prior !== last) break;
        }
        prior ? prior.parentNode.insertBefore(instance, prior.nextSibling) : (precedence = 9 === root2.nodeType ? root2.head : root2, precedence.insertBefore(instance, precedence.firstChild));
      }
      function adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps) {
        null == stylesheetProps.crossOrigin && (stylesheetProps.crossOrigin = preloadProps.crossOrigin);
        null == stylesheetProps.referrerPolicy && (stylesheetProps.referrerPolicy = preloadProps.referrerPolicy);
        null == stylesheetProps.title && (stylesheetProps.title = preloadProps.title);
      }
      function adoptPreloadPropsForScript(scriptProps, preloadProps) {
        null == scriptProps.crossOrigin && (scriptProps.crossOrigin = preloadProps.crossOrigin);
        null == scriptProps.referrerPolicy && (scriptProps.referrerPolicy = preloadProps.referrerPolicy);
        null == scriptProps.integrity && (scriptProps.integrity = preloadProps.integrity);
      }
      function getHydratableHoistableCache(type, keyAttribute, ownerDocument) {
        if (null === tagCaches) {
          var cache = /* @__PURE__ */ new Map();
          var caches = tagCaches = /* @__PURE__ */ new Map();
          caches.set(ownerDocument, cache);
        } else
          caches = tagCaches, cache = caches.get(ownerDocument), cache || (cache = /* @__PURE__ */ new Map(), caches.set(ownerDocument, cache));
        if (cache.has(type)) return cache;
        cache.set(type, null);
        ownerDocument = ownerDocument.getElementsByTagName(type);
        for (caches = 0; caches < ownerDocument.length; caches++) {
          var node2 = ownerDocument[caches];
          if (!(node2[internalHoistableMarker] || node2[internalInstanceKey] || "link" === type && "stylesheet" === node2.getAttribute("rel")) && node2.namespaceURI !== SVG_NAMESPACE) {
            var nodeKey = node2.getAttribute(keyAttribute) || "";
            nodeKey = type + nodeKey;
            var existing = cache.get(nodeKey);
            existing ? existing.push(node2) : cache.set(nodeKey, [node2]);
          }
        }
        return cache;
      }
      function mountHoistable(hoistableRoot, type, instance) {
        hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
        hoistableRoot.head.insertBefore(
          instance,
          "title" === type ? hoistableRoot.querySelector("head > title") : null
        );
      }
      function isHostHoistableType(type, props, hostContext) {
        var outsideHostContainerContext = !hostContext.ancestorInfo.containerTagInScope;
        if (hostContext.context === HostContextNamespaceSvg || null != props.itemProp)
          return !outsideHostContainerContext || null == props.itemProp || "meta" !== type && "title" !== type && "style" !== type && "link" !== type && "script" !== type || console.error(
            "Cannot render a <%s> outside the main document if it has an `itemProp` prop. `itemProp` suggests the tag belongs to an `itemScope` which can appear anywhere in the DOM. If you were intending for React to hoist this <%s> remove the `itemProp` prop. Otherwise, try moving this tag into the <head> or <body> of the Document.",
            type,
            type
          ), false;
        switch (type) {
          case "meta":
          case "title":
            return true;
          case "style":
            if ("string" !== typeof props.precedence || "string" !== typeof props.href || "" === props.href) {
              outsideHostContainerContext && console.error(
                'Cannot render a <style> outside the main document without knowing its precedence and a unique href key. React can hoist and deduplicate <style> tags if you provide a `precedence` prop along with an `href` prop that does not conflict with the `href` values used in any other hoisted <style> or <link rel="stylesheet" ...> tags.  Note that hoisting <style> tags is considered an advanced feature that most will not use directly. Consider moving the <style> tag to the <head> or consider adding a `precedence="default"` and `href="some unique resource identifier"`.'
              );
              break;
            }
            return true;
          case "link":
            if ("string" !== typeof props.rel || "string" !== typeof props.href || "" === props.href || props.onLoad || props.onError) {
              if ("stylesheet" === props.rel && "string" === typeof props.precedence) {
                type = props.href;
                var onError = props.onError, disabled = props.disabled;
                hostContext = [];
                props.onLoad && hostContext.push("`onLoad`");
                onError && hostContext.push("`onError`");
                null != disabled && hostContext.push("`disabled`");
                onError = propNamesListJoin(hostContext, "and");
                onError += 1 === hostContext.length ? " prop" : " props";
                disabled = 1 === hostContext.length ? "an " + onError : "the " + onError;
                hostContext.length && console.error(
                  'React encountered a <link rel="stylesheet" href="%s" ... /> with a `precedence` prop that also included %s. The presence of loading and error handlers indicates an intent to manage the stylesheet loading state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the %s, otherwise remove the `precedence` prop.',
                  type,
                  disabled,
                  onError
                );
              }
              outsideHostContainerContext && ("string" !== typeof props.rel || "string" !== typeof props.href || "" === props.href ? console.error(
                "Cannot render a <link> outside the main document without a `rel` and `href` prop. Try adding a `rel` and/or `href` prop to this <link> or moving the link into the <head> tag"
              ) : (props.onError || props.onLoad) && console.error(
                "Cannot render a <link> with onLoad or onError listeners outside the main document. Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or somewhere in the <body>."
              ));
              break;
            }
            switch (props.rel) {
              case "stylesheet":
                return type = props.precedence, props = props.disabled, "string" !== typeof type && outsideHostContainerContext && console.error(
                  'Cannot render a <link rel="stylesheet" /> outside the main document without knowing its precedence. Consider adding precedence="default" or moving it into the root <head> tag.'
                ), "string" === typeof type && null == props;
              default:
                return true;
            }
          case "script":
            type = props.async && "function" !== typeof props.async && "symbol" !== typeof props.async;
            if (!type || props.onLoad || props.onError || !props.src || "string" !== typeof props.src) {
              outsideHostContainerContext && (type ? props.onLoad || props.onError ? console.error(
                "Cannot render a <script> with onLoad or onError listeners outside the main document. Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or somewhere in the <body>."
              ) : console.error(
                "Cannot render a <script> outside the main document without `async={true}` and a non-empty `src` prop. Ensure there is a valid `src` and either make the script async or move it into the root <head> tag or somewhere in the <body>."
              ) : console.error(
                'Cannot render a sync or defer <script> outside the main document without knowing its order. Try adding async="" or moving it into the root <head> tag.'
              ));
              break;
            }
            return true;
          case "noscript":
          case "template":
            outsideHostContainerContext && console.error(
              "Cannot render <%s> outside the main document. Try moving it into the root <head> tag.",
              type
            );
        }
        return false;
      }
      function preloadResource(resource) {
        return "stylesheet" === resource.type && (resource.state.loading & Settled) === NotLoaded ? false : true;
      }
      function noop() {
      }
      function suspendResource(hoistableRoot, resource, props) {
        if (null === suspendedState)
          throw Error(
            "Internal React Error: suspendedState null when it was expected to exists. Please report this as a React bug."
          );
        var state = suspendedState;
        if ("stylesheet" === resource.type && ("string" !== typeof props.media || false !== matchMedia(props.media).matches) && (resource.state.loading & Inserted) === NotLoaded) {
          if (null === resource.instance) {
            var key = getStyleKey(props.href), instance = hoistableRoot.querySelector(
              getStylesheetSelectorFromKey(key)
            );
            if (instance) {
              hoistableRoot = instance._p;
              null !== hoistableRoot && "object" === typeof hoistableRoot && "function" === typeof hoistableRoot.then && (state.count++, state = onUnsuspend.bind(state), hoistableRoot.then(state, state));
              resource.state.loading |= Inserted;
              resource.instance = instance;
              markNodeAsHoistable(instance);
              return;
            }
            instance = hoistableRoot.ownerDocument || hoistableRoot;
            props = stylesheetPropsFromRawProps(props);
            (key = preloadPropsMap.get(key)) && adoptPreloadPropsForStylesheet(props, key);
            instance = instance.createElement("link");
            markNodeAsHoistable(instance);
            var linkInstance = instance;
            linkInstance._p = new Promise(function(resolve, reject) {
              linkInstance.onload = resolve;
              linkInstance.onerror = reject;
            });
            setInitialProperties(instance, "link", props);
            resource.instance = instance;
          }
          null === state.stylesheets && (state.stylesheets = /* @__PURE__ */ new Map());
          state.stylesheets.set(resource, hoistableRoot);
          (hoistableRoot = resource.state.preload) && (resource.state.loading & Settled) === NotLoaded && (state.count++, resource = onUnsuspend.bind(state), hoistableRoot.addEventListener("load", resource), hoistableRoot.addEventListener("error", resource));
        }
      }
      function waitForCommitToBeReady() {
        if (null === suspendedState)
          throw Error(
            "Internal React Error: suspendedState null when it was expected to exists. Please report this as a React bug."
          );
        var state = suspendedState;
        state.stylesheets && 0 === state.count && insertSuspendedStylesheets(state, state.stylesheets);
        return 0 < state.count ? function(commit) {
          var stylesheetTimer = setTimeout(function() {
            state.stylesheets && insertSuspendedStylesheets(state, state.stylesheets);
            if (state.unsuspend) {
              var unsuspend = state.unsuspend;
              state.unsuspend = null;
              unsuspend();
            }
          }, 6e4);
          state.unsuspend = commit;
          return function() {
            state.unsuspend = null;
            clearTimeout(stylesheetTimer);
          };
        } : null;
      }
      function onUnsuspend() {
        this.count--;
        if (0 === this.count) {
          if (this.stylesheets)
            insertSuspendedStylesheets(this, this.stylesheets);
          else if (this.unsuspend) {
            var unsuspend = this.unsuspend;
            this.unsuspend = null;
            unsuspend();
          }
        }
      }
      function insertSuspendedStylesheets(state, resources) {
        state.stylesheets = null;
        null !== state.unsuspend && (state.count++, precedencesByRoot = /* @__PURE__ */ new Map(), resources.forEach(insertStylesheetIntoRoot, state), precedencesByRoot = null, onUnsuspend.call(state));
      }
      function insertStylesheetIntoRoot(root2, resource) {
        if (!(resource.state.loading & Inserted)) {
          var precedences = precedencesByRoot.get(root2);
          if (precedences) var last = precedences.get(LAST_PRECEDENCE);
          else {
            precedences = /* @__PURE__ */ new Map();
            precedencesByRoot.set(root2, precedences);
            for (var nodes = root2.querySelectorAll(
              "link[data-precedence],style[data-precedence]"
            ), i = 0; i < nodes.length; i++) {
              var node2 = nodes[i];
              if ("LINK" === node2.nodeName || "not all" !== node2.getAttribute("media"))
                precedences.set(node2.dataset.precedence, node2), last = node2;
            }
            last && precedences.set(LAST_PRECEDENCE, last);
          }
          nodes = resource.instance;
          node2 = nodes.getAttribute("data-precedence");
          i = precedences.get(node2) || last;
          i === last && precedences.set(LAST_PRECEDENCE, nodes);
          precedences.set(node2, nodes);
          this.count++;
          last = onUnsuspend.bind(this);
          nodes.addEventListener("load", last);
          nodes.addEventListener("error", last);
          i ? i.parentNode.insertBefore(nodes, i.nextSibling) : (root2 = 9 === root2.nodeType ? root2.head : root2, root2.insertBefore(nodes, root2.firstChild));
          resource.state.loading |= Inserted;
        }
      }
      function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, formState) {
        this.tag = 1;
        this.containerInfo = containerInfo;
        this.pingCache = this.current = this.pendingChildren = null;
        this.timeoutHandle = noTimeout;
        this.callbackNode = this.next = this.pendingContext = this.context = this.cancelPendingCommit = null;
        this.callbackPriority = 0;
        this.expirationTimes = createLaneMap(-1);
        this.entangledLanes = this.shellSuspendCounter = this.errorRecoveryDisabledLanes = this.expiredLanes = this.warmLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
        this.entanglements = createLaneMap(0);
        this.hiddenUpdates = createLaneMap(null);
        this.identifierPrefix = identifierPrefix;
        this.onUncaughtError = onUncaughtError;
        this.onCaughtError = onCaughtError;
        this.onRecoverableError = onRecoverableError;
        this.pooledCache = null;
        this.pooledCacheLanes = 0;
        this.formState = formState;
        this.incompleteTransitions = /* @__PURE__ */ new Map();
        this.passiveEffectDuration = this.effectDuration = -0;
        this.memoizedUpdaters = /* @__PURE__ */ new Set();
        containerInfo = this.pendingUpdatersLaneMap = [];
        for (tag = 0; 31 > tag; tag++) containerInfo.push(/* @__PURE__ */ new Set());
        this._debugRootType = hydrate ? "hydrateRoot()" : "createRoot()";
      }
      function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, transitionCallbacks, formState) {
        containerInfo = new FiberRootNode(
          containerInfo,
          tag,
          hydrate,
          identifierPrefix,
          onUncaughtError,
          onCaughtError,
          onRecoverableError,
          formState
        );
        tag = ConcurrentMode;
        true === isStrictMode && (tag |= StrictLegacyMode | StrictEffectsMode);
        isDevToolsPresent && (tag |= ProfileMode);
        isStrictMode = createFiber(3, null, null, tag);
        containerInfo.current = isStrictMode;
        isStrictMode.stateNode = containerInfo;
        tag = createCache3();
        retainCache(tag);
        containerInfo.pooledCache = tag;
        retainCache(tag);
        isStrictMode.memoizedState = {
          element: initialChildren,
          isDehydrated: hydrate,
          cache: tag
        };
        initializeUpdateQueue(isStrictMode);
        return containerInfo;
      }
      function getContextForSubtree(parentComponent) {
        if (!parentComponent) return emptyContextObject;
        parentComponent = emptyContextObject;
        return parentComponent;
      }
      function updateContainerImpl(rootFiber, lane, element, container, parentComponent, callback) {
        if (injectedHook && "function" === typeof injectedHook.onScheduleFiberRoot)
          try {
            injectedHook.onScheduleFiberRoot(rendererID, container, element);
          } catch (err) {
            hasLoggedError || (hasLoggedError = true, console.error(
              "React instrumentation encountered an error: %s",
              err
            ));
          }
        null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markRenderScheduled && injectedProfilingHooks.markRenderScheduled(lane);
        parentComponent = getContextForSubtree(parentComponent);
        null === container.context ? container.context = parentComponent : container.pendingContext = parentComponent;
        isRendering && null !== current && !didWarnAboutNestedUpdates && (didWarnAboutNestedUpdates = true, console.error(
          "Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.",
          getComponentNameFromFiber(current) || "Unknown"
        ));
        container = createUpdate(lane);
        container.payload = { element };
        callback = void 0 === callback ? null : callback;
        null !== callback && ("function" !== typeof callback && console.error(
          "Expected the last optional `callback` argument to be a function. Instead received: %s.",
          callback
        ), container.callback = callback);
        element = enqueueUpdate(rootFiber, container, lane);
        null !== element && (scheduleUpdateOnFiber(element, rootFiber, lane), entangleTransitions(element, rootFiber, lane));
      }
      function markRetryLaneImpl(fiber, retryLane) {
        fiber = fiber.memoizedState;
        if (null !== fiber && null !== fiber.dehydrated) {
          var a = fiber.retryLane;
          fiber.retryLane = 0 !== a && a < retryLane ? a : retryLane;
        }
      }
      function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        (fiber = fiber.alternate) && markRetryLaneImpl(fiber, retryLane);
      }
      function attemptContinuousHydration(fiber) {
        if (13 === fiber.tag) {
          var root2 = enqueueConcurrentRenderForLane(fiber, 67108864);
          null !== root2 && scheduleUpdateOnFiber(root2, fiber, 67108864);
          markRetryLaneIfNotHydrated(fiber, 67108864);
        }
      }
      function getCurrentFiberForDevTools() {
        return current;
      }
      function getLaneLabelMap() {
        for (var map = /* @__PURE__ */ new Map(), lane = 1, index = 0; 31 > index; index++) {
          var label = getLabelForLane(lane);
          map.set(lane, label);
          lane *= 2;
        }
        return map;
      }
      function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var prevTransition = ReactSharedInternals.T;
        ReactSharedInternals.T = null;
        var previousPriority = ReactDOMSharedInternals.p;
        try {
          ReactDOMSharedInternals.p = DiscreteEventPriority, dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally {
          ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition;
        }
      }
      function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var prevTransition = ReactSharedInternals.T;
        ReactSharedInternals.T = null;
        var previousPriority = ReactDOMSharedInternals.p;
        try {
          ReactDOMSharedInternals.p = ContinuousEventPriority, dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally {
          ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition;
        }
      }
      function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (_enabled) {
          var blockedOn = findInstanceBlockingEvent(nativeEvent);
          if (null === blockedOn)
            dispatchEventForPluginEventSystem(
              domEventName,
              eventSystemFlags,
              nativeEvent,
              return_targetInst,
              targetContainer
            ), clearIfContinuousEvent(domEventName, nativeEvent);
          else if (queueIfContinuousEvent(
            blockedOn,
            domEventName,
            eventSystemFlags,
            targetContainer,
            nativeEvent
          ))
            nativeEvent.stopPropagation();
          else if (clearIfContinuousEvent(domEventName, nativeEvent), eventSystemFlags & 4 && -1 < discreteReplayableEvents.indexOf(domEventName)) {
            for (; null !== blockedOn; ) {
              var fiber = getInstanceFromNode(blockedOn);
              if (null !== fiber)
                switch (fiber.tag) {
                  case 3:
                    fiber = fiber.stateNode;
                    if (fiber.current.memoizedState.isDehydrated) {
                      var lanes = getHighestPriorityLanes(fiber.pendingLanes);
                      if (0 !== lanes) {
                        var root2 = fiber;
                        root2.pendingLanes |= 2;
                        for (root2.entangledLanes |= 2; lanes; ) {
                          var lane = 1 << 31 - clz32(lanes);
                          root2.entanglements[1] |= lane;
                          lanes &= ~lane;
                        }
                        ensureRootIsScheduled(fiber);
                        (executionContext & (RenderContext | CommitContext)) === NoContext && (workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS, flushSyncWorkAcrossRoots_impl(0, false));
                      }
                    }
                    break;
                  case 13:
                    root2 = enqueueConcurrentRenderForLane(fiber, 2), null !== root2 && scheduleUpdateOnFiber(root2, fiber, 2), flushSyncWork$1(), markRetryLaneIfNotHydrated(fiber, 2);
                }
              fiber = findInstanceBlockingEvent(nativeEvent);
              null === fiber && dispatchEventForPluginEventSystem(
                domEventName,
                eventSystemFlags,
                nativeEvent,
                return_targetInst,
                targetContainer
              );
              if (fiber === blockedOn) break;
              blockedOn = fiber;
            }
            null !== blockedOn && nativeEvent.stopPropagation();
          } else
            dispatchEventForPluginEventSystem(
              domEventName,
              eventSystemFlags,
              nativeEvent,
              null,
              targetContainer
            );
        }
      }
      function findInstanceBlockingEvent(nativeEvent) {
        nativeEvent = getEventTarget(nativeEvent);
        return findInstanceBlockingTarget(nativeEvent);
      }
      function findInstanceBlockingTarget(targetNode) {
        return_targetInst = null;
        targetNode = getClosestInstanceFromNode(targetNode);
        if (null !== targetNode) {
          var nearestMounted = getNearestMountedFiber(targetNode);
          if (null === nearestMounted) targetNode = null;
          else {
            var tag = nearestMounted.tag;
            if (13 === tag) {
              targetNode = getSuspenseInstanceFromFiber(nearestMounted);
              if (null !== targetNode) return targetNode;
              targetNode = null;
            } else if (3 === tag) {
              if (nearestMounted.stateNode.current.memoizedState.isDehydrated)
                return 3 === nearestMounted.tag ? nearestMounted.stateNode.containerInfo : null;
              targetNode = null;
            } else nearestMounted !== targetNode && (targetNode = null);
          }
        }
        return_targetInst = targetNode;
        return null;
      }
      function getEventPriority(domEventName) {
        switch (domEventName) {
          case "beforetoggle":
          case "cancel":
          case "click":
          case "close":
          case "contextmenu":
          case "copy":
          case "cut":
          case "auxclick":
          case "dblclick":
          case "dragend":
          case "dragstart":
          case "drop":
          case "focusin":
          case "focusout":
          case "input":
          case "invalid":
          case "keydown":
          case "keypress":
          case "keyup":
          case "mousedown":
          case "mouseup":
          case "paste":
          case "pause":
          case "play":
          case "pointercancel":
          case "pointerdown":
          case "pointerup":
          case "ratechange":
          case "reset":
          case "resize":
          case "seeked":
          case "submit":
          case "toggle":
          case "touchcancel":
          case "touchend":
          case "touchstart":
          case "volumechange":
          case "change":
          case "selectionchange":
          case "textInput":
          case "compositionstart":
          case "compositionend":
          case "compositionupdate":
          case "beforeblur":
          case "afterblur":
          case "beforeinput":
          case "blur":
          case "fullscreenchange":
          case "focus":
          case "hashchange":
          case "popstate":
          case "select":
          case "selectstart":
            return DiscreteEventPriority;
          case "drag":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "mousemove":
          case "mouseout":
          case "mouseover":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "scroll":
          case "touchmove":
          case "wheel":
          case "mouseenter":
          case "mouseleave":
          case "pointerenter":
          case "pointerleave":
            return ContinuousEventPriority;
          case "message":
            switch (getCurrentPriorityLevel()) {
              case ImmediatePriority:
                return DiscreteEventPriority;
              case UserBlockingPriority:
                return ContinuousEventPriority;
              case NormalPriority$1:
              case LowPriority:
                return DefaultEventPriority;
              case IdlePriority:
                return IdleEventPriority;
              default:
                return DefaultEventPriority;
            }
          default:
            return DefaultEventPriority;
        }
      }
      function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch (domEventName) {
          case "focusin":
          case "focusout":
            queuedFocus = null;
            break;
          case "dragenter":
          case "dragleave":
            queuedDrag = null;
            break;
          case "mouseover":
          case "mouseout":
            queuedMouse = null;
            break;
          case "pointerover":
          case "pointerout":
            queuedPointers.delete(nativeEvent.pointerId);
            break;
          case "gotpointercapture":
          case "lostpointercapture":
            queuedPointerCaptures.delete(nativeEvent.pointerId);
        }
      }
      function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (null === existingQueuedEvent || existingQueuedEvent.nativeEvent !== nativeEvent)
          return existingQueuedEvent = {
            blockedOn,
            domEventName,
            eventSystemFlags,
            nativeEvent,
            targetContainers: [targetContainer]
          }, null !== blockedOn && (blockedOn = getInstanceFromNode(blockedOn), null !== blockedOn && attemptContinuousHydration(blockedOn)), existingQueuedEvent;
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        blockedOn = existingQueuedEvent.targetContainers;
        null !== targetContainer && -1 === blockedOn.indexOf(targetContainer) && blockedOn.push(targetContainer);
        return existingQueuedEvent;
      }
      function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        switch (domEventName) {
          case "focusin":
            return queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(
              queuedFocus,
              blockedOn,
              domEventName,
              eventSystemFlags,
              targetContainer,
              nativeEvent
            ), true;
          case "dragenter":
            return queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(
              queuedDrag,
              blockedOn,
              domEventName,
              eventSystemFlags,
              targetContainer,
              nativeEvent
            ), true;
          case "mouseover":
            return queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(
              queuedMouse,
              blockedOn,
              domEventName,
              eventSystemFlags,
              targetContainer,
              nativeEvent
            ), true;
          case "pointerover":
            var pointerId = nativeEvent.pointerId;
            queuedPointers.set(
              pointerId,
              accumulateOrCreateContinuousQueuedReplayableEvent(
                queuedPointers.get(pointerId) || null,
                blockedOn,
                domEventName,
                eventSystemFlags,
                targetContainer,
                nativeEvent
              )
            );
            return true;
          case "gotpointercapture":
            return pointerId = nativeEvent.pointerId, queuedPointerCaptures.set(
              pointerId,
              accumulateOrCreateContinuousQueuedReplayableEvent(
                queuedPointerCaptures.get(pointerId) || null,
                blockedOn,
                domEventName,
                eventSystemFlags,
                targetContainer,
                nativeEvent
              )
            ), true;
        }
        return false;
      }
      function attemptExplicitHydrationTarget(queuedTarget) {
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (null !== targetInst) {
          var nearestMounted = getNearestMountedFiber(targetInst);
          if (null !== nearestMounted) {
            if (targetInst = nearestMounted.tag, 13 === targetInst) {
              if (targetInst = getSuspenseInstanceFromFiber(nearestMounted), null !== targetInst) {
                queuedTarget.blockedOn = targetInst;
                runWithPriority(queuedTarget.priority, function() {
                  if (13 === nearestMounted.tag) {
                    var lane = requestUpdateLane(nearestMounted);
                    lane = getBumpedLaneForHydrationByLane(lane);
                    var root2 = enqueueConcurrentRenderForLane(
                      nearestMounted,
                      lane
                    );
                    null !== root2 && scheduleUpdateOnFiber(root2, nearestMounted, lane);
                    markRetryLaneIfNotHydrated(nearestMounted, lane);
                  }
                });
                return;
              }
            } else if (3 === targetInst && nearestMounted.stateNode.current.memoizedState.isDehydrated) {
              queuedTarget.blockedOn = 3 === nearestMounted.tag ? nearestMounted.stateNode.containerInfo : null;
              return;
            }
          }
        }
        queuedTarget.blockedOn = null;
      }
      function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (null !== queuedEvent.blockedOn) return false;
        for (var targetContainers = queuedEvent.targetContainers; 0 < targetContainers.length; ) {
          var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.nativeEvent);
          if (null === nextBlockedOn) {
            nextBlockedOn = queuedEvent.nativeEvent;
            var nativeEventClone = new nextBlockedOn.constructor(
              nextBlockedOn.type,
              nextBlockedOn
            ), event = nativeEventClone;
            null !== currentReplayingEvent && console.error(
              "Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue."
            );
            currentReplayingEvent = event;
            nextBlockedOn.target.dispatchEvent(nativeEventClone);
            null === currentReplayingEvent && console.error(
              "Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue."
            );
            currentReplayingEvent = null;
          } else
            return targetContainers = getInstanceFromNode(nextBlockedOn), null !== targetContainers && attemptContinuousHydration(targetContainers), queuedEvent.blockedOn = nextBlockedOn, false;
          targetContainers.shift();
        }
        return true;
      }
      function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
        attemptReplayContinuousQueuedEvent(queuedEvent) && map.delete(key);
      }
      function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false;
        null !== queuedFocus && attemptReplayContinuousQueuedEvent(queuedFocus) && (queuedFocus = null);
        null !== queuedDrag && attemptReplayContinuousQueuedEvent(queuedDrag) && (queuedDrag = null);
        null !== queuedMouse && attemptReplayContinuousQueuedEvent(queuedMouse) && (queuedMouse = null);
        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
      }
      function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        queuedEvent.blockedOn === unblocked && (queuedEvent.blockedOn = null, hasScheduledReplayAttempt || (hasScheduledReplayAttempt = true, Scheduler.unstable_scheduleCallback(
          Scheduler.unstable_NormalPriority,
          replayUnblockedEvents
        )));
      }
      function scheduleReplayQueueIfNeeded(formReplayingQueue) {
        lastScheduledReplayQueue !== formReplayingQueue && (lastScheduledReplayQueue = formReplayingQueue, Scheduler.unstable_scheduleCallback(
          Scheduler.unstable_NormalPriority,
          function() {
            lastScheduledReplayQueue === formReplayingQueue && (lastScheduledReplayQueue = null);
            for (var i = 0; i < formReplayingQueue.length; i += 3) {
              var form = formReplayingQueue[i], submitterOrAction = formReplayingQueue[i + 1], formData = formReplayingQueue[i + 2];
              if ("function" !== typeof submitterOrAction)
                if (null === findInstanceBlockingTarget(submitterOrAction || form))
                  continue;
                else break;
              var formInst = getInstanceFromNode(form);
              null !== formInst && (formReplayingQueue.splice(i, 3), i -= 3, form = {
                pending: true,
                data: formData,
                method: form.method,
                action: submitterOrAction
              }, Object.freeze(form), startHostTransition(
                formInst,
                form,
                submitterOrAction,
                formData
              ));
            }
          }
        ));
      }
      function retryIfBlockedOn(unblocked) {
        function unblock(queuedEvent) {
          return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
        }
        null !== queuedFocus && scheduleCallbackIfUnblocked(queuedFocus, unblocked);
        null !== queuedDrag && scheduleCallbackIfUnblocked(queuedDrag, unblocked);
        null !== queuedMouse && scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        queuedPointers.forEach(unblock);
        queuedPointerCaptures.forEach(unblock);
        for (var i = 0; i < queuedExplicitHydrationTargets.length; i++) {
          var queuedTarget = queuedExplicitHydrationTargets[i];
          queuedTarget.blockedOn === unblocked && (queuedTarget.blockedOn = null);
        }
        for (; 0 < queuedExplicitHydrationTargets.length && (i = queuedExplicitHydrationTargets[0], null === i.blockedOn); )
          attemptExplicitHydrationTarget(i), null === i.blockedOn && queuedExplicitHydrationTargets.shift();
        i = (unblocked.ownerDocument || unblocked).$$reactFormReplay;
        if (null != i)
          for (queuedTarget = 0; queuedTarget < i.length; queuedTarget += 3) {
            var form = i[queuedTarget], submitterOrAction = i[queuedTarget + 1], formProps = form[internalPropsKey] || null;
            if ("function" === typeof submitterOrAction)
              formProps || scheduleReplayQueueIfNeeded(i);
            else if (formProps) {
              var action = null;
              if (submitterOrAction && submitterOrAction.hasAttribute("formAction"))
                if (form = submitterOrAction, formProps = submitterOrAction[internalPropsKey] || null)
                  action = formProps.formAction;
                else {
                  if (null !== findInstanceBlockingTarget(form)) continue;
                }
              else action = formProps.action;
              "function" === typeof action ? i[queuedTarget + 1] = action : (i.splice(queuedTarget, 3), queuedTarget -= 3);
              scheduleReplayQueueIfNeeded(i);
            }
          }
      }
      function ReactDOMRoot(internalRoot) {
        this._internalRoot = internalRoot;
      }
      function ReactDOMHydrationRoot(internalRoot) {
        this._internalRoot = internalRoot;
      }
      function warnIfReactDOMContainerInDEV(container) {
        container[internalContainerInstanceKey] && (container._reactRootContainer ? console.error(
          "You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported."
        ) : console.error(
          "You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it."
        ));
      }
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
      var Scheduler = require_scheduler(), React7 = require_react(), ReactDOM2 = require_react_dom(), assign2 = Object.assign, REACT_LEGACY_ELEMENT_TYPE = Symbol.for("react.element"), REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy");
      Symbol.for("react.scope");
      var REACT_ACTIVITY_TYPE = Symbol.for("react.activity");
      Symbol.for("react.legacy_hidden");
      Symbol.for("react.tracing_marker");
      var REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel");
      Symbol.for("react.view_transition");
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator, REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"), isArrayImpl = Array.isArray, ReactSharedInternals = React7.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, ReactDOMSharedInternals = ReactDOM2.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, NotPending = Object.freeze({
        pending: false,
        data: null,
        method: null,
        action: null
      }), valueStack = [];
      var fiberStack = [];
      var index$jscomp$0 = -1, contextStackCursor = createCursor(null), contextFiberStackCursor = createCursor(null), rootInstanceStackCursor = createCursor(null), hostTransitionProviderCursor = createCursor(null), hasOwnProperty = Object.prototype.hasOwnProperty, scheduleCallback$3 = Scheduler.unstable_scheduleCallback, cancelCallback$1 = Scheduler.unstable_cancelCallback, shouldYield = Scheduler.unstable_shouldYield, requestPaint = Scheduler.unstable_requestPaint, now$1 = Scheduler.unstable_now, getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, ImmediatePriority = Scheduler.unstable_ImmediatePriority, UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, NormalPriority$1 = Scheduler.unstable_NormalPriority, LowPriority = Scheduler.unstable_LowPriority, IdlePriority = Scheduler.unstable_IdlePriority, log$1 = Scheduler.log, unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue, rendererID = null, injectedHook = null, injectedProfilingHooks = null, hasLoggedError = false, isDevToolsPresent = "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__, clz32 = Math.clz32 ? Math.clz32 : clz32Fallback, log = Math.log, LN2 = Math.LN2, nextTransitionLane = 256, nextRetryLane = 4194304, DiscreteEventPriority = 2, ContinuousEventPriority = 8, DefaultEventPriority = 32, IdleEventPriority = 268435456, randomKey = Math.random().toString(36).slice(2), internalInstanceKey = "__reactFiber$" + randomKey, internalPropsKey = "__reactProps$" + randomKey, internalContainerInstanceKey = "__reactContainer$" + randomKey, internalEventHandlersKey = "__reactEvents$" + randomKey, internalEventHandlerListenersKey = "__reactListeners$" + randomKey, internalEventHandlesSetKey = "__reactHandles$" + randomKey, internalRootNodeResourcesKey = "__reactResources$" + randomKey, internalHoistableMarker = "__reactMarker$" + randomKey, allNativeEvents = /* @__PURE__ */ new Set(), registrationNameDependencies = {}, possibleRegistrationNames = {}, hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
      }, VALID_ATTRIBUTE_NAME_REGEX = RegExp(
        "^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
      ), illegalAttributeNameCache = {}, validatedAttributeNameCache = {}, disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
      disabledLog.__reactDisabledLog = true;
      var prefix2, suffix, reentry = false;
      var componentFrameCache = new ("function" === typeof WeakMap ? WeakMap : Map)();
      var current = null, isRendering = false, escapeSelectorAttributeValueInsideDoubleQuotesRegex = /[\n"\\]/g, didWarnValueDefaultValue$1 = false, didWarnCheckedDefaultChecked = false, didWarnSelectedSetOnOption = false, didWarnInvalidChild = false, didWarnInvalidInnerHTML = false;
      var didWarnValueDefaultValue = false;
      var valuePropNames = ["value", "defaultValue"], didWarnValDefaultVal = false, needsEscaping = /["'&<>\n\t]|^\s|\s$/, specialTags = "address applet area article aside base basefont bgsound blockquote body br button caption center col colgroup dd details dir div dl dt embed fieldset figcaption figure footer form frame frameset h1 h2 h3 h4 h5 h6 head header hgroup hr html iframe img input isindex li link listing main marquee menu menuitem meta nav noembed noframes noscript object ol p param plaintext pre script section select source style summary table tbody td template textarea tfoot th thead title tr track ul wbr xmp".split(
        " "
      ), inScopeTags = "applet caption html table td th marquee object template foreignObject desc title".split(
        " "
      ), buttonScopeTags = inScopeTags.concat(["button"]), impliedEndTags = "dd dt li option optgroup p rp rt".split(" "), emptyAncestorInfoDev = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null,
        containerTagInScope: null,
        implicitRootScope: false
      }, didWarn = {}, shorthandToLonghand = {
        animation: "animationDelay animationDirection animationDuration animationFillMode animationIterationCount animationName animationPlayState animationTimingFunction".split(
          " "
        ),
        background: "backgroundAttachment backgroundClip backgroundColor backgroundImage backgroundOrigin backgroundPositionX backgroundPositionY backgroundRepeat backgroundSize".split(
          " "
        ),
        backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
        border: "borderBottomColor borderBottomStyle borderBottomWidth borderImageOutset borderImageRepeat borderImageSlice borderImageSource borderImageWidth borderLeftColor borderLeftStyle borderLeftWidth borderRightColor borderRightStyle borderRightWidth borderTopColor borderTopStyle borderTopWidth".split(
          " "
        ),
        borderBlockEnd: [
          "borderBlockEndColor",
          "borderBlockEndStyle",
          "borderBlockEndWidth"
        ],
        borderBlockStart: [
          "borderBlockStartColor",
          "borderBlockStartStyle",
          "borderBlockStartWidth"
        ],
        borderBottom: [
          "borderBottomColor",
          "borderBottomStyle",
          "borderBottomWidth"
        ],
        borderColor: [
          "borderBottomColor",
          "borderLeftColor",
          "borderRightColor",
          "borderTopColor"
        ],
        borderImage: [
          "borderImageOutset",
          "borderImageRepeat",
          "borderImageSlice",
          "borderImageSource",
          "borderImageWidth"
        ],
        borderInlineEnd: [
          "borderInlineEndColor",
          "borderInlineEndStyle",
          "borderInlineEndWidth"
        ],
        borderInlineStart: [
          "borderInlineStartColor",
          "borderInlineStartStyle",
          "borderInlineStartWidth"
        ],
        borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
        borderRadius: [
          "borderBottomLeftRadius",
          "borderBottomRightRadius",
          "borderTopLeftRadius",
          "borderTopRightRadius"
        ],
        borderRight: [
          "borderRightColor",
          "borderRightStyle",
          "borderRightWidth"
        ],
        borderStyle: [
          "borderBottomStyle",
          "borderLeftStyle",
          "borderRightStyle",
          "borderTopStyle"
        ],
        borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
        borderWidth: [
          "borderBottomWidth",
          "borderLeftWidth",
          "borderRightWidth",
          "borderTopWidth"
        ],
        columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
        columns: ["columnCount", "columnWidth"],
        flex: ["flexBasis", "flexGrow", "flexShrink"],
        flexFlow: ["flexDirection", "flexWrap"],
        font: "fontFamily fontFeatureSettings fontKerning fontLanguageOverride fontSize fontSizeAdjust fontStretch fontStyle fontVariant fontVariantAlternates fontVariantCaps fontVariantEastAsian fontVariantLigatures fontVariantNumeric fontVariantPosition fontWeight lineHeight".split(
          " "
        ),
        fontVariant: "fontVariantAlternates fontVariantCaps fontVariantEastAsian fontVariantLigatures fontVariantNumeric fontVariantPosition".split(
          " "
        ),
        gap: ["columnGap", "rowGap"],
        grid: "gridAutoColumns gridAutoFlow gridAutoRows gridTemplateAreas gridTemplateColumns gridTemplateRows".split(
          " "
        ),
        gridArea: [
          "gridColumnEnd",
          "gridColumnStart",
          "gridRowEnd",
          "gridRowStart"
        ],
        gridColumn: ["gridColumnEnd", "gridColumnStart"],
        gridColumnGap: ["columnGap"],
        gridGap: ["columnGap", "rowGap"],
        gridRow: ["gridRowEnd", "gridRowStart"],
        gridRowGap: ["rowGap"],
        gridTemplate: [
          "gridTemplateAreas",
          "gridTemplateColumns",
          "gridTemplateRows"
        ],
        listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
        margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
        marker: ["markerEnd", "markerMid", "markerStart"],
        mask: "maskClip maskComposite maskImage maskMode maskOrigin maskPositionX maskPositionY maskRepeat maskSize".split(
          " "
        ),
        maskPosition: ["maskPositionX", "maskPositionY"],
        outline: ["outlineColor", "outlineStyle", "outlineWidth"],
        overflow: ["overflowX", "overflowY"],
        padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
        placeContent: ["alignContent", "justifyContent"],
        placeItems: ["alignItems", "justifyItems"],
        placeSelf: ["alignSelf", "justifySelf"],
        textDecoration: [
          "textDecorationColor",
          "textDecorationLine",
          "textDecorationStyle"
        ],
        textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
        transition: [
          "transitionDelay",
          "transitionDuration",
          "transitionProperty",
          "transitionTimingFunction"
        ],
        wordWrap: ["overflowWrap"]
      }, uppercasePattern = /([A-Z])/g, msPattern$1 = /^ms-/, badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/, msPattern = /^-ms-/, hyphenPattern = /-(.)/g, badStyleValueWithSemicolonPattern = /;\s*$/, warnedStyleNames = {}, warnedStyleValues = {}, warnedForNaNValue = false, warnedForInfinityValue = false, unitlessNumbers = new Set(
        "animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(
          " "
        )
      ), MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML", SVG_NAMESPACE = "http://www.w3.org/2000/svg", aliases = /* @__PURE__ */ new Map([
        ["acceptCharset", "accept-charset"],
        ["htmlFor", "for"],
        ["httpEquiv", "http-equiv"],
        ["crossOrigin", "crossorigin"],
        ["accentHeight", "accent-height"],
        ["alignmentBaseline", "alignment-baseline"],
        ["arabicForm", "arabic-form"],
        ["baselineShift", "baseline-shift"],
        ["capHeight", "cap-height"],
        ["clipPath", "clip-path"],
        ["clipRule", "clip-rule"],
        ["colorInterpolation", "color-interpolation"],
        ["colorInterpolationFilters", "color-interpolation-filters"],
        ["colorProfile", "color-profile"],
        ["colorRendering", "color-rendering"],
        ["dominantBaseline", "dominant-baseline"],
        ["enableBackground", "enable-background"],
        ["fillOpacity", "fill-opacity"],
        ["fillRule", "fill-rule"],
        ["floodColor", "flood-color"],
        ["floodOpacity", "flood-opacity"],
        ["fontFamily", "font-family"],
        ["fontSize", "font-size"],
        ["fontSizeAdjust", "font-size-adjust"],
        ["fontStretch", "font-stretch"],
        ["fontStyle", "font-style"],
        ["fontVariant", "font-variant"],
        ["fontWeight", "font-weight"],
        ["glyphName", "glyph-name"],
        ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
        ["glyphOrientationVertical", "glyph-orientation-vertical"],
        ["horizAdvX", "horiz-adv-x"],
        ["horizOriginX", "horiz-origin-x"],
        ["imageRendering", "image-rendering"],
        ["letterSpacing", "letter-spacing"],
        ["lightingColor", "lighting-color"],
        ["markerEnd", "marker-end"],
        ["markerMid", "marker-mid"],
        ["markerStart", "marker-start"],
        ["overlinePosition", "overline-position"],
        ["overlineThickness", "overline-thickness"],
        ["paintOrder", "paint-order"],
        ["panose-1", "panose-1"],
        ["pointerEvents", "pointer-events"],
        ["renderingIntent", "rendering-intent"],
        ["shapeRendering", "shape-rendering"],
        ["stopColor", "stop-color"],
        ["stopOpacity", "stop-opacity"],
        ["strikethroughPosition", "strikethrough-position"],
        ["strikethroughThickness", "strikethrough-thickness"],
        ["strokeDasharray", "stroke-dasharray"],
        ["strokeDashoffset", "stroke-dashoffset"],
        ["strokeLinecap", "stroke-linecap"],
        ["strokeLinejoin", "stroke-linejoin"],
        ["strokeMiterlimit", "stroke-miterlimit"],
        ["strokeOpacity", "stroke-opacity"],
        ["strokeWidth", "stroke-width"],
        ["textAnchor", "text-anchor"],
        ["textDecoration", "text-decoration"],
        ["textRendering", "text-rendering"],
        ["transformOrigin", "transform-origin"],
        ["underlinePosition", "underline-position"],
        ["underlineThickness", "underline-thickness"],
        ["unicodeBidi", "unicode-bidi"],
        ["unicodeRange", "unicode-range"],
        ["unitsPerEm", "units-per-em"],
        ["vAlphabetic", "v-alphabetic"],
        ["vHanging", "v-hanging"],
        ["vIdeographic", "v-ideographic"],
        ["vMathematical", "v-mathematical"],
        ["vectorEffect", "vector-effect"],
        ["vertAdvY", "vert-adv-y"],
        ["vertOriginX", "vert-origin-x"],
        ["vertOriginY", "vert-origin-y"],
        ["wordSpacing", "word-spacing"],
        ["writingMode", "writing-mode"],
        ["xmlnsXlink", "xmlns:xlink"],
        ["xHeight", "x-height"]
      ]), possibleStandardNames = {
        accept: "accept",
        acceptcharset: "acceptCharset",
        "accept-charset": "acceptCharset",
        accesskey: "accessKey",
        action: "action",
        allowfullscreen: "allowFullScreen",
        alt: "alt",
        as: "as",
        async: "async",
        autocapitalize: "autoCapitalize",
        autocomplete: "autoComplete",
        autocorrect: "autoCorrect",
        autofocus: "autoFocus",
        autoplay: "autoPlay",
        autosave: "autoSave",
        capture: "capture",
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        challenge: "challenge",
        charset: "charSet",
        checked: "checked",
        children: "children",
        cite: "cite",
        class: "className",
        classid: "classID",
        classname: "className",
        cols: "cols",
        colspan: "colSpan",
        content: "content",
        contenteditable: "contentEditable",
        contextmenu: "contextMenu",
        controls: "controls",
        controlslist: "controlsList",
        coords: "coords",
        crossorigin: "crossOrigin",
        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
        data: "data",
        datetime: "dateTime",
        default: "default",
        defaultchecked: "defaultChecked",
        defaultvalue: "defaultValue",
        defer: "defer",
        dir: "dir",
        disabled: "disabled",
        disablepictureinpicture: "disablePictureInPicture",
        disableremoteplayback: "disableRemotePlayback",
        download: "download",
        draggable: "draggable",
        enctype: "encType",
        enterkeyhint: "enterKeyHint",
        fetchpriority: "fetchPriority",
        for: "htmlFor",
        form: "form",
        formmethod: "formMethod",
        formaction: "formAction",
        formenctype: "formEncType",
        formnovalidate: "formNoValidate",
        formtarget: "formTarget",
        frameborder: "frameBorder",
        headers: "headers",
        height: "height",
        hidden: "hidden",
        high: "high",
        href: "href",
        hreflang: "hrefLang",
        htmlfor: "htmlFor",
        httpequiv: "httpEquiv",
        "http-equiv": "httpEquiv",
        icon: "icon",
        id: "id",
        imagesizes: "imageSizes",
        imagesrcset: "imageSrcSet",
        inert: "inert",
        innerhtml: "innerHTML",
        inputmode: "inputMode",
        integrity: "integrity",
        is: "is",
        itemid: "itemID",
        itemprop: "itemProp",
        itemref: "itemRef",
        itemscope: "itemScope",
        itemtype: "itemType",
        keyparams: "keyParams",
        keytype: "keyType",
        kind: "kind",
        label: "label",
        lang: "lang",
        list: "list",
        loop: "loop",
        low: "low",
        manifest: "manifest",
        marginwidth: "marginWidth",
        marginheight: "marginHeight",
        max: "max",
        maxlength: "maxLength",
        media: "media",
        mediagroup: "mediaGroup",
        method: "method",
        min: "min",
        minlength: "minLength",
        multiple: "multiple",
        muted: "muted",
        name: "name",
        nomodule: "noModule",
        nonce: "nonce",
        novalidate: "noValidate",
        open: "open",
        optimum: "optimum",
        pattern: "pattern",
        placeholder: "placeholder",
        playsinline: "playsInline",
        poster: "poster",
        preload: "preload",
        profile: "profile",
        radiogroup: "radioGroup",
        readonly: "readOnly",
        referrerpolicy: "referrerPolicy",
        rel: "rel",
        required: "required",
        reversed: "reversed",
        role: "role",
        rows: "rows",
        rowspan: "rowSpan",
        sandbox: "sandbox",
        scope: "scope",
        scoped: "scoped",
        scrolling: "scrolling",
        seamless: "seamless",
        selected: "selected",
        shape: "shape",
        size: "size",
        sizes: "sizes",
        span: "span",
        spellcheck: "spellCheck",
        src: "src",
        srcdoc: "srcDoc",
        srclang: "srcLang",
        srcset: "srcSet",
        start: "start",
        step: "step",
        style: "style",
        summary: "summary",
        tabindex: "tabIndex",
        target: "target",
        title: "title",
        type: "type",
        usemap: "useMap",
        value: "value",
        width: "width",
        wmode: "wmode",
        wrap: "wrap",
        about: "about",
        accentheight: "accentHeight",
        "accent-height": "accentHeight",
        accumulate: "accumulate",
        additive: "additive",
        alignmentbaseline: "alignmentBaseline",
        "alignment-baseline": "alignmentBaseline",
        allowreorder: "allowReorder",
        alphabetic: "alphabetic",
        amplitude: "amplitude",
        arabicform: "arabicForm",
        "arabic-form": "arabicForm",
        ascent: "ascent",
        attributename: "attributeName",
        attributetype: "attributeType",
        autoreverse: "autoReverse",
        azimuth: "azimuth",
        basefrequency: "baseFrequency",
        baselineshift: "baselineShift",
        "baseline-shift": "baselineShift",
        baseprofile: "baseProfile",
        bbox: "bbox",
        begin: "begin",
        bias: "bias",
        by: "by",
        calcmode: "calcMode",
        capheight: "capHeight",
        "cap-height": "capHeight",
        clip: "clip",
        clippath: "clipPath",
        "clip-path": "clipPath",
        clippathunits: "clipPathUnits",
        cliprule: "clipRule",
        "clip-rule": "clipRule",
        color: "color",
        colorinterpolation: "colorInterpolation",
        "color-interpolation": "colorInterpolation",
        colorinterpolationfilters: "colorInterpolationFilters",
        "color-interpolation-filters": "colorInterpolationFilters",
        colorprofile: "colorProfile",
        "color-profile": "colorProfile",
        colorrendering: "colorRendering",
        "color-rendering": "colorRendering",
        contentscripttype: "contentScriptType",
        contentstyletype: "contentStyleType",
        cursor: "cursor",
        cx: "cx",
        cy: "cy",
        d: "d",
        datatype: "datatype",
        decelerate: "decelerate",
        descent: "descent",
        diffuseconstant: "diffuseConstant",
        direction: "direction",
        display: "display",
        divisor: "divisor",
        dominantbaseline: "dominantBaseline",
        "dominant-baseline": "dominantBaseline",
        dur: "dur",
        dx: "dx",
        dy: "dy",
        edgemode: "edgeMode",
        elevation: "elevation",
        enablebackground: "enableBackground",
        "enable-background": "enableBackground",
        end: "end",
        exponent: "exponent",
        externalresourcesrequired: "externalResourcesRequired",
        fill: "fill",
        fillopacity: "fillOpacity",
        "fill-opacity": "fillOpacity",
        fillrule: "fillRule",
        "fill-rule": "fillRule",
        filter: "filter",
        filterres: "filterRes",
        filterunits: "filterUnits",
        floodopacity: "floodOpacity",
        "flood-opacity": "floodOpacity",
        floodcolor: "floodColor",
        "flood-color": "floodColor",
        focusable: "focusable",
        fontfamily: "fontFamily",
        "font-family": "fontFamily",
        fontsize: "fontSize",
        "font-size": "fontSize",
        fontsizeadjust: "fontSizeAdjust",
        "font-size-adjust": "fontSizeAdjust",
        fontstretch: "fontStretch",
        "font-stretch": "fontStretch",
        fontstyle: "fontStyle",
        "font-style": "fontStyle",
        fontvariant: "fontVariant",
        "font-variant": "fontVariant",
        fontweight: "fontWeight",
        "font-weight": "fontWeight",
        format: "format",
        from: "from",
        fx: "fx",
        fy: "fy",
        g1: "g1",
        g2: "g2",
        glyphname: "glyphName",
        "glyph-name": "glyphName",
        glyphorientationhorizontal: "glyphOrientationHorizontal",
        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
        glyphorientationvertical: "glyphOrientationVertical",
        "glyph-orientation-vertical": "glyphOrientationVertical",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        hanging: "hanging",
        horizadvx: "horizAdvX",
        "horiz-adv-x": "horizAdvX",
        horizoriginx: "horizOriginX",
        "horiz-origin-x": "horizOriginX",
        ideographic: "ideographic",
        imagerendering: "imageRendering",
        "image-rendering": "imageRendering",
        in2: "in2",
        in: "in",
        inlist: "inlist",
        intercept: "intercept",
        k1: "k1",
        k2: "k2",
        k3: "k3",
        k4: "k4",
        k: "k",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        kerning: "kerning",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        letterspacing: "letterSpacing",
        "letter-spacing": "letterSpacing",
        lightingcolor: "lightingColor",
        "lighting-color": "lightingColor",
        limitingconeangle: "limitingConeAngle",
        local: "local",
        markerend: "markerEnd",
        "marker-end": "markerEnd",
        markerheight: "markerHeight",
        markermid: "markerMid",
        "marker-mid": "markerMid",
        markerstart: "markerStart",
        "marker-start": "markerStart",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        mask: "mask",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        mathematical: "mathematical",
        mode: "mode",
        numoctaves: "numOctaves",
        offset: "offset",
        opacity: "opacity",
        operator: "operator",
        order: "order",
        orient: "orient",
        orientation: "orientation",
        origin: "origin",
        overflow: "overflow",
        overlineposition: "overlinePosition",
        "overline-position": "overlinePosition",
        overlinethickness: "overlineThickness",
        "overline-thickness": "overlineThickness",
        paintorder: "paintOrder",
        "paint-order": "paintOrder",
        panose1: "panose1",
        "panose-1": "panose1",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointerevents: "pointerEvents",
        "pointer-events": "pointerEvents",
        points: "points",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        popover: "popover",
        popovertarget: "popoverTarget",
        popovertargetaction: "popoverTargetAction",
        prefix: "prefix",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        property: "property",
        r: "r",
        radius: "radius",
        refx: "refX",
        refy: "refY",
        renderingintent: "renderingIntent",
        "rendering-intent": "renderingIntent",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        resource: "resource",
        restart: "restart",
        result: "result",
        results: "results",
        rotate: "rotate",
        rx: "rx",
        ry: "ry",
        scale: "scale",
        security: "security",
        seed: "seed",
        shaperendering: "shapeRendering",
        "shape-rendering": "shapeRendering",
        slope: "slope",
        spacing: "spacing",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        speed: "speed",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stemh: "stemh",
        stemv: "stemv",
        stitchtiles: "stitchTiles",
        stopcolor: "stopColor",
        "stop-color": "stopColor",
        stopopacity: "stopOpacity",
        "stop-opacity": "stopOpacity",
        strikethroughposition: "strikethroughPosition",
        "strikethrough-position": "strikethroughPosition",
        strikethroughthickness: "strikethroughThickness",
        "strikethrough-thickness": "strikethroughThickness",
        string: "string",
        stroke: "stroke",
        strokedasharray: "strokeDasharray",
        "stroke-dasharray": "strokeDasharray",
        strokedashoffset: "strokeDashoffset",
        "stroke-dashoffset": "strokeDashoffset",
        strokelinecap: "strokeLinecap",
        "stroke-linecap": "strokeLinecap",
        strokelinejoin: "strokeLinejoin",
        "stroke-linejoin": "strokeLinejoin",
        strokemiterlimit: "strokeMiterlimit",
        "stroke-miterlimit": "strokeMiterlimit",
        strokewidth: "strokeWidth",
        "stroke-width": "strokeWidth",
        strokeopacity: "strokeOpacity",
        "stroke-opacity": "strokeOpacity",
        suppresscontenteditablewarning: "suppressContentEditableWarning",
        suppresshydrationwarning: "suppressHydrationWarning",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textanchor: "textAnchor",
        "text-anchor": "textAnchor",
        textdecoration: "textDecoration",
        "text-decoration": "textDecoration",
        textlength: "textLength",
        textrendering: "textRendering",
        "text-rendering": "textRendering",
        to: "to",
        transform: "transform",
        transformorigin: "transformOrigin",
        "transform-origin": "transformOrigin",
        typeof: "typeof",
        u1: "u1",
        u2: "u2",
        underlineposition: "underlinePosition",
        "underline-position": "underlinePosition",
        underlinethickness: "underlineThickness",
        "underline-thickness": "underlineThickness",
        unicode: "unicode",
        unicodebidi: "unicodeBidi",
        "unicode-bidi": "unicodeBidi",
        unicoderange: "unicodeRange",
        "unicode-range": "unicodeRange",
        unitsperem: "unitsPerEm",
        "units-per-em": "unitsPerEm",
        unselectable: "unselectable",
        valphabetic: "vAlphabetic",
        "v-alphabetic": "vAlphabetic",
        values: "values",
        vectoreffect: "vectorEffect",
        "vector-effect": "vectorEffect",
        version: "version",
        vertadvy: "vertAdvY",
        "vert-adv-y": "vertAdvY",
        vertoriginx: "vertOriginX",
        "vert-origin-x": "vertOriginX",
        vertoriginy: "vertOriginY",
        "vert-origin-y": "vertOriginY",
        vhanging: "vHanging",
        "v-hanging": "vHanging",
        videographic: "vIdeographic",
        "v-ideographic": "vIdeographic",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        visibility: "visibility",
        vmathematical: "vMathematical",
        "v-mathematical": "vMathematical",
        vocab: "vocab",
        widths: "widths",
        wordspacing: "wordSpacing",
        "word-spacing": "wordSpacing",
        writingmode: "writingMode",
        "writing-mode": "writingMode",
        x1: "x1",
        x2: "x2",
        x: "x",
        xchannelselector: "xChannelSelector",
        xheight: "xHeight",
        "x-height": "xHeight",
        xlinkactuate: "xlinkActuate",
        "xlink:actuate": "xlinkActuate",
        xlinkarcrole: "xlinkArcrole",
        "xlink:arcrole": "xlinkArcrole",
        xlinkhref: "xlinkHref",
        "xlink:href": "xlinkHref",
        xlinkrole: "xlinkRole",
        "xlink:role": "xlinkRole",
        xlinkshow: "xlinkShow",
        "xlink:show": "xlinkShow",
        xlinktitle: "xlinkTitle",
        "xlink:title": "xlinkTitle",
        xlinktype: "xlinkType",
        "xlink:type": "xlinkType",
        xmlbase: "xmlBase",
        "xml:base": "xmlBase",
        xmllang: "xmlLang",
        "xml:lang": "xmlLang",
        xmlns: "xmlns",
        "xml:space": "xmlSpace",
        xmlnsxlink: "xmlnsXlink",
        "xmlns:xlink": "xmlnsXlink",
        xmlspace: "xmlSpace",
        y1: "y1",
        y2: "y2",
        y: "y",
        ychannelselector: "yChannelSelector",
        z: "z",
        zoomandpan: "zoomAndPan"
      }, ariaProperties = {
        "aria-current": 0,
        "aria-description": 0,
        "aria-details": 0,
        "aria-disabled": 0,
        "aria-hidden": 0,
        "aria-invalid": 0,
        "aria-keyshortcuts": 0,
        "aria-label": 0,
        "aria-roledescription": 0,
        "aria-autocomplete": 0,
        "aria-checked": 0,
        "aria-expanded": 0,
        "aria-haspopup": 0,
        "aria-level": 0,
        "aria-modal": 0,
        "aria-multiline": 0,
        "aria-multiselectable": 0,
        "aria-orientation": 0,
        "aria-placeholder": 0,
        "aria-pressed": 0,
        "aria-readonly": 0,
        "aria-required": 0,
        "aria-selected": 0,
        "aria-sort": 0,
        "aria-valuemax": 0,
        "aria-valuemin": 0,
        "aria-valuenow": 0,
        "aria-valuetext": 0,
        "aria-atomic": 0,
        "aria-busy": 0,
        "aria-live": 0,
        "aria-relevant": 0,
        "aria-dropeffect": 0,
        "aria-grabbed": 0,
        "aria-activedescendant": 0,
        "aria-colcount": 0,
        "aria-colindex": 0,
        "aria-colspan": 0,
        "aria-controls": 0,
        "aria-describedby": 0,
        "aria-errormessage": 0,
        "aria-flowto": 0,
        "aria-labelledby": 0,
        "aria-owns": 0,
        "aria-posinset": 0,
        "aria-rowcount": 0,
        "aria-rowindex": 0,
        "aria-rowspan": 0,
        "aria-setsize": 0
      }, warnedProperties$1 = {}, rARIA$1 = RegExp(
        "^(aria)-[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
      ), rARIACamel$1 = RegExp(
        "^(aria)[A-Z][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
      ), didWarnValueNull = false, warnedProperties = {}, EVENT_NAME_REGEX = /^on./, INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/, rARIA = RegExp(
        "^(aria)-[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
      ), rARIACamel = RegExp(
        "^(aria)[A-Z][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
      ), isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i, currentReplayingEvent = null, restoreTarget = null, restoreQueue = null, isInsideEventHandler = false, canUseDOM = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement), passiveBrowserEventsSupported = false;
      if (canUseDOM)
        try {
          var options$jscomp$0 = {};
          Object.defineProperty(options$jscomp$0, "passive", {
            get: function() {
              passiveBrowserEventsSupported = true;
            }
          });
          window.addEventListener("test", options$jscomp$0, options$jscomp$0);
          window.removeEventListener("test", options$jscomp$0, options$jscomp$0);
        } catch (e) {
          passiveBrowserEventsSupported = false;
        }
      var root = null, startText = null, fallbackText = null, EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event) {
          return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
      }, SyntheticEvent = createSyntheticEvent(EventInterface), UIEventInterface = assign2({}, EventInterface, { view: 0, detail: 0 }), SyntheticUIEvent = createSyntheticEvent(UIEventInterface), lastMovementX, lastMovementY, lastMouseEvent, MouseEventInterface = assign2({}, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event) {
          return void 0 === event.relatedTarget ? event.fromElement === event.srcElement ? event.toElement : event.fromElement : event.relatedTarget;
        },
        movementX: function(event) {
          if ("movementX" in event) return event.movementX;
          event !== lastMouseEvent && (lastMouseEvent && "mousemove" === event.type ? (lastMovementX = event.screenX - lastMouseEvent.screenX, lastMovementY = event.screenY - lastMouseEvent.screenY) : lastMovementY = lastMovementX = 0, lastMouseEvent = event);
          return lastMovementX;
        },
        movementY: function(event) {
          return "movementY" in event ? event.movementY : lastMovementY;
        }
      }), SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface), DragEventInterface = assign2({}, MouseEventInterface, { dataTransfer: 0 }), SyntheticDragEvent = createSyntheticEvent(DragEventInterface), FocusEventInterface = assign2({}, UIEventInterface, { relatedTarget: 0 }), SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface), AnimationEventInterface = assign2({}, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      }), SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface), ClipboardEventInterface = assign2({}, EventInterface, {
        clipboardData: function(event) {
          return "clipboardData" in event ? event.clipboardData : window.clipboardData;
        }
      }), SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface), CompositionEventInterface = assign2({}, EventInterface, { data: 0 }), SyntheticCompositionEvent = createSyntheticEvent(
        CompositionEventInterface
      ), SyntheticInputEvent = SyntheticCompositionEvent, normalizeKey = {
        Esc: "Escape",
        Spacebar: " ",
        Left: "ArrowLeft",
        Up: "ArrowUp",
        Right: "ArrowRight",
        Down: "ArrowDown",
        Del: "Delete",
        Win: "OS",
        Menu: "ContextMenu",
        Apps: "ContextMenu",
        Scroll: "ScrollLock",
        MozPrintableKey: "Unidentified"
      }, translateToKey = {
        8: "Backspace",
        9: "Tab",
        12: "Clear",
        13: "Enter",
        16: "Shift",
        17: "Control",
        18: "Alt",
        19: "Pause",
        20: "CapsLock",
        27: "Escape",
        32: " ",
        33: "PageUp",
        34: "PageDown",
        35: "End",
        36: "Home",
        37: "ArrowLeft",
        38: "ArrowUp",
        39: "ArrowRight",
        40: "ArrowDown",
        45: "Insert",
        46: "Delete",
        112: "F1",
        113: "F2",
        114: "F3",
        115: "F4",
        116: "F5",
        117: "F6",
        118: "F7",
        119: "F8",
        120: "F9",
        121: "F10",
        122: "F11",
        123: "F12",
        144: "NumLock",
        145: "ScrollLock",
        224: "Meta"
      }, modifierKeyToProp = {
        Alt: "altKey",
        Control: "ctrlKey",
        Meta: "metaKey",
        Shift: "shiftKey"
      }, KeyboardEventInterface = assign2({}, UIEventInterface, {
        key: function(nativeEvent) {
          if (nativeEvent.key) {
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if ("Unidentified" !== key) return key;
          }
          return "keypress" === nativeEvent.type ? (nativeEvent = getEventCharCode(nativeEvent), 13 === nativeEvent ? "Enter" : String.fromCharCode(nativeEvent)) : "keydown" === nativeEvent.type || "keyup" === nativeEvent.type ? translateToKey[nativeEvent.keyCode] || "Unidentified" : "";
        },
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        charCode: function(event) {
          return "keypress" === event.type ? getEventCharCode(event) : 0;
        },
        keyCode: function(event) {
          return "keydown" === event.type || "keyup" === event.type ? event.keyCode : 0;
        },
        which: function(event) {
          return "keypress" === event.type ? getEventCharCode(event) : "keydown" === event.type || "keyup" === event.type ? event.keyCode : 0;
        }
      }), SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface), PointerEventInterface = assign2({}, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
      }), SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface), TouchEventInterface = assign2({}, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
      }), SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface), TransitionEventInterface = assign2({}, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      }), SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface), WheelEventInterface = assign2({}, MouseEventInterface, {
        deltaX: function(event) {
          return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
        },
        deltaY: function(event) {
          return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
        },
        deltaZ: 0,
        deltaMode: 0
      }), SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface), ToggleEventInterface = assign2({}, EventInterface, {
        newState: 0,
        oldState: 0
      }), SyntheticToggleEvent = createSyntheticEvent(ToggleEventInterface), END_KEYCODES = [9, 13, 27, 32], START_KEYCODE = 229, canUseCompositionEvent = canUseDOM && "CompositionEvent" in window, documentMode = null;
      canUseDOM && "documentMode" in document && (documentMode = document.documentMode);
      var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode, useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && 8 < documentMode && 11 >= documentMode), SPACEBAR_CODE = 32, SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE), hasSpaceKeypress = false, isComposing = false, supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        "datetime-local": true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
      }, activeElement$1 = null, activeElementInst$1 = null, isInputEventSupported = false;
      canUseDOM && (isInputEventSupported = isEventSupported("input") && (!document.documentMode || 9 < document.documentMode));
      var objectIs = "function" === typeof Object.is ? Object.is : is, skipSelectionChangeEvent = canUseDOM && "documentMode" in document && 11 >= document.documentMode, activeElement = null, activeElementInst = null, lastSelection = null, mouseDown = false, vendorPrefixes = {
        animationend: makePrefixMap("Animation", "AnimationEnd"),
        animationiteration: makePrefixMap("Animation", "AnimationIteration"),
        animationstart: makePrefixMap("Animation", "AnimationStart"),
        transitionrun: makePrefixMap("Transition", "TransitionRun"),
        transitionstart: makePrefixMap("Transition", "TransitionStart"),
        transitioncancel: makePrefixMap("Transition", "TransitionCancel"),
        transitionend: makePrefixMap("Transition", "TransitionEnd")
      }, prefixedEventNames = {}, style = {};
      canUseDOM && (style = document.createElement("div").style, "AnimationEvent" in window || (delete vendorPrefixes.animationend.animation, delete vendorPrefixes.animationiteration.animation, delete vendorPrefixes.animationstart.animation), "TransitionEvent" in window || delete vendorPrefixes.transitionend.transition);
      var ANIMATION_END = getVendorPrefixedEventName("animationend"), ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration"), ANIMATION_START = getVendorPrefixedEventName("animationstart"), TRANSITION_RUN = getVendorPrefixedEventName("transitionrun"), TRANSITION_START = getVendorPrefixedEventName("transitionstart"), TRANSITION_CANCEL = getVendorPrefixedEventName("transitioncancel"), TRANSITION_END = getVendorPrefixedEventName("transitionend"), topLevelEventsToReactNames = /* @__PURE__ */ new Map(), simpleEventPluginEvents = "abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(
        " "
      );
      simpleEventPluginEvents.push("scrollEnd");
      var CapturedStacks = /* @__PURE__ */ new WeakMap(), OffscreenVisible = 1, OffscreenPassiveEffectsConnected = 2, concurrentQueues = [], concurrentQueuesIndex = 0, concurrentlyUpdatedLanes = 0, emptyContextObject = {};
      Object.freeze(emptyContextObject);
      var resolveFamily = null, failedBoundaries = null, NoMode = 0, ConcurrentMode = 1, ProfileMode = 2, StrictLegacyMode = 8, StrictEffectsMode = 16, NoStrictPassiveEffectsMode = 64;
      var hasBadMapPolyfill = false;
      try {
        var nonExtensibleObject = Object.preventExtensions({});
        /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
        /* @__PURE__ */ new Set([nonExtensibleObject]);
      } catch (e$3) {
        hasBadMapPolyfill = true;
      }
      var forkStack = [], forkStackIndex = 0, treeForkProvider = null, treeForkCount = 0, idStack = [], idStackIndex = 0, treeContextProvider = null, treeContextId = 1, treeContextOverflow = "", hydrationParentFiber = null, nextHydratableInstance = null, isHydrating = false, didSuspendOrErrorDEV = false, hydrationDiffRootDEV = null, hydrationErrors = null, rootOrSingletonContext = false, HydrationMismatchException = Error(
        "Hydration Mismatch Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."
      ), lastResetTime = 0;
      if ("object" === typeof performance && "function" === typeof performance.now) {
        var localPerformance = performance;
        var getCurrentTime = function() {
          return localPerformance.now();
        };
      } else {
        var localDate = Date;
        getCurrentTime = function() {
          return localDate.now();
        };
      }
      var valueCursor = createCursor(null);
      var rendererCursorDEV = createCursor(null);
      var rendererSigil = {};
      var currentlyRenderingFiber$1 = null, lastContextDependency = null, isDisallowedContextReadInDEV = false, AbortControllerLocal = "undefined" !== typeof AbortController ? AbortController : function() {
        var listeners = [], signal = this.signal = {
          aborted: false,
          addEventListener: function(type, listener) {
            listeners.push(listener);
          }
        };
        this.abort = function() {
          signal.aborted = true;
          listeners.forEach(function(listener) {
            return listener();
          });
        };
      }, scheduleCallback$2 = Scheduler.unstable_scheduleCallback, NormalPriority = Scheduler.unstable_NormalPriority, CacheContext = {
        $$typeof: REACT_CONTEXT_TYPE,
        Consumer: null,
        Provider: null,
        _currentValue: null,
        _currentValue2: null,
        _threadCount: 0,
        _currentRenderer: null,
        _currentRenderer2: null
      }, now = Scheduler.unstable_now, renderStartTime = -0, commitStartTime = -0, profilerStartTime = -1.1, profilerEffectDuration = -0, currentUpdateIsNested = false, nestedUpdateScheduled = false, currentEntangledListeners = null, currentEntangledPendingCount = 0, currentEntangledLane = 0, currentEntangledActionThenable = null, prevOnStartTransitionFinish = ReactSharedInternals.S;
      ReactSharedInternals.S = function(transition, returnValue) {
        "object" === typeof returnValue && null !== returnValue && "function" === typeof returnValue.then && entangleAsyncAction(transition, returnValue);
        null !== prevOnStartTransitionFinish && prevOnStartTransitionFinish(transition, returnValue);
      };
      var resumedCache = createCursor(null), ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function() {
        },
        flushPendingUnsafeLifecycleWarnings: function() {
        },
        recordLegacyContextWarning: function() {
        },
        flushLegacyContextWarning: function() {
        },
        discardPendingWarnings: function() {
        }
      }, pendingComponentWillMountWarnings = [], pendingUNSAFE_ComponentWillMountWarnings = [], pendingComponentWillReceivePropsWarnings = [], pendingUNSAFE_ComponentWillReceivePropsWarnings = [], pendingComponentWillUpdateWarnings = [], pendingUNSAFE_ComponentWillUpdateWarnings = [], didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
        didWarnAboutUnsafeLifecycles.has(fiber.type) || ("function" === typeof instance.componentWillMount && true !== instance.componentWillMount.__suppressDeprecationWarning && pendingComponentWillMountWarnings.push(fiber), fiber.mode & StrictLegacyMode && "function" === typeof instance.UNSAFE_componentWillMount && pendingUNSAFE_ComponentWillMountWarnings.push(fiber), "function" === typeof instance.componentWillReceiveProps && true !== instance.componentWillReceiveProps.__suppressDeprecationWarning && pendingComponentWillReceivePropsWarnings.push(fiber), fiber.mode & StrictLegacyMode && "function" === typeof instance.UNSAFE_componentWillReceiveProps && pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber), "function" === typeof instance.componentWillUpdate && true !== instance.componentWillUpdate.__suppressDeprecationWarning && pendingComponentWillUpdateWarnings.push(fiber), fiber.mode & StrictLegacyMode && "function" === typeof instance.UNSAFE_componentWillUpdate && pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber));
      };
      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
        var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
        0 < pendingComponentWillMountWarnings.length && (pendingComponentWillMountWarnings.forEach(function(fiber) {
          componentWillMountUniqueNames.add(
            getComponentNameFromFiber(fiber) || "Component"
          );
          didWarnAboutUnsafeLifecycles.add(fiber.type);
        }), pendingComponentWillMountWarnings = []);
        var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
        0 < pendingUNSAFE_ComponentWillMountWarnings.length && (pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
          UNSAFE_componentWillMountUniqueNames.add(
            getComponentNameFromFiber(fiber) || "Component"
          );
          didWarnAboutUnsafeLifecycles.add(fiber.type);
        }), pendingUNSAFE_ComponentWillMountWarnings = []);
        var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
        0 < pendingComponentWillReceivePropsWarnings.length && (pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
          componentWillReceivePropsUniqueNames.add(
            getComponentNameFromFiber(fiber) || "Component"
          );
          didWarnAboutUnsafeLifecycles.add(fiber.type);
        }), pendingComponentWillReceivePropsWarnings = []);
        var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
        0 < pendingUNSAFE_ComponentWillReceivePropsWarnings.length && (pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(
          function(fiber) {
            UNSAFE_componentWillReceivePropsUniqueNames.add(
              getComponentNameFromFiber(fiber) || "Component"
            );
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          }
        ), pendingUNSAFE_ComponentWillReceivePropsWarnings = []);
        var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
        0 < pendingComponentWillUpdateWarnings.length && (pendingComponentWillUpdateWarnings.forEach(function(fiber) {
          componentWillUpdateUniqueNames.add(
            getComponentNameFromFiber(fiber) || "Component"
          );
          didWarnAboutUnsafeLifecycles.add(fiber.type);
        }), pendingComponentWillUpdateWarnings = []);
        var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
        0 < pendingUNSAFE_ComponentWillUpdateWarnings.length && (pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
          UNSAFE_componentWillUpdateUniqueNames.add(
            getComponentNameFromFiber(fiber) || "Component"
          );
          didWarnAboutUnsafeLifecycles.add(fiber.type);
        }), pendingUNSAFE_ComponentWillUpdateWarnings = []);
        if (0 < UNSAFE_componentWillMountUniqueNames.size) {
          var sortedNames = setToSortedString(
            UNSAFE_componentWillMountUniqueNames
          );
          console.error(
            "Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s",
            sortedNames
          );
        }
        0 < UNSAFE_componentWillReceivePropsUniqueNames.size && (sortedNames = setToSortedString(
          UNSAFE_componentWillReceivePropsUniqueNames
        ), console.error(
          "Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\n\nPlease update the following components: %s",
          sortedNames
        ));
        0 < UNSAFE_componentWillUpdateUniqueNames.size && (sortedNames = setToSortedString(
          UNSAFE_componentWillUpdateUniqueNames
        ), console.error(
          "Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s",
          sortedNames
        ));
        0 < componentWillMountUniqueNames.size && (sortedNames = setToSortedString(componentWillMountUniqueNames), console.warn(
          "componentWillMount has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
          sortedNames
        ));
        0 < componentWillReceivePropsUniqueNames.size && (sortedNames = setToSortedString(
          componentWillReceivePropsUniqueNames
        ), console.warn(
          "componentWillReceiveProps has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
          sortedNames
        ));
        0 < componentWillUpdateUniqueNames.size && (sortedNames = setToSortedString(componentWillUpdateUniqueNames), console.warn(
          "componentWillUpdate has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
          sortedNames
        ));
      };
      var pendingLegacyContextWarning = /* @__PURE__ */ new Map(), didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
      ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
        var strictRoot = null;
        for (var node2 = fiber; null !== node2; )
          node2.mode & StrictLegacyMode && (strictRoot = node2), node2 = node2.return;
        null === strictRoot ? console.error(
          "Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue."
        ) : !didWarnAboutLegacyContext.has(fiber.type) && (node2 = pendingLegacyContextWarning.get(strictRoot), null != fiber.type.contextTypes || null != fiber.type.childContextTypes || null !== instance && "function" === typeof instance.getChildContext) && (void 0 === node2 && (node2 = [], pendingLegacyContextWarning.set(strictRoot, node2)), node2.push(fiber));
      };
      ReactStrictModeWarnings.flushLegacyContextWarning = function() {
        pendingLegacyContextWarning.forEach(function(fiberArray) {
          if (0 !== fiberArray.length) {
            var firstFiber = fiberArray[0], uniqueNames = /* @__PURE__ */ new Set();
            fiberArray.forEach(function(fiber) {
              uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            runWithFiberInDEV(firstFiber, function() {
              console.error(
                "Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://react.dev/link/legacy-context",
                sortedNames
              );
            });
          }
        });
      };
      ReactStrictModeWarnings.discardPendingWarnings = function() {
        pendingComponentWillMountWarnings = [];
        pendingUNSAFE_ComponentWillMountWarnings = [];
        pendingComponentWillReceivePropsWarnings = [];
        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        pendingComponentWillUpdateWarnings = [];
        pendingUNSAFE_ComponentWillUpdateWarnings = [];
        pendingLegacyContextWarning = /* @__PURE__ */ new Map();
      };
      var SuspenseException = Error(
        "Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`."
      ), SuspenseyCommitException = Error(
        "Suspense Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."
      ), SuspenseActionException = Error(
        "Suspense Exception: This is not a real error! It's an implementation detail of `useActionState` to interrupt the current render. You must either rethrow it immediately, or move the `useActionState` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary."
      ), noopSuspenseyCommitThenable = {
        then: function() {
          console.error(
            'Internal React error: A listener was unexpectedly attached to a "noop" thenable. This is a bug in React. Please file an issue.'
          );
        }
      }, suspendedThenable = null, needsToResetSuspendedThenableDEV = false, NoFlags = 0, HasEffect = 1, Insertion7 = 2, Layout = 4, Passive = 8, UpdateState = 0, ReplaceState = 1, ForceUpdate = 2, CaptureUpdate = 3, hasForceUpdate = false;
      var didWarnUpdateInsideUpdate = false;
      var currentlyProcessingQueue = null;
      var didReadFromEntangledAsyncAction = false, currentTreeHiddenStackCursor = createCursor(null), prevEntangledRenderLanesCursor = createCursor(0), didWarnUncachedGetSnapshot;
      var didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
      var didWarnAboutUseWrappedInTryCatch = /* @__PURE__ */ new Set();
      var didWarnAboutAsyncClientComponent = /* @__PURE__ */ new Set();
      var didWarnAboutUseFormState = /* @__PURE__ */ new Set();
      var renderLanes = 0, currentlyRenderingFiber = null, currentHook = null, workInProgressHook = null, didScheduleRenderPhaseUpdate = false, didScheduleRenderPhaseUpdateDuringThisPass = false, shouldDoubleInvokeUserFnsInHooksDEV = false, localIdCounter = 0, thenableIndexCounter$1 = 0, thenableState$1 = null, globalClientIdCounter = 0, RE_RENDER_LIMIT = 25, currentHookNameInDev = null, hookTypesDev = null, hookTypesUpdateIndexDev = -1, ignorePreviousDependencies = false, ContextOnlyDispatcher = {
        readContext,
        use,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useInsertionEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useSyncExternalStore: throwInvalidHookError,
        useId: throwInvalidHookError,
        useHostTransitionStatus: throwInvalidHookError,
        useFormState: throwInvalidHookError,
        useActionState: throwInvalidHookError,
        useOptimistic: throwInvalidHookError,
        useMemoCache: throwInvalidHookError,
        useCacheRefresh: throwInvalidHookError
      }, HooksDispatcherOnMountInDEV = null, HooksDispatcherOnMountWithHookTypesInDEV = null, HooksDispatcherOnUpdateInDEV = null, HooksDispatcherOnRerenderInDEV = null, InvalidNestedHooksDispatcherOnMountInDEV = null, InvalidNestedHooksDispatcherOnUpdateInDEV = null, InvalidNestedHooksDispatcherOnRerenderInDEV = null;
      HooksDispatcherOnMountInDEV = {
        readContext: function(context) {
          return readContext(context);
        },
        use,
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          mountHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create, createDeps) {
          currentHookNameInDev = "useEffect";
          mountHookTypesDev();
          checkDepsAreArrayDev(createDeps);
          return mountEffect(create, createDeps);
        },
        useImperativeHandle: function(ref, create, deps) {
          currentHookNameInDev = "useImperativeHandle";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          currentHookNameInDev = "useInsertionEffect";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          mountEffectImpl(4, Insertion7, create, deps);
        },
        useLayoutEffect: function(create, deps) {
          currentHookNameInDev = "useLayoutEffect";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountMemo(create, deps);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init) {
          currentHookNameInDev = "useReducer";
          mountHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountReducer(reducer, initialArg, init);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          mountHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState";
          mountHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountState(initialState);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useDebugValue: function() {
          currentHookNameInDev = "useDebugValue";
          mountHookTypesDev();
        },
        useDeferredValue: function(value, initialValue) {
          currentHookNameInDev = "useDeferredValue";
          mountHookTypesDev();
          return mountDeferredValue(value, initialValue);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          mountHookTypesDev();
          return mountTransition();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          mountHookTypesDev();
          return mountSyncExternalStore(
            subscribe,
            getSnapshot,
            getServerSnapshot
          );
        },
        useId: function() {
          currentHookNameInDev = "useId";
          mountHookTypesDev();
          return mountId();
        },
        useFormState: function(action, initialState) {
          currentHookNameInDev = "useFormState";
          mountHookTypesDev();
          warnOnUseFormStateInDev();
          return mountActionState(action, initialState);
        },
        useActionState: function(action, initialState) {
          currentHookNameInDev = "useActionState";
          mountHookTypesDev();
          return mountActionState(action, initialState);
        },
        useOptimistic: function(passthrough) {
          currentHookNameInDev = "useOptimistic";
          mountHookTypesDev();
          return mountOptimistic(passthrough);
        },
        useHostTransitionStatus,
        useMemoCache,
        useCacheRefresh: function() {
          currentHookNameInDev = "useCacheRefresh";
          mountHookTypesDev();
          return mountRefresh();
        }
      };
      HooksDispatcherOnMountWithHookTypesInDEV = {
        readContext: function(context) {
          return readContext(context);
        },
        use,
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          updateHookTypesDev();
          return mountCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          updateHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create, createDeps) {
          currentHookNameInDev = "useEffect";
          updateHookTypesDev();
          return mountEffect(create, createDeps);
        },
        useImperativeHandle: function(ref, create, deps) {
          currentHookNameInDev = "useImperativeHandle";
          updateHookTypesDev();
          return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          currentHookNameInDev = "useInsertionEffect";
          updateHookTypesDev();
          mountEffectImpl(4, Insertion7, create, deps);
        },
        useLayoutEffect: function(create, deps) {
          currentHookNameInDev = "useLayoutEffect";
          updateHookTypesDev();
          return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo";
          updateHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountMemo(create, deps);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init) {
          currentHookNameInDev = "useReducer";
          updateHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountReducer(reducer, initialArg, init);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          updateHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState";
          updateHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountState(initialState);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useDebugValue: function() {
          currentHookNameInDev = "useDebugValue";
          updateHookTypesDev();
        },
        useDeferredValue: function(value, initialValue) {
          currentHookNameInDev = "useDeferredValue";
          updateHookTypesDev();
          return mountDeferredValue(value, initialValue);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          updateHookTypesDev();
          return mountTransition();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          updateHookTypesDev();
          return mountSyncExternalStore(
            subscribe,
            getSnapshot,
            getServerSnapshot
          );
        },
        useId: function() {
          currentHookNameInDev = "useId";
          updateHookTypesDev();
          return mountId();
        },
        useActionState: function(action, initialState) {
          currentHookNameInDev = "useActionState";
          updateHookTypesDev();
          return mountActionState(action, initialState);
        },
        useFormState: function(action, initialState) {
          currentHookNameInDev = "useFormState";
          updateHookTypesDev();
          warnOnUseFormStateInDev();
          return mountActionState(action, initialState);
        },
        useOptimistic: function(passthrough) {
          currentHookNameInDev = "useOptimistic";
          updateHookTypesDev();
          return mountOptimistic(passthrough);
        },
        useHostTransitionStatus,
        useMemoCache,
        useCacheRefresh: function() {
          currentHookNameInDev = "useCacheRefresh";
          updateHookTypesDev();
          return mountRefresh();
        }
      };
      HooksDispatcherOnUpdateInDEV = {
        readContext: function(context) {
          return readContext(context);
        },
        use,
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          updateHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create, createDeps) {
          currentHookNameInDev = "useEffect";
          updateHookTypesDev();
          updateEffectImpl(2048, Passive, create, createDeps);
        },
        useImperativeHandle: function(ref, create, deps) {
          currentHookNameInDev = "useImperativeHandle";
          updateHookTypesDev();
          return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          currentHookNameInDev = "useInsertionEffect";
          updateHookTypesDev();
          return updateEffectImpl(4, Insertion7, create, deps);
        },
        useLayoutEffect: function(create, deps) {
          currentHookNameInDev = "useLayoutEffect";
          updateHookTypesDev();
          return updateEffectImpl(4, Layout, create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo";
          updateHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateMemo(create, deps);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init) {
          currentHookNameInDev = "useReducer";
          updateHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateReducer(reducer, initialArg, init);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useRef: function() {
          currentHookNameInDev = "useRef";
          updateHookTypesDev();
          return updateWorkInProgressHook().memoizedState;
        },
        useState: function() {
          currentHookNameInDev = "useState";
          updateHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateReducer(basicStateReducer);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useDebugValue: function() {
          currentHookNameInDev = "useDebugValue";
          updateHookTypesDev();
        },
        useDeferredValue: function(value, initialValue) {
          currentHookNameInDev = "useDeferredValue";
          updateHookTypesDev();
          return updateDeferredValue(value, initialValue);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          updateHookTypesDev();
          return updateTransition();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          updateHookTypesDev();
          return updateSyncExternalStore(
            subscribe,
            getSnapshot,
            getServerSnapshot
          );
        },
        useId: function() {
          currentHookNameInDev = "useId";
          updateHookTypesDev();
          return updateWorkInProgressHook().memoizedState;
        },
        useFormState: function(action) {
          currentHookNameInDev = "useFormState";
          updateHookTypesDev();
          warnOnUseFormStateInDev();
          return updateActionState(action);
        },
        useActionState: function(action) {
          currentHookNameInDev = "useActionState";
          updateHookTypesDev();
          return updateActionState(action);
        },
        useOptimistic: function(passthrough, reducer) {
          currentHookNameInDev = "useOptimistic";
          updateHookTypesDev();
          return updateOptimistic(passthrough, reducer);
        },
        useHostTransitionStatus,
        useMemoCache,
        useCacheRefresh: function() {
          currentHookNameInDev = "useCacheRefresh";
          updateHookTypesDev();
          return updateWorkInProgressHook().memoizedState;
        }
      };
      HooksDispatcherOnRerenderInDEV = {
        readContext: function(context) {
          return readContext(context);
        },
        use,
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          updateHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create, createDeps) {
          currentHookNameInDev = "useEffect";
          updateHookTypesDev();
          updateEffectImpl(2048, Passive, create, createDeps);
        },
        useImperativeHandle: function(ref, create, deps) {
          currentHookNameInDev = "useImperativeHandle";
          updateHookTypesDev();
          return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          currentHookNameInDev = "useInsertionEffect";
          updateHookTypesDev();
          return updateEffectImpl(4, Insertion7, create, deps);
        },
        useLayoutEffect: function(create, deps) {
          currentHookNameInDev = "useLayoutEffect";
          updateHookTypesDev();
          return updateEffectImpl(4, Layout, create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo";
          updateHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;
          try {
            return updateMemo(create, deps);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init) {
          currentHookNameInDev = "useReducer";
          updateHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;
          try {
            return rerenderReducer(reducer, initialArg, init);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useRef: function() {
          currentHookNameInDev = "useRef";
          updateHookTypesDev();
          return updateWorkInProgressHook().memoizedState;
        },
        useState: function() {
          currentHookNameInDev = "useState";
          updateHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;
          try {
            return rerenderReducer(basicStateReducer);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useDebugValue: function() {
          currentHookNameInDev = "useDebugValue";
          updateHookTypesDev();
        },
        useDeferredValue: function(value, initialValue) {
          currentHookNameInDev = "useDeferredValue";
          updateHookTypesDev();
          return rerenderDeferredValue(value, initialValue);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          updateHookTypesDev();
          return rerenderTransition();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          updateHookTypesDev();
          return updateSyncExternalStore(
            subscribe,
            getSnapshot,
            getServerSnapshot
          );
        },
        useId: function() {
          currentHookNameInDev = "useId";
          updateHookTypesDev();
          return updateWorkInProgressHook().memoizedState;
        },
        useFormState: function(action) {
          currentHookNameInDev = "useFormState";
          updateHookTypesDev();
          warnOnUseFormStateInDev();
          return rerenderActionState(action);
        },
        useActionState: function(action) {
          currentHookNameInDev = "useActionState";
          updateHookTypesDev();
          return rerenderActionState(action);
        },
        useOptimistic: function(passthrough, reducer) {
          currentHookNameInDev = "useOptimistic";
          updateHookTypesDev();
          return rerenderOptimistic(passthrough, reducer);
        },
        useHostTransitionStatus,
        useMemoCache,
        useCacheRefresh: function() {
          currentHookNameInDev = "useCacheRefresh";
          updateHookTypesDev();
          return updateWorkInProgressHook().memoizedState;
        }
      };
      InvalidNestedHooksDispatcherOnMountInDEV = {
        readContext: function(context) {
          warnInvalidContextAccess();
          return readContext(context);
        },
        use: function(usable) {
          warnInvalidHookAccess();
          return use(usable);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create, createDeps) {
          currentHookNameInDev = "useEffect";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountEffect(create, createDeps);
        },
        useImperativeHandle: function(ref, create, deps) {
          currentHookNameInDev = "useImperativeHandle";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          currentHookNameInDev = "useInsertionEffect";
          warnInvalidHookAccess();
          mountHookTypesDev();
          mountEffectImpl(4, Insertion7, create, deps);
        },
        useLayoutEffect: function(create, deps) {
          currentHookNameInDev = "useLayoutEffect";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo";
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountMemo(create, deps);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init) {
          currentHookNameInDev = "useReducer";
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountReducer(reducer, initialArg, init);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState";
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountState(initialState);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useDebugValue: function() {
          currentHookNameInDev = "useDebugValue";
          warnInvalidHookAccess();
          mountHookTypesDev();
        },
        useDeferredValue: function(value, initialValue) {
          currentHookNameInDev = "useDeferredValue";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountDeferredValue(value, initialValue);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountTransition();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountSyncExternalStore(
            subscribe,
            getSnapshot,
            getServerSnapshot
          );
        },
        useId: function() {
          currentHookNameInDev = "useId";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountId();
        },
        useFormState: function(action, initialState) {
          currentHookNameInDev = "useFormState";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountActionState(action, initialState);
        },
        useActionState: function(action, initialState) {
          currentHookNameInDev = "useActionState";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountActionState(action, initialState);
        },
        useOptimistic: function(passthrough) {
          currentHookNameInDev = "useOptimistic";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountOptimistic(passthrough);
        },
        useMemoCache: function(size) {
          warnInvalidHookAccess();
          return useMemoCache(size);
        },
        useHostTransitionStatus,
        useCacheRefresh: function() {
          currentHookNameInDev = "useCacheRefresh";
          mountHookTypesDev();
          return mountRefresh();
        }
      };
      InvalidNestedHooksDispatcherOnUpdateInDEV = {
        readContext: function(context) {
          warnInvalidContextAccess();
          return readContext(context);
        },
        use: function(usable) {
          warnInvalidHookAccess();
          return use(usable);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create, createDeps) {
          currentHookNameInDev = "useEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          updateEffectImpl(2048, Passive, create, createDeps);
        },
        useImperativeHandle: function(ref, create, deps) {
          currentHookNameInDev = "useImperativeHandle";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          currentHookNameInDev = "useInsertionEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateEffectImpl(4, Insertion7, create, deps);
        },
        useLayoutEffect: function(create, deps) {
          currentHookNameInDev = "useLayoutEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateEffectImpl(4, Layout, create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateMemo(create, deps);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init) {
          currentHookNameInDev = "useReducer";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateReducer(reducer, initialArg, init);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useRef: function() {
          currentHookNameInDev = "useRef";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateWorkInProgressHook().memoizedState;
        },
        useState: function() {
          currentHookNameInDev = "useState";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateReducer(basicStateReducer);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useDebugValue: function() {
          currentHookNameInDev = "useDebugValue";
          warnInvalidHookAccess();
          updateHookTypesDev();
        },
        useDeferredValue: function(value, initialValue) {
          currentHookNameInDev = "useDeferredValue";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateDeferredValue(value, initialValue);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateTransition();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateSyncExternalStore(
            subscribe,
            getSnapshot,
            getServerSnapshot
          );
        },
        useId: function() {
          currentHookNameInDev = "useId";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateWorkInProgressHook().memoizedState;
        },
        useFormState: function(action) {
          currentHookNameInDev = "useFormState";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateActionState(action);
        },
        useActionState: function(action) {
          currentHookNameInDev = "useActionState";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateActionState(action);
        },
        useOptimistic: function(passthrough, reducer) {
          currentHookNameInDev = "useOptimistic";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateOptimistic(passthrough, reducer);
        },
        useMemoCache: function(size) {
          warnInvalidHookAccess();
          return useMemoCache(size);
        },
        useHostTransitionStatus,
        useCacheRefresh: function() {
          currentHookNameInDev = "useCacheRefresh";
          updateHookTypesDev();
          return updateWorkInProgressHook().memoizedState;
        }
      };
      InvalidNestedHooksDispatcherOnRerenderInDEV = {
        readContext: function(context) {
          warnInvalidContextAccess();
          return readContext(context);
        },
        use: function(usable) {
          warnInvalidHookAccess();
          return use(usable);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create, createDeps) {
          currentHookNameInDev = "useEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          updateEffectImpl(2048, Passive, create, createDeps);
        },
        useImperativeHandle: function(ref, create, deps) {
          currentHookNameInDev = "useImperativeHandle";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          currentHookNameInDev = "useInsertionEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateEffectImpl(4, Insertion7, create, deps);
        },
        useLayoutEffect: function(create, deps) {
          currentHookNameInDev = "useLayoutEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateEffectImpl(4, Layout, create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateMemo(create, deps);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init) {
          currentHookNameInDev = "useReducer";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return rerenderReducer(reducer, initialArg, init);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useRef: function() {
          currentHookNameInDev = "useRef";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateWorkInProgressHook().memoizedState;
        },
        useState: function() {
          currentHookNameInDev = "useState";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return rerenderReducer(basicStateReducer);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useDebugValue: function() {
          currentHookNameInDev = "useDebugValue";
          warnInvalidHookAccess();
          updateHookTypesDev();
        },
        useDeferredValue: function(value, initialValue) {
          currentHookNameInDev = "useDeferredValue";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return rerenderDeferredValue(value, initialValue);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return rerenderTransition();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateSyncExternalStore(
            subscribe,
            getSnapshot,
            getServerSnapshot
          );
        },
        useId: function() {
          currentHookNameInDev = "useId";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateWorkInProgressHook().memoizedState;
        },
        useFormState: function(action) {
          currentHookNameInDev = "useFormState";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return rerenderActionState(action);
        },
        useActionState: function(action) {
          currentHookNameInDev = "useActionState";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return rerenderActionState(action);
        },
        useOptimistic: function(passthrough, reducer) {
          currentHookNameInDev = "useOptimistic";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return rerenderOptimistic(passthrough, reducer);
        },
        useMemoCache: function(size) {
          warnInvalidHookAccess();
          return useMemoCache(size);
        },
        useHostTransitionStatus,
        useCacheRefresh: function() {
          currentHookNameInDev = "useCacheRefresh";
          updateHookTypesDev();
          return updateWorkInProgressHook().memoizedState;
        }
      };
      var callComponent = {
        "react-stack-bottom-frame": function(Component, props, secondArg) {
          var wasRendering = isRendering;
          isRendering = true;
          try {
            return Component(props, secondArg);
          } finally {
            isRendering = wasRendering;
          }
        }
      }, callComponentInDEV = callComponent["react-stack-bottom-frame"].bind(callComponent), callRender = {
        "react-stack-bottom-frame": function(instance) {
          var wasRendering = isRendering;
          isRendering = true;
          try {
            return instance.render();
          } finally {
            isRendering = wasRendering;
          }
        }
      }, callRenderInDEV = callRender["react-stack-bottom-frame"].bind(callRender), callComponentDidMount = {
        "react-stack-bottom-frame": function(finishedWork, instance) {
          try {
            instance.componentDidMount();
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
      }, callComponentDidMountInDEV = callComponentDidMount["react-stack-bottom-frame"].bind(callComponentDidMount), callComponentDidUpdate = {
        "react-stack-bottom-frame": function(finishedWork, instance, prevProps, prevState, snapshot) {
          try {
            instance.componentDidUpdate(prevProps, prevState, snapshot);
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
      }, callComponentDidUpdateInDEV = callComponentDidUpdate["react-stack-bottom-frame"].bind(callComponentDidUpdate), callComponentDidCatch = {
        "react-stack-bottom-frame": function(instance, errorInfo) {
          var stack = errorInfo.stack;
          instance.componentDidCatch(errorInfo.value, {
            componentStack: null !== stack ? stack : ""
          });
        }
      }, callComponentDidCatchInDEV = callComponentDidCatch["react-stack-bottom-frame"].bind(callComponentDidCatch), callComponentWillUnmount = {
        "react-stack-bottom-frame": function(current2, nearestMountedAncestor, instance) {
          try {
            instance.componentWillUnmount();
          } catch (error) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error);
          }
        }
      }, callComponentWillUnmountInDEV = callComponentWillUnmount["react-stack-bottom-frame"].bind(callComponentWillUnmount), callCreate = {
        "react-stack-bottom-frame": function(effect) {
          null != effect.resourceKind && console.error(
            "Expected only SimpleEffects when enableUseEffectCRUDOverload is disabled, got %s",
            effect.resourceKind
          );
          var create = effect.create;
          effect = effect.inst;
          create = create();
          return effect.destroy = create;
        }
      }, callCreateInDEV = callCreate["react-stack-bottom-frame"].bind(callCreate), callDestroy = {
        "react-stack-bottom-frame": function(current2, nearestMountedAncestor, destroy) {
          try {
            destroy();
          } catch (error) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error);
          }
        }
      }, callDestroyInDEV = callDestroy["react-stack-bottom-frame"].bind(callDestroy), callLazyInit = {
        "react-stack-bottom-frame": function(lazy) {
          var init = lazy._init;
          return init(lazy._payload);
        }
      }, callLazyInitInDEV = callLazyInit["react-stack-bottom-frame"].bind(callLazyInit), thenableState = null, thenableIndexCounter = 0, currentDebugInfo = null, didWarnAboutMaps;
      var didWarnAboutGenerators = didWarnAboutMaps = false;
      var ownerHasKeyUseWarning = {};
      var ownerHasFunctionTypeWarning = {};
      var ownerHasSymbolTypeWarning = {};
      warnForMissingKey = function(returnFiber, workInProgress2, child) {
        if (null !== child && "object" === typeof child && child._store && (!child._store.validated && null == child.key || 2 === child._store.validated)) {
          if ("object" !== typeof child._store)
            throw Error(
              "React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue."
            );
          child._store.validated = 1;
          var componentName2 = getComponentNameFromFiber(returnFiber), componentKey = componentName2 || "null";
          if (!ownerHasKeyUseWarning[componentKey]) {
            ownerHasKeyUseWarning[componentKey] = true;
            child = child._owner;
            returnFiber = returnFiber._debugOwner;
            var currentComponentErrorInfo = "";
            returnFiber && "number" === typeof returnFiber.tag && (componentKey = getComponentNameFromFiber(returnFiber)) && (currentComponentErrorInfo = "\n\nCheck the render method of `" + componentKey + "`.");
            currentComponentErrorInfo || componentName2 && (currentComponentErrorInfo = "\n\nCheck the top-level render call using <" + componentName2 + ">.");
            var childOwnerAppendix = "";
            null != child && returnFiber !== child && (componentName2 = null, "number" === typeof child.tag ? componentName2 = getComponentNameFromFiber(child) : "string" === typeof child.name && (componentName2 = child.name), componentName2 && (childOwnerAppendix = " It was passed a child from " + componentName2 + "."));
            runWithFiberInDEV(workInProgress2, function() {
              console.error(
                'Each child in a list should have a unique "key" prop.%s%s See https://react.dev/link/warning-keys for more information.',
                currentComponentErrorInfo,
                childOwnerAppendix
              );
            });
          }
        }
      };
      var reconcileChildFibers = createChildReconciler(true), mountChildFibers = createChildReconciler(false), suspenseHandlerStackCursor = createCursor(null), shellBoundary = null, SubtreeSuspenseContextMask = 1, ForceSuspenseFallback = 2, suspenseStackCursor = createCursor(0), fakeInternalInstance = {};
      var didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
      var didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
      var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
      var didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
      var didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
      var didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
      var didWarnAboutContextTypes$1 = /* @__PURE__ */ new Set();
      var didWarnAboutChildContextTypes = /* @__PURE__ */ new Set();
      var didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
      var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
      Object.freeze(fakeInternalInstance);
      var classComponentUpdater = {
        enqueueSetState: function(inst, payload, callback) {
          inst = inst._reactInternals;
          var lane = requestUpdateLane(inst), update = createUpdate(lane);
          update.payload = payload;
          void 0 !== callback && null !== callback && (warnOnInvalidCallback(callback), update.callback = callback);
          payload = enqueueUpdate(inst, update, lane);
          null !== payload && (scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
          markStateUpdateScheduled(inst, lane);
        },
        enqueueReplaceState: function(inst, payload, callback) {
          inst = inst._reactInternals;
          var lane = requestUpdateLane(inst), update = createUpdate(lane);
          update.tag = ReplaceState;
          update.payload = payload;
          void 0 !== callback && null !== callback && (warnOnInvalidCallback(callback), update.callback = callback);
          payload = enqueueUpdate(inst, update, lane);
          null !== payload && (scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
          markStateUpdateScheduled(inst, lane);
        },
        enqueueForceUpdate: function(inst, callback) {
          inst = inst._reactInternals;
          var lane = requestUpdateLane(inst), update = createUpdate(lane);
          update.tag = ForceUpdate;
          void 0 !== callback && null !== callback && (warnOnInvalidCallback(callback), update.callback = callback);
          callback = enqueueUpdate(inst, update, lane);
          null !== callback && (scheduleUpdateOnFiber(callback, inst, lane), entangleTransitions(callback, inst, lane));
          null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markForceUpdateScheduled && injectedProfilingHooks.markForceUpdateScheduled(inst, lane);
        }
      }, reportGlobalError = "function" === typeof reportError ? reportError : function(error) {
        if ("object" === typeof window && "function" === typeof window.ErrorEvent) {
          var event = new window.ErrorEvent("error", {
            bubbles: true,
            cancelable: true,
            message: "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error),
            error
          });
          if (!window.dispatchEvent(event)) return;
        } else if ("object" === typeof process && "function" === typeof process.emit) {
          process.emit("uncaughtException", error);
          return;
        }
        console.error(error);
      }, componentName = null, errorBoundaryName = null, SelectiveHydrationException = Error(
        "This is not a real error. It's an implementation detail of React's selective hydration feature. If this leaks into userspace, it's a bug in React. Please file an issue."
      ), didReceiveUpdate = false;
      var didWarnAboutBadClass = {};
      var didWarnAboutContextTypeOnFunctionComponent = {};
      var didWarnAboutContextTypes = {};
      var didWarnAboutGetDerivedStateOnFunctionComponent = {};
      var didWarnAboutReassigningProps = false;
      var didWarnAboutRevealOrder = {};
      var didWarnAboutTailOptions = {};
      var SUSPENDED_MARKER = {
        dehydrated: null,
        treeContext: null,
        retryLane: 0,
        hydrationErrors: null
      }, hasWarnedAboutUsingNoValuePropOnContextProvider = false, didWarnAboutUndefinedSnapshotBeforeUpdate = null;
      didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
      var offscreenSubtreeIsHidden = false, offscreenSubtreeWasHidden = false, needsFormReset = false, PossiblyWeakSet = "function" === typeof WeakSet ? WeakSet : Set, nextEffect = null, inProgressLanes = null, inProgressRoot = null, hostParent = null, hostParentIsContainer = false, currentHoistableRoot = null, suspenseyCommitFlag = 8192, DefaultAsyncDispatcher = {
        getCacheForType: function(resourceType) {
          var cache = readContext(CacheContext), cacheForType = cache.data.get(resourceType);
          void 0 === cacheForType && (cacheForType = resourceType(), cache.data.set(resourceType, cacheForType));
          return cacheForType;
        },
        getOwner: function() {
          return current;
        }
      };
      if ("function" === typeof Symbol && Symbol.for) {
        var symbolFor = Symbol.for;
        symbolFor("selector.component");
        symbolFor("selector.has_pseudo_class");
        symbolFor("selector.role");
        symbolFor("selector.test_id");
        symbolFor("selector.text");
      }
      var commitHooks = [], PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map, NoContext = 0, RenderContext = 2, CommitContext = 4, RootInProgress = 0, RootFatalErrored = 1, RootErrored = 2, RootSuspended = 3, RootSuspendedWithDelay = 4, RootSuspendedAtTheShell = 6, RootCompleted = 5, executionContext = NoContext, workInProgressRoot = null, workInProgress = null, workInProgressRootRenderLanes = 0, NotSuspended = 0, SuspendedOnError = 1, SuspendedOnData = 2, SuspendedOnImmediate = 3, SuspendedOnInstance = 4, SuspendedOnInstanceAndReadyToContinue = 5, SuspendedOnDeprecatedThrowPromise = 6, SuspendedAndReadyToContinue = 7, SuspendedOnHydration = 8, SuspendedOnAction = 9, workInProgressSuspendedReason = NotSuspended, workInProgressThrownValue = null, workInProgressRootDidSkipSuspendedSiblings = false, workInProgressRootIsPrerendering = false, workInProgressRootDidAttachPingListener = false, entangledRenderLanes = 0, workInProgressRootExitStatus = RootInProgress, workInProgressRootSkippedLanes = 0, workInProgressRootInterleavedUpdatedLanes = 0, workInProgressRootPingedLanes = 0, workInProgressDeferredLane = 0, workInProgressSuspendedRetryLanes = 0, workInProgressRootConcurrentErrors = null, workInProgressRootRecoverableErrors = null, workInProgressRootDidIncludeRecursiveRenderUpdate = false, globalMostRecentFallbackTime = 0, FALLBACK_THROTTLE_MS = 300, workInProgressRootRenderTargetTime = Infinity, RENDER_TIMEOUT_MS = 500, workInProgressTransitions = null, legacyErrorBoundariesThatAlreadyFailed = null, IMMEDIATE_COMMIT = 0, SUSPENDED_COMMIT = 1, THROTTLED_COMMIT = 2, NO_PENDING_EFFECTS = 0, PENDING_MUTATION_PHASE = 1, PENDING_LAYOUT_PHASE = 2, PENDING_AFTER_MUTATION_PHASE = 3, PENDING_SPAWNED_WORK = 4, PENDING_PASSIVE_PHASE = 5, pendingEffectsStatus = 0, pendingEffectsRoot = null, pendingFinishedWork = null, pendingEffectsLanes = 0, pendingEffectsRemainingLanes = 0, pendingPassiveTransitions = null, pendingRecoverableErrors = null, NESTED_UPDATE_LIMIT = 50, nestedUpdateCount = 0, rootWithNestedUpdates = null, isFlushingPassiveEffects = false, didScheduleUpdateDuringPassiveEffects = false, NESTED_PASSIVE_UPDATE_LIMIT = 50, nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null, isRunningInsertionEffect = false, didWarnStateUpdateForNotYetMountedComponent = null, didWarnAboutUpdateInRender = false;
      var didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
      var fakeActCallbackNode$1 = {}, firstScheduledRoot = null, lastScheduledRoot = null, didScheduleMicrotask = false, didScheduleMicrotask_act = false, mightHavePendingSyncWork = false, isFlushingWork = false, currentEventTransitionLane = 0, fakeActCallbackNode = {};
      (function() {
        for (var i = 0; i < simpleEventPluginEvents.length; i++) {
          var eventName = simpleEventPluginEvents[i], domEventName = eventName.toLowerCase();
          eventName = eventName[0].toUpperCase() + eventName.slice(1);
          registerSimpleEvent(domEventName, "on" + eventName);
        }
        registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
        registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
        registerSimpleEvent(ANIMATION_START, "onAnimationStart");
        registerSimpleEvent("dblclick", "onDoubleClick");
        registerSimpleEvent("focusin", "onFocus");
        registerSimpleEvent("focusout", "onBlur");
        registerSimpleEvent(TRANSITION_RUN, "onTransitionRun");
        registerSimpleEvent(TRANSITION_START, "onTransitionStart");
        registerSimpleEvent(TRANSITION_CANCEL, "onTransitionCancel");
        registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
      })();
      registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
      registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
      registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
      registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
      registerTwoPhaseEvent(
        "onChange",
        "change click focusin focusout input keydown keyup selectionchange".split(
          " "
        )
      );
      registerTwoPhaseEvent(
        "onSelect",
        "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(
          " "
        )
      );
      registerTwoPhaseEvent("onBeforeInput", [
        "compositionend",
        "keypress",
        "textInput",
        "paste"
      ]);
      registerTwoPhaseEvent(
        "onCompositionEnd",
        "compositionend focusout keydown keypress keyup mousedown".split(" ")
      );
      registerTwoPhaseEvent(
        "onCompositionStart",
        "compositionstart focusout keydown keypress keyup mousedown".split(" ")
      );
      registerTwoPhaseEvent(
        "onCompositionUpdate",
        "compositionupdate focusout keydown keypress keyup mousedown".split(" ")
      );
      var mediaEventTypes = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(
        " "
      ), nonDelegatedEvents = new Set(
        "beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(mediaEventTypes)
      ), listeningMarker = "_reactListening" + Math.random().toString(36).slice(2), didWarnControlledToUncontrolled = false, didWarnUncontrolledToControlled = false, didWarnFormActionType = false, didWarnFormActionName = false, didWarnFormActionTarget = false, didWarnFormActionMethod = false, didWarnPopoverTargetObject = false;
      var didWarnForNewBooleanPropsWithEmptyValue = {};
      var NORMALIZE_NEWLINES_REGEX = /\r\n?/g, NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g, xlinkNamespace = "http://www.w3.org/1999/xlink", xmlNamespace = "http://www.w3.org/XML/1998/namespace", EXPECTED_FORM_ACTION_URL = "javascript:throw new Error('React form unexpectedly submitted.')", SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning", SUSPENSE_START_DATA = "$", SUSPENSE_END_DATA = "/$", SUSPENSE_PENDING_START_DATA = "$?", SUSPENSE_FALLBACK_START_DATA = "$!", PREAMBLE_CONTRIBUTION_HTML = 1, PREAMBLE_CONTRIBUTION_BODY = 2, PREAMBLE_CONTRIBUTION_HEAD = 4, FORM_STATE_IS_MATCHING = "F!", FORM_STATE_IS_NOT_MATCHING = "F", DOCUMENT_READY_STATE_COMPLETE = "complete", STYLE = "style", HostContextNamespaceNone = 0, HostContextNamespaceSvg = 1, HostContextNamespaceMath = 2, eventsEnabled = null, selectionInformation = null, warnedUnknownTags = { dialog: true, webview: true }, currentPopstateTransitionEvent = null, scheduleTimeout = "function" === typeof setTimeout ? setTimeout : void 0, cancelTimeout = "function" === typeof clearTimeout ? clearTimeout : void 0, noTimeout = -1, localPromise = "function" === typeof Promise ? Promise : void 0, scheduleMicrotask = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof localPromise ? function(callback) {
        return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
      } : scheduleTimeout, previousHydratableOnEnteringScopedSingleton = null, NotLoaded = 0, Loaded = 1, Errored = 2, Settled = 3, Inserted = 4, preloadPropsMap = /* @__PURE__ */ new Map(), preconnectsSet = /* @__PURE__ */ new Set(), previousDispatcher = ReactDOMSharedInternals.d;
      ReactDOMSharedInternals.d = {
        f: function() {
          var previousWasRendering = previousDispatcher.f(), wasRendering = flushSyncWork$1();
          return previousWasRendering || wasRendering;
        },
        r: function(form) {
          var formInst = getInstanceFromNode(form);
          null !== formInst && 5 === formInst.tag && "form" === formInst.type ? requestFormReset$1(formInst) : previousDispatcher.r(form);
        },
        D: function(href) {
          previousDispatcher.D(href);
          preconnectAs("dns-prefetch", href, null);
        },
        C: function(href, crossOrigin) {
          previousDispatcher.C(href, crossOrigin);
          preconnectAs("preconnect", href, crossOrigin);
        },
        L: function(href, as, options) {
          previousDispatcher.L(href, as, options);
          var ownerDocument = globalDocument;
          if (ownerDocument && href && as) {
            var preloadSelector = 'link[rel="preload"][as="' + escapeSelectorAttributeValueInsideDoubleQuotes(as) + '"]';
            "image" === as ? options && options.imageSrcSet ? (preloadSelector += '[imagesrcset="' + escapeSelectorAttributeValueInsideDoubleQuotes(
              options.imageSrcSet
            ) + '"]', "string" === typeof options.imageSizes && (preloadSelector += '[imagesizes="' + escapeSelectorAttributeValueInsideDoubleQuotes(
              options.imageSizes
            ) + '"]')) : preloadSelector += '[href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]' : preloadSelector += '[href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]';
            var key = preloadSelector;
            switch (as) {
              case "style":
                key = getStyleKey(href);
                break;
              case "script":
                key = getScriptKey(href);
            }
            preloadPropsMap.has(key) || (href = assign2(
              {
                rel: "preload",
                href: "image" === as && options && options.imageSrcSet ? void 0 : href,
                as
              },
              options
            ), preloadPropsMap.set(key, href), null !== ownerDocument.querySelector(preloadSelector) || "style" === as && ownerDocument.querySelector(
              getStylesheetSelectorFromKey(key)
            ) || "script" === as && ownerDocument.querySelector(getScriptSelectorFromKey(key)) || (as = ownerDocument.createElement("link"), setInitialProperties(as, "link", href), markNodeAsHoistable(as), ownerDocument.head.appendChild(as)));
          }
        },
        m: function(href, options) {
          previousDispatcher.m(href, options);
          var ownerDocument = globalDocument;
          if (ownerDocument && href) {
            var as = options && "string" === typeof options.as ? options.as : "script", preloadSelector = 'link[rel="modulepreload"][as="' + escapeSelectorAttributeValueInsideDoubleQuotes(as) + '"][href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]', key = preloadSelector;
            switch (as) {
              case "audioworklet":
              case "paintworklet":
              case "serviceworker":
              case "sharedworker":
              case "worker":
              case "script":
                key = getScriptKey(href);
            }
            if (!preloadPropsMap.has(key) && (href = assign2({ rel: "modulepreload", href }, options), preloadPropsMap.set(key, href), null === ownerDocument.querySelector(preloadSelector))) {
              switch (as) {
                case "audioworklet":
                case "paintworklet":
                case "serviceworker":
                case "sharedworker":
                case "worker":
                case "script":
                  if (ownerDocument.querySelector(getScriptSelectorFromKey(key)))
                    return;
              }
              as = ownerDocument.createElement("link");
              setInitialProperties(as, "link", href);
              markNodeAsHoistable(as);
              ownerDocument.head.appendChild(as);
            }
          }
        },
        X: function(src, options) {
          previousDispatcher.X(src, options);
          var ownerDocument = globalDocument;
          if (ownerDocument && src) {
            var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts, key = getScriptKey(src), resource = scripts.get(key);
            resource || (resource = ownerDocument.querySelector(
              getScriptSelectorFromKey(key)
            ), resource || (src = assign2({ src, async: true }, options), (options = preloadPropsMap.get(key)) && adoptPreloadPropsForScript(src, options), resource = ownerDocument.createElement("script"), markNodeAsHoistable(resource), setInitialProperties(resource, "link", src), ownerDocument.head.appendChild(resource)), resource = {
              type: "script",
              instance: resource,
              count: 1,
              state: null
            }, scripts.set(key, resource));
          }
        },
        S: function(href, precedence, options) {
          previousDispatcher.S(href, precedence, options);
          var ownerDocument = globalDocument;
          if (ownerDocument && href) {
            var styles = getResourcesFromRoot(ownerDocument).hoistableStyles, key = getStyleKey(href);
            precedence = precedence || "default";
            var resource = styles.get(key);
            if (!resource) {
              var state = { loading: NotLoaded, preload: null };
              if (resource = ownerDocument.querySelector(
                getStylesheetSelectorFromKey(key)
              ))
                state.loading = Loaded | Inserted;
              else {
                href = assign2(
                  {
                    rel: "stylesheet",
                    href,
                    "data-precedence": precedence
                  },
                  options
                );
                (options = preloadPropsMap.get(key)) && adoptPreloadPropsForStylesheet(href, options);
                var link = resource = ownerDocument.createElement("link");
                markNodeAsHoistable(link);
                setInitialProperties(link, "link", href);
                link._p = new Promise(function(resolve, reject) {
                  link.onload = resolve;
                  link.onerror = reject;
                });
                link.addEventListener("load", function() {
                  state.loading |= Loaded;
                });
                link.addEventListener("error", function() {
                  state.loading |= Errored;
                });
                state.loading |= Inserted;
                insertStylesheet(resource, precedence, ownerDocument);
              }
              resource = {
                type: "stylesheet",
                instance: resource,
                count: 1,
                state
              };
              styles.set(key, resource);
            }
          }
        },
        M: function(src, options) {
          previousDispatcher.M(src, options);
          var ownerDocument = globalDocument;
          if (ownerDocument && src) {
            var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts, key = getScriptKey(src), resource = scripts.get(key);
            resource || (resource = ownerDocument.querySelector(
              getScriptSelectorFromKey(key)
            ), resource || (src = assign2({ src, async: true, type: "module" }, options), (options = preloadPropsMap.get(key)) && adoptPreloadPropsForScript(src, options), resource = ownerDocument.createElement("script"), markNodeAsHoistable(resource), setInitialProperties(resource, "link", src), ownerDocument.head.appendChild(resource)), resource = {
              type: "script",
              instance: resource,
              count: 1,
              state: null
            }, scripts.set(key, resource));
          }
        }
      };
      var globalDocument = "undefined" === typeof document ? null : document, tagCaches = null, suspendedState = null, LAST_PRECEDENCE = null, precedencesByRoot = null, NotPendingTransition = NotPending, HostTransitionContext = {
        $$typeof: REACT_CONTEXT_TYPE,
        Provider: null,
        Consumer: null,
        _currentValue: NotPendingTransition,
        _currentValue2: NotPendingTransition,
        _threadCount: 0
      }, badgeFormat = "%c%s%c ", badgeStyle = "background: #e6e6e6;background: light-dark(rgba(0,0,0,0.1), rgba(255,255,255,0.25));color: #000000;color: light-dark(#000000, #ffffff);border-radius: 2px", resetStyle = "", pad = " ", bind = Function.prototype.bind;
      var didWarnAboutNestedUpdates = false;
      var overrideHookState = null, overrideHookStateDeletePath = null, overrideHookStateRenamePath = null, overrideProps = null, overridePropsDeletePath = null, overridePropsRenamePath = null, scheduleUpdate = null, setErrorHandler = null, setSuspenseHandler = null;
      overrideHookState = function(fiber, id, path, value) {
        id = findHook(fiber, id);
        null !== id && (path = copyWithSetImpl(id.memoizedState, path, 0, value), id.memoizedState = path, id.baseState = path, fiber.memoizedProps = assign2({}, fiber.memoizedProps), path = enqueueConcurrentRenderForLane(fiber, 2), null !== path && scheduleUpdateOnFiber(path, fiber, 2));
      };
      overrideHookStateDeletePath = function(fiber, id, path) {
        id = findHook(fiber, id);
        null !== id && (path = copyWithDeleteImpl(id.memoizedState, path, 0), id.memoizedState = path, id.baseState = path, fiber.memoizedProps = assign2({}, fiber.memoizedProps), path = enqueueConcurrentRenderForLane(fiber, 2), null !== path && scheduleUpdateOnFiber(path, fiber, 2));
      };
      overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
        id = findHook(fiber, id);
        null !== id && (oldPath = copyWithRename(id.memoizedState, oldPath, newPath), id.memoizedState = oldPath, id.baseState = oldPath, fiber.memoizedProps = assign2({}, fiber.memoizedProps), oldPath = enqueueConcurrentRenderForLane(fiber, 2), null !== oldPath && scheduleUpdateOnFiber(oldPath, fiber, 2));
      };
      overrideProps = function(fiber, path, value) {
        fiber.pendingProps = copyWithSetImpl(fiber.memoizedProps, path, 0, value);
        fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
        path = enqueueConcurrentRenderForLane(fiber, 2);
        null !== path && scheduleUpdateOnFiber(path, fiber, 2);
      };
      overridePropsDeletePath = function(fiber, path) {
        fiber.pendingProps = copyWithDeleteImpl(fiber.memoizedProps, path, 0);
        fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
        path = enqueueConcurrentRenderForLane(fiber, 2);
        null !== path && scheduleUpdateOnFiber(path, fiber, 2);
      };
      overridePropsRenamePath = function(fiber, oldPath, newPath) {
        fiber.pendingProps = copyWithRename(
          fiber.memoizedProps,
          oldPath,
          newPath
        );
        fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
        oldPath = enqueueConcurrentRenderForLane(fiber, 2);
        null !== oldPath && scheduleUpdateOnFiber(oldPath, fiber, 2);
      };
      scheduleUpdate = function(fiber) {
        var root2 = enqueueConcurrentRenderForLane(fiber, 2);
        null !== root2 && scheduleUpdateOnFiber(root2, fiber, 2);
      };
      setErrorHandler = function(newShouldErrorImpl) {
        shouldErrorImpl = newShouldErrorImpl;
      };
      setSuspenseHandler = function(newShouldSuspendImpl) {
        shouldSuspendImpl = newShouldSuspendImpl;
      };
      var _enabled = true, return_targetInst = null, hasScheduledReplayAttempt = false, queuedFocus = null, queuedDrag = null, queuedMouse = null, queuedPointers = /* @__PURE__ */ new Map(), queuedPointerCaptures = /* @__PURE__ */ new Map(), queuedExplicitHydrationTargets = [], discreteReplayableEvents = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(
        " "
      ), lastScheduledReplayQueue = null;
      ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
        var root2 = this._internalRoot;
        if (null === root2) throw Error("Cannot update an unmounted root.");
        var args = arguments;
        "function" === typeof args[1] ? console.error(
          "does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect()."
        ) : isValidContainer(args[1]) ? console.error(
          "You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root."
        ) : "undefined" !== typeof args[1] && console.error(
          "You passed a second argument to root.render(...) but it only accepts one argument."
        );
        args = children;
        var current2 = root2.current, lane = requestUpdateLane(current2);
        updateContainerImpl(current2, lane, args, root2, null, null);
      };
      ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
        var args = arguments;
        "function" === typeof args[0] && console.error(
          "does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect()."
        );
        args = this._internalRoot;
        if (null !== args) {
          this._internalRoot = null;
          var container = args.containerInfo;
          (executionContext & (RenderContext | CommitContext)) !== NoContext && console.error(
            "Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition."
          );
          updateContainerImpl(args.current, 2, null, args, null, null);
          flushSyncWork$1();
          container[internalContainerInstanceKey] = null;
        }
      };
      ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function(target) {
        if (target) {
          var updatePriority = resolveUpdatePriority();
          target = { blockedOn: null, target, priority: updatePriority };
          for (var i = 0; i < queuedExplicitHydrationTargets.length && 0 !== updatePriority && updatePriority < queuedExplicitHydrationTargets[i].priority; i++) ;
          queuedExplicitHydrationTargets.splice(i, 0, target);
          0 === i && attemptExplicitHydrationTarget(target);
        }
      };
      (function() {
        var isomorphicReactPackageVersion = React7.version;
        if ("19.1.0" !== isomorphicReactPackageVersion)
          throw Error(
            'Incompatible React versions: The "react" and "react-dom" packages must have the exact same version. Instead got:\n  - react:      ' + (isomorphicReactPackageVersion + "\n  - react-dom:  19.1.0\nLearn more: https://react.dev/warnings/version-mismatch")
          );
      })();
      "function" === typeof Map && null != Map.prototype && "function" === typeof Map.prototype.forEach && "function" === typeof Set && null != Set.prototype && "function" === typeof Set.prototype.clear && "function" === typeof Set.prototype.forEach || console.error(
        "React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://react.dev/link/react-polyfills"
      );
      ReactDOMSharedInternals.findDOMNode = function(componentOrElement) {
        var fiber = componentOrElement._reactInternals;
        if (void 0 === fiber) {
          if ("function" === typeof componentOrElement.render)
            throw Error("Unable to find node on an unmounted component.");
          componentOrElement = Object.keys(componentOrElement).join(",");
          throw Error(
            "Argument appears to not be a ReactComponent. Keys: " + componentOrElement
          );
        }
        componentOrElement = findCurrentFiberUsingSlowPath(fiber);
        componentOrElement = null !== componentOrElement ? findCurrentHostFiberImpl(componentOrElement) : null;
        componentOrElement = null === componentOrElement ? null : componentOrElement.stateNode;
        return componentOrElement;
      };
      if (!function() {
        var internals = {
          bundleType: 1,
          version: "19.1.0",
          rendererPackageName: "react-dom",
          currentDispatcherRef: ReactSharedInternals,
          reconcilerVersion: "19.1.0"
        };
        internals.overrideHookState = overrideHookState;
        internals.overrideHookStateDeletePath = overrideHookStateDeletePath;
        internals.overrideHookStateRenamePath = overrideHookStateRenamePath;
        internals.overrideProps = overrideProps;
        internals.overridePropsDeletePath = overridePropsDeletePath;
        internals.overridePropsRenamePath = overridePropsRenamePath;
        internals.scheduleUpdate = scheduleUpdate;
        internals.setErrorHandler = setErrorHandler;
        internals.setSuspenseHandler = setSuspenseHandler;
        internals.scheduleRefresh = scheduleRefresh;
        internals.scheduleRoot = scheduleRoot;
        internals.setRefreshHandler = setRefreshHandler;
        internals.getCurrentFiber = getCurrentFiberForDevTools;
        internals.getLaneLabelMap = getLaneLabelMap;
        internals.injectProfilingHooks = injectProfilingHooks;
        return injectInternals(internals);
      }() && canUseDOM && window.top === window.self && (-1 < navigator.userAgent.indexOf("Chrome") && -1 === navigator.userAgent.indexOf("Edge") || -1 < navigator.userAgent.indexOf("Firefox"))) {
        var protocol = window.location.protocol;
        /^(https?|file):$/.test(protocol) && console.info(
          "%cDownload the React DevTools for a better development experience: https://react.dev/link/react-devtools" + ("file:" === protocol ? "\nYou might need to use a local HTTP server (instead of file://): https://react.dev/link/react-devtools-faq" : ""),
          "font-weight:bold"
        );
      }
      exports2.createRoot = function(container, options) {
        if (!isValidContainer(container))
          throw Error("Target container is not a DOM element.");
        warnIfReactDOMContainerInDEV(container);
        var isStrictMode = false, identifierPrefix = "", onUncaughtError = defaultOnUncaughtError, onCaughtError = defaultOnCaughtError, onRecoverableError = defaultOnRecoverableError, transitionCallbacks = null;
        null !== options && void 0 !== options && (options.hydrate ? console.warn(
          "hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead."
        ) : "object" === typeof options && null !== options && options.$$typeof === REACT_ELEMENT_TYPE && console.error(
          "You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);"
        ), true === options.unstable_strictMode && (isStrictMode = true), void 0 !== options.identifierPrefix && (identifierPrefix = options.identifierPrefix), void 0 !== options.onUncaughtError && (onUncaughtError = options.onUncaughtError), void 0 !== options.onCaughtError && (onCaughtError = options.onCaughtError), void 0 !== options.onRecoverableError && (onRecoverableError = options.onRecoverableError), void 0 !== options.unstable_transitionCallbacks && (transitionCallbacks = options.unstable_transitionCallbacks));
        options = createFiberRoot(
          container,
          1,
          false,
          null,
          null,
          isStrictMode,
          identifierPrefix,
          onUncaughtError,
          onCaughtError,
          onRecoverableError,
          transitionCallbacks,
          null
        );
        container[internalContainerInstanceKey] = options.current;
        listenToAllSupportedEvents(container);
        return new ReactDOMRoot(options);
      };
      exports2.hydrateRoot = function(container, initialChildren, options) {
        if (!isValidContainer(container))
          throw Error("Target container is not a DOM element.");
        warnIfReactDOMContainerInDEV(container);
        void 0 === initialChildren && console.error(
          "Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)"
        );
        var isStrictMode = false, identifierPrefix = "", onUncaughtError = defaultOnUncaughtError, onCaughtError = defaultOnCaughtError, onRecoverableError = defaultOnRecoverableError, transitionCallbacks = null, formState = null;
        null !== options && void 0 !== options && (true === options.unstable_strictMode && (isStrictMode = true), void 0 !== options.identifierPrefix && (identifierPrefix = options.identifierPrefix), void 0 !== options.onUncaughtError && (onUncaughtError = options.onUncaughtError), void 0 !== options.onCaughtError && (onCaughtError = options.onCaughtError), void 0 !== options.onRecoverableError && (onRecoverableError = options.onRecoverableError), void 0 !== options.unstable_transitionCallbacks && (transitionCallbacks = options.unstable_transitionCallbacks), void 0 !== options.formState && (formState = options.formState));
        initialChildren = createFiberRoot(
          container,
          1,
          true,
          initialChildren,
          null != options ? options : null,
          isStrictMode,
          identifierPrefix,
          onUncaughtError,
          onCaughtError,
          onRecoverableError,
          transitionCallbacks,
          formState
        );
        initialChildren.context = getContextForSubtree(null);
        options = initialChildren.current;
        isStrictMode = requestUpdateLane(options);
        isStrictMode = getBumpedLaneForHydrationByLane(isStrictMode);
        identifierPrefix = createUpdate(isStrictMode);
        identifierPrefix.callback = null;
        enqueueUpdate(options, identifierPrefix, isStrictMode);
        options = isStrictMode;
        initialChildren.current.lanes = options;
        markRootUpdated$1(initialChildren, options);
        ensureRootIsScheduled(initialChildren);
        container[internalContainerInstanceKey] = initialChildren.current;
        listenToAllSupportedEvents(container);
        return new ReactDOMHydrationRoot(initialChildren);
      };
      exports2.version = "19.1.0";
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
    }();
  }
});

// node_modules/react-dom/client.js
var require_client = __commonJS({
  "node_modules/react-dom/client.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    function checkDCE() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
        return;
      }
      if (define_process_env_default.NODE_ENV !== "production") {
        throw new Error("^_^");
      }
      try {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
      } catch (err) {
        console.error(err);
      }
    }
    if (define_process_env_default.NODE_ENV === "production") {
      checkDCE();
      module2.exports = require_react_dom_client_production();
    } else {
      module2.exports = require_react_dom_client_development();
    }
  }
});

// node_modules/@babel/runtime/helpers/typeof.js
var require_typeof = __commonJS({
  "node_modules/@babel/runtime/helpers/typeof.js"(exports2, module2) {
    init_define_process_env();
    function _typeof(o) {
      "@babel/helpers - typeof";
      return module2.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, module2.exports.__esModule = true, module2.exports["default"] = module2.exports, _typeof(o);
    }
    module2.exports = _typeof, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/interopRequireWildcard.js
var require_interopRequireWildcard = __commonJS({
  "node_modules/@babel/runtime/helpers/interopRequireWildcard.js"(exports2, module2) {
    init_define_process_env();
    var _typeof = require_typeof()["default"];
    function _getRequireWildcardCache(e) {
      if ("function" != typeof WeakMap) return null;
      var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(e2) {
        return e2 ? t : r;
      })(e);
    }
    function _interopRequireWildcard(e, r) {
      if (!r && e && e.__esModule) return e;
      if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
        "default": e
      };
      var t = _getRequireWildcardCache(r);
      if (t && t.has(e)) return t.get(e);
      var n = {
        __proto__: null
      }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
      return n["default"] = e, t && t.set(e, n), n;
    }
    module2.exports = _interopRequireWildcard, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/interopRequireDefault.js
var require_interopRequireDefault = __commonJS({
  "node_modules/@babel/runtime/helpers/interopRequireDefault.js"(exports2, module2) {
    init_define_process_env();
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : {
        "default": e
      };
    }
    module2.exports = _interopRequireDefault, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@mui/utils/formatMuiErrorMessage/formatMuiErrorMessage.js
var require_formatMuiErrorMessage = __commonJS({
  "node_modules/@mui/utils/formatMuiErrorMessage/formatMuiErrorMessage.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = formatMuiErrorMessage;
    function formatMuiErrorMessage(code, ...args) {
      const url = new URL(`https://mui.com/production-error/?code=${code}`);
      args.forEach((arg) => url.searchParams.append("args[]", arg));
      return `Minified MUI error #${code}; visit ${url} for the full message.`;
    }
  }
});

// node_modules/@mui/utils/formatMuiErrorMessage/index.js
var require_formatMuiErrorMessage2 = __commonJS({
  "node_modules/@mui/utils/formatMuiErrorMessage/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _formatMuiErrorMessage.default;
      }
    });
    var _formatMuiErrorMessage = _interopRequireDefault(require_formatMuiErrorMessage());
  }
});

// node_modules/@babel/runtime/helpers/esm/extends.js
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
var init_extends = __esm({
  "node_modules/@babel/runtime/helpers/esm/extends.js"() {
    init_define_process_env();
  }
});

// node_modules/@emotion/sheet/dist/emotion-sheet.esm.js
var emotion_sheet_esm_exports = {};
__export(emotion_sheet_esm_exports, {
  StyleSheet: () => StyleSheet
});
function sheetForTag(tag) {
  if (tag.sheet) {
    return tag.sheet;
  }
  for (var i = 0; i < document.styleSheets.length; i++) {
    if (document.styleSheets[i].ownerNode === tag) {
      return document.styleSheets[i];
    }
  }
  return void 0;
}
function createStyleElement(options) {
  var tag = document.createElement("style");
  tag.setAttribute("data-emotion", options.key);
  if (options.nonce !== void 0) {
    tag.setAttribute("nonce", options.nonce);
  }
  tag.appendChild(document.createTextNode(""));
  tag.setAttribute("data-s", "");
  return tag;
}
var isDevelopment, StyleSheet;
var init_emotion_sheet_esm = __esm({
  "node_modules/@emotion/sheet/dist/emotion-sheet.esm.js"() {
    init_define_process_env();
    isDevelopment = false;
    StyleSheet = /* @__PURE__ */ function() {
      function StyleSheet2(options) {
        var _this = this;
        this._insertTag = function(tag) {
          var before;
          if (_this.tags.length === 0) {
            if (_this.insertionPoint) {
              before = _this.insertionPoint.nextSibling;
            } else if (_this.prepend) {
              before = _this.container.firstChild;
            } else {
              before = _this.before;
            }
          } else {
            before = _this.tags[_this.tags.length - 1].nextSibling;
          }
          _this.container.insertBefore(tag, before);
          _this.tags.push(tag);
        };
        this.isSpeedy = options.speedy === void 0 ? !isDevelopment : options.speedy;
        this.tags = [];
        this.ctr = 0;
        this.nonce = options.nonce;
        this.key = options.key;
        this.container = options.container;
        this.prepend = options.prepend;
        this.insertionPoint = options.insertionPoint;
        this.before = null;
      }
      var _proto = StyleSheet2.prototype;
      _proto.hydrate = function hydrate(nodes) {
        nodes.forEach(this._insertTag);
      };
      _proto.insert = function insert(rule) {
        if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
          this._insertTag(createStyleElement(this));
        }
        var tag = this.tags[this.tags.length - 1];
        if (this.isSpeedy) {
          var sheet = sheetForTag(tag);
          try {
            sheet.insertRule(rule, sheet.cssRules.length);
          } catch (e) {
          }
        } else {
          tag.appendChild(document.createTextNode(rule));
        }
        this.ctr++;
      };
      _proto.flush = function flush() {
        this.tags.forEach(function(tag) {
          var _tag$parentNode;
          return (_tag$parentNode = tag.parentNode) == null ? void 0 : _tag$parentNode.removeChild(tag);
        });
        this.tags = [];
        this.ctr = 0;
      };
      return StyleSheet2;
    }();
  }
});

// node_modules/stylis/src/Enum.js
var MS, MOZ, WEBKIT, COMMENT, RULESET, DECLARATION, IMPORT, KEYFRAMES, LAYER;
var init_Enum = __esm({
  "node_modules/stylis/src/Enum.js"() {
    init_define_process_env();
    MS = "-ms-";
    MOZ = "-moz-";
    WEBKIT = "-webkit-";
    COMMENT = "comm";
    RULESET = "rule";
    DECLARATION = "decl";
    IMPORT = "@import";
    KEYFRAMES = "@keyframes";
    LAYER = "@layer";
  }
});

// node_modules/stylis/src/Utility.js
function hash(value, length2) {
  return charat(value, 0) ^ 45 ? (((length2 << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;
}
function trim(value) {
  return value.trim();
}
function match(value, pattern) {
  return (value = pattern.exec(value)) ? value[0] : value;
}
function replace(value, pattern, replacement) {
  return value.replace(pattern, replacement);
}
function indexof(value, search) {
  return value.indexOf(search);
}
function charat(value, index) {
  return value.charCodeAt(index) | 0;
}
function substr(value, begin, end) {
  return value.slice(begin, end);
}
function strlen(value) {
  return value.length;
}
function sizeof(value) {
  return value.length;
}
function append(value, array) {
  return array.push(value), value;
}
function combine(array, callback) {
  return array.map(callback).join("");
}
var abs, from, assign;
var init_Utility = __esm({
  "node_modules/stylis/src/Utility.js"() {
    init_define_process_env();
    abs = Math.abs;
    from = String.fromCharCode;
    assign = Object.assign;
  }
});

// node_modules/stylis/src/Tokenizer.js
function node(value, root, parent, type, props, children, length2) {
  return { value, root, parent, type, props, children, line, column, length: length2, return: "" };
}
function copy(root, props) {
  return assign(node("", null, null, "", null, null, 0), root, { length: -root.length }, props);
}
function char() {
  return character;
}
function prev() {
  character = position > 0 ? charat(characters, --position) : 0;
  if (column--, character === 10)
    column = 1, line--;
  return character;
}
function next() {
  character = position < length ? charat(characters, position++) : 0;
  if (column++, character === 10)
    column = 1, line++;
  return character;
}
function peek() {
  return charat(characters, position);
}
function caret() {
  return position;
}
function slice(begin, end) {
  return substr(characters, begin, end);
}
function token(type) {
  switch (type) {
    // \0 \t \n \r \s whitespace token
    case 0:
    case 9:
    case 10:
    case 13:
    case 32:
      return 5;
    // ! + , / > @ ~ isolate token
    case 33:
    case 43:
    case 44:
    case 47:
    case 62:
    case 64:
    case 126:
    // ; { } breakpoint token
    case 59:
    case 123:
    case 125:
      return 4;
    // : accompanied token
    case 58:
      return 3;
    // " ' ( [ opening delimit token
    case 34:
    case 39:
    case 40:
    case 91:
      return 2;
    // ) ] closing delimit token
    case 41:
    case 93:
      return 1;
  }
  return 0;
}
function alloc(value) {
  return line = column = 1, length = strlen(characters = value), position = 0, [];
}
function dealloc(value) {
  return characters = "", value;
}
function delimit(type) {
  return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
}
function whitespace(type) {
  while (character = peek())
    if (character < 33)
      next();
    else
      break;
  return token(type) > 2 || token(character) > 3 ? "" : " ";
}
function escaping(index, count) {
  while (--count && next())
    if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
      break;
  return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32));
}
function delimiter(type) {
  while (next())
    switch (character) {
      // ] ) " '
      case type:
        return position;
      // " '
      case 34:
      case 39:
        if (type !== 34 && type !== 39)
          delimiter(character);
        break;
      // (
      case 40:
        if (type === 41)
          delimiter(type);
        break;
      // \
      case 92:
        next();
        break;
    }
  return position;
}
function commenter(type, index) {
  while (next())
    if (type + character === 47 + 10)
      break;
    else if (type + character === 42 + 42 && peek() === 47)
      break;
  return "/*" + slice(index, position - 1) + "*" + from(type === 47 ? type : next());
}
function identifier(index) {
  while (!token(peek()))
    next();
  return slice(index, position);
}
var line, column, length, position, character, characters;
var init_Tokenizer = __esm({
  "node_modules/stylis/src/Tokenizer.js"() {
    init_define_process_env();
    init_Utility();
    line = 1;
    column = 1;
    length = 0;
    position = 0;
    character = 0;
    characters = "";
  }
});

// node_modules/stylis/src/Parser.js
function compile(value) {
  return dealloc(parse("", null, null, null, [""], value = alloc(value), 0, [0], value));
}
function parse(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
  var index = 0;
  var offset = 0;
  var length2 = pseudo;
  var atrule = 0;
  var property = 0;
  var previous = 0;
  var variable = 1;
  var scanning = 1;
  var ampersand = 1;
  var character2 = 0;
  var type = "";
  var props = rules;
  var children = rulesets;
  var reference = rule;
  var characters2 = type;
  while (scanning)
    switch (previous = character2, character2 = next()) {
      // (
      case 40:
        if (previous != 108 && charat(characters2, length2 - 1) == 58) {
          if (indexof(characters2 += replace(delimit(character2), "&", "&\f"), "&\f") != -1)
            ampersand = -1;
          break;
        }
      // " ' [
      case 34:
      case 39:
      case 91:
        characters2 += delimit(character2);
        break;
      // \t \n \r \s
      case 9:
      case 10:
      case 13:
      case 32:
        characters2 += whitespace(previous);
        break;
      // \
      case 92:
        characters2 += escaping(caret() - 1, 7);
        continue;
      // /
      case 47:
        switch (peek()) {
          case 42:
          case 47:
            append(comment(commenter(next(), caret()), root, parent), declarations);
            break;
          default:
            characters2 += "/";
        }
        break;
      // {
      case 123 * variable:
        points[index++] = strlen(characters2) * ampersand;
      // } ; \0
      case 125 * variable:
      case 59:
      case 0:
        switch (character2) {
          // \0 }
          case 0:
          case 125:
            scanning = 0;
          // ;
          case 59 + offset:
            if (ampersand == -1) characters2 = replace(characters2, /\f/g, "");
            if (property > 0 && strlen(characters2) - length2)
              append(property > 32 ? declaration(characters2 + ";", rule, parent, length2 - 1) : declaration(replace(characters2, " ", "") + ";", rule, parent, length2 - 2), declarations);
            break;
          // @ ;
          case 59:
            characters2 += ";";
          // { rule/at-rule
          default:
            append(reference = ruleset(characters2, root, parent, index, offset, rules, points, type, props = [], children = [], length2), rulesets);
            if (character2 === 123)
              if (offset === 0)
                parse(characters2, root, reference, reference, props, rulesets, length2, points, children);
              else
                switch (atrule === 99 && charat(characters2, 3) === 110 ? 100 : atrule) {
                  // d l m s
                  case 100:
                  case 108:
                  case 109:
                  case 115:
                    parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length2), children), rules, children, length2, points, rule ? props : children);
                    break;
                  default:
                    parse(characters2, reference, reference, reference, [""], children, 0, points, children);
                }
        }
        index = offset = property = 0, variable = ampersand = 1, type = characters2 = "", length2 = pseudo;
        break;
      // :
      case 58:
        length2 = 1 + strlen(characters2), property = previous;
      default:
        if (variable < 1) {
          if (character2 == 123)
            --variable;
          else if (character2 == 125 && variable++ == 0 && prev() == 125)
            continue;
        }
        switch (characters2 += from(character2), character2 * variable) {
          // &
          case 38:
            ampersand = offset > 0 ? 1 : (characters2 += "\f", -1);
            break;
          // ,
          case 44:
            points[index++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
            break;
          // @
          case 64:
            if (peek() === 45)
              characters2 += delimit(next());
            atrule = peek(), offset = length2 = strlen(type = characters2 += identifier(caret())), character2++;
            break;
          // -
          case 45:
            if (previous === 45 && strlen(characters2) == 2)
              variable = 0;
        }
    }
  return rulesets;
}
function ruleset(value, root, parent, index, offset, rules, points, type, props, children, length2) {
  var post = offset - 1;
  var rule = offset === 0 ? rules : [""];
  var size = sizeof(rule);
  for (var i = 0, j = 0, k = 0; i < index; ++i)
    for (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size; ++x)
      if (z = trim(j > 0 ? rule[x] + " " + y : replace(y, /&\f/g, rule[x])))
        props[k++] = z;
  return node(value, root, parent, offset === 0 ? RULESET : type, props, children, length2);
}
function comment(value, root, parent) {
  return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0);
}
function declaration(value, root, parent, length2) {
  return node(value, root, parent, DECLARATION, substr(value, 0, length2), substr(value, length2 + 1, -1), length2);
}
var init_Parser = __esm({
  "node_modules/stylis/src/Parser.js"() {
    init_define_process_env();
    init_Enum();
    init_Utility();
    init_Tokenizer();
  }
});

// node_modules/stylis/src/Prefixer.js
var init_Prefixer = __esm({
  "node_modules/stylis/src/Prefixer.js"() {
    init_define_process_env();
  }
});

// node_modules/stylis/src/Serializer.js
function serialize(children, callback) {
  var output = "";
  var length2 = sizeof(children);
  for (var i = 0; i < length2; i++)
    output += callback(children[i], i, children, callback) || "";
  return output;
}
function stringify(element, index, children, callback) {
  switch (element.type) {
    case LAYER:
      if (element.children.length) break;
    case IMPORT:
    case DECLARATION:
      return element.return = element.return || element.value;
    case COMMENT:
      return "";
    case KEYFRAMES:
      return element.return = element.value + "{" + serialize(element.children, callback) + "}";
    case RULESET:
      element.value = element.props.join(",");
  }
  return strlen(children = serialize(element.children, callback)) ? element.return = element.value + "{" + children + "}" : "";
}
var init_Serializer = __esm({
  "node_modules/stylis/src/Serializer.js"() {
    init_define_process_env();
    init_Enum();
    init_Utility();
  }
});

// node_modules/stylis/src/Middleware.js
function middleware(collection) {
  var length2 = sizeof(collection);
  return function(element, index, children, callback) {
    var output = "";
    for (var i = 0; i < length2; i++)
      output += collection[i](element, index, children, callback) || "";
    return output;
  };
}
function rulesheet(callback) {
  return function(element) {
    if (!element.root) {
      if (element = element.return)
        callback(element);
    }
  };
}
var init_Middleware = __esm({
  "node_modules/stylis/src/Middleware.js"() {
    init_define_process_env();
    init_Utility();
  }
});

// node_modules/stylis/index.js
var init_stylis = __esm({
  "node_modules/stylis/index.js"() {
    init_define_process_env();
    init_Enum();
    init_Utility();
    init_Parser();
    init_Prefixer();
    init_Tokenizer();
    init_Serializer();
    init_Middleware();
  }
});

// node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.esm.js
var weakMemoize;
var init_emotion_weak_memoize_esm = __esm({
  "node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.esm.js"() {
    init_define_process_env();
    weakMemoize = function weakMemoize2(func) {
      var cache = /* @__PURE__ */ new WeakMap();
      return function(arg) {
        if (cache.has(arg)) {
          return cache.get(arg);
        }
        var ret = func(arg);
        cache.set(arg, ret);
        return ret;
      };
    };
  }
});

// node_modules/@emotion/memoize/dist/emotion-memoize.esm.js
function memoize(fn) {
  var cache = /* @__PURE__ */ Object.create(null);
  return function(arg) {
    if (cache[arg] === void 0) cache[arg] = fn(arg);
    return cache[arg];
  };
}
var init_emotion_memoize_esm = __esm({
  "node_modules/@emotion/memoize/dist/emotion-memoize.esm.js"() {
    init_define_process_env();
  }
});

// node_modules/@emotion/cache/dist/emotion-cache.esm.js
var emotion_cache_esm_exports = {};
__export(emotion_cache_esm_exports, {
  default: () => createCache
});
function prefix(value, length2) {
  switch (hash(value, length2)) {
    // color-adjust
    case 5103:
      return WEBKIT + "print-" + value + value;
    // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)
    case 5737:
    case 4201:
    case 3177:
    case 3433:
    case 1641:
    case 4457:
    case 2921:
    // text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break
    case 5572:
    case 6356:
    case 5844:
    case 3191:
    case 6645:
    case 3005:
    // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,
    case 6391:
    case 5879:
    case 5623:
    case 6135:
    case 4599:
    case 4855:
    // background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)
    case 4215:
    case 6389:
    case 5109:
    case 5365:
    case 5621:
    case 3829:
      return WEBKIT + value + value;
    // appearance, user-select, transform, hyphens, text-size-adjust
    case 5349:
    case 4246:
    case 4810:
    case 6968:
    case 2756:
      return WEBKIT + value + MOZ + value + MS + value + value;
    // flex, flex-direction
    case 6828:
    case 4268:
      return WEBKIT + value + MS + value + value;
    // order
    case 6165:
      return WEBKIT + value + MS + "flex-" + value + value;
    // align-items
    case 5187:
      return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
    // align-self
    case 5443:
      return WEBKIT + value + MS + "flex-item-" + replace(value, /flex-|-self/, "") + value;
    // align-content
    case 4675:
      return WEBKIT + value + MS + "flex-line-pack" + replace(value, /align-content|flex-|-self/, "") + value;
    // flex-shrink
    case 5548:
      return WEBKIT + value + MS + replace(value, "shrink", "negative") + value;
    // flex-basis
    case 5292:
      return WEBKIT + value + MS + replace(value, "basis", "preferred-size") + value;
    // flex-grow
    case 6060:
      return WEBKIT + "box-" + replace(value, "-grow", "") + WEBKIT + value + MS + replace(value, "grow", "positive") + value;
    // transition
    case 4554:
      return WEBKIT + replace(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
    // cursor
    case 6187:
      return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
    // background, background-image
    case 5495:
    case 3959:
      return replace(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
    // justify-content
    case 4968:
      return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
    // (margin|padding)-inline-(start|end)
    case 4095:
    case 3583:
    case 4068:
    case 2532:
      return replace(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
    // (min|max)?(width|height|inline-size|block-size)
    case 8116:
    case 7059:
    case 5753:
    case 5535:
    case 5445:
    case 5701:
    case 4933:
    case 4677:
    case 5533:
    case 5789:
    case 5021:
    case 4765:
      if (strlen(value) - 1 - length2 > 6) switch (charat(value, length2 + 1)) {
        // (m)ax-content, (m)in-content
        case 109:
          if (charat(value, length2 + 4) !== 45) break;
        // (f)ill-available, (f)it-content
        case 102:
          return replace(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length2 + 3) == 108 ? "$3" : "$2-$3")) + value;
        // (s)tretch
        case 115:
          return ~indexof(value, "stretch") ? prefix(replace(value, "stretch", "fill-available"), length2) + value : value;
      }
      break;
    // position: sticky
    case 4949:
      if (charat(value, length2 + 1) !== 115) break;
    // display: (flex|inline-flex)
    case 6444:
      switch (charat(value, strlen(value) - 3 - (~indexof(value, "!important") && 10))) {
        // stic(k)y
        case 107:
          return replace(value, ":", ":" + WEBKIT) + value;
        // (inline-)?fl(e)x
        case 101:
          return replace(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value;
      }
      break;
    // writing-mode
    case 5936:
      switch (charat(value, length2 + 11)) {
        // vertical-l(r)
        case 114:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
        // vertical-r(l)
        case 108:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
        // horizontal(-)tb
        case 45:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
      }
      return WEBKIT + value + MS + value + value;
  }
  return value;
}
var isBrowser, identifierWithPointTracking, toRules, getRules, fixedElements, compat, removeLabel, prefixer, getServerStylisCache, defaultStylisPlugins, createCache;
var init_emotion_cache_esm = __esm({
  "node_modules/@emotion/cache/dist/emotion-cache.esm.js"() {
    init_define_process_env();
    init_emotion_sheet_esm();
    init_stylis();
    init_emotion_weak_memoize_esm();
    init_emotion_memoize_esm();
    isBrowser = typeof document !== "undefined";
    identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index) {
      var previous = 0;
      var character2 = 0;
      while (true) {
        previous = character2;
        character2 = peek();
        if (previous === 38 && character2 === 12) {
          points[index] = 1;
        }
        if (token(character2)) {
          break;
        }
        next();
      }
      return slice(begin, position);
    };
    toRules = function toRules2(parsed, points) {
      var index = -1;
      var character2 = 44;
      do {
        switch (token(character2)) {
          case 0:
            if (character2 === 38 && peek() === 12) {
              points[index] = 1;
            }
            parsed[index] += identifierWithPointTracking(position - 1, points, index);
            break;
          case 2:
            parsed[index] += delimit(character2);
            break;
          case 4:
            if (character2 === 44) {
              parsed[++index] = peek() === 58 ? "&\f" : "";
              points[index] = parsed[index].length;
              break;
            }
          // fallthrough
          default:
            parsed[index] += from(character2);
        }
      } while (character2 = next());
      return parsed;
    };
    getRules = function getRules2(value, points) {
      return dealloc(toRules(alloc(value), points));
    };
    fixedElements = /* @__PURE__ */ new WeakMap();
    compat = function compat2(element) {
      if (element.type !== "rule" || !element.parent || // positive .length indicates that this rule contains pseudo
      // negative .length indicates that this rule has been already prefixed
      element.length < 1) {
        return;
      }
      var value = element.value;
      var parent = element.parent;
      var isImplicitRule = element.column === parent.column && element.line === parent.line;
      while (parent.type !== "rule") {
        parent = parent.parent;
        if (!parent) return;
      }
      if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
        return;
      }
      if (isImplicitRule) {
        return;
      }
      fixedElements.set(element, true);
      var points = [];
      var rules = getRules(value, points);
      var parentRules = parent.props;
      for (var i = 0, k = 0; i < rules.length; i++) {
        for (var j = 0; j < parentRules.length; j++, k++) {
          element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
        }
      }
    };
    removeLabel = function removeLabel2(element) {
      if (element.type === "decl") {
        var value = element.value;
        if (
          // charcode for l
          value.charCodeAt(0) === 108 && // charcode for b
          value.charCodeAt(2) === 98
        ) {
          element["return"] = "";
          element.value = "";
        }
      }
    };
    prefixer = function prefixer2(element, index, children, callback) {
      if (element.length > -1) {
        if (!element["return"]) switch (element.type) {
          case DECLARATION:
            element["return"] = prefix(element.value, element.length);
            break;
          case KEYFRAMES:
            return serialize([copy(element, {
              value: replace(element.value, "@", "@" + WEBKIT)
            })], callback);
          case RULESET:
            if (element.length) return combine(element.props, function(value) {
              switch (match(value, /(::plac\w+|:read-\w+)/)) {
                // :read-(only|write)
                case ":read-only":
                case ":read-write":
                  return serialize([copy(element, {
                    props: [replace(value, /:(read-\w+)/, ":" + MOZ + "$1")]
                  })], callback);
                // :placeholder
                case "::placeholder":
                  return serialize([copy(element, {
                    props: [replace(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")]
                  }), copy(element, {
                    props: [replace(value, /:(plac\w+)/, ":" + MOZ + "$1")]
                  }), copy(element, {
                    props: [replace(value, /:(plac\w+)/, MS + "input-$1")]
                  })], callback);
              }
              return "";
            });
        }
      }
    };
    getServerStylisCache = isBrowser ? void 0 : weakMemoize(function() {
      return memoize(function() {
        return {};
      });
    });
    defaultStylisPlugins = [prefixer];
    createCache = function createCache2(options) {
      var key = options.key;
      if (isBrowser && key === "css") {
        var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
        Array.prototype.forEach.call(ssrStyles, function(node2) {
          var dataEmotionAttribute = node2.getAttribute("data-emotion");
          if (dataEmotionAttribute.indexOf(" ") === -1) {
            return;
          }
          document.head.appendChild(node2);
          node2.setAttribute("data-s", "");
        });
      }
      var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
      var inserted = {};
      var container;
      var nodesToHydrate = [];
      if (isBrowser) {
        container = options.container || document.head;
        Array.prototype.forEach.call(
          // this means we will ignore elements which don't have a space in them which
          // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
          document.querySelectorAll('style[data-emotion^="' + key + ' "]'),
          function(node2) {
            var attrib = node2.getAttribute("data-emotion").split(" ");
            for (var i = 1; i < attrib.length; i++) {
              inserted[attrib[i]] = true;
            }
            nodesToHydrate.push(node2);
          }
        );
      }
      var _insert;
      var omnipresentPlugins = [compat, removeLabel];
      if (!getServerStylisCache) {
        var currentSheet;
        var finalizingPlugins = [stringify, rulesheet(function(rule) {
          currentSheet.insert(rule);
        })];
        var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
        var stylis = function stylis2(styles) {
          return serialize(compile(styles), serializer);
        };
        _insert = function insert(selector, serialized, sheet, shouldCache) {
          currentSheet = sheet;
          stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
          if (shouldCache) {
            cache.inserted[serialized.name] = true;
          }
        };
      } else {
        var _finalizingPlugins = [stringify];
        var _serializer = middleware(omnipresentPlugins.concat(stylisPlugins, _finalizingPlugins));
        var _stylis = function _stylis2(styles) {
          return serialize(compile(styles), _serializer);
        };
        var serverStylisCache = getServerStylisCache(stylisPlugins)(key);
        var getRules3 = function getRules4(selector, serialized) {
          var name = serialized.name;
          if (serverStylisCache[name] === void 0) {
            serverStylisCache[name] = _stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
          }
          return serverStylisCache[name];
        };
        _insert = function _insert2(selector, serialized, sheet, shouldCache) {
          var name = serialized.name;
          var rules = getRules3(selector, serialized);
          if (cache.compat === void 0) {
            if (shouldCache) {
              cache.inserted[name] = true;
            }
            return rules;
          } else {
            if (shouldCache) {
              cache.inserted[name] = rules;
            } else {
              return rules;
            }
          }
        };
      }
      var cache = {
        key,
        sheet: new StyleSheet({
          key,
          container,
          nonce: options.nonce,
          speedy: options.speedy,
          prepend: options.prepend,
          insertionPoint: options.insertionPoint
        }),
        nonce: options.nonce,
        inserted,
        registered: {},
        insert: _insert
      };
      cache.sheet.hydrate(nodesToHydrate);
      return cache;
    };
  }
});

// node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.production.min.js
var require_react_is_production_min = __commonJS({
  "node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.production.min.js"(exports2) {
    "use strict";
    init_define_process_env();
    var b = "function" === typeof Symbol && Symbol.for;
    var c = b ? Symbol.for("react.element") : 60103;
    var d = b ? Symbol.for("react.portal") : 60106;
    var e = b ? Symbol.for("react.fragment") : 60107;
    var f = b ? Symbol.for("react.strict_mode") : 60108;
    var g = b ? Symbol.for("react.profiler") : 60114;
    var h = b ? Symbol.for("react.provider") : 60109;
    var k = b ? Symbol.for("react.context") : 60110;
    var l = b ? Symbol.for("react.async_mode") : 60111;
    var m = b ? Symbol.for("react.concurrent_mode") : 60111;
    var n = b ? Symbol.for("react.forward_ref") : 60112;
    var p = b ? Symbol.for("react.suspense") : 60113;
    var q = b ? Symbol.for("react.suspense_list") : 60120;
    var r = b ? Symbol.for("react.memo") : 60115;
    var t = b ? Symbol.for("react.lazy") : 60116;
    var v = b ? Symbol.for("react.block") : 60121;
    var w = b ? Symbol.for("react.fundamental") : 60117;
    var x = b ? Symbol.for("react.responder") : 60118;
    var y = b ? Symbol.for("react.scope") : 60119;
    function z(a) {
      if ("object" === typeof a && null !== a) {
        var u = a.$$typeof;
        switch (u) {
          case c:
            switch (a = a.type, a) {
              case l:
              case m:
              case e:
              case g:
              case f:
              case p:
                return a;
              default:
                switch (a = a && a.$$typeof, a) {
                  case k:
                  case n:
                  case t:
                  case r:
                  case h:
                    return a;
                  default:
                    return u;
                }
            }
          case d:
            return u;
        }
      }
    }
    function A(a) {
      return z(a) === m;
    }
    exports2.AsyncMode = l;
    exports2.ConcurrentMode = m;
    exports2.ContextConsumer = k;
    exports2.ContextProvider = h;
    exports2.Element = c;
    exports2.ForwardRef = n;
    exports2.Fragment = e;
    exports2.Lazy = t;
    exports2.Memo = r;
    exports2.Portal = d;
    exports2.Profiler = g;
    exports2.StrictMode = f;
    exports2.Suspense = p;
    exports2.isAsyncMode = function(a) {
      return A(a) || z(a) === l;
    };
    exports2.isConcurrentMode = A;
    exports2.isContextConsumer = function(a) {
      return z(a) === k;
    };
    exports2.isContextProvider = function(a) {
      return z(a) === h;
    };
    exports2.isElement = function(a) {
      return "object" === typeof a && null !== a && a.$$typeof === c;
    };
    exports2.isForwardRef = function(a) {
      return z(a) === n;
    };
    exports2.isFragment = function(a) {
      return z(a) === e;
    };
    exports2.isLazy = function(a) {
      return z(a) === t;
    };
    exports2.isMemo = function(a) {
      return z(a) === r;
    };
    exports2.isPortal = function(a) {
      return z(a) === d;
    };
    exports2.isProfiler = function(a) {
      return z(a) === g;
    };
    exports2.isStrictMode = function(a) {
      return z(a) === f;
    };
    exports2.isSuspense = function(a) {
      return z(a) === p;
    };
    exports2.isValidElementType = function(a) {
      return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === w || a.$$typeof === x || a.$$typeof === y || a.$$typeof === v);
    };
    exports2.typeOf = z;
  }
});

// node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js"(exports2) {
    "use strict";
    init_define_process_env();
    if (define_process_env_default.NODE_ENV !== "production") {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment5 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports2.AsyncMode = AsyncMode;
        exports2.ConcurrentMode = ConcurrentMode;
        exports2.ContextConsumer = ContextConsumer;
        exports2.ContextProvider = ContextProvider;
        exports2.Element = Element2;
        exports2.ForwardRef = ForwardRef;
        exports2.Fragment = Fragment5;
        exports2.Lazy = Lazy;
        exports2.Memo = Memo;
        exports2.Portal = Portal;
        exports2.Profiler = Profiler;
        exports2.StrictMode = StrictMode;
        exports2.Suspense = Suspense;
        exports2.isAsyncMode = isAsyncMode;
        exports2.isConcurrentMode = isConcurrentMode;
        exports2.isContextConsumer = isContextConsumer;
        exports2.isContextProvider = isContextProvider;
        exports2.isElement = isElement;
        exports2.isForwardRef = isForwardRef;
        exports2.isFragment = isFragment;
        exports2.isLazy = isLazy;
        exports2.isMemo = isMemo;
        exports2.isPortal = isPortal;
        exports2.isProfiler = isProfiler;
        exports2.isStrictMode = isStrictMode;
        exports2.isSuspense = isSuspense;
        exports2.isValidElementType = isValidElementType;
        exports2.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/hoist-non-react-statics/node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/hoist-non-react-statics/node_modules/react-is/index.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    if (define_process_env_default.NODE_ENV === "production") {
      module2.exports = require_react_is_production_min();
    } else {
      module2.exports = require_react_is_development();
    }
  }
});

// node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
var require_hoist_non_react_statics_cjs = __commonJS({
  "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var reactIs = require_react_is();
    var REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true
    };
    var FORWARD_REF_STATICS = {
      "$$typeof": true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
    };
    var MEMO_STATICS = {
      "$$typeof": true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
    function getStatics(component) {
      if (reactIs.isMemo(component)) {
        return MEMO_STATICS;
      }
      return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
    }
    var defineProperty = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;
    function hoistNonReactStatics2(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== "string") {
        if (objectPrototype) {
          var inheritedComponent = getPrototypeOf(sourceComponent);
          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics2(targetComponent, inheritedComponent, blacklist);
          }
        }
        var keys = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) {
          keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
            var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
            try {
              defineProperty(targetComponent, key, descriptor);
            } catch (e) {
            }
          }
        }
      }
      return targetComponent;
    }
    module2.exports = hoistNonReactStatics2;
  }
});

// node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js
var import_hoist_non_react_statics, hoistNonReactStatics;
var init_emotion_react_isolated_hnrs_esm = __esm({
  "node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js"() {
    init_define_process_env();
    import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());
    hoistNonReactStatics = function(targetComponent, sourceComponent) {
      return (0, import_hoist_non_react_statics.default)(targetComponent, sourceComponent);
    };
  }
});

// node_modules/@emotion/utils/dist/emotion-utils.esm.js
function getRegisteredStyles(registered, registeredStyles, classNames) {
  var rawClassName = "";
  classNames.split(" ").forEach(function(className) {
    if (registered[className] !== void 0) {
      registeredStyles.push(registered[className] + ";");
    } else if (className) {
      rawClassName += className + " ";
    }
  });
  return rawClassName;
}
var isBrowser2, registerStyles, insertStyles;
var init_emotion_utils_esm = __esm({
  "node_modules/@emotion/utils/dist/emotion-utils.esm.js"() {
    init_define_process_env();
    isBrowser2 = typeof document !== "undefined";
    registerStyles = function registerStyles2(cache, serialized, isStringTag) {
      var className = cache.key + "-" + serialized.name;
      if (
        // we only need to add the styles to the registered cache if the
        // class name could be used further down
        // the tree but if it's a string tag, we know it won't
        // so we don't have to add it to registered cache.
        // this improves memory usage since we can avoid storing the whole style string
        (isStringTag === false || // we need to always store it if we're in compat mode and
        // in node since emotion-server relies on whether a style is in
        // the registered cache to know whether a style is global or not
        // also, note that this check will be dead code eliminated in the browser
        isBrowser2 === false && cache.compat !== void 0) && cache.registered[className] === void 0
      ) {
        cache.registered[className] = serialized.styles;
      }
    };
    insertStyles = function insertStyles2(cache, serialized, isStringTag) {
      registerStyles(cache, serialized, isStringTag);
      var className = cache.key + "-" + serialized.name;
      if (cache.inserted[serialized.name] === void 0) {
        var stylesForSSR = "";
        var current = serialized;
        do {
          var maybeStyles = cache.insert(serialized === current ? "." + className : "", current, cache.sheet, true);
          if (!isBrowser2 && maybeStyles !== void 0) {
            stylesForSSR += maybeStyles;
          }
          current = current.next;
        } while (current !== void 0);
        if (!isBrowser2 && stylesForSSR.length !== 0) {
          return stylesForSSR;
        }
      }
    };
  }
});

// node_modules/@emotion/hash/dist/emotion-hash.esm.js
function murmur2(str) {
  var h = 0;
  var k, i = 0, len = str.length;
  for (; len >= 4; ++i, len -= 4) {
    k = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;
    k = /* Math.imul(k, m): */
    (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16);
    k ^= /* k >>> r: */
    k >>> 24;
    h = /* Math.imul(k, m): */
    (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */
    (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
  }
  switch (len) {
    case 3:
      h ^= (str.charCodeAt(i + 2) & 255) << 16;
    case 2:
      h ^= (str.charCodeAt(i + 1) & 255) << 8;
    case 1:
      h ^= str.charCodeAt(i) & 255;
      h = /* Math.imul(h, m): */
      (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
  }
  h ^= h >>> 13;
  h = /* Math.imul(h, m): */
  (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
  return ((h ^ h >>> 15) >>> 0).toString(36);
}
var init_emotion_hash_esm = __esm({
  "node_modules/@emotion/hash/dist/emotion-hash.esm.js"() {
    init_define_process_env();
  }
});

// node_modules/@emotion/unitless/dist/emotion-unitless.esm.js
var unitlessKeys;
var init_emotion_unitless_esm = __esm({
  "node_modules/@emotion/unitless/dist/emotion-unitless.esm.js"() {
    init_define_process_env();
    unitlessKeys = {
      animationIterationCount: 1,
      aspectRatio: 1,
      borderImageOutset: 1,
      borderImageSlice: 1,
      borderImageWidth: 1,
      boxFlex: 1,
      boxFlexGroup: 1,
      boxOrdinalGroup: 1,
      columnCount: 1,
      columns: 1,
      flex: 1,
      flexGrow: 1,
      flexPositive: 1,
      flexShrink: 1,
      flexNegative: 1,
      flexOrder: 1,
      gridRow: 1,
      gridRowEnd: 1,
      gridRowSpan: 1,
      gridRowStart: 1,
      gridColumn: 1,
      gridColumnEnd: 1,
      gridColumnSpan: 1,
      gridColumnStart: 1,
      msGridRow: 1,
      msGridRowSpan: 1,
      msGridColumn: 1,
      msGridColumnSpan: 1,
      fontWeight: 1,
      lineHeight: 1,
      opacity: 1,
      order: 1,
      orphans: 1,
      scale: 1,
      tabSize: 1,
      widows: 1,
      zIndex: 1,
      zoom: 1,
      WebkitLineClamp: 1,
      // SVG-related properties
      fillOpacity: 1,
      floodOpacity: 1,
      stopOpacity: 1,
      strokeDasharray: 1,
      strokeDashoffset: 1,
      strokeMiterlimit: 1,
      strokeOpacity: 1,
      strokeWidth: 1
    };
  }
});

// node_modules/@emotion/serialize/dist/emotion-serialize.esm.js
var emotion_serialize_esm_exports = {};
__export(emotion_serialize_esm_exports, {
  serializeStyles: () => serializeStyles
});
function handleInterpolation(mergedProps, registered, interpolation) {
  if (interpolation == null) {
    return "";
  }
  var componentSelector = interpolation;
  if (componentSelector.__emotion_styles !== void 0) {
    return componentSelector;
  }
  switch (typeof interpolation) {
    case "boolean": {
      return "";
    }
    case "object": {
      var keyframes2 = interpolation;
      if (keyframes2.anim === 1) {
        cursor = {
          name: keyframes2.name,
          styles: keyframes2.styles,
          next: cursor
        };
        return keyframes2.name;
      }
      var serializedStyles = interpolation;
      if (serializedStyles.styles !== void 0) {
        var next2 = serializedStyles.next;
        if (next2 !== void 0) {
          while (next2 !== void 0) {
            cursor = {
              name: next2.name,
              styles: next2.styles,
              next: cursor
            };
            next2 = next2.next;
          }
        }
        var styles = serializedStyles.styles + ";";
        return styles;
      }
      return createStringFromObject(mergedProps, registered, interpolation);
    }
    case "function": {
      if (mergedProps !== void 0) {
        var previousCursor = cursor;
        var result = interpolation(mergedProps);
        cursor = previousCursor;
        return handleInterpolation(mergedProps, registered, result);
      }
      break;
    }
  }
  var asString = interpolation;
  if (registered == null) {
    return asString;
  }
  var cached = registered[asString];
  return cached !== void 0 ? cached : asString;
}
function createStringFromObject(mergedProps, registered, obj) {
  var string = "";
  if (Array.isArray(obj)) {
    for (var i = 0; i < obj.length; i++) {
      string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
    }
  } else {
    for (var key in obj) {
      var value = obj[key];
      if (typeof value !== "object") {
        var asString = value;
        if (registered != null && registered[asString] !== void 0) {
          string += key + "{" + registered[asString] + "}";
        } else if (isProcessableValue(asString)) {
          string += processStyleName(key) + ":" + processStyleValue(key, asString) + ";";
        }
      } else {
        if (key === "NO_COMPONENT_SELECTOR" && isDevelopment2) {
          throw new Error(noComponentSelectorMessage);
        }
        if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
          for (var _i = 0; _i < value.length; _i++) {
            if (isProcessableValue(value[_i])) {
              string += processStyleName(key) + ":" + processStyleValue(key, value[_i]) + ";";
            }
          }
        } else {
          var interpolated = handleInterpolation(mergedProps, registered, value);
          switch (key) {
            case "animation":
            case "animationName": {
              string += processStyleName(key) + ":" + interpolated + ";";
              break;
            }
            default: {
              string += key + "{" + interpolated + "}";
            }
          }
        }
      }
    }
  }
  return string;
}
function serializeStyles(args, registered, mergedProps) {
  if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
    return args[0];
  }
  var stringMode = true;
  var styles = "";
  cursor = void 0;
  var strings = args[0];
  if (strings == null || strings.raw === void 0) {
    stringMode = false;
    styles += handleInterpolation(mergedProps, registered, strings);
  } else {
    var asTemplateStringsArr = strings;
    styles += asTemplateStringsArr[0];
  }
  for (var i = 1; i < args.length; i++) {
    styles += handleInterpolation(mergedProps, registered, args[i]);
    if (stringMode) {
      var templateStringsArr = strings;
      styles += templateStringsArr[i];
    }
  }
  labelPattern.lastIndex = 0;
  var identifierName = "";
  var match2;
  while ((match2 = labelPattern.exec(styles)) !== null) {
    identifierName += "-" + match2[1];
  }
  var name = murmur2(styles) + identifierName;
  return {
    name,
    styles,
    next: cursor
  };
}
var isDevelopment2, hyphenateRegex, animationRegex, isCustomProperty, isProcessableValue, processStyleName, processStyleValue, noComponentSelectorMessage, labelPattern, cursor;
var init_emotion_serialize_esm = __esm({
  "node_modules/@emotion/serialize/dist/emotion-serialize.esm.js"() {
    init_define_process_env();
    init_emotion_hash_esm();
    init_emotion_unitless_esm();
    init_emotion_memoize_esm();
    isDevelopment2 = false;
    hyphenateRegex = /[A-Z]|^ms/g;
    animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
    isCustomProperty = function isCustomProperty2(property) {
      return property.charCodeAt(1) === 45;
    };
    isProcessableValue = function isProcessableValue2(value) {
      return value != null && typeof value !== "boolean";
    };
    processStyleName = /* @__PURE__ */ memoize(function(styleName) {
      return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
    });
    processStyleValue = function processStyleValue2(key, value) {
      switch (key) {
        case "animation":
        case "animationName": {
          if (typeof value === "string") {
            return value.replace(animationRegex, function(match2, p1, p2) {
              cursor = {
                name: p1,
                styles: p2,
                next: cursor
              };
              return p1;
            });
          }
        }
      }
      if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === "number" && value !== 0) {
        return value + "px";
      }
      return value;
    };
    noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
    labelPattern = /label:\s*([^\s;{]+)\s*(;|$)/g;
  }
});

// node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.esm.js
var React, isBrowser3, syncFallback, useInsertionEffect2, useInsertionEffectAlwaysWithSyncFallback, useInsertionEffectWithLayoutFallback;
var init_emotion_use_insertion_effect_with_fallbacks_esm = __esm({
  "node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.esm.js"() {
    init_define_process_env();
    React = __toESM(require_react());
    isBrowser3 = typeof document !== "undefined";
    syncFallback = function syncFallback2(create) {
      return create();
    };
    useInsertionEffect2 = React["useInsertionEffect"] ? React["useInsertionEffect"] : false;
    useInsertionEffectAlwaysWithSyncFallback = !isBrowser3 ? syncFallback : useInsertionEffect2 || syncFallback;
    useInsertionEffectWithLayoutFallback = useInsertionEffect2 || React.useLayoutEffect;
  }
});

// node_modules/@emotion/react/dist/emotion-element-d59e098f.esm.js
function withTheme(Component) {
  var componentName = Component.displayName || Component.name || "Component";
  var WithTheme = /* @__PURE__ */ React2.forwardRef(function render(props, ref) {
    var theme2 = React2.useContext(ThemeContext);
    return /* @__PURE__ */ React2.createElement(Component, _extends({
      theme: theme2,
      ref
    }, props));
  });
  WithTheme.displayName = "WithTheme(" + componentName + ")";
  return hoistNonReactStatics(WithTheme, Component);
}
var React2, import_react, isDevelopment3, isBrowser4, EmotionCacheContext, CacheProvider, __unsafe_useEmotionCache, withEmotionCache, ThemeContext, useTheme, getTheme, createCacheWithTheme, ThemeProvider, hasOwn, typePropName, createEmotionProps, Insertion, Emotion, Emotion$1;
var init_emotion_element_d59e098f_esm = __esm({
  "node_modules/@emotion/react/dist/emotion-element-d59e098f.esm.js"() {
    init_define_process_env();
    React2 = __toESM(require_react());
    import_react = __toESM(require_react());
    init_emotion_cache_esm();
    init_extends();
    init_emotion_weak_memoize_esm();
    init_emotion_react_isolated_hnrs_esm();
    init_emotion_utils_esm();
    init_emotion_serialize_esm();
    init_emotion_use_insertion_effect_with_fallbacks_esm();
    isDevelopment3 = false;
    isBrowser4 = typeof document !== "undefined";
    EmotionCacheContext = /* @__PURE__ */ React2.createContext(
      // we're doing this to avoid preconstruct's dead code elimination in this one case
      // because this module is primarily intended for the browser and node
      // but it's also required in react native and similar environments sometimes
      // and we could have a special build just for that
      // but this is much easier and the native packages
      // might use a different theme context in the future anyway
      typeof HTMLElement !== "undefined" ? /* @__PURE__ */ createCache({
        key: "css"
      }) : null
    );
    CacheProvider = EmotionCacheContext.Provider;
    __unsafe_useEmotionCache = function useEmotionCache() {
      return (0, import_react.useContext)(EmotionCacheContext);
    };
    withEmotionCache = function withEmotionCache2(func) {
      return /* @__PURE__ */ (0, import_react.forwardRef)(function(props, ref) {
        var cache = (0, import_react.useContext)(EmotionCacheContext);
        return func(props, cache, ref);
      });
    };
    if (!isBrowser4) {
      withEmotionCache = function withEmotionCache3(func) {
        return function(props) {
          var cache = (0, import_react.useContext)(EmotionCacheContext);
          if (cache === null) {
            cache = createCache({
              key: "css"
            });
            return /* @__PURE__ */ React2.createElement(EmotionCacheContext.Provider, {
              value: cache
            }, func(props, cache));
          } else {
            return func(props, cache);
          }
        };
      };
    }
    ThemeContext = /* @__PURE__ */ React2.createContext({});
    useTheme = function useTheme2() {
      return React2.useContext(ThemeContext);
    };
    getTheme = function getTheme2(outerTheme, theme2) {
      if (typeof theme2 === "function") {
        var mergedTheme = theme2(outerTheme);
        return mergedTheme;
      }
      return _extends({}, outerTheme, theme2);
    };
    createCacheWithTheme = /* @__PURE__ */ weakMemoize(function(outerTheme) {
      return weakMemoize(function(theme2) {
        return getTheme(outerTheme, theme2);
      });
    });
    ThemeProvider = function ThemeProvider2(props) {
      var theme2 = React2.useContext(ThemeContext);
      if (props.theme !== theme2) {
        theme2 = createCacheWithTheme(theme2)(props.theme);
      }
      return /* @__PURE__ */ React2.createElement(ThemeContext.Provider, {
        value: theme2
      }, props.children);
    };
    hasOwn = {}.hasOwnProperty;
    typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
    createEmotionProps = function createEmotionProps2(type, props) {
      var newProps = {};
      for (var _key in props) {
        if (hasOwn.call(props, _key)) {
          newProps[_key] = props[_key];
        }
      }
      newProps[typePropName] = type;
      return newProps;
    };
    Insertion = function Insertion2(_ref) {
      var cache = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
      registerStyles(cache, serialized, isStringTag);
      var rules = useInsertionEffectAlwaysWithSyncFallback(function() {
        return insertStyles(cache, serialized, isStringTag);
      });
      if (!isBrowser4 && rules !== void 0) {
        var _ref2;
        var serializedNames = serialized.name;
        var next2 = serialized.next;
        while (next2 !== void 0) {
          serializedNames += " " + next2.name;
          next2 = next2.next;
        }
        return /* @__PURE__ */ React2.createElement("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedNames, _ref2.dangerouslySetInnerHTML = {
          __html: rules
        }, _ref2.nonce = cache.sheet.nonce, _ref2));
      }
      return null;
    };
    Emotion = /* @__PURE__ */ withEmotionCache(function(props, cache, ref) {
      var cssProp = props.css;
      if (typeof cssProp === "string" && cache.registered[cssProp] !== void 0) {
        cssProp = cache.registered[cssProp];
      }
      var WrappedComponent = props[typePropName];
      var registeredStyles = [cssProp];
      var className = "";
      if (typeof props.className === "string") {
        className = getRegisteredStyles(cache.registered, registeredStyles, props.className);
      } else if (props.className != null) {
        className = props.className + " ";
      }
      var serialized = serializeStyles(registeredStyles, void 0, React2.useContext(ThemeContext));
      className += cache.key + "-" + serialized.name;
      var newProps = {};
      for (var _key2 in props) {
        if (hasOwn.call(props, _key2) && _key2 !== "css" && _key2 !== typePropName && !isDevelopment3) {
          newProps[_key2] = props[_key2];
        }
      }
      newProps.className = className;
      if (ref) {
        newProps.ref = ref;
      }
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(Insertion, {
        cache,
        serialized,
        isStringTag: typeof WrappedComponent === "string"
      }), /* @__PURE__ */ React2.createElement(WrappedComponent, newProps));
    });
    Emotion$1 = Emotion;
  }
});

// node_modules/@babel/runtime/helpers/extends.js
var require_extends = __commonJS({
  "node_modules/@babel/runtime/helpers/extends.js"(exports2, module2) {
    init_define_process_env();
    function _extends2() {
      return module2.exports = _extends2 = Object.assign ? Object.assign.bind() : function(n) {
        for (var e = 1; e < arguments.length; e++) {
          var t = arguments[e];
          for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
        }
        return n;
      }, module2.exports.__esModule = true, module2.exports["default"] = module2.exports, _extends2.apply(null, arguments);
    }
    module2.exports = _extends2, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@emotion/react/dist/emotion-react.esm.js
var emotion_react_esm_exports = {};
__export(emotion_react_esm_exports, {
  CacheProvider: () => CacheProvider,
  ClassNames: () => ClassNames,
  Global: () => Global,
  ThemeContext: () => ThemeContext,
  ThemeProvider: () => ThemeProvider,
  __unsafe_useEmotionCache: () => __unsafe_useEmotionCache,
  createElement: () => jsx,
  css: () => css,
  jsx: () => jsx,
  keyframes: () => keyframes,
  useTheme: () => useTheme,
  withEmotionCache: () => withEmotionCache,
  withTheme: () => withTheme
});
function css() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return serializeStyles(args);
}
function keyframes() {
  var insertable = css.apply(void 0, arguments);
  var name = "animation-" + insertable.name;
  return {
    name,
    styles: "@keyframes " + name + "{" + insertable.styles + "}",
    anim: 1,
    toString: function toString() {
      return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
    }
  };
}
function merge(registered, css2, className) {
  var registeredStyles = [];
  var rawClassName = getRegisteredStyles(registered, registeredStyles, className);
  if (registeredStyles.length < 2) {
    return className;
  }
  return rawClassName + css2(registeredStyles);
}
var React3, import_extends2, import_hoist_non_react_statics2, jsx, Global, classnames, Insertion3, ClassNames;
var init_emotion_react_esm = __esm({
  "node_modules/@emotion/react/dist/emotion-react.esm.js"() {
    init_define_process_env();
    init_emotion_element_d59e098f_esm();
    init_emotion_element_d59e098f_esm();
    React3 = __toESM(require_react());
    init_emotion_utils_esm();
    init_emotion_use_insertion_effect_with_fallbacks_esm();
    init_emotion_serialize_esm();
    init_emotion_cache_esm();
    import_extends2 = __toESM(require_extends());
    init_emotion_weak_memoize_esm();
    import_hoist_non_react_statics2 = __toESM(require_hoist_non_react_statics_cjs());
    jsx = function jsx2(type, props) {
      var args = arguments;
      if (props == null || !hasOwn.call(props, "css")) {
        return React3.createElement.apply(void 0, args);
      }
      var argsLength = args.length;
      var createElementArgArray = new Array(argsLength);
      createElementArgArray[0] = Emotion$1;
      createElementArgArray[1] = createEmotionProps(type, props);
      for (var i = 2; i < argsLength; i++) {
        createElementArgArray[i] = args[i];
      }
      return React3.createElement.apply(null, createElementArgArray);
    };
    (function(_jsx) {
      var JSX;
      /* @__PURE__ */ (function(_JSX) {
      })(JSX || (JSX = _jsx.JSX || (_jsx.JSX = {})));
    })(jsx || (jsx = {}));
    Global = /* @__PURE__ */ withEmotionCache(function(props, cache) {
      var styles = props.styles;
      var serialized = serializeStyles([styles], void 0, React3.useContext(ThemeContext));
      if (!isBrowser4) {
        var _ref;
        var serializedNames = serialized.name;
        var serializedStyles = serialized.styles;
        var next2 = serialized.next;
        while (next2 !== void 0) {
          serializedNames += " " + next2.name;
          serializedStyles += next2.styles;
          next2 = next2.next;
        }
        var shouldCache = cache.compat === true;
        var rules = cache.insert("", {
          name: serializedNames,
          styles: serializedStyles
        }, cache.sheet, shouldCache);
        if (shouldCache) {
          return null;
        }
        return /* @__PURE__ */ React3.createElement("style", (_ref = {}, _ref["data-emotion"] = cache.key + "-global " + serializedNames, _ref.dangerouslySetInnerHTML = {
          __html: rules
        }, _ref.nonce = cache.sheet.nonce, _ref));
      }
      var sheetRef = React3.useRef();
      useInsertionEffectWithLayoutFallback(function() {
        var key = cache.key + "-global";
        var sheet = new cache.sheet.constructor({
          key,
          nonce: cache.sheet.nonce,
          container: cache.sheet.container,
          speedy: cache.sheet.isSpeedy
        });
        var rehydrating = false;
        var node2 = document.querySelector('style[data-emotion="' + key + " " + serialized.name + '"]');
        if (cache.sheet.tags.length) {
          sheet.before = cache.sheet.tags[0];
        }
        if (node2 !== null) {
          rehydrating = true;
          node2.setAttribute("data-emotion", key);
          sheet.hydrate([node2]);
        }
        sheetRef.current = [sheet, rehydrating];
        return function() {
          sheet.flush();
        };
      }, [cache]);
      useInsertionEffectWithLayoutFallback(function() {
        var sheetRefCurrent = sheetRef.current;
        var sheet = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
        if (rehydrating) {
          sheetRefCurrent[1] = false;
          return;
        }
        if (serialized.next !== void 0) {
          insertStyles(cache, serialized.next, true);
        }
        if (sheet.tags.length) {
          var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
          sheet.before = element;
          sheet.flush();
        }
        cache.insert("", serialized, sheet, false);
      }, [cache, serialized.name]);
      return null;
    });
    classnames = function classnames2(args) {
      var len = args.length;
      var i = 0;
      var cls = "";
      for (; i < len; i++) {
        var arg = args[i];
        if (arg == null) continue;
        var toAdd = void 0;
        switch (typeof arg) {
          case "boolean":
            break;
          case "object": {
            if (Array.isArray(arg)) {
              toAdd = classnames2(arg);
            } else {
              toAdd = "";
              for (var k in arg) {
                if (arg[k] && k) {
                  toAdd && (toAdd += " ");
                  toAdd += k;
                }
              }
            }
            break;
          }
          default: {
            toAdd = arg;
          }
        }
        if (toAdd) {
          cls && (cls += " ");
          cls += toAdd;
        }
      }
      return cls;
    };
    Insertion3 = function Insertion4(_ref) {
      var cache = _ref.cache, serializedArr = _ref.serializedArr;
      var rules = useInsertionEffectAlwaysWithSyncFallback(function() {
        var rules2 = "";
        for (var i = 0; i < serializedArr.length; i++) {
          var res = insertStyles(cache, serializedArr[i], false);
          if (!isBrowser4 && res !== void 0) {
            rules2 += res;
          }
        }
        if (!isBrowser4) {
          return rules2;
        }
      });
      if (!isBrowser4 && rules.length !== 0) {
        var _ref2;
        return /* @__PURE__ */ React3.createElement("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedArr.map(function(serialized) {
          return serialized.name;
        }).join(" "), _ref2.dangerouslySetInnerHTML = {
          __html: rules
        }, _ref2.nonce = cache.sheet.nonce, _ref2));
      }
      return null;
    };
    ClassNames = /* @__PURE__ */ withEmotionCache(function(props, cache) {
      var hasRendered = false;
      var serializedArr = [];
      var css2 = function css3() {
        if (hasRendered && isDevelopment3) {
          throw new Error("css can only be used during render");
        }
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        var serialized = serializeStyles(args, cache.registered);
        serializedArr.push(serialized);
        registerStyles(cache, serialized, false);
        return cache.key + "-" + serialized.name;
      };
      var cx = function cx2() {
        if (hasRendered && isDevelopment3) {
          throw new Error("cx can only be used during render");
        }
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        return merge(cache.registered, css2, classnames(args));
      };
      var content = {
        css: css2,
        cx,
        theme: React3.useContext(ThemeContext)
      };
      var ele = props.children(content);
      hasRendered = true;
      return /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement(Insertion3, {
        cache,
        serializedArr
      }), ele);
    });
  }
});

// node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js
var reactPropsRegex, isPropValid;
var init_emotion_is_prop_valid_esm = __esm({
  "node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js"() {
    init_define_process_env();
    init_emotion_memoize_esm();
    reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|fetchpriority|fetchPriority|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
    isPropValid = /* @__PURE__ */ memoize(
      function(prop) {
        return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
      }
      /* Z+1 */
    );
  }
});

// node_modules/@emotion/styled/base/dist/emotion-styled-base.esm.js
var React4, isBrowser5, isDevelopment4, testOmitPropsOnStringTag, testOmitPropsOnComponent, getDefaultShouldForwardProp, composeShouldForwardProps, Insertion5, createStyled;
var init_emotion_styled_base_esm = __esm({
  "node_modules/@emotion/styled/base/dist/emotion-styled-base.esm.js"() {
    init_define_process_env();
    init_extends();
    init_emotion_react_esm();
    init_emotion_serialize_esm();
    init_emotion_use_insertion_effect_with_fallbacks_esm();
    init_emotion_utils_esm();
    React4 = __toESM(require_react());
    init_emotion_is_prop_valid_esm();
    isBrowser5 = typeof document !== "undefined";
    isDevelopment4 = false;
    testOmitPropsOnStringTag = isPropValid;
    testOmitPropsOnComponent = function testOmitPropsOnComponent2(key) {
      return key !== "theme";
    };
    getDefaultShouldForwardProp = function getDefaultShouldForwardProp2(tag) {
      return typeof tag === "string" && // 96 is one less than the char code
      // for "a" so this is checking that
      // it's a lowercase character
      tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
    };
    composeShouldForwardProps = function composeShouldForwardProps2(tag, options, isReal) {
      var shouldForwardProp;
      if (options) {
        var optionsShouldForwardProp = options.shouldForwardProp;
        shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
          return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
        } : optionsShouldForwardProp;
      }
      if (typeof shouldForwardProp !== "function" && isReal) {
        shouldForwardProp = tag.__emotion_forwardProp;
      }
      return shouldForwardProp;
    };
    Insertion5 = function Insertion6(_ref) {
      var cache = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
      registerStyles(cache, serialized, isStringTag);
      var rules = useInsertionEffectAlwaysWithSyncFallback(function() {
        return insertStyles(cache, serialized, isStringTag);
      });
      if (!isBrowser5 && rules !== void 0) {
        var _ref2;
        var serializedNames = serialized.name;
        var next2 = serialized.next;
        while (next2 !== void 0) {
          serializedNames += " " + next2.name;
          next2 = next2.next;
        }
        return /* @__PURE__ */ React4.createElement("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedNames, _ref2.dangerouslySetInnerHTML = {
          __html: rules
        }, _ref2.nonce = cache.sheet.nonce, _ref2));
      }
      return null;
    };
    createStyled = function createStyled2(tag, options) {
      var isReal = tag.__emotion_real === tag;
      var baseTag = isReal && tag.__emotion_base || tag;
      var identifierName;
      var targetClassName;
      if (options !== void 0) {
        identifierName = options.label;
        targetClassName = options.target;
      }
      var shouldForwardProp = composeShouldForwardProps(tag, options, isReal);
      var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);
      var shouldUseAs = !defaultShouldForwardProp("as");
      return function() {
        var args = arguments;
        var styles = isReal && tag.__emotion_styles !== void 0 ? tag.__emotion_styles.slice(0) : [];
        if (identifierName !== void 0) {
          styles.push("label:" + identifierName + ";");
        }
        if (args[0] == null || args[0].raw === void 0) {
          styles.push.apply(styles, args);
        } else {
          var templateStringsArr = args[0];
          styles.push(templateStringsArr[0]);
          var len = args.length;
          var i = 1;
          for (; i < len; i++) {
            styles.push(args[i], templateStringsArr[i]);
          }
        }
        var Styled = withEmotionCache(function(props, cache, ref) {
          var FinalTag = shouldUseAs && props.as || baseTag;
          var className = "";
          var classInterpolations = [];
          var mergedProps = props;
          if (props.theme == null) {
            mergedProps = {};
            for (var key in props) {
              mergedProps[key] = props[key];
            }
            mergedProps.theme = React4.useContext(ThemeContext);
          }
          if (typeof props.className === "string") {
            className = getRegisteredStyles(cache.registered, classInterpolations, props.className);
          } else if (props.className != null) {
            className = props.className + " ";
          }
          var serialized = serializeStyles(styles.concat(classInterpolations), cache.registered, mergedProps);
          className += cache.key + "-" + serialized.name;
          if (targetClassName !== void 0) {
            className += " " + targetClassName;
          }
          var finalShouldForwardProp = shouldUseAs && shouldForwardProp === void 0 ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
          var newProps = {};
          for (var _key in props) {
            if (shouldUseAs && _key === "as") continue;
            if (finalShouldForwardProp(_key)) {
              newProps[_key] = props[_key];
            }
          }
          newProps.className = className;
          if (ref) {
            newProps.ref = ref;
          }
          return /* @__PURE__ */ React4.createElement(React4.Fragment, null, /* @__PURE__ */ React4.createElement(Insertion5, {
            cache,
            serialized,
            isStringTag: typeof FinalTag === "string"
          }), /* @__PURE__ */ React4.createElement(FinalTag, newProps));
        });
        Styled.displayName = identifierName !== void 0 ? identifierName : "Styled(" + (typeof baseTag === "string" ? baseTag : baseTag.displayName || baseTag.name || "Component") + ")";
        Styled.defaultProps = tag.defaultProps;
        Styled.__emotion_real = Styled;
        Styled.__emotion_base = baseTag;
        Styled.__emotion_styles = styles;
        Styled.__emotion_forwardProp = shouldForwardProp;
        Object.defineProperty(Styled, "toString", {
          value: function value() {
            if (targetClassName === void 0 && isDevelopment4) {
              return "NO_COMPONENT_SELECTOR";
            }
            return "." + targetClassName;
          }
        });
        Styled.withComponent = function(nextTag, nextOptions) {
          var newStyled2 = createStyled2(nextTag, _extends({}, options, nextOptions, {
            shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
          }));
          return newStyled2.apply(void 0, styles);
        };
        return Styled;
      };
    };
  }
});

// node_modules/@emotion/styled/dist/emotion-styled.esm.js
var emotion_styled_esm_exports = {};
__export(emotion_styled_esm_exports, {
  default: () => newStyled
});
var import_extends4, import_react3, tags, newStyled;
var init_emotion_styled_esm = __esm({
  "node_modules/@emotion/styled/dist/emotion-styled.esm.js"() {
    init_define_process_env();
    init_emotion_styled_base_esm();
    import_extends4 = __toESM(require_extends());
    init_emotion_serialize_esm();
    init_emotion_use_insertion_effect_with_fallbacks_esm();
    init_emotion_utils_esm();
    import_react3 = __toESM(require_react());
    init_emotion_is_prop_valid_esm();
    tags = [
      "a",
      "abbr",
      "address",
      "area",
      "article",
      "aside",
      "audio",
      "b",
      "base",
      "bdi",
      "bdo",
      "big",
      "blockquote",
      "body",
      "br",
      "button",
      "canvas",
      "caption",
      "cite",
      "code",
      "col",
      "colgroup",
      "data",
      "datalist",
      "dd",
      "del",
      "details",
      "dfn",
      "dialog",
      "div",
      "dl",
      "dt",
      "em",
      "embed",
      "fieldset",
      "figcaption",
      "figure",
      "footer",
      "form",
      "h1",
      "h2",
      "h3",
      "h4",
      "h5",
      "h6",
      "head",
      "header",
      "hgroup",
      "hr",
      "html",
      "i",
      "iframe",
      "img",
      "input",
      "ins",
      "kbd",
      "keygen",
      "label",
      "legend",
      "li",
      "link",
      "main",
      "map",
      "mark",
      "marquee",
      "menu",
      "menuitem",
      "meta",
      "meter",
      "nav",
      "noscript",
      "object",
      "ol",
      "optgroup",
      "option",
      "output",
      "p",
      "param",
      "picture",
      "pre",
      "progress",
      "q",
      "rp",
      "rt",
      "ruby",
      "s",
      "samp",
      "script",
      "section",
      "select",
      "small",
      "source",
      "span",
      "strong",
      "style",
      "sub",
      "summary",
      "sup",
      "table",
      "tbody",
      "td",
      "textarea",
      "tfoot",
      "th",
      "thead",
      "time",
      "title",
      "tr",
      "track",
      "u",
      "ul",
      "var",
      "video",
      "wbr",
      // SVG
      "circle",
      "clipPath",
      "defs",
      "ellipse",
      "foreignObject",
      "g",
      "image",
      "line",
      "linearGradient",
      "mask",
      "path",
      "pattern",
      "polygon",
      "polyline",
      "radialGradient",
      "rect",
      "stop",
      "svg",
      "text",
      "tspan"
    ];
    newStyled = createStyled.bind(null);
    tags.forEach(function(tagName) {
      newStyled[tagName] = newStyled(tagName);
    });
  }
});

// node_modules/prop-types/node_modules/react-is/cjs/react-is.production.min.js
var require_react_is_production_min2 = __commonJS({
  "node_modules/prop-types/node_modules/react-is/cjs/react-is.production.min.js"(exports2) {
    "use strict";
    init_define_process_env();
    var b = "function" === typeof Symbol && Symbol.for;
    var c = b ? Symbol.for("react.element") : 60103;
    var d = b ? Symbol.for("react.portal") : 60106;
    var e = b ? Symbol.for("react.fragment") : 60107;
    var f = b ? Symbol.for("react.strict_mode") : 60108;
    var g = b ? Symbol.for("react.profiler") : 60114;
    var h = b ? Symbol.for("react.provider") : 60109;
    var k = b ? Symbol.for("react.context") : 60110;
    var l = b ? Symbol.for("react.async_mode") : 60111;
    var m = b ? Symbol.for("react.concurrent_mode") : 60111;
    var n = b ? Symbol.for("react.forward_ref") : 60112;
    var p = b ? Symbol.for("react.suspense") : 60113;
    var q = b ? Symbol.for("react.suspense_list") : 60120;
    var r = b ? Symbol.for("react.memo") : 60115;
    var t = b ? Symbol.for("react.lazy") : 60116;
    var v = b ? Symbol.for("react.block") : 60121;
    var w = b ? Symbol.for("react.fundamental") : 60117;
    var x = b ? Symbol.for("react.responder") : 60118;
    var y = b ? Symbol.for("react.scope") : 60119;
    function z(a) {
      if ("object" === typeof a && null !== a) {
        var u = a.$$typeof;
        switch (u) {
          case c:
            switch (a = a.type, a) {
              case l:
              case m:
              case e:
              case g:
              case f:
              case p:
                return a;
              default:
                switch (a = a && a.$$typeof, a) {
                  case k:
                  case n:
                  case t:
                  case r:
                  case h:
                    return a;
                  default:
                    return u;
                }
            }
          case d:
            return u;
        }
      }
    }
    function A(a) {
      return z(a) === m;
    }
    exports2.AsyncMode = l;
    exports2.ConcurrentMode = m;
    exports2.ContextConsumer = k;
    exports2.ContextProvider = h;
    exports2.Element = c;
    exports2.ForwardRef = n;
    exports2.Fragment = e;
    exports2.Lazy = t;
    exports2.Memo = r;
    exports2.Portal = d;
    exports2.Profiler = g;
    exports2.StrictMode = f;
    exports2.Suspense = p;
    exports2.isAsyncMode = function(a) {
      return A(a) || z(a) === l;
    };
    exports2.isConcurrentMode = A;
    exports2.isContextConsumer = function(a) {
      return z(a) === k;
    };
    exports2.isContextProvider = function(a) {
      return z(a) === h;
    };
    exports2.isElement = function(a) {
      return "object" === typeof a && null !== a && a.$$typeof === c;
    };
    exports2.isForwardRef = function(a) {
      return z(a) === n;
    };
    exports2.isFragment = function(a) {
      return z(a) === e;
    };
    exports2.isLazy = function(a) {
      return z(a) === t;
    };
    exports2.isMemo = function(a) {
      return z(a) === r;
    };
    exports2.isPortal = function(a) {
      return z(a) === d;
    };
    exports2.isProfiler = function(a) {
      return z(a) === g;
    };
    exports2.isStrictMode = function(a) {
      return z(a) === f;
    };
    exports2.isSuspense = function(a) {
      return z(a) === p;
    };
    exports2.isValidElementType = function(a) {
      return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === w || a.$$typeof === x || a.$$typeof === y || a.$$typeof === v);
    };
    exports2.typeOf = z;
  }
});

// node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js
var require_react_is_development2 = __commonJS({
  "node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js"(exports2) {
    "use strict";
    init_define_process_env();
    if (define_process_env_default.NODE_ENV !== "production") {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment5 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports2.AsyncMode = AsyncMode;
        exports2.ConcurrentMode = ConcurrentMode;
        exports2.ContextConsumer = ContextConsumer;
        exports2.ContextProvider = ContextProvider;
        exports2.Element = Element2;
        exports2.ForwardRef = ForwardRef;
        exports2.Fragment = Fragment5;
        exports2.Lazy = Lazy;
        exports2.Memo = Memo;
        exports2.Portal = Portal;
        exports2.Profiler = Profiler;
        exports2.StrictMode = StrictMode;
        exports2.Suspense = Suspense;
        exports2.isAsyncMode = isAsyncMode;
        exports2.isConcurrentMode = isConcurrentMode;
        exports2.isContextConsumer = isContextConsumer;
        exports2.isContextProvider = isContextProvider;
        exports2.isElement = isElement;
        exports2.isForwardRef = isForwardRef;
        exports2.isFragment = isFragment;
        exports2.isLazy = isLazy;
        exports2.isMemo = isMemo;
        exports2.isPortal = isPortal;
        exports2.isProfiler = isProfiler;
        exports2.isStrictMode = isStrictMode;
        exports2.isSuspense = isSuspense;
        exports2.isValidElementType = isValidElementType;
        exports2.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/prop-types/node_modules/react-is/index.js
var require_react_is2 = __commonJS({
  "node_modules/prop-types/node_modules/react-is/index.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    if (define_process_env_default.NODE_ENV === "production") {
      module2.exports = require_react_is_production_min2();
    } else {
      module2.exports = require_react_is_development2();
    }
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module2.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from2;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from2 = Object(arguments[s]);
        for (var key in from2) {
          if (hasOwnProperty.call(from2, key)) {
            to[key] = from2[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from2);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from2, symbols[i])) {
              to[symbols[i]] = from2[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module2.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports2, module2) {
    init_define_process_env();
    module2.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var printWarning = function() {
    };
    if (define_process_env_default.NODE_ENV !== "production") {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (define_process_env_default.NODE_ENV !== "production") {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (define_process_env_default.NODE_ENV !== "production") {
        loggedTypeFailures = {};
      }
    };
    module2.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var ReactIs = require_react_is2();
    var assign2 = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (define_process_env_default.NODE_ENV !== "production") {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module2.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (define_process_env_default.NODE_ENV !== "production") {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (define_process_env_default.NODE_ENV !== "production" && typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (define_process_env_default.NODE_ENV !== "production") {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          define_process_env_default.NODE_ENV !== "production" ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign2({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/factoryWithThrowingShims.js
var require_factoryWithThrowingShims = __commonJS({
  "node_modules/prop-types/factoryWithThrowingShims.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    function emptyFunction() {
    }
    function emptyFunctionWithReset() {
    }
    emptyFunctionWithReset.resetWarningCache = emptyFunction;
    module2.exports = function() {
      function shim(props, propName, componentName, location, propFullName, secret) {
        if (secret === ReactPropTypesSecret) {
          return;
        }
        var err = new Error(
          "Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types"
        );
        err.name = "Invariant Violation";
        throw err;
      }
      ;
      shim.isRequired = shim;
      function getShim() {
        return shim;
      }
      ;
      var ReactPropTypes = {
        array: shim,
        bigint: shim,
        bool: shim,
        func: shim,
        number: shim,
        object: shim,
        string: shim,
        symbol: shim,
        any: shim,
        arrayOf: getShim,
        element: shim,
        elementType: shim,
        instanceOf: getShim,
        node: shim,
        objectOf: getShim,
        oneOf: getShim,
        oneOfType: getShim,
        shape: getShim,
        exact: getShim,
        checkPropTypes: emptyFunctionWithReset,
        resetWarningCache: emptyFunction
      };
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports2, module2) {
    init_define_process_env();
    if (define_process_env_default.NODE_ENV !== "production") {
      ReactIs = require_react_is2();
      throwOnDirectAccess = true;
      module2.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module2.exports = require_factoryWithThrowingShims()();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/react/cjs/react-jsx-runtime.production.js
var require_react_jsx_runtime_production = __commonJS({
  "node_modules/react/cjs/react-jsx-runtime.production.js"(exports2) {
    "use strict";
    init_define_process_env();
    var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element");
    var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
    function jsxProd(type, config, maybeKey) {
      var key = null;
      void 0 !== maybeKey && (key = "" + maybeKey);
      void 0 !== config.key && (key = "" + config.key);
      if ("key" in config) {
        maybeKey = {};
        for (var propName in config)
          "key" !== propName && (maybeKey[propName] = config[propName]);
      } else maybeKey = config;
      config = maybeKey.ref;
      return {
        $$typeof: REACT_ELEMENT_TYPE,
        type,
        key,
        ref: void 0 !== config ? config : null,
        props: maybeKey
      };
    }
    exports2.Fragment = REACT_FRAGMENT_TYPE;
    exports2.jsx = jsxProd;
    exports2.jsxs = jsxProd;
  }
});

// node_modules/react/cjs/react-jsx-runtime.development.js
var require_react_jsx_runtime_development = __commonJS({
  "node_modules/react/cjs/react-jsx-runtime.development.js"(exports2) {
    "use strict";
    init_define_process_env();
    "production" !== define_process_env_default.NODE_ENV && function() {
      function getComponentNameFromType(type) {
        if (null == type) return null;
        if ("function" === typeof type)
          return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
        if ("string" === typeof type) return type;
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
          case REACT_ACTIVITY_TYPE:
            return "Activity";
        }
        if ("object" === typeof type)
          switch ("number" === typeof type.tag && console.error(
            "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
          ), type.$$typeof) {
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_CONTEXT_TYPE:
              return (type.displayName || "Context") + ".Provider";
            case REACT_CONSUMER_TYPE:
              return (type._context.displayName || "Context") + ".Consumer";
            case REACT_FORWARD_REF_TYPE:
              var innerType = type.render;
              type = type.displayName;
              type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
              return type;
            case REACT_MEMO_TYPE:
              return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE:
              innerType = type._payload;
              type = type._init;
              try {
                return getComponentNameFromType(type(innerType));
              } catch (x) {
              }
          }
        return null;
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        try {
          testStringCoercion(value);
          var JSCompiler_inline_result = false;
        } catch (e) {
          JSCompiler_inline_result = true;
        }
        if (JSCompiler_inline_result) {
          JSCompiler_inline_result = console;
          var JSCompiler_temp_const = JSCompiler_inline_result.error;
          var JSCompiler_inline_result$jscomp$0 = "function" === typeof Symbol && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          JSCompiler_temp_const.call(
            JSCompiler_inline_result,
            "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
            JSCompiler_inline_result$jscomp$0
          );
          return testStringCoercion(value);
        }
      }
      function getTaskName(type) {
        if (type === REACT_FRAGMENT_TYPE) return "<>";
        if ("object" === typeof type && null !== type && type.$$typeof === REACT_LAZY_TYPE)
          return "<...>";
        try {
          var name = getComponentNameFromType(type);
          return name ? "<" + name + ">" : "<...>";
        } catch (x) {
          return "<...>";
        }
      }
      function getOwner() {
        var dispatcher = ReactSharedInternals.A;
        return null === dispatcher ? null : dispatcher.getOwner();
      }
      function UnknownOwner() {
        return Error("react-stack-top-frame");
      }
      function hasValidKey(config) {
        if (hasOwnProperty.call(config, "key")) {
          var getter = Object.getOwnPropertyDescriptor(config, "key").get;
          if (getter && getter.isReactWarning) return false;
        }
        return void 0 !== config.key;
      }
      function defineKeyPropWarningGetter(props, displayName) {
        function warnAboutAccessingKey() {
          specialPropKeyWarningShown || (specialPropKeyWarningShown = true, console.error(
            "%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)",
            displayName
          ));
        }
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, "key", {
          get: warnAboutAccessingKey,
          configurable: true
        });
      }
      function elementRefGetterWithDeprecationWarning() {
        var componentName = getComponentNameFromType(this.type);
        didWarnAboutElementRef[componentName] || (didWarnAboutElementRef[componentName] = true, console.error(
          "Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."
        ));
        componentName = this.props.ref;
        return void 0 !== componentName ? componentName : null;
      }
      function ReactElement(type, key, self2, source, owner, props, debugStack, debugTask) {
        self2 = props.ref;
        type = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          props,
          _owner: owner
        };
        null !== (void 0 !== self2 ? self2 : null) ? Object.defineProperty(type, "ref", {
          enumerable: false,
          get: elementRefGetterWithDeprecationWarning
        }) : Object.defineProperty(type, "ref", { enumerable: false, value: null });
        type._store = {};
        Object.defineProperty(type._store, "validated", {
          configurable: false,
          enumerable: false,
          writable: true,
          value: 0
        });
        Object.defineProperty(type, "_debugInfo", {
          configurable: false,
          enumerable: false,
          writable: true,
          value: null
        });
        Object.defineProperty(type, "_debugStack", {
          configurable: false,
          enumerable: false,
          writable: true,
          value: debugStack
        });
        Object.defineProperty(type, "_debugTask", {
          configurable: false,
          enumerable: false,
          writable: true,
          value: debugTask
        });
        Object.freeze && (Object.freeze(type.props), Object.freeze(type));
        return type;
      }
      function jsxDEVImpl(type, config, maybeKey, isStaticChildren, source, self2, debugStack, debugTask) {
        var children = config.children;
        if (void 0 !== children)
          if (isStaticChildren)
            if (isArrayImpl(children)) {
              for (isStaticChildren = 0; isStaticChildren < children.length; isStaticChildren++)
                validateChildKeys(children[isStaticChildren]);
              Object.freeze && Object.freeze(children);
            } else
              console.error(
                "React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead."
              );
          else validateChildKeys(children);
        if (hasOwnProperty.call(config, "key")) {
          children = getComponentNameFromType(type);
          var keys = Object.keys(config).filter(function(k) {
            return "key" !== k;
          });
          isStaticChildren = 0 < keys.length ? "{key: someKey, " + keys.join(": ..., ") + ": ...}" : "{key: someKey}";
          didWarnAboutKeySpread[children + isStaticChildren] || (keys = 0 < keys.length ? "{" + keys.join(": ..., ") + ": ...}" : "{}", console.error(
            'A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />',
            isStaticChildren,
            children,
            keys,
            children
          ), didWarnAboutKeySpread[children + isStaticChildren] = true);
        }
        children = null;
        void 0 !== maybeKey && (checkKeyStringCoercion(maybeKey), children = "" + maybeKey);
        hasValidKey(config) && (checkKeyStringCoercion(config.key), children = "" + config.key);
        if ("key" in config) {
          maybeKey = {};
          for (var propName in config)
            "key" !== propName && (maybeKey[propName] = config[propName]);
        } else maybeKey = config;
        children && defineKeyPropWarningGetter(
          maybeKey,
          "function" === typeof type ? type.displayName || type.name || "Unknown" : type
        );
        return ReactElement(
          type,
          children,
          self2,
          source,
          getOwner(),
          maybeKey,
          debugStack,
          debugTask
        );
      }
      function validateChildKeys(node2) {
        "object" === typeof node2 && null !== node2 && node2.$$typeof === REACT_ELEMENT_TYPE && node2._store && (node2._store.validated = 1);
      }
      var React7 = require_react(), REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      Symbol.for("react.provider");
      var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_ACTIVITY_TYPE = Symbol.for("react.activity"), REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"), ReactSharedInternals = React7.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, hasOwnProperty = Object.prototype.hasOwnProperty, isArrayImpl = Array.isArray, createTask = console.createTask ? console.createTask : function() {
        return null;
      };
      React7 = {
        "react-stack-bottom-frame": function(callStackForError) {
          return callStackForError();
        }
      };
      var specialPropKeyWarningShown;
      var didWarnAboutElementRef = {};
      var unknownOwnerDebugStack = React7["react-stack-bottom-frame"].bind(
        React7,
        UnknownOwner
      )();
      var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));
      var didWarnAboutKeySpread = {};
      exports2.Fragment = REACT_FRAGMENT_TYPE;
      exports2.jsx = function(type, config, maybeKey, source, self2) {
        var trackActualOwner = 1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
        return jsxDEVImpl(
          type,
          config,
          maybeKey,
          false,
          source,
          self2,
          trackActualOwner ? Error("react-stack-top-frame") : unknownOwnerDebugStack,
          trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask
        );
      };
      exports2.jsxs = function(type, config, maybeKey, source, self2) {
        var trackActualOwner = 1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
        return jsxDEVImpl(
          type,
          config,
          maybeKey,
          true,
          source,
          self2,
          trackActualOwner ? Error("react-stack-top-frame") : unknownOwnerDebugStack,
          trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask
        );
      };
    }();
  }
});

// node_modules/react/jsx-runtime.js
var require_jsx_runtime = __commonJS({
  "node_modules/react/jsx-runtime.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    if (define_process_env_default.NODE_ENV === "production") {
      module2.exports = require_react_jsx_runtime_production();
    } else {
      module2.exports = require_react_jsx_runtime_development();
    }
  }
});

// node_modules/@mui/material/node_modules/@mui/styled-engine/node/StyledEngineProvider/StyledEngineProvider.js
var require_StyledEngineProvider = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/styled-engine/node/StyledEngineProvider/StyledEngineProvider.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.TEST_INTERNALS_DO_NOT_USE = void 0;
    exports2.default = StyledEngineProvider;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _react2 = (init_emotion_react_esm(), __toCommonJS(emotion_react_esm_exports));
    var _cache = _interopRequireDefault((init_emotion_cache_esm(), __toCommonJS(emotion_cache_esm_exports)));
    var _sheet = (init_emotion_sheet_esm(), __toCommonJS(emotion_sheet_esm_exports));
    var _jsxRuntime = require_jsx_runtime();
    var cacheMap = /* @__PURE__ */ new Map();
    var TEST_INTERNALS_DO_NOT_USE = exports2.TEST_INTERNALS_DO_NOT_USE = {
      /**
       * to intercept the generated CSS before inserting to the style tag, so that we can check the generated CSS.
       *
       * let rule;
       * TEST_INTERNALS_DO_NOT_USE.insert = (...args) => {
       *    rule = args[0];
       * };
       *
       * expect(rule).to.equal(...);
       */
      insert: void 0
    };
    var createEmotionCache = (options, CustomSheet) => {
      const cache = (0, _cache.default)(options);
      cache.sheet = new CustomSheet({
        key: cache.key,
        nonce: cache.sheet.nonce,
        container: cache.sheet.container,
        speedy: cache.sheet.isSpeedy,
        prepend: cache.sheet.prepend,
        insertionPoint: cache.sheet.insertionPoint
      });
      return cache;
    };
    var insertionPoint;
    if (typeof document === "object") {
      insertionPoint = document.querySelector('[name="emotion-insertion-point"]');
      if (!insertionPoint) {
        insertionPoint = document.createElement("meta");
        insertionPoint.setAttribute("name", "emotion-insertion-point");
        insertionPoint.setAttribute("content", "");
        const head = document.querySelector("head");
        if (head) {
          head.prepend(insertionPoint);
        }
      }
    }
    function getCache(injectFirst, enableCssLayer) {
      if (injectFirst || enableCssLayer) {
        class MyStyleSheet extends _sheet.StyleSheet {
          insert(rule, options) {
            if (TEST_INTERNALS_DO_NOT_USE.insert) {
              return TEST_INTERNALS_DO_NOT_USE.insert(rule, options);
            }
            if (this.key && this.key.endsWith("global")) {
              this.before = insertionPoint;
            }
            return super.insert(rule, options);
          }
        }
        const emotionCache = createEmotionCache({
          key: "css",
          insertionPoint: injectFirst ? insertionPoint : void 0
        }, MyStyleSheet);
        if (enableCssLayer) {
          const prevInsert = emotionCache.insert;
          emotionCache.insert = (...args) => {
            if (!args[1].styles.startsWith("@layer")) {
              args[1].styles = `@layer mui {${args[1].styles}}`;
            }
            return prevInsert(...args);
          };
        }
        return emotionCache;
      }
      return void 0;
    }
    function StyledEngineProvider(props) {
      const {
        injectFirst,
        enableCssLayer,
        children
      } = props;
      const cache = React7.useMemo(() => {
        const cacheKey = `${injectFirst}-${enableCssLayer}`;
        if (cacheMap.has(cacheKey)) {
          return cacheMap.get(cacheKey);
        }
        const fresh = getCache(injectFirst, enableCssLayer);
        cacheMap.set(cacheKey, fresh);
        return fresh;
      }, [injectFirst, enableCssLayer]);
      return cache ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(_react2.CacheProvider, {
        value: cache,
        children
      }) : children;
    }
    define_process_env_default.NODE_ENV !== "production" ? StyledEngineProvider.propTypes = {
      /**
       * Your component tree.
       */
      children: _propTypes.default.node,
      /**
       * If `true`, the styles are wrapped in `@layer mui`.
       * Learn more about [Cascade layers](https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Styling_basics/Cascade_layers).
       */
      enableCssLayer: _propTypes.default.bool,
      /**
       * By default, the styles are injected last in the <head> element of the page.
       * As a result, they gain more specificity than any other style sheet.
       * If you want to override MUI's styles, set this prop.
       */
      injectFirst: _propTypes.default.bool
    } : void 0;
  }
});

// node_modules/@mui/material/node_modules/@mui/styled-engine/node/StyledEngineProvider/index.js
var require_StyledEngineProvider2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/styled-engine/node/StyledEngineProvider/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _StyledEngineProvider.default;
      }
    });
    var _StyledEngineProvider = _interopRequireDefault(require_StyledEngineProvider());
  }
});

// node_modules/@mui/material/node_modules/@mui/styled-engine/node/GlobalStyles/GlobalStyles.js
var require_GlobalStyles = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/styled-engine/node/GlobalStyles/GlobalStyles.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = GlobalStyles;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _react2 = (init_emotion_react_esm(), __toCommonJS(emotion_react_esm_exports));
    var _jsxRuntime = require_jsx_runtime();
    function isEmpty(obj) {
      return obj === void 0 || obj === null || Object.keys(obj).length === 0;
    }
    function GlobalStyles(props) {
      const {
        styles,
        defaultTheme = {}
      } = props;
      const globalStyles = typeof styles === "function" ? (themeInput) => styles(isEmpty(themeInput) ? defaultTheme : themeInput) : styles;
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_react2.Global, {
        styles: globalStyles
      });
    }
    define_process_env_default.NODE_ENV !== "production" ? GlobalStyles.propTypes = {
      defaultTheme: _propTypes.default.object,
      styles: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.string, _propTypes.default.object, _propTypes.default.func])
    } : void 0;
  }
});

// node_modules/@mui/material/node_modules/@mui/styled-engine/node/GlobalStyles/index.js
var require_GlobalStyles2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/styled-engine/node/GlobalStyles/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _GlobalStyles.default;
      }
    });
    var _GlobalStyles = _interopRequireDefault(require_GlobalStyles());
  }
});

// node_modules/@mui/material/node_modules/@mui/styled-engine/node/index.js
var require_node = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/styled-engine/node/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "GlobalStyles", {
      enumerable: true,
      get: function() {
        return _GlobalStyles.default;
      }
    });
    Object.defineProperty(exports2, "StyledEngineProvider", {
      enumerable: true,
      get: function() {
        return _StyledEngineProvider.default;
      }
    });
    Object.defineProperty(exports2, "ThemeContext", {
      enumerable: true,
      get: function() {
        return _react.ThemeContext;
      }
    });
    Object.defineProperty(exports2, "css", {
      enumerable: true,
      get: function() {
        return _react.css;
      }
    });
    exports2.default = styled;
    exports2.internal_mutateStyles = internal_mutateStyles;
    exports2.internal_serializeStyles = internal_serializeStyles;
    Object.defineProperty(exports2, "keyframes", {
      enumerable: true,
      get: function() {
        return _react.keyframes;
      }
    });
    var _styled = _interopRequireDefault((init_emotion_styled_esm(), __toCommonJS(emotion_styled_esm_exports)));
    var _serialize = (init_emotion_serialize_esm(), __toCommonJS(emotion_serialize_esm_exports));
    var _react = (init_emotion_react_esm(), __toCommonJS(emotion_react_esm_exports));
    var _StyledEngineProvider = _interopRequireDefault(require_StyledEngineProvider2());
    var _GlobalStyles = _interopRequireDefault(require_GlobalStyles2());
    function styled(tag, options) {
      const stylesFactory = (0, _styled.default)(tag, options);
      if (define_process_env_default.NODE_ENV !== "production") {
        return (...styles) => {
          const component = typeof tag === "string" ? `"${tag}"` : "component";
          if (styles.length === 0) {
            console.error([`MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join("\n"));
          } else if (styles.some((style) => style === void 0)) {
            console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
          }
          return stylesFactory(...styles);
        };
      }
      return stylesFactory;
    }
    function internal_mutateStyles(tag, processor) {
      if (Array.isArray(tag.__emotion_styles)) {
        tag.__emotion_styles = processor(tag.__emotion_styles);
      }
    }
    var wrapper = [];
    function internal_serializeStyles(styles) {
      wrapper[0] = styles;
      return (0, _serialize.serializeStyles)(wrapper);
    }
  }
});

// node_modules/react-is/cjs/react-is.production.js
var require_react_is_production = __commonJS({
  "node_modules/react-is/cjs/react-is.production.js"(exports2) {
    "use strict";
    init_define_process_env();
    var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element");
    var REACT_PORTAL_TYPE = Symbol.for("react.portal");
    var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
    var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
    var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    Symbol.for("react.provider");
    var REACT_CONSUMER_TYPE = Symbol.for("react.consumer");
    var REACT_CONTEXT_TYPE = Symbol.for("react.context");
    var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
    var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
    var REACT_MEMO_TYPE = Symbol.for("react.memo");
    var REACT_LAZY_TYPE = Symbol.for("react.lazy");
    var REACT_VIEW_TRANSITION_TYPE = Symbol.for("react.view_transition");
    var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
    function typeOf(object) {
      if ("object" === typeof object && null !== object) {
        var $$typeof = object.$$typeof;
        switch ($$typeof) {
          case REACT_ELEMENT_TYPE:
            switch (object = object.type, object) {
              case REACT_FRAGMENT_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_SUSPENSE_TYPE:
              case REACT_SUSPENSE_LIST_TYPE:
              case REACT_VIEW_TRANSITION_TYPE:
                return object;
              default:
                switch (object = object && object.$$typeof, object) {
                  case REACT_CONTEXT_TYPE:
                  case REACT_FORWARD_REF_TYPE:
                  case REACT_LAZY_TYPE:
                  case REACT_MEMO_TYPE:
                    return object;
                  case REACT_CONSUMER_TYPE:
                    return object;
                  default:
                    return $$typeof;
                }
            }
          case REACT_PORTAL_TYPE:
            return $$typeof;
        }
      }
    }
    exports2.ContextConsumer = REACT_CONSUMER_TYPE;
    exports2.ContextProvider = REACT_CONTEXT_TYPE;
    exports2.Element = REACT_ELEMENT_TYPE;
    exports2.ForwardRef = REACT_FORWARD_REF_TYPE;
    exports2.Fragment = REACT_FRAGMENT_TYPE;
    exports2.Lazy = REACT_LAZY_TYPE;
    exports2.Memo = REACT_MEMO_TYPE;
    exports2.Portal = REACT_PORTAL_TYPE;
    exports2.Profiler = REACT_PROFILER_TYPE;
    exports2.StrictMode = REACT_STRICT_MODE_TYPE;
    exports2.Suspense = REACT_SUSPENSE_TYPE;
    exports2.SuspenseList = REACT_SUSPENSE_LIST_TYPE;
    exports2.isContextConsumer = function(object) {
      return typeOf(object) === REACT_CONSUMER_TYPE;
    };
    exports2.isContextProvider = function(object) {
      return typeOf(object) === REACT_CONTEXT_TYPE;
    };
    exports2.isElement = function(object) {
      return "object" === typeof object && null !== object && object.$$typeof === REACT_ELEMENT_TYPE;
    };
    exports2.isForwardRef = function(object) {
      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    };
    exports2.isFragment = function(object) {
      return typeOf(object) === REACT_FRAGMENT_TYPE;
    };
    exports2.isLazy = function(object) {
      return typeOf(object) === REACT_LAZY_TYPE;
    };
    exports2.isMemo = function(object) {
      return typeOf(object) === REACT_MEMO_TYPE;
    };
    exports2.isPortal = function(object) {
      return typeOf(object) === REACT_PORTAL_TYPE;
    };
    exports2.isProfiler = function(object) {
      return typeOf(object) === REACT_PROFILER_TYPE;
    };
    exports2.isStrictMode = function(object) {
      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    };
    exports2.isSuspense = function(object) {
      return typeOf(object) === REACT_SUSPENSE_TYPE;
    };
    exports2.isSuspenseList = function(object) {
      return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
    };
    exports2.isValidElementType = function(type) {
      return "string" === typeof type || "function" === typeof type || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || "object" === typeof type && null !== type && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_CONSUMER_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_CLIENT_REFERENCE || void 0 !== type.getModuleId) ? true : false;
    };
    exports2.typeOf = typeOf;
  }
});

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development3 = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports2) {
    "use strict";
    init_define_process_env();
    "production" !== define_process_env_default.NODE_ENV && function() {
      function typeOf(object) {
        if ("object" === typeof object && null !== object) {
          var $$typeof = object.$$typeof;
          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              switch (object = object.type, object) {
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                case REACT_SUSPENSE_LIST_TYPE:
                case REACT_VIEW_TRANSITION_TYPE:
                  return object;
                default:
                  switch (object = object && object.$$typeof, object) {
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_LAZY_TYPE:
                    case REACT_MEMO_TYPE:
                      return object;
                    case REACT_CONSUMER_TYPE:
                      return object;
                    default:
                      return $$typeof;
                  }
              }
            case REACT_PORTAL_TYPE:
              return $$typeof;
          }
        }
      }
      var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      Symbol.for("react.provider");
      var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_VIEW_TRANSITION_TYPE = Symbol.for("react.view_transition"), REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
      exports2.ContextConsumer = REACT_CONSUMER_TYPE;
      exports2.ContextProvider = REACT_CONTEXT_TYPE;
      exports2.Element = REACT_ELEMENT_TYPE;
      exports2.ForwardRef = REACT_FORWARD_REF_TYPE;
      exports2.Fragment = REACT_FRAGMENT_TYPE;
      exports2.Lazy = REACT_LAZY_TYPE;
      exports2.Memo = REACT_MEMO_TYPE;
      exports2.Portal = REACT_PORTAL_TYPE;
      exports2.Profiler = REACT_PROFILER_TYPE;
      exports2.StrictMode = REACT_STRICT_MODE_TYPE;
      exports2.Suspense = REACT_SUSPENSE_TYPE;
      exports2.SuspenseList = REACT_SUSPENSE_LIST_TYPE;
      exports2.isContextConsumer = function(object) {
        return typeOf(object) === REACT_CONSUMER_TYPE;
      };
      exports2.isContextProvider = function(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
      };
      exports2.isElement = function(object) {
        return "object" === typeof object && null !== object && object.$$typeof === REACT_ELEMENT_TYPE;
      };
      exports2.isForwardRef = function(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
      };
      exports2.isFragment = function(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
      };
      exports2.isLazy = function(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
      };
      exports2.isMemo = function(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
      };
      exports2.isPortal = function(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
      };
      exports2.isProfiler = function(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
      };
      exports2.isStrictMode = function(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
      };
      exports2.isSuspense = function(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
      };
      exports2.isSuspenseList = function(object) {
        return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
      };
      exports2.isValidElementType = function(type) {
        return "string" === typeof type || "function" === typeof type || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || "object" === typeof type && null !== type && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_CONSUMER_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_CLIENT_REFERENCE || void 0 !== type.getModuleId) ? true : false;
      };
      exports2.typeOf = typeOf;
    }();
  }
});

// node_modules/react-is/index.js
var require_react_is3 = __commonJS({
  "node_modules/react-is/index.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    if (define_process_env_default.NODE_ENV === "production") {
      module2.exports = require_react_is_production();
    } else {
      module2.exports = require_react_is_development3();
    }
  }
});

// node_modules/@mui/utils/deepmerge/deepmerge.js
var require_deepmerge = __commonJS({
  "node_modules/@mui/utils/deepmerge/deepmerge.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = deepmerge;
    exports2.isPlainObject = isPlainObject;
    var React7 = _interopRequireWildcard(require_react());
    var _reactIs = require_react_is3();
    function isPlainObject(item) {
      if (typeof item !== "object" || item === null) {
        return false;
      }
      const prototype = Object.getPrototypeOf(item);
      return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in item) && !(Symbol.iterator in item);
    }
    function deepClone(source) {
      if (/* @__PURE__ */ React7.isValidElement(source) || (0, _reactIs.isValidElementType)(source) || !isPlainObject(source)) {
        return source;
      }
      const output = {};
      Object.keys(source).forEach((key) => {
        output[key] = deepClone(source[key]);
      });
      return output;
    }
    function deepmerge(target, source, options = {
      clone: true
    }) {
      const output = options.clone ? {
        ...target
      } : target;
      if (isPlainObject(target) && isPlainObject(source)) {
        Object.keys(source).forEach((key) => {
          if (/* @__PURE__ */ React7.isValidElement(source[key]) || (0, _reactIs.isValidElementType)(source[key])) {
            output[key] = source[key];
          } else if (isPlainObject(source[key]) && // Avoid prototype pollution
          Object.prototype.hasOwnProperty.call(target, key) && isPlainObject(target[key])) {
            output[key] = deepmerge(target[key], source[key], options);
          } else if (options.clone) {
            output[key] = isPlainObject(source[key]) ? deepClone(source[key]) : source[key];
          } else {
            output[key] = source[key];
          }
        });
      }
      return output;
    }
  }
});

// node_modules/@mui/utils/deepmerge/index.js
var require_deepmerge2 = __commonJS({
  "node_modules/@mui/utils/deepmerge/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _deepmerge.default;
      }
    });
    var _deepmerge = _interopRequireWildcard(require_deepmerge());
    Object.keys(_deepmerge).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _deepmerge[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _deepmerge[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node_modules/@mui/system/createBreakpoints/createBreakpoints.js
var require_createBreakpoints = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/createBreakpoints/createBreakpoints.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.breakpointKeys = void 0;
    exports2.default = createBreakpoints;
    var breakpointKeys = exports2.breakpointKeys = ["xs", "sm", "md", "lg", "xl"];
    var sortBreakpointsValues = (values) => {
      const breakpointsAsArray = Object.keys(values).map((key) => ({
        key,
        val: values[key]
      })) || [];
      breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
      return breakpointsAsArray.reduce((acc, obj) => {
        return {
          ...acc,
          [obj.key]: obj.val
        };
      }, {});
    };
    function createBreakpoints(breakpoints) {
      const {
        // The breakpoint **start** at this value.
        // For instance with the first breakpoint xs: [xs, sm).
        values = {
          xs: 0,
          // phone
          sm: 600,
          // tablet
          md: 900,
          // small laptop
          lg: 1200,
          // desktop
          xl: 1536
          // large screen
        },
        unit = "px",
        step = 5,
        ...other
      } = breakpoints;
      const sortedValues = sortBreakpointsValues(values);
      const keys = Object.keys(sortedValues);
      function up(key) {
        const value = typeof values[key] === "number" ? values[key] : key;
        return `@media (min-width:${value}${unit})`;
      }
      function down(key) {
        const value = typeof values[key] === "number" ? values[key] : key;
        return `@media (max-width:${value - step / 100}${unit})`;
      }
      function between(start, end) {
        const endIndex = keys.indexOf(end);
        return `@media (min-width:${typeof values[start] === "number" ? values[start] : start}${unit}) and (max-width:${(endIndex !== -1 && typeof values[keys[endIndex]] === "number" ? values[keys[endIndex]] : end) - step / 100}${unit})`;
      }
      function only(key) {
        if (keys.indexOf(key) + 1 < keys.length) {
          return between(key, keys[keys.indexOf(key) + 1]);
        }
        return up(key);
      }
      function not(key) {
        const keyIndex = keys.indexOf(key);
        if (keyIndex === 0) {
          return up(keys[1]);
        }
        if (keyIndex === keys.length - 1) {
          return down(keys[keyIndex]);
        }
        return between(key, keys[keys.indexOf(key) + 1]).replace("@media", "@media not all and");
      }
      return {
        keys,
        values: sortedValues,
        up,
        down,
        between,
        only,
        not,
        unit,
        ...other
      };
    }
  }
});

// node_modules/@mui/material/node_modules/@mui/system/cssContainerQueries/cssContainerQueries.js
var require_cssContainerQueries = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/cssContainerQueries/cssContainerQueries.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = cssContainerQueries;
    exports2.getContainerQuery = getContainerQuery;
    exports2.isCqShorthand = isCqShorthand;
    exports2.sortContainerQueries = sortContainerQueries;
    var _formatMuiErrorMessage2 = _interopRequireDefault(require_formatMuiErrorMessage2());
    function sortContainerQueries(theme2, css2) {
      if (!theme2.containerQueries) {
        return css2;
      }
      const sorted = Object.keys(css2).filter((key) => key.startsWith("@container")).sort((a, b) => {
        const regex = /min-width:\s*([0-9.]+)/;
        return +(a.match(regex)?.[1] || 0) - +(b.match(regex)?.[1] || 0);
      });
      if (!sorted.length) {
        return css2;
      }
      return sorted.reduce((acc, key) => {
        const value = css2[key];
        delete acc[key];
        acc[key] = value;
        return acc;
      }, {
        ...css2
      });
    }
    function isCqShorthand(breakpointKeys, value) {
      return value === "@" || value.startsWith("@") && (breakpointKeys.some((key) => value.startsWith(`@${key}`)) || !!value.match(/^@\d/));
    }
    function getContainerQuery(theme2, shorthand) {
      const matches = shorthand.match(/^@([^/]+)?\/?(.+)?$/);
      if (!matches) {
        if (define_process_env_default.NODE_ENV !== "production") {
          throw new Error(define_process_env_default.NODE_ENV !== "production" ? `MUI: The provided shorthand ${`(${shorthand})`} is invalid. The format should be \`@<breakpoint | number>\` or \`@<breakpoint | number>/<container>\`.
For example, \`@sm\` or \`@600\` or \`@40rem/sidebar\`.` : (0, _formatMuiErrorMessage2.default)(18, `(${shorthand})`));
        }
        return null;
      }
      const [, containerQuery, containerName] = matches;
      const value = Number.isNaN(+containerQuery) ? containerQuery || 0 : +containerQuery;
      return theme2.containerQueries(containerName).up(value);
    }
    function cssContainerQueries(themeInput) {
      const toContainerQuery = (mediaQuery, name) => mediaQuery.replace("@media", name ? `@container ${name}` : "@container");
      function attachCq(node3, name) {
        node3.up = (...args) => toContainerQuery(themeInput.breakpoints.up(...args), name);
        node3.down = (...args) => toContainerQuery(themeInput.breakpoints.down(...args), name);
        node3.between = (...args) => toContainerQuery(themeInput.breakpoints.between(...args), name);
        node3.only = (...args) => toContainerQuery(themeInput.breakpoints.only(...args), name);
        node3.not = (...args) => {
          const result = toContainerQuery(themeInput.breakpoints.not(...args), name);
          if (result.includes("not all and")) {
            return result.replace("not all and ", "").replace("min-width:", "width<").replace("max-width:", "width>").replace("and", "or");
          }
          return result;
        };
      }
      const node2 = {};
      const containerQueries = (name) => {
        attachCq(node2, name);
        return node2;
      };
      attachCq(containerQueries);
      return {
        ...themeInput,
        containerQueries
      };
    }
  }
});

// node_modules/@mui/material/node_modules/@mui/system/cssContainerQueries/index.js
var require_cssContainerQueries2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/cssContainerQueries/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _cssContainerQueries.default;
      }
    });
    Object.defineProperty(exports2, "getContainerQuery", {
      enumerable: true,
      get: function() {
        return _cssContainerQueries.getContainerQuery;
      }
    });
    Object.defineProperty(exports2, "isCqShorthand", {
      enumerable: true,
      get: function() {
        return _cssContainerQueries.isCqShorthand;
      }
    });
    Object.defineProperty(exports2, "sortContainerQueries", {
      enumerable: true,
      get: function() {
        return _cssContainerQueries.sortContainerQueries;
      }
    });
    var _cssContainerQueries = _interopRequireWildcard(require_cssContainerQueries());
  }
});

// node_modules/@mui/material/node_modules/@mui/system/createTheme/shape.js
var require_shape = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/createTheme/shape.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var shape = {
      borderRadius: 4
    };
    var _default = exports2.default = shape;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/responsivePropType/responsivePropType.js
var require_responsivePropType = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/responsivePropType/responsivePropType.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    var responsivePropType = define_process_env_default.NODE_ENV !== "production" ? _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.object, _propTypes.default.array]) : {};
    var _default = exports2.default = responsivePropType;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/responsivePropType/index.js
var require_responsivePropType2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/responsivePropType/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _responsivePropType.default;
      }
    });
    var _responsivePropType = _interopRequireDefault(require_responsivePropType());
  }
});

// node_modules/@mui/material/node_modules/@mui/system/merge/merge.js
var require_merge = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/merge/merge.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _deepmerge = _interopRequireDefault(require_deepmerge2());
    function merge2(acc, item) {
      if (!item) {
        return acc;
      }
      return (0, _deepmerge.default)(acc, item, {
        clone: false
        // No need to clone deep, it's way faster.
      });
    }
    var _default = exports2.default = merge2;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/merge/index.js
var require_merge2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/merge/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _merge.default;
      }
    });
    var _merge = _interopRequireDefault(require_merge());
  }
});

// node_modules/@mui/material/node_modules/@mui/system/breakpoints/breakpoints.js
var require_breakpoints = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/breakpoints/breakpoints.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.computeBreakpointsBase = computeBreakpointsBase;
    exports2.createEmptyBreakpointObject = createEmptyBreakpointObject;
    exports2.default = void 0;
    exports2.handleBreakpoints = handleBreakpoints;
    exports2.mergeBreakpointsInOrder = mergeBreakpointsInOrder;
    exports2.removeUnusedBreakpoints = removeUnusedBreakpoints;
    exports2.resolveBreakpointValues = resolveBreakpointValues;
    exports2.values = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _deepmerge = _interopRequireDefault(require_deepmerge2());
    var _merge = _interopRequireDefault(require_merge2());
    var _cssContainerQueries = require_cssContainerQueries2();
    var values = exports2.values = {
      xs: 0,
      // phone
      sm: 600,
      // tablet
      md: 900,
      // small laptop
      lg: 1200,
      // desktop
      xl: 1536
      // large screen
    };
    var defaultBreakpoints = {
      // Sorted ASC by size. That's important.
      // It can't be configured as it's used statically for propTypes.
      keys: ["xs", "sm", "md", "lg", "xl"],
      up: (key) => `@media (min-width:${values[key]}px)`
    };
    var defaultContainerQueries = {
      containerQueries: (containerName) => ({
        up: (key) => {
          let result = typeof key === "number" ? key : values[key] || key;
          if (typeof result === "number") {
            result = `${result}px`;
          }
          return containerName ? `@container ${containerName} (min-width:${result})` : `@container (min-width:${result})`;
        }
      })
    };
    function handleBreakpoints(props, propValue, styleFromPropValue) {
      const theme2 = props.theme || {};
      if (Array.isArray(propValue)) {
        const themeBreakpoints = theme2.breakpoints || defaultBreakpoints;
        return propValue.reduce((acc, item, index) => {
          acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
          return acc;
        }, {});
      }
      if (typeof propValue === "object") {
        const themeBreakpoints = theme2.breakpoints || defaultBreakpoints;
        return Object.keys(propValue).reduce((acc, breakpoint) => {
          if ((0, _cssContainerQueries.isCqShorthand)(themeBreakpoints.keys, breakpoint)) {
            const containerKey = (0, _cssContainerQueries.getContainerQuery)(theme2.containerQueries ? theme2 : defaultContainerQueries, breakpoint);
            if (containerKey) {
              acc[containerKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
            }
          } else if (Object.keys(themeBreakpoints.values || values).includes(breakpoint)) {
            const mediaKey = themeBreakpoints.up(breakpoint);
            acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
          } else {
            const cssKey = breakpoint;
            acc[cssKey] = propValue[cssKey];
          }
          return acc;
        }, {});
      }
      const output = styleFromPropValue(propValue);
      return output;
    }
    function breakpoints(styleFunction) {
      const newStyleFunction = (props) => {
        const theme2 = props.theme || {};
        const base = styleFunction(props);
        const themeBreakpoints = theme2.breakpoints || defaultBreakpoints;
        const extended = themeBreakpoints.keys.reduce((acc, key) => {
          if (props[key]) {
            acc = acc || {};
            acc[themeBreakpoints.up(key)] = styleFunction({
              theme: theme2,
              ...props[key]
            });
          }
          return acc;
        }, null);
        return (0, _merge.default)(base, extended);
      };
      newStyleFunction.propTypes = define_process_env_default.NODE_ENV !== "production" ? {
        ...styleFunction.propTypes,
        xs: _propTypes.default.object,
        sm: _propTypes.default.object,
        md: _propTypes.default.object,
        lg: _propTypes.default.object,
        xl: _propTypes.default.object
      } : {};
      newStyleFunction.filterProps = ["xs", "sm", "md", "lg", "xl", ...styleFunction.filterProps];
      return newStyleFunction;
    }
    function createEmptyBreakpointObject(breakpointsInput = {}) {
      const breakpointsInOrder = breakpointsInput.keys?.reduce((acc, key) => {
        const breakpointStyleKey = breakpointsInput.up(key);
        acc[breakpointStyleKey] = {};
        return acc;
      }, {});
      return breakpointsInOrder || {};
    }
    function removeUnusedBreakpoints(breakpointKeys, style) {
      return breakpointKeys.reduce((acc, key) => {
        const breakpointOutput = acc[key];
        const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
        if (isBreakpointUnused) {
          delete acc[key];
        }
        return acc;
      }, style);
    }
    function mergeBreakpointsInOrder(breakpointsInput, ...styles) {
      const emptyBreakpoints = createEmptyBreakpointObject(breakpointsInput);
      const mergedOutput = [emptyBreakpoints, ...styles].reduce((prev2, next2) => (0, _deepmerge.default)(prev2, next2), {});
      return removeUnusedBreakpoints(Object.keys(emptyBreakpoints), mergedOutput);
    }
    function computeBreakpointsBase(breakpointValues, themeBreakpoints) {
      if (typeof breakpointValues !== "object") {
        return {};
      }
      const base = {};
      const breakpointsKeys = Object.keys(themeBreakpoints);
      if (Array.isArray(breakpointValues)) {
        breakpointsKeys.forEach((breakpoint, i) => {
          if (i < breakpointValues.length) {
            base[breakpoint] = true;
          }
        });
      } else {
        breakpointsKeys.forEach((breakpoint) => {
          if (breakpointValues[breakpoint] != null) {
            base[breakpoint] = true;
          }
        });
      }
      return base;
    }
    function resolveBreakpointValues({
      values: breakpointValues,
      breakpoints: themeBreakpoints,
      base: customBase
    }) {
      const base = customBase || computeBreakpointsBase(breakpointValues, themeBreakpoints);
      const keys = Object.keys(base);
      if (keys.length === 0) {
        return breakpointValues;
      }
      let previous;
      return keys.reduce((acc, breakpoint, i) => {
        if (Array.isArray(breakpointValues)) {
          acc[breakpoint] = breakpointValues[i] != null ? breakpointValues[i] : breakpointValues[previous];
          previous = i;
        } else if (typeof breakpointValues === "object") {
          acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous];
          previous = breakpoint;
        } else {
          acc[breakpoint] = breakpointValues;
        }
        return acc;
      }, {});
    }
    var _default = exports2.default = breakpoints;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/breakpoints/index.js
var require_breakpoints2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/breakpoints/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _breakpoints.default;
      }
    });
    var _breakpoints = _interopRequireWildcard(require_breakpoints());
    Object.keys(_breakpoints).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _breakpoints[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _breakpoints[key];
        }
      });
    });
  }
});

// node_modules/@mui/utils/capitalize/capitalize.js
var require_capitalize = __commonJS({
  "node_modules/@mui/utils/capitalize/capitalize.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = capitalize;
    var _formatMuiErrorMessage2 = _interopRequireDefault(require_formatMuiErrorMessage2());
    function capitalize(string) {
      if (typeof string !== "string") {
        throw new Error(define_process_env_default.NODE_ENV !== "production" ? "MUI: `capitalize(string)` expects a string argument." : (0, _formatMuiErrorMessage2.default)(7));
      }
      return string.charAt(0).toUpperCase() + string.slice(1);
    }
  }
});

// node_modules/@mui/utils/capitalize/index.js
var require_capitalize2 = __commonJS({
  "node_modules/@mui/utils/capitalize/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _capitalize.default;
      }
    });
    var _capitalize = _interopRequireDefault(require_capitalize());
  }
});

// node_modules/@mui/material/node_modules/@mui/system/style/style.js
var require_style = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/style/style.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getPath = getPath;
    exports2.getStyleValue = getStyleValue;
    var _capitalize = _interopRequireDefault(require_capitalize2());
    var _responsivePropType = _interopRequireDefault(require_responsivePropType2());
    var _breakpoints = require_breakpoints2();
    function getPath(obj, path, checkVars = true) {
      if (!path || typeof path !== "string") {
        return null;
      }
      if (obj && obj.vars && checkVars) {
        const val = `vars.${path}`.split(".").reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
        if (val != null) {
          return val;
        }
      }
      return path.split(".").reduce((acc, item) => {
        if (acc && acc[item] != null) {
          return acc[item];
        }
        return null;
      }, obj);
    }
    function getStyleValue(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
      let value;
      if (typeof themeMapping === "function") {
        value = themeMapping(propValueFinal);
      } else if (Array.isArray(themeMapping)) {
        value = themeMapping[propValueFinal] || userValue;
      } else {
        value = getPath(themeMapping, propValueFinal) || userValue;
      }
      if (transform) {
        value = transform(value, userValue, themeMapping);
      }
      return value;
    }
    function style(options) {
      const {
        prop,
        cssProperty = options.prop,
        themeKey,
        transform
      } = options;
      const fn = (props) => {
        if (props[prop] == null) {
          return null;
        }
        const propValue = props[prop];
        const theme2 = props.theme;
        const themeMapping = getPath(theme2, themeKey) || {};
        const styleFromPropValue = (propValueFinal) => {
          let value = getStyleValue(themeMapping, transform, propValueFinal);
          if (propValueFinal === value && typeof propValueFinal === "string") {
            value = getStyleValue(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : (0, _capitalize.default)(propValueFinal)}`, propValueFinal);
          }
          if (cssProperty === false) {
            return value;
          }
          return {
            [cssProperty]: value
          };
        };
        return (0, _breakpoints.handleBreakpoints)(props, propValue, styleFromPropValue);
      };
      fn.propTypes = define_process_env_default.NODE_ENV !== "production" ? {
        [prop]: _responsivePropType.default
      } : {};
      fn.filterProps = [prop];
      return fn;
    }
    var _default = exports2.default = style;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/style/index.js
var require_style2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/style/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _style.default;
      }
    });
    var _style = _interopRequireWildcard(require_style());
    Object.keys(_style).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _style[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _style[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node_modules/@mui/system/memoize/memoize.js
var require_memoize = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/memoize/memoize.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = memoize2;
    function memoize2(fn) {
      const cache = {};
      return (arg) => {
        if (cache[arg] === void 0) {
          cache[arg] = fn(arg);
        }
        return cache[arg];
      };
    }
  }
});

// node_modules/@mui/material/node_modules/@mui/system/memoize/index.js
var require_memoize2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/memoize/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _memoize.default;
      }
    });
    var _memoize = _interopRequireDefault(require_memoize());
  }
});

// node_modules/@mui/material/node_modules/@mui/system/spacing/spacing.js
var require_spacing = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/spacing/spacing.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.createUnarySpacing = createUnarySpacing;
    exports2.createUnaryUnit = createUnaryUnit;
    exports2.default = void 0;
    exports2.getStyleFromPropValue = getStyleFromPropValue;
    exports2.getValue = getValue;
    exports2.margin = margin;
    exports2.marginKeys = void 0;
    exports2.padding = padding;
    exports2.paddingKeys = void 0;
    var _responsivePropType = _interopRequireDefault(require_responsivePropType2());
    var _breakpoints = require_breakpoints2();
    var _style = require_style2();
    var _merge = _interopRequireDefault(require_merge2());
    var _memoize = _interopRequireDefault(require_memoize2());
    var properties = {
      m: "margin",
      p: "padding"
    };
    var directions = {
      t: "Top",
      r: "Right",
      b: "Bottom",
      l: "Left",
      x: ["Left", "Right"],
      y: ["Top", "Bottom"]
    };
    var aliases = {
      marginX: "mx",
      marginY: "my",
      paddingX: "px",
      paddingY: "py"
    };
    var getCssProperties = (0, _memoize.default)((prop) => {
      if (prop.length > 2) {
        if (aliases[prop]) {
          prop = aliases[prop];
        } else {
          return [prop];
        }
      }
      const [a, b] = prop.split("");
      const property = properties[a];
      const direction = directions[b] || "";
      return Array.isArray(direction) ? direction.map((dir) => property + dir) : [property + direction];
    });
    var marginKeys = exports2.marginKeys = ["m", "mt", "mr", "mb", "ml", "mx", "my", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "marginInline", "marginInlineStart", "marginInlineEnd", "marginBlock", "marginBlockStart", "marginBlockEnd"];
    var paddingKeys = exports2.paddingKeys = ["p", "pt", "pr", "pb", "pl", "px", "py", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY", "paddingInline", "paddingInlineStart", "paddingInlineEnd", "paddingBlock", "paddingBlockStart", "paddingBlockEnd"];
    var spacingKeys = [...marginKeys, ...paddingKeys];
    function createUnaryUnit(theme2, themeKey, defaultValue, propName) {
      const themeSpacing = (0, _style.getPath)(theme2, themeKey, true) ?? defaultValue;
      if (typeof themeSpacing === "number" || typeof themeSpacing === "string") {
        return (val) => {
          if (typeof val === "string") {
            return val;
          }
          if (define_process_env_default.NODE_ENV !== "production") {
            if (typeof val !== "number") {
              console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${val}.`);
            }
          }
          if (typeof themeSpacing === "string") {
            return `calc(${val} * ${themeSpacing})`;
          }
          return themeSpacing * val;
        };
      }
      if (Array.isArray(themeSpacing)) {
        return (val) => {
          if (typeof val === "string") {
            return val;
          }
          const abs2 = Math.abs(val);
          if (define_process_env_default.NODE_ENV !== "production") {
            if (!Number.isInteger(abs2)) {
              console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join("\n"));
            } else if (abs2 > themeSpacing.length - 1) {
              console.error([`MUI: The value provided (${abs2}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs2} > ${themeSpacing.length - 1}, you need to add the missing values.`].join("\n"));
            }
          }
          const transformed = themeSpacing[abs2];
          if (val >= 0) {
            return transformed;
          }
          if (typeof transformed === "number") {
            return -transformed;
          }
          return `-${transformed}`;
        };
      }
      if (typeof themeSpacing === "function") {
        return themeSpacing;
      }
      if (define_process_env_default.NODE_ENV !== "production") {
        console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, "It should be a number, an array or a function."].join("\n"));
      }
      return () => void 0;
    }
    function createUnarySpacing(theme2) {
      return createUnaryUnit(theme2, "spacing", 8, "spacing");
    }
    function getValue(transformer, propValue) {
      if (typeof propValue === "string" || propValue == null) {
        return propValue;
      }
      return transformer(propValue);
    }
    function getStyleFromPropValue(cssProperties, transformer) {
      return (propValue) => cssProperties.reduce((acc, cssProperty) => {
        acc[cssProperty] = getValue(transformer, propValue);
        return acc;
      }, {});
    }
    function resolveCssProperty(props, keys, prop, transformer) {
      if (!keys.includes(prop)) {
        return null;
      }
      const cssProperties = getCssProperties(prop);
      const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
      const propValue = props[prop];
      return (0, _breakpoints.handleBreakpoints)(props, propValue, styleFromPropValue);
    }
    function style(props, keys) {
      const transformer = createUnarySpacing(props.theme);
      return Object.keys(props).map((prop) => resolveCssProperty(props, keys, prop, transformer)).reduce(_merge.default, {});
    }
    function margin(props) {
      return style(props, marginKeys);
    }
    margin.propTypes = define_process_env_default.NODE_ENV !== "production" ? marginKeys.reduce((obj, key) => {
      obj[key] = _responsivePropType.default;
      return obj;
    }, {}) : {};
    margin.filterProps = marginKeys;
    function padding(props) {
      return style(props, paddingKeys);
    }
    padding.propTypes = define_process_env_default.NODE_ENV !== "production" ? paddingKeys.reduce((obj, key) => {
      obj[key] = _responsivePropType.default;
      return obj;
    }, {}) : {};
    padding.filterProps = paddingKeys;
    function spacing(props) {
      return style(props, spacingKeys);
    }
    spacing.propTypes = define_process_env_default.NODE_ENV !== "production" ? spacingKeys.reduce((obj, key) => {
      obj[key] = _responsivePropType.default;
      return obj;
    }, {}) : {};
    spacing.filterProps = spacingKeys;
    var _default = exports2.default = spacing;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/spacing/index.js
var require_spacing2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/spacing/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _spacing.default;
      }
    });
    var _spacing = _interopRequireWildcard(require_spacing());
    Object.keys(_spacing).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _spacing[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _spacing[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node_modules/@mui/system/createTheme/createSpacing.js
var require_createSpacing = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/createTheme/createSpacing.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = createSpacing;
    var _spacing = require_spacing2();
    function createSpacing(spacingInput = 8, transform = (0, _spacing.createUnarySpacing)({
      spacing: spacingInput
    })) {
      if (spacingInput.mui) {
        return spacingInput;
      }
      const spacing = (...argsInput) => {
        if (define_process_env_default.NODE_ENV !== "production") {
          if (!(argsInput.length <= 4)) {
            console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
          }
        }
        const args = argsInput.length === 0 ? [1] : argsInput;
        return args.map((argument) => {
          const output = transform(argument);
          return typeof output === "number" ? `${output}px` : output;
        }).join(" ");
      };
      spacing.mui = true;
      return spacing;
    }
  }
});

// node_modules/@mui/material/node_modules/@mui/system/compose/compose.js
var require_compose = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/compose/compose.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _merge = _interopRequireDefault(require_merge2());
    function compose(...styles) {
      const handlers = styles.reduce((acc, style) => {
        style.filterProps.forEach((prop) => {
          acc[prop] = style;
        });
        return acc;
      }, {});
      const fn = (props) => {
        return Object.keys(props).reduce((acc, prop) => {
          if (handlers[prop]) {
            return (0, _merge.default)(acc, handlers[prop](props));
          }
          return acc;
        }, {});
      };
      fn.propTypes = define_process_env_default.NODE_ENV !== "production" ? styles.reduce((acc, style) => Object.assign(acc, style.propTypes), {}) : {};
      fn.filterProps = styles.reduce((acc, style) => acc.concat(style.filterProps), []);
      return fn;
    }
    var _default = exports2.default = compose;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/compose/index.js
var require_compose2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/compose/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _compose.default;
      }
    });
    var _compose = _interopRequireDefault(require_compose());
  }
});

// node_modules/@mui/material/node_modules/@mui/system/borders/borders.js
var require_borders = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/borders/borders.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.borderTopColor = exports2.borderTop = exports2.borderRightColor = exports2.borderRight = exports2.borderRadius = exports2.borderLeftColor = exports2.borderLeft = exports2.borderColor = exports2.borderBottomColor = exports2.borderBottom = exports2.border = void 0;
    exports2.borderTransform = borderTransform;
    exports2.outlineColor = exports2.outline = exports2.default = void 0;
    var _responsivePropType = _interopRequireDefault(require_responsivePropType2());
    var _style = _interopRequireDefault(require_style2());
    var _compose = _interopRequireDefault(require_compose2());
    var _spacing = require_spacing2();
    var _breakpoints = require_breakpoints2();
    function borderTransform(value) {
      if (typeof value !== "number") {
        return value;
      }
      return `${value}px solid`;
    }
    function createBorderStyle(prop, transform) {
      return (0, _style.default)({
        prop,
        themeKey: "borders",
        transform
      });
    }
    var border = exports2.border = createBorderStyle("border", borderTransform);
    var borderTop = exports2.borderTop = createBorderStyle("borderTop", borderTransform);
    var borderRight = exports2.borderRight = createBorderStyle("borderRight", borderTransform);
    var borderBottom = exports2.borderBottom = createBorderStyle("borderBottom", borderTransform);
    var borderLeft = exports2.borderLeft = createBorderStyle("borderLeft", borderTransform);
    var borderColor = exports2.borderColor = createBorderStyle("borderColor");
    var borderTopColor = exports2.borderTopColor = createBorderStyle("borderTopColor");
    var borderRightColor = exports2.borderRightColor = createBorderStyle("borderRightColor");
    var borderBottomColor = exports2.borderBottomColor = createBorderStyle("borderBottomColor");
    var borderLeftColor = exports2.borderLeftColor = createBorderStyle("borderLeftColor");
    var outline = exports2.outline = createBorderStyle("outline", borderTransform);
    var outlineColor = exports2.outlineColor = createBorderStyle("outlineColor");
    var borderRadius = (props) => {
      if (props.borderRadius !== void 0 && props.borderRadius !== null) {
        const transformer = (0, _spacing.createUnaryUnit)(props.theme, "shape.borderRadius", 4, "borderRadius");
        const styleFromPropValue = (propValue) => ({
          borderRadius: (0, _spacing.getValue)(transformer, propValue)
        });
        return (0, _breakpoints.handleBreakpoints)(props, props.borderRadius, styleFromPropValue);
      }
      return null;
    };
    exports2.borderRadius = borderRadius;
    borderRadius.propTypes = define_process_env_default.NODE_ENV !== "production" ? {
      borderRadius: _responsivePropType.default
    } : {};
    borderRadius.filterProps = ["borderRadius"];
    var borders = (0, _compose.default)(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius, outline, outlineColor);
    var _default = exports2.default = borders;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/borders/index.js
var require_borders2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/borders/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _borders.default;
      }
    });
    var _borders = _interopRequireWildcard(require_borders());
    Object.keys(_borders).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _borders[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _borders[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node_modules/@mui/system/cssGrid/cssGrid.js
var require_cssGrid = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/cssGrid/cssGrid.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.rowGap = exports2.gridTemplateRows = exports2.gridTemplateColumns = exports2.gridTemplateAreas = exports2.gridRow = exports2.gridColumn = exports2.gridAutoRows = exports2.gridAutoFlow = exports2.gridAutoColumns = exports2.gridArea = exports2.gap = exports2.default = exports2.columnGap = void 0;
    var _style = _interopRequireDefault(require_style2());
    var _compose = _interopRequireDefault(require_compose2());
    var _spacing = require_spacing2();
    var _breakpoints = require_breakpoints2();
    var _responsivePropType = _interopRequireDefault(require_responsivePropType2());
    var gap = (props) => {
      if (props.gap !== void 0 && props.gap !== null) {
        const transformer = (0, _spacing.createUnaryUnit)(props.theme, "spacing", 8, "gap");
        const styleFromPropValue = (propValue) => ({
          gap: (0, _spacing.getValue)(transformer, propValue)
        });
        return (0, _breakpoints.handleBreakpoints)(props, props.gap, styleFromPropValue);
      }
      return null;
    };
    exports2.gap = gap;
    gap.propTypes = define_process_env_default.NODE_ENV !== "production" ? {
      gap: _responsivePropType.default
    } : {};
    gap.filterProps = ["gap"];
    var columnGap = (props) => {
      if (props.columnGap !== void 0 && props.columnGap !== null) {
        const transformer = (0, _spacing.createUnaryUnit)(props.theme, "spacing", 8, "columnGap");
        const styleFromPropValue = (propValue) => ({
          columnGap: (0, _spacing.getValue)(transformer, propValue)
        });
        return (0, _breakpoints.handleBreakpoints)(props, props.columnGap, styleFromPropValue);
      }
      return null;
    };
    exports2.columnGap = columnGap;
    columnGap.propTypes = define_process_env_default.NODE_ENV !== "production" ? {
      columnGap: _responsivePropType.default
    } : {};
    columnGap.filterProps = ["columnGap"];
    var rowGap = (props) => {
      if (props.rowGap !== void 0 && props.rowGap !== null) {
        const transformer = (0, _spacing.createUnaryUnit)(props.theme, "spacing", 8, "rowGap");
        const styleFromPropValue = (propValue) => ({
          rowGap: (0, _spacing.getValue)(transformer, propValue)
        });
        return (0, _breakpoints.handleBreakpoints)(props, props.rowGap, styleFromPropValue);
      }
      return null;
    };
    exports2.rowGap = rowGap;
    rowGap.propTypes = define_process_env_default.NODE_ENV !== "production" ? {
      rowGap: _responsivePropType.default
    } : {};
    rowGap.filterProps = ["rowGap"];
    var gridColumn = exports2.gridColumn = (0, _style.default)({
      prop: "gridColumn"
    });
    var gridRow = exports2.gridRow = (0, _style.default)({
      prop: "gridRow"
    });
    var gridAutoFlow = exports2.gridAutoFlow = (0, _style.default)({
      prop: "gridAutoFlow"
    });
    var gridAutoColumns = exports2.gridAutoColumns = (0, _style.default)({
      prop: "gridAutoColumns"
    });
    var gridAutoRows = exports2.gridAutoRows = (0, _style.default)({
      prop: "gridAutoRows"
    });
    var gridTemplateColumns = exports2.gridTemplateColumns = (0, _style.default)({
      prop: "gridTemplateColumns"
    });
    var gridTemplateRows = exports2.gridTemplateRows = (0, _style.default)({
      prop: "gridTemplateRows"
    });
    var gridTemplateAreas = exports2.gridTemplateAreas = (0, _style.default)({
      prop: "gridTemplateAreas"
    });
    var gridArea = exports2.gridArea = (0, _style.default)({
      prop: "gridArea"
    });
    var grid = (0, _compose.default)(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
    var _default = exports2.default = grid;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/cssGrid/index.js
var require_cssGrid2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/cssGrid/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _cssGrid.default;
      }
    });
    var _cssGrid = _interopRequireWildcard(require_cssGrid());
    Object.keys(_cssGrid).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _cssGrid[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _cssGrid[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node_modules/@mui/system/palette/palette.js
var require_palette = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/palette/palette.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = exports2.color = exports2.bgcolor = exports2.backgroundColor = void 0;
    exports2.paletteTransform = paletteTransform;
    var _style = _interopRequireDefault(require_style2());
    var _compose = _interopRequireDefault(require_compose2());
    function paletteTransform(value, userValue) {
      if (userValue === "grey") {
        return userValue;
      }
      return value;
    }
    var color = exports2.color = (0, _style.default)({
      prop: "color",
      themeKey: "palette",
      transform: paletteTransform
    });
    var bgcolor = exports2.bgcolor = (0, _style.default)({
      prop: "bgcolor",
      cssProperty: "backgroundColor",
      themeKey: "palette",
      transform: paletteTransform
    });
    var backgroundColor = exports2.backgroundColor = (0, _style.default)({
      prop: "backgroundColor",
      themeKey: "palette",
      transform: paletteTransform
    });
    var palette = (0, _compose.default)(color, bgcolor, backgroundColor);
    var _default = exports2.default = palette;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/palette/index.js
var require_palette2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/palette/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _palette.default;
      }
    });
    var _palette = _interopRequireWildcard(require_palette());
    Object.keys(_palette).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _palette[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _palette[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node_modules/@mui/system/sizing/sizing.js
var require_sizing = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/sizing/sizing.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.sizeWidth = exports2.sizeHeight = exports2.minWidth = exports2.minHeight = exports2.maxWidth = exports2.maxHeight = exports2.height = exports2.default = exports2.boxSizing = void 0;
    exports2.sizingTransform = sizingTransform;
    exports2.width = void 0;
    var _style = _interopRequireDefault(require_style2());
    var _compose = _interopRequireDefault(require_compose2());
    var _breakpoints = require_breakpoints2();
    function sizingTransform(value) {
      return value <= 1 && value !== 0 ? `${value * 100}%` : value;
    }
    var width = exports2.width = (0, _style.default)({
      prop: "width",
      transform: sizingTransform
    });
    var maxWidth = (props) => {
      if (props.maxWidth !== void 0 && props.maxWidth !== null) {
        const styleFromPropValue = (propValue) => {
          const breakpoint = props.theme?.breakpoints?.values?.[propValue] || _breakpoints.values[propValue];
          if (!breakpoint) {
            return {
              maxWidth: sizingTransform(propValue)
            };
          }
          if (props.theme?.breakpoints?.unit !== "px") {
            return {
              maxWidth: `${breakpoint}${props.theme.breakpoints.unit}`
            };
          }
          return {
            maxWidth: breakpoint
          };
        };
        return (0, _breakpoints.handleBreakpoints)(props, props.maxWidth, styleFromPropValue);
      }
      return null;
    };
    exports2.maxWidth = maxWidth;
    maxWidth.filterProps = ["maxWidth"];
    var minWidth = exports2.minWidth = (0, _style.default)({
      prop: "minWidth",
      transform: sizingTransform
    });
    var height = exports2.height = (0, _style.default)({
      prop: "height",
      transform: sizingTransform
    });
    var maxHeight = exports2.maxHeight = (0, _style.default)({
      prop: "maxHeight",
      transform: sizingTransform
    });
    var minHeight = exports2.minHeight = (0, _style.default)({
      prop: "minHeight",
      transform: sizingTransform
    });
    var sizeWidth = exports2.sizeWidth = (0, _style.default)({
      prop: "size",
      cssProperty: "width",
      transform: sizingTransform
    });
    var sizeHeight = exports2.sizeHeight = (0, _style.default)({
      prop: "size",
      cssProperty: "height",
      transform: sizingTransform
    });
    var boxSizing = exports2.boxSizing = (0, _style.default)({
      prop: "boxSizing"
    });
    var sizing = (0, _compose.default)(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
    var _default = exports2.default = sizing;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/sizing/index.js
var require_sizing2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/sizing/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _sizing.default;
      }
    });
    var _sizing = _interopRequireWildcard(require_sizing());
    Object.keys(_sizing).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _sizing[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _sizing[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node_modules/@mui/system/styleFunctionSx/defaultSxConfig.js
var require_defaultSxConfig = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/styleFunctionSx/defaultSxConfig.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _spacing = require_spacing2();
    var _borders = require_borders2();
    var _cssGrid = require_cssGrid2();
    var _palette = require_palette2();
    var _sizing = require_sizing2();
    var defaultSxConfig = {
      // borders
      border: {
        themeKey: "borders",
        transform: _borders.borderTransform
      },
      borderTop: {
        themeKey: "borders",
        transform: _borders.borderTransform
      },
      borderRight: {
        themeKey: "borders",
        transform: _borders.borderTransform
      },
      borderBottom: {
        themeKey: "borders",
        transform: _borders.borderTransform
      },
      borderLeft: {
        themeKey: "borders",
        transform: _borders.borderTransform
      },
      borderColor: {
        themeKey: "palette"
      },
      borderTopColor: {
        themeKey: "palette"
      },
      borderRightColor: {
        themeKey: "palette"
      },
      borderBottomColor: {
        themeKey: "palette"
      },
      borderLeftColor: {
        themeKey: "palette"
      },
      outline: {
        themeKey: "borders",
        transform: _borders.borderTransform
      },
      outlineColor: {
        themeKey: "palette"
      },
      borderRadius: {
        themeKey: "shape.borderRadius",
        style: _borders.borderRadius
      },
      // palette
      color: {
        themeKey: "palette",
        transform: _palette.paletteTransform
      },
      bgcolor: {
        themeKey: "palette",
        cssProperty: "backgroundColor",
        transform: _palette.paletteTransform
      },
      backgroundColor: {
        themeKey: "palette",
        transform: _palette.paletteTransform
      },
      // spacing
      p: {
        style: _spacing.padding
      },
      pt: {
        style: _spacing.padding
      },
      pr: {
        style: _spacing.padding
      },
      pb: {
        style: _spacing.padding
      },
      pl: {
        style: _spacing.padding
      },
      px: {
        style: _spacing.padding
      },
      py: {
        style: _spacing.padding
      },
      padding: {
        style: _spacing.padding
      },
      paddingTop: {
        style: _spacing.padding
      },
      paddingRight: {
        style: _spacing.padding
      },
      paddingBottom: {
        style: _spacing.padding
      },
      paddingLeft: {
        style: _spacing.padding
      },
      paddingX: {
        style: _spacing.padding
      },
      paddingY: {
        style: _spacing.padding
      },
      paddingInline: {
        style: _spacing.padding
      },
      paddingInlineStart: {
        style: _spacing.padding
      },
      paddingInlineEnd: {
        style: _spacing.padding
      },
      paddingBlock: {
        style: _spacing.padding
      },
      paddingBlockStart: {
        style: _spacing.padding
      },
      paddingBlockEnd: {
        style: _spacing.padding
      },
      m: {
        style: _spacing.margin
      },
      mt: {
        style: _spacing.margin
      },
      mr: {
        style: _spacing.margin
      },
      mb: {
        style: _spacing.margin
      },
      ml: {
        style: _spacing.margin
      },
      mx: {
        style: _spacing.margin
      },
      my: {
        style: _spacing.margin
      },
      margin: {
        style: _spacing.margin
      },
      marginTop: {
        style: _spacing.margin
      },
      marginRight: {
        style: _spacing.margin
      },
      marginBottom: {
        style: _spacing.margin
      },
      marginLeft: {
        style: _spacing.margin
      },
      marginX: {
        style: _spacing.margin
      },
      marginY: {
        style: _spacing.margin
      },
      marginInline: {
        style: _spacing.margin
      },
      marginInlineStart: {
        style: _spacing.margin
      },
      marginInlineEnd: {
        style: _spacing.margin
      },
      marginBlock: {
        style: _spacing.margin
      },
      marginBlockStart: {
        style: _spacing.margin
      },
      marginBlockEnd: {
        style: _spacing.margin
      },
      // display
      displayPrint: {
        cssProperty: false,
        transform: (value) => ({
          "@media print": {
            display: value
          }
        })
      },
      display: {},
      overflow: {},
      textOverflow: {},
      visibility: {},
      whiteSpace: {},
      // flexbox
      flexBasis: {},
      flexDirection: {},
      flexWrap: {},
      justifyContent: {},
      alignItems: {},
      alignContent: {},
      order: {},
      flex: {},
      flexGrow: {},
      flexShrink: {},
      alignSelf: {},
      justifyItems: {},
      justifySelf: {},
      // grid
      gap: {
        style: _cssGrid.gap
      },
      rowGap: {
        style: _cssGrid.rowGap
      },
      columnGap: {
        style: _cssGrid.columnGap
      },
      gridColumn: {},
      gridRow: {},
      gridAutoFlow: {},
      gridAutoColumns: {},
      gridAutoRows: {},
      gridTemplateColumns: {},
      gridTemplateRows: {},
      gridTemplateAreas: {},
      gridArea: {},
      // positions
      position: {},
      zIndex: {
        themeKey: "zIndex"
      },
      top: {},
      right: {},
      bottom: {},
      left: {},
      // shadows
      boxShadow: {
        themeKey: "shadows"
      },
      // sizing
      width: {
        transform: _sizing.sizingTransform
      },
      maxWidth: {
        style: _sizing.maxWidth
      },
      minWidth: {
        transform: _sizing.sizingTransform
      },
      height: {
        transform: _sizing.sizingTransform
      },
      maxHeight: {
        transform: _sizing.sizingTransform
      },
      minHeight: {
        transform: _sizing.sizingTransform
      },
      boxSizing: {},
      // typography
      font: {
        themeKey: "font"
      },
      fontFamily: {
        themeKey: "typography"
      },
      fontSize: {
        themeKey: "typography"
      },
      fontStyle: {
        themeKey: "typography"
      },
      fontWeight: {
        themeKey: "typography"
      },
      letterSpacing: {},
      textTransform: {},
      lineHeight: {},
      textAlign: {},
      typography: {
        cssProperty: false,
        themeKey: "typography"
      }
    };
    var _default = exports2.default = defaultSxConfig;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/styleFunctionSx/styleFunctionSx.js
var require_styleFunctionSx = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/styleFunctionSx/styleFunctionSx.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.unstable_createStyleFunctionSx = unstable_createStyleFunctionSx;
    var _capitalize = _interopRequireDefault(require_capitalize2());
    var _merge = _interopRequireDefault(require_merge2());
    var _style = require_style2();
    var _breakpoints = require_breakpoints2();
    var _cssContainerQueries = require_cssContainerQueries2();
    var _defaultSxConfig = _interopRequireDefault(require_defaultSxConfig());
    function objectsHaveSameKeys(...objects) {
      const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);
      const union = new Set(allKeys);
      return objects.every((object) => union.size === Object.keys(object).length);
    }
    function callIfFn(maybeFn, arg) {
      return typeof maybeFn === "function" ? maybeFn(arg) : maybeFn;
    }
    function unstable_createStyleFunctionSx() {
      function getThemeValue(prop, val, theme2, config) {
        const props = {
          [prop]: val,
          theme: theme2
        };
        const options = config[prop];
        if (!options) {
          return {
            [prop]: val
          };
        }
        const {
          cssProperty = prop,
          themeKey,
          transform,
          style
        } = options;
        if (val == null) {
          return null;
        }
        if (themeKey === "typography" && val === "inherit") {
          return {
            [prop]: val
          };
        }
        const themeMapping = (0, _style.getPath)(theme2, themeKey) || {};
        if (style) {
          return style(props);
        }
        const styleFromPropValue = (propValueFinal) => {
          let value = (0, _style.getStyleValue)(themeMapping, transform, propValueFinal);
          if (propValueFinal === value && typeof propValueFinal === "string") {
            value = (0, _style.getStyleValue)(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : (0, _capitalize.default)(propValueFinal)}`, propValueFinal);
          }
          if (cssProperty === false) {
            return value;
          }
          return {
            [cssProperty]: value
          };
        };
        return (0, _breakpoints.handleBreakpoints)(props, val, styleFromPropValue);
      }
      function styleFunctionSx2(props) {
        const {
          sx,
          theme: theme2 = {}
        } = props || {};
        if (!sx) {
          return null;
        }
        const config = theme2.unstable_sxConfig ?? _defaultSxConfig.default;
        function traverse(sxInput) {
          let sxObject = sxInput;
          if (typeof sxInput === "function") {
            sxObject = sxInput(theme2);
          } else if (typeof sxInput !== "object") {
            return sxInput;
          }
          if (!sxObject) {
            return null;
          }
          const emptyBreakpoints = (0, _breakpoints.createEmptyBreakpointObject)(theme2.breakpoints);
          const breakpointsKeys = Object.keys(emptyBreakpoints);
          let css2 = emptyBreakpoints;
          Object.keys(sxObject).forEach((styleKey) => {
            const value = callIfFn(sxObject[styleKey], theme2);
            if (value !== null && value !== void 0) {
              if (typeof value === "object") {
                if (config[styleKey]) {
                  css2 = (0, _merge.default)(css2, getThemeValue(styleKey, value, theme2, config));
                } else {
                  const breakpointsValues = (0, _breakpoints.handleBreakpoints)({
                    theme: theme2
                  }, value, (x) => ({
                    [styleKey]: x
                  }));
                  if (objectsHaveSameKeys(breakpointsValues, value)) {
                    css2[styleKey] = styleFunctionSx2({
                      sx: value,
                      theme: theme2
                    });
                  } else {
                    css2 = (0, _merge.default)(css2, breakpointsValues);
                  }
                }
              } else {
                css2 = (0, _merge.default)(css2, getThemeValue(styleKey, value, theme2, config));
              }
            }
          });
          return (0, _cssContainerQueries.sortContainerQueries)(theme2, (0, _breakpoints.removeUnusedBreakpoints)(breakpointsKeys, css2));
        }
        return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
      }
      return styleFunctionSx2;
    }
    var styleFunctionSx = unstable_createStyleFunctionSx();
    styleFunctionSx.filterProps = ["sx"];
    var _default = exports2.default = styleFunctionSx;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/createTheme/applyStyles.js
var require_applyStyles = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/createTheme/applyStyles.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = applyStyles;
    function applyStyles(key, styles) {
      const theme2 = this;
      if (theme2.vars) {
        if (!theme2.colorSchemes?.[key] || typeof theme2.getColorSchemeSelector !== "function") {
          return {};
        }
        let selector = theme2.getColorSchemeSelector(key);
        if (selector === "&") {
          return styles;
        }
        if (selector.includes("data-") || selector.includes(".")) {
          selector = `*:where(${selector.replace(/\s*&$/, "")}) &`;
        }
        return {
          [selector]: styles
        };
      }
      if (theme2.palette.mode === key) {
        return styles;
      }
      return {};
    }
  }
});

// node_modules/@mui/material/node_modules/@mui/system/createTheme/createTheme.js
var require_createTheme = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/createTheme/createTheme.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _deepmerge = _interopRequireDefault(require_deepmerge2());
    var _createBreakpoints = _interopRequireDefault(require_createBreakpoints());
    var _cssContainerQueries = _interopRequireDefault(require_cssContainerQueries2());
    var _shape = _interopRequireDefault(require_shape());
    var _createSpacing = _interopRequireDefault(require_createSpacing());
    var _styleFunctionSx = _interopRequireDefault(require_styleFunctionSx());
    var _defaultSxConfig = _interopRequireDefault(require_defaultSxConfig());
    var _applyStyles = _interopRequireDefault(require_applyStyles());
    function createTheme2(options = {}, ...args) {
      const {
        breakpoints: breakpointsInput = {},
        palette: paletteInput = {},
        spacing: spacingInput,
        shape: shapeInput = {},
        ...other
      } = options;
      const breakpoints = (0, _createBreakpoints.default)(breakpointsInput);
      const spacing = (0, _createSpacing.default)(spacingInput);
      let muiTheme = (0, _deepmerge.default)({
        breakpoints,
        direction: "ltr",
        components: {},
        // Inject component definitions.
        palette: {
          mode: "light",
          ...paletteInput
        },
        spacing,
        shape: {
          ..._shape.default,
          ...shapeInput
        }
      }, other);
      muiTheme = (0, _cssContainerQueries.default)(muiTheme);
      muiTheme.applyStyles = _applyStyles.default;
      muiTheme = args.reduce((acc, argument) => (0, _deepmerge.default)(acc, argument), muiTheme);
      muiTheme.unstable_sxConfig = {
        ..._defaultSxConfig.default,
        ...other?.unstable_sxConfig
      };
      muiTheme.unstable_sx = function sx(props) {
        return (0, _styleFunctionSx.default)({
          sx: props,
          theme: this
        });
      };
      return muiTheme;
    }
    var _default = exports2.default = createTheme2;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/createTheme/index.js
var require_createTheme2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/createTheme/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _createTheme.default;
      }
    });
    Object.defineProperty(exports2, "private_createBreakpoints", {
      enumerable: true,
      get: function() {
        return _createBreakpoints.default;
      }
    });
    Object.defineProperty(exports2, "unstable_applyStyles", {
      enumerable: true,
      get: function() {
        return _applyStyles.default;
      }
    });
    var _createTheme = _interopRequireDefault(require_createTheme());
    var _createBreakpoints = _interopRequireDefault(require_createBreakpoints());
    var _applyStyles = _interopRequireDefault(require_applyStyles());
  }
});

// node_modules/@mui/material/node_modules/@mui/system/useThemeWithoutDefault/useThemeWithoutDefault.js
var require_useThemeWithoutDefault = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/useThemeWithoutDefault/useThemeWithoutDefault.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _styledEngine = require_node();
    function isObjectEmpty(obj) {
      return Object.keys(obj).length === 0;
    }
    function useTheme3(defaultTheme = null) {
      const contextTheme = React7.useContext(_styledEngine.ThemeContext);
      return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme : contextTheme;
    }
    var _default = exports2.default = useTheme3;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/useThemeWithoutDefault/index.js
var require_useThemeWithoutDefault2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/useThemeWithoutDefault/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _useThemeWithoutDefault.default;
      }
    });
    var _useThemeWithoutDefault = _interopRequireDefault(require_useThemeWithoutDefault());
  }
});

// node_modules/@mui/material/node_modules/@mui/system/useTheme/useTheme.js
var require_useTheme = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/useTheme/useTheme.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.systemDefaultTheme = exports2.default = void 0;
    var _createTheme = _interopRequireDefault(require_createTheme2());
    var _useThemeWithoutDefault = _interopRequireDefault(require_useThemeWithoutDefault2());
    var systemDefaultTheme = exports2.systemDefaultTheme = (0, _createTheme.default)();
    function useTheme3(defaultTheme = systemDefaultTheme) {
      return (0, _useThemeWithoutDefault.default)(defaultTheme);
    }
    var _default = exports2.default = useTheme3;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/useTheme/index.js
var require_useTheme2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/useTheme/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _useTheme.default;
      }
    });
    var _useTheme = _interopRequireWildcard(require_useTheme());
    Object.keys(_useTheme).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _useTheme[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _useTheme[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node_modules/@mui/system/GlobalStyles/GlobalStyles.js
var require_GlobalStyles3 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/GlobalStyles/GlobalStyles.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _styledEngine = require_node();
    var _useTheme = _interopRequireDefault(require_useTheme2());
    var _jsxRuntime = require_jsx_runtime();
    function GlobalStyles({
      styles,
      themeId,
      defaultTheme = {}
    }) {
      const upperTheme = (0, _useTheme.default)(defaultTheme);
      const globalStyles = typeof styles === "function" ? styles(themeId ? upperTheme[themeId] || upperTheme : upperTheme) : styles;
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_styledEngine.GlobalStyles, {
        styles: globalStyles
      });
    }
    define_process_env_default.NODE_ENV !== "production" ? GlobalStyles.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * @ignore
       */
      defaultTheme: _propTypes.default.object,
      /**
       * @ignore
       */
      styles: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.func, _propTypes.default.number, _propTypes.default.object, _propTypes.default.string, _propTypes.default.bool]),
      /**
       * @ignore
       */
      themeId: _propTypes.default.string
    } : void 0;
    var _default = exports2.default = GlobalStyles;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/GlobalStyles/index.js
var require_GlobalStyles4 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/GlobalStyles/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _GlobalStyles.default;
      }
    });
    var _GlobalStyles = _interopRequireWildcard(require_GlobalStyles3());
    Object.keys(_GlobalStyles).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _GlobalStyles[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _GlobalStyles[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node_modules/@mui/system/display/display.js
var require_display = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/display/display.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.whiteSpace = exports2.visibility = exports2.textOverflow = exports2.overflow = exports2.displayRaw = exports2.displayPrint = exports2.default = void 0;
    var _style = _interopRequireDefault(require_style2());
    var _compose = _interopRequireDefault(require_compose2());
    var displayPrint = exports2.displayPrint = (0, _style.default)({
      prop: "displayPrint",
      cssProperty: false,
      transform: (value) => ({
        "@media print": {
          display: value
        }
      })
    });
    var displayRaw = exports2.displayRaw = (0, _style.default)({
      prop: "display"
    });
    var overflow = exports2.overflow = (0, _style.default)({
      prop: "overflow"
    });
    var textOverflow = exports2.textOverflow = (0, _style.default)({
      prop: "textOverflow"
    });
    var visibility = exports2.visibility = (0, _style.default)({
      prop: "visibility"
    });
    var whiteSpace = exports2.whiteSpace = (0, _style.default)({
      prop: "whiteSpace"
    });
    var _default = exports2.default = (0, _compose.default)(displayPrint, displayRaw, overflow, textOverflow, visibility, whiteSpace);
  }
});

// node_modules/@mui/material/node_modules/@mui/system/display/index.js
var require_display2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/display/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _display.default;
      }
    });
    var _display = _interopRequireWildcard(require_display());
    Object.keys(_display).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _display[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _display[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node_modules/@mui/system/flexbox/flexbox.js
var require_flexbox = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/flexbox/flexbox.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.order = exports2.justifySelf = exports2.justifyItems = exports2.justifyContent = exports2.flexWrap = exports2.flexShrink = exports2.flexGrow = exports2.flexDirection = exports2.flexBasis = exports2.flex = exports2.default = exports2.alignSelf = exports2.alignItems = exports2.alignContent = void 0;
    var _style = _interopRequireDefault(require_style2());
    var _compose = _interopRequireDefault(require_compose2());
    var flexBasis = exports2.flexBasis = (0, _style.default)({
      prop: "flexBasis"
    });
    var flexDirection = exports2.flexDirection = (0, _style.default)({
      prop: "flexDirection"
    });
    var flexWrap = exports2.flexWrap = (0, _style.default)({
      prop: "flexWrap"
    });
    var justifyContent = exports2.justifyContent = (0, _style.default)({
      prop: "justifyContent"
    });
    var alignItems = exports2.alignItems = (0, _style.default)({
      prop: "alignItems"
    });
    var alignContent = exports2.alignContent = (0, _style.default)({
      prop: "alignContent"
    });
    var order = exports2.order = (0, _style.default)({
      prop: "order"
    });
    var flex = exports2.flex = (0, _style.default)({
      prop: "flex"
    });
    var flexGrow = exports2.flexGrow = (0, _style.default)({
      prop: "flexGrow"
    });
    var flexShrink = exports2.flexShrink = (0, _style.default)({
      prop: "flexShrink"
    });
    var alignSelf = exports2.alignSelf = (0, _style.default)({
      prop: "alignSelf"
    });
    var justifyItems = exports2.justifyItems = (0, _style.default)({
      prop: "justifyItems"
    });
    var justifySelf = exports2.justifySelf = (0, _style.default)({
      prop: "justifySelf"
    });
    var flexbox = (0, _compose.default)(flexBasis, flexDirection, flexWrap, justifyContent, alignItems, alignContent, order, flex, flexGrow, flexShrink, alignSelf, justifyItems, justifySelf);
    var _default = exports2.default = flexbox;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/flexbox/index.js
var require_flexbox2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/flexbox/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _flexbox.default;
      }
    });
    var _flexbox = _interopRequireWildcard(require_flexbox());
    Object.keys(_flexbox).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _flexbox[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _flexbox[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node_modules/@mui/system/positions/positions.js
var require_positions = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/positions/positions.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.zIndex = exports2.top = exports2.right = exports2.position = exports2.left = exports2.default = exports2.bottom = void 0;
    var _style = _interopRequireDefault(require_style2());
    var _compose = _interopRequireDefault(require_compose2());
    var position2 = exports2.position = (0, _style.default)({
      prop: "position"
    });
    var zIndex = exports2.zIndex = (0, _style.default)({
      prop: "zIndex",
      themeKey: "zIndex"
    });
    var top = exports2.top = (0, _style.default)({
      prop: "top"
    });
    var right = exports2.right = (0, _style.default)({
      prop: "right"
    });
    var bottom = exports2.bottom = (0, _style.default)({
      prop: "bottom"
    });
    var left = exports2.left = (0, _style.default)({
      prop: "left"
    });
    var _default = exports2.default = (0, _compose.default)(position2, zIndex, top, right, bottom, left);
  }
});

// node_modules/@mui/material/node_modules/@mui/system/positions/index.js
var require_positions2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/positions/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _positions.default;
      }
    });
    var _positions = _interopRequireWildcard(require_positions());
    Object.keys(_positions).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _positions[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _positions[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node_modules/@mui/system/shadows/shadows.js
var require_shadows = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/shadows/shadows.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _style = _interopRequireDefault(require_style2());
    var boxShadow = (0, _style.default)({
      prop: "boxShadow",
      themeKey: "shadows"
    });
    var _default = exports2.default = boxShadow;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/shadows/index.js
var require_shadows2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/shadows/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _shadows.default;
      }
    });
    var _shadows = _interopRequireDefault(require_shadows());
  }
});

// node_modules/@mui/material/node_modules/@mui/system/typography/typography.js
var require_typography = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/typography/typography.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.typographyVariant = exports2.textTransform = exports2.textAlign = exports2.lineHeight = exports2.letterSpacing = exports2.fontWeight = exports2.fontStyle = exports2.fontSize = exports2.fontFamily = exports2.default = void 0;
    var _style = _interopRequireDefault(require_style2());
    var _compose = _interopRequireDefault(require_compose2());
    var fontFamily = exports2.fontFamily = (0, _style.default)({
      prop: "fontFamily",
      themeKey: "typography"
    });
    var fontSize = exports2.fontSize = (0, _style.default)({
      prop: "fontSize",
      themeKey: "typography"
    });
    var fontStyle = exports2.fontStyle = (0, _style.default)({
      prop: "fontStyle",
      themeKey: "typography"
    });
    var fontWeight = exports2.fontWeight = (0, _style.default)({
      prop: "fontWeight",
      themeKey: "typography"
    });
    var letterSpacing = exports2.letterSpacing = (0, _style.default)({
      prop: "letterSpacing"
    });
    var textTransform = exports2.textTransform = (0, _style.default)({
      prop: "textTransform"
    });
    var lineHeight = exports2.lineHeight = (0, _style.default)({
      prop: "lineHeight"
    });
    var textAlign = exports2.textAlign = (0, _style.default)({
      prop: "textAlign"
    });
    var typographyVariant = exports2.typographyVariant = (0, _style.default)({
      prop: "typography",
      cssProperty: false,
      themeKey: "typography"
    });
    var typography = (0, _compose.default)(typographyVariant, fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, lineHeight, textAlign, textTransform);
    var _default = exports2.default = typography;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/typography/index.js
var require_typography2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/typography/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _typography.default;
      }
    });
    var _typography = _interopRequireWildcard(require_typography());
    Object.keys(_typography).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _typography[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _typography[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node_modules/@mui/system/styleFunctionSx/extendSxProp.js
var require_extendSxProp = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/styleFunctionSx/extendSxProp.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = extendSxProp;
    var _deepmerge = require_deepmerge2();
    var _defaultSxConfig = _interopRequireDefault(require_defaultSxConfig());
    var splitProps = (props) => {
      const result = {
        systemProps: {},
        otherProps: {}
      };
      const config = props?.theme?.unstable_sxConfig ?? _defaultSxConfig.default;
      Object.keys(props).forEach((prop) => {
        if (config[prop]) {
          result.systemProps[prop] = props[prop];
        } else {
          result.otherProps[prop] = props[prop];
        }
      });
      return result;
    };
    function extendSxProp(props) {
      const {
        sx: inSx,
        ...other
      } = props;
      const {
        systemProps,
        otherProps
      } = splitProps(other);
      let finalSx;
      if (Array.isArray(inSx)) {
        finalSx = [systemProps, ...inSx];
      } else if (typeof inSx === "function") {
        finalSx = (...args) => {
          const result = inSx(...args);
          if (!(0, _deepmerge.isPlainObject)(result)) {
            return systemProps;
          }
          return {
            ...systemProps,
            ...result
          };
        };
      } else {
        finalSx = {
          ...systemProps,
          ...inSx
        };
      }
      return {
        ...otherProps,
        sx: finalSx
      };
    }
  }
});

// node_modules/@mui/material/node_modules/@mui/system/styleFunctionSx/index.js
var require_styleFunctionSx2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/styleFunctionSx/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _styleFunctionSx.default;
      }
    });
    Object.defineProperty(exports2, "extendSxProp", {
      enumerable: true,
      get: function() {
        return _extendSxProp.default;
      }
    });
    Object.defineProperty(exports2, "unstable_createStyleFunctionSx", {
      enumerable: true,
      get: function() {
        return _styleFunctionSx.unstable_createStyleFunctionSx;
      }
    });
    Object.defineProperty(exports2, "unstable_defaultSxConfig", {
      enumerable: true,
      get: function() {
        return _defaultSxConfig.default;
      }
    });
    var _styleFunctionSx = _interopRequireWildcard(require_styleFunctionSx());
    var _extendSxProp = _interopRequireDefault(require_extendSxProp());
    var _defaultSxConfig = _interopRequireDefault(require_defaultSxConfig());
  }
});

// node_modules/@mui/material/node_modules/@mui/system/getThemeValue/getThemeValue.js
var require_getThemeValue = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/getThemeValue/getThemeValue.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.styleFunctionMapping = exports2.propToStyleFunction = exports2.default = void 0;
    var _borders = _interopRequireDefault(require_borders2());
    var _display = _interopRequireDefault(require_display2());
    var _flexbox = _interopRequireDefault(require_flexbox2());
    var _cssGrid = _interopRequireDefault(require_cssGrid2());
    var _positions = _interopRequireDefault(require_positions2());
    var _palette = _interopRequireDefault(require_palette2());
    var _shadows = _interopRequireDefault(require_shadows2());
    var _sizing = _interopRequireDefault(require_sizing2());
    var _spacing = _interopRequireDefault(require_spacing2());
    var _typography = _interopRequireDefault(require_typography2());
    var filterPropsMapping = {
      borders: _borders.default.filterProps,
      display: _display.default.filterProps,
      flexbox: _flexbox.default.filterProps,
      grid: _cssGrid.default.filterProps,
      positions: _positions.default.filterProps,
      palette: _palette.default.filterProps,
      shadows: _shadows.default.filterProps,
      sizing: _sizing.default.filterProps,
      spacing: _spacing.default.filterProps,
      typography: _typography.default.filterProps
    };
    var styleFunctionMapping = exports2.styleFunctionMapping = {
      borders: _borders.default,
      display: _display.default,
      flexbox: _flexbox.default,
      grid: _cssGrid.default,
      positions: _positions.default,
      palette: _palette.default,
      shadows: _shadows.default,
      sizing: _sizing.default,
      spacing: _spacing.default,
      typography: _typography.default
    };
    var propToStyleFunction = exports2.propToStyleFunction = Object.keys(filterPropsMapping).reduce((acc, styleFnName) => {
      filterPropsMapping[styleFnName].forEach((propName) => {
        acc[propName] = styleFunctionMapping[styleFnName];
      });
      return acc;
    }, {});
    function getThemeValue(prop, value, theme2) {
      const inputProps = {
        [prop]: value,
        theme: theme2
      };
      const styleFunction = propToStyleFunction[prop];
      return styleFunction ? styleFunction(inputProps) : {
        [prop]: value
      };
    }
    var _default = exports2.default = getThemeValue;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/getThemeValue/index.js
var require_getThemeValue2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/getThemeValue/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _getThemeValue.default;
      }
    });
    var _getThemeValue = _interopRequireWildcard(require_getThemeValue());
    Object.keys(_getThemeValue).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _getThemeValue[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _getThemeValue[key];
        }
      });
    });
  }
});

// node_modules/@mui/utils/ClassNameGenerator/ClassNameGenerator.js
var require_ClassNameGenerator = __commonJS({
  "node_modules/@mui/utils/ClassNameGenerator/ClassNameGenerator.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var defaultGenerator = (componentName) => componentName;
    var createClassNameGenerator = () => {
      let generate = defaultGenerator;
      return {
        configure(generator) {
          generate = generator;
        },
        generate(componentName) {
          return generate(componentName);
        },
        reset() {
          generate = defaultGenerator;
        }
      };
    };
    var ClassNameGenerator = createClassNameGenerator();
    var _default = exports2.default = ClassNameGenerator;
  }
});

// node_modules/@mui/utils/ClassNameGenerator/index.js
var require_ClassNameGenerator2 = __commonJS({
  "node_modules/@mui/utils/ClassNameGenerator/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _ClassNameGenerator.default;
      }
    });
    var _ClassNameGenerator = _interopRequireDefault(require_ClassNameGenerator());
  }
});

// node_modules/clsx/dist/clsx.js
var require_clsx = __commonJS({
  "node_modules/clsx/dist/clsx.js"(exports2, module2) {
    init_define_process_env();
    function r(e2) {
      var o, t, f = "";
      if ("string" == typeof e2 || "number" == typeof e2) f += e2;
      else if ("object" == typeof e2) if (Array.isArray(e2)) {
        var n = e2.length;
        for (o = 0; o < n; o++) e2[o] && (t = r(e2[o])) && (f && (f += " "), f += t);
      } else for (t in e2) e2[t] && (f && (f += " "), f += t);
      return f;
    }
    function e() {
      for (var e2, o, t = 0, f = "", n = arguments.length; t < n; t++) (e2 = arguments[t]) && (o = r(e2)) && (f && (f += " "), f += o);
      return f;
    }
    module2.exports = e, module2.exports.clsx = e;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/createBox/createBox.js
var require_createBox = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/createBox/createBox.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = createBox;
    var React7 = _interopRequireWildcard(require_react());
    var _clsx = _interopRequireDefault(require_clsx());
    var _styledEngine = _interopRequireDefault(require_node());
    var _styleFunctionSx = _interopRequireWildcard(require_styleFunctionSx2());
    var _useTheme = _interopRequireDefault(require_useTheme2());
    var _jsxRuntime = require_jsx_runtime();
    function createBox(options = {}) {
      const {
        themeId,
        defaultTheme,
        defaultClassName = "MuiBox-root",
        generateClassName
      } = options;
      const BoxRoot = (0, _styledEngine.default)("div", {
        shouldForwardProp: (prop) => prop !== "theme" && prop !== "sx" && prop !== "as"
      })(_styleFunctionSx.default);
      const Box2 = /* @__PURE__ */ React7.forwardRef(function Box3(inProps, ref) {
        const theme2 = (0, _useTheme.default)(defaultTheme);
        const {
          className,
          component = "div",
          ...other
        } = (0, _styleFunctionSx.extendSxProp)(inProps);
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(BoxRoot, {
          as: component,
          ref,
          className: (0, _clsx.default)(className, generateClassName ? generateClassName(defaultClassName) : defaultClassName),
          theme: themeId ? theme2[themeId] || theme2 : theme2,
          ...other
        });
      });
      return Box2;
    }
  }
});

// node_modules/@mui/material/node_modules/@mui/system/createBox/index.js
var require_createBox2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/createBox/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _createBox.default;
      }
    });
    var _createBox = _interopRequireDefault(require_createBox());
  }
});

// node_modules/@mui/utils/generateUtilityClass/generateUtilityClass.js
var require_generateUtilityClass = __commonJS({
  "node_modules/@mui/utils/generateUtilityClass/generateUtilityClass.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = generateUtilityClass;
    exports2.globalStateClasses = void 0;
    exports2.isGlobalState = isGlobalState;
    var _ClassNameGenerator = _interopRequireDefault(require_ClassNameGenerator2());
    var globalStateClasses = exports2.globalStateClasses = {
      active: "active",
      checked: "checked",
      completed: "completed",
      disabled: "disabled",
      error: "error",
      expanded: "expanded",
      focused: "focused",
      focusVisible: "focusVisible",
      open: "open",
      readOnly: "readOnly",
      required: "required",
      selected: "selected"
    };
    function generateUtilityClass(componentName, slot, globalStatePrefix = "Mui") {
      const globalStateClass = globalStateClasses[slot];
      return globalStateClass ? `${globalStatePrefix}-${globalStateClass}` : `${_ClassNameGenerator.default.generate(componentName)}-${slot}`;
    }
    function isGlobalState(slot) {
      return globalStateClasses[slot] !== void 0;
    }
  }
});

// node_modules/@mui/utils/generateUtilityClass/index.js
var require_generateUtilityClass2 = __commonJS({
  "node_modules/@mui/utils/generateUtilityClass/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _generateUtilityClass.default;
      }
    });
    var _generateUtilityClass = _interopRequireWildcard(require_generateUtilityClass());
    Object.keys(_generateUtilityClass).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _generateUtilityClass[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _generateUtilityClass[key];
        }
      });
    });
  }
});

// node_modules/@mui/utils/generateUtilityClasses/generateUtilityClasses.js
var require_generateUtilityClasses = __commonJS({
  "node_modules/@mui/utils/generateUtilityClasses/generateUtilityClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = generateUtilityClasses;
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    function generateUtilityClasses(componentName, slots, globalStatePrefix = "Mui") {
      const result = {};
      slots.forEach((slot) => {
        result[slot] = (0, _generateUtilityClass.default)(componentName, slot, globalStatePrefix);
      });
      return result;
    }
  }
});

// node_modules/@mui/utils/generateUtilityClasses/index.js
var require_generateUtilityClasses2 = __commonJS({
  "node_modules/@mui/utils/generateUtilityClasses/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _generateUtilityClasses.default;
      }
    });
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses());
  }
});

// node_modules/@mui/material/node_modules/@mui/system/Box/boxClasses.js
var require_boxClasses = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/Box/boxClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var boxClasses = (0, _generateUtilityClasses.default)("MuiBox", ["root"]);
    var _default = exports2.default = boxClasses;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/Box/Box.js
var require_Box = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/Box/Box.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _ClassNameGenerator = _interopRequireDefault(require_ClassNameGenerator2());
    var _createBox = _interopRequireDefault(require_createBox2());
    var _boxClasses = _interopRequireDefault(require_boxClasses());
    var Box2 = (0, _createBox.default)({
      defaultClassName: _boxClasses.default.root,
      generateClassName: _ClassNameGenerator.default.generate
    });
    define_process_env_default.NODE_ENV !== "production" ? Box2.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * @ignore
       */
      children: _propTypes.default.node,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: _propTypes.default.elementType,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
    } : void 0;
    var _default = exports2.default = Box2;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/Box/index.js
var require_Box2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/Box/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      boxClasses: true
    };
    Object.defineProperty(exports2, "boxClasses", {
      enumerable: true,
      get: function() {
        return _boxClasses.default;
      }
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _Box.default;
      }
    });
    var _Box = _interopRequireDefault(require_Box());
    var _boxClasses = _interopRequireWildcard(require_boxClasses());
    Object.keys(_boxClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _boxClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _boxClasses[key];
        }
      });
    });
  }
});

// node_modules/@mui/utils/getDisplayName/getDisplayName.js
var require_getDisplayName = __commonJS({
  "node_modules/@mui/utils/getDisplayName/getDisplayName.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getDisplayName;
    var _reactIs = require_react_is3();
    function getFunctionComponentName(Component, fallback = "") {
      return Component.displayName || Component.name || fallback;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
      const functionName = getFunctionComponentName(innerType);
      return outerType.displayName || (functionName !== "" ? `${wrapperName}(${functionName})` : wrapperName);
    }
    function getDisplayName(Component) {
      if (Component == null) {
        return void 0;
      }
      if (typeof Component === "string") {
        return Component;
      }
      if (typeof Component === "function") {
        return getFunctionComponentName(Component, "Component");
      }
      if (typeof Component === "object") {
        switch (Component.$$typeof) {
          case _reactIs.ForwardRef:
            return getWrappedName(Component, Component.render, "ForwardRef");
          case _reactIs.Memo:
            return getWrappedName(Component, Component.type, "memo");
          default:
            return void 0;
        }
      }
      return void 0;
    }
  }
});

// node_modules/@mui/utils/getDisplayName/index.js
var require_getDisplayName2 = __commonJS({
  "node_modules/@mui/utils/getDisplayName/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _getDisplayName.default;
      }
    });
    var _getDisplayName = _interopRequireDefault(require_getDisplayName());
  }
});

// node_modules/@mui/material/node_modules/@mui/system/preprocessStyles.js
var require_preprocessStyles = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/preprocessStyles.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = preprocessStyles;
    var _styledEngine = require_node();
    function preprocessStyles(input) {
      const {
        variants,
        ...style
      } = input;
      const result = {
        variants,
        style: (0, _styledEngine.internal_serializeStyles)(style),
        isProcessed: true
      };
      if (result.style === style) {
        return result;
      }
      if (variants) {
        variants.forEach((variant) => {
          if (typeof variant.style !== "function") {
            variant.style = (0, _styledEngine.internal_serializeStyles)(variant.style);
          }
        });
      }
      return result;
    }
  }
});

// node_modules/@mui/material/node_modules/@mui/system/createStyled/createStyled.js
var require_createStyled = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/createStyled/createStyled.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = createStyled3;
    exports2.shouldForwardProp = shouldForwardProp;
    exports2.systemDefaultTheme = void 0;
    var _styledEngine = _interopRequireWildcard(require_node());
    var _deepmerge = require_deepmerge2();
    var _capitalize = _interopRequireDefault(require_capitalize2());
    var _getDisplayName = _interopRequireDefault(require_getDisplayName2());
    var _createTheme = _interopRequireDefault(require_createTheme2());
    var _styleFunctionSx = _interopRequireDefault(require_styleFunctionSx2());
    var _preprocessStyles = _interopRequireDefault(require_preprocessStyles());
    var systemDefaultTheme = exports2.systemDefaultTheme = (0, _createTheme.default)();
    function shouldForwardProp(prop) {
      return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
    }
    function defaultOverridesResolver(slot) {
      if (!slot) {
        return null;
      }
      return (_props, styles) => styles[slot];
    }
    function attachTheme(props, themeId, defaultTheme) {
      props.theme = isObjectEmpty(props.theme) ? defaultTheme : props.theme[themeId] || props.theme;
    }
    function processStyle(props, style) {
      const resolvedStyle = typeof style === "function" ? style(props) : style;
      if (Array.isArray(resolvedStyle)) {
        return resolvedStyle.flatMap((subStyle) => processStyle(props, subStyle));
      }
      if (Array.isArray(resolvedStyle?.variants)) {
        let rootStyle;
        if (resolvedStyle.isProcessed) {
          rootStyle = resolvedStyle.style;
        } else {
          const {
            variants,
            ...otherStyles
          } = resolvedStyle;
          rootStyle = otherStyles;
        }
        return processStyleVariants(props, resolvedStyle.variants, [rootStyle]);
      }
      if (resolvedStyle?.isProcessed) {
        return resolvedStyle.style;
      }
      return resolvedStyle;
    }
    function processStyleVariants(props, variants, results = []) {
      let mergedState;
      variantLoop: for (let i = 0; i < variants.length; i += 1) {
        const variant = variants[i];
        if (typeof variant.props === "function") {
          mergedState ?? (mergedState = {
            ...props,
            ...props.ownerState,
            ownerState: props.ownerState
          });
          if (!variant.props(mergedState)) {
            continue;
          }
        } else {
          for (const key in variant.props) {
            if (props[key] !== variant.props[key] && props.ownerState?.[key] !== variant.props[key]) {
              continue variantLoop;
            }
          }
        }
        if (typeof variant.style === "function") {
          mergedState ?? (mergedState = {
            ...props,
            ...props.ownerState,
            ownerState: props.ownerState
          });
          results.push(variant.style(mergedState));
        } else {
          results.push(variant.style);
        }
      }
      return results;
    }
    function createStyled3(input = {}) {
      const {
        themeId,
        defaultTheme = systemDefaultTheme,
        rootShouldForwardProp = shouldForwardProp,
        slotShouldForwardProp = shouldForwardProp
      } = input;
      function styleAttachTheme(props) {
        attachTheme(props, themeId, defaultTheme);
      }
      const styled = (tag, inputOptions = {}) => {
        (0, _styledEngine.internal_mutateStyles)(tag, (styles) => styles.filter((style) => style !== _styleFunctionSx.default));
        const {
          name: componentName,
          slot: componentSlot,
          skipVariantsResolver: inputSkipVariantsResolver,
          skipSx: inputSkipSx,
          // TODO v6: remove `lowercaseFirstLetter()` in the next major release
          // For more details: https://github.com/mui/material-ui/pull/37908
          overridesResolver = defaultOverridesResolver(lowercaseFirstLetter(componentSlot)),
          ...options
        } = inputOptions;
        const skipVariantsResolver = inputSkipVariantsResolver !== void 0 ? inputSkipVariantsResolver : (
          // TODO v6: remove `Root` in the next major release
          // For more details: https://github.com/mui/material-ui/pull/37908
          componentSlot && componentSlot !== "Root" && componentSlot !== "root" || false
        );
        const skipSx = inputSkipSx || false;
        let shouldForwardPropOption = shouldForwardProp;
        if (componentSlot === "Root" || componentSlot === "root") {
          shouldForwardPropOption = rootShouldForwardProp;
        } else if (componentSlot) {
          shouldForwardPropOption = slotShouldForwardProp;
        } else if (isStringTag(tag)) {
          shouldForwardPropOption = void 0;
        }
        const defaultStyledResolver = (0, _styledEngine.default)(tag, {
          shouldForwardProp: shouldForwardPropOption,
          label: generateStyledLabel(componentName, componentSlot),
          ...options
        });
        const transformStyle = (style) => {
          if (typeof style === "function" && style.__emotion_real !== style) {
            return function styleFunctionProcessor(props) {
              return processStyle(props, style);
            };
          }
          if ((0, _deepmerge.isPlainObject)(style)) {
            const serialized = (0, _preprocessStyles.default)(style);
            if (!serialized.variants) {
              return serialized.style;
            }
            return function styleObjectProcessor(props) {
              return processStyle(props, serialized);
            };
          }
          return style;
        };
        const muiStyledResolver = (...expressionsInput) => {
          const expressionsHead = [];
          const expressionsBody = expressionsInput.map(transformStyle);
          const expressionsTail = [];
          expressionsHead.push(styleAttachTheme);
          if (componentName && overridesResolver) {
            expressionsTail.push(function styleThemeOverrides(props) {
              const theme2 = props.theme;
              const styleOverrides = theme2.components?.[componentName]?.styleOverrides;
              if (!styleOverrides) {
                return null;
              }
              const resolvedStyleOverrides = {};
              for (const slotKey in styleOverrides) {
                resolvedStyleOverrides[slotKey] = processStyle(props, styleOverrides[slotKey]);
              }
              return overridesResolver(props, resolvedStyleOverrides);
            });
          }
          if (componentName && !skipVariantsResolver) {
            expressionsTail.push(function styleThemeVariants(props) {
              const theme2 = props.theme;
              const themeVariants = theme2?.components?.[componentName]?.variants;
              if (!themeVariants) {
                return null;
              }
              return processStyleVariants(props, themeVariants);
            });
          }
          if (!skipSx) {
            expressionsTail.push(_styleFunctionSx.default);
          }
          if (Array.isArray(expressionsBody[0])) {
            const inputStrings = expressionsBody.shift();
            const placeholdersHead = new Array(expressionsHead.length).fill("");
            const placeholdersTail = new Array(expressionsTail.length).fill("");
            let outputStrings;
            {
              outputStrings = [...placeholdersHead, ...inputStrings, ...placeholdersTail];
              outputStrings.raw = [...placeholdersHead, ...inputStrings.raw, ...placeholdersTail];
            }
            expressionsHead.unshift(outputStrings);
          }
          const expressions = [...expressionsHead, ...expressionsBody, ...expressionsTail];
          const Component = defaultStyledResolver(...expressions);
          if (tag.muiName) {
            Component.muiName = tag.muiName;
          }
          if (define_process_env_default.NODE_ENV !== "production") {
            Component.displayName = generateDisplayName(componentName, componentSlot, tag);
          }
          return Component;
        };
        if (defaultStyledResolver.withConfig) {
          muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
        }
        return muiStyledResolver;
      };
      return styled;
    }
    function generateDisplayName(componentName, componentSlot, tag) {
      if (componentName) {
        return `${componentName}${(0, _capitalize.default)(componentSlot || "")}`;
      }
      return `Styled(${(0, _getDisplayName.default)(tag)})`;
    }
    function generateStyledLabel(componentName, componentSlot) {
      let label;
      if (define_process_env_default.NODE_ENV !== "production") {
        if (componentName) {
          label = `${componentName}-${lowercaseFirstLetter(componentSlot || "Root")}`;
        }
      }
      return label;
    }
    function isObjectEmpty(object) {
      for (const _ in object) {
        return false;
      }
      return true;
    }
    function isStringTag(tag) {
      return typeof tag === "string" && // 96 is one less than the char code
      // for "a" so this is checking that
      // it's a lowercase character
      tag.charCodeAt(0) > 96;
    }
    function lowercaseFirstLetter(string) {
      if (!string) {
        return string;
      }
      return string.charAt(0).toLowerCase() + string.slice(1);
    }
  }
});

// node_modules/@mui/material/node_modules/@mui/system/createStyled/index.js
var require_createStyled2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/createStyled/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _createStyled.default;
      }
    });
    var _createStyled = _interopRequireWildcard(require_createStyled());
    Object.keys(_createStyled).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _createStyled[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _createStyled[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node_modules/@mui/system/styled/styled.js
var require_styled = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/styled/styled.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _createStyled = _interopRequireDefault(require_createStyled2());
    var styled = (0, _createStyled.default)();
    var _default = exports2.default = styled;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/styled/index.js
var require_styled2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/styled/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _styled.default;
      }
    });
    var _styled = _interopRequireDefault(require_styled());
  }
});

// node_modules/@mui/utils/resolveProps/resolveProps.js
var require_resolveProps = __commonJS({
  "node_modules/@mui/utils/resolveProps/resolveProps.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = resolveProps;
    function resolveProps(defaultProps, props) {
      const output = {
        ...props
      };
      for (const key in defaultProps) {
        if (Object.prototype.hasOwnProperty.call(defaultProps, key)) {
          const propName = key;
          if (propName === "components" || propName === "slots") {
            output[propName] = {
              ...defaultProps[propName],
              ...output[propName]
            };
          } else if (propName === "componentsProps" || propName === "slotProps") {
            const defaultSlotProps = defaultProps[propName];
            const slotProps = props[propName];
            if (!slotProps) {
              output[propName] = defaultSlotProps || {};
            } else if (!defaultSlotProps) {
              output[propName] = slotProps;
            } else {
              output[propName] = {
                ...slotProps
              };
              for (const slotKey in defaultSlotProps) {
                if (Object.prototype.hasOwnProperty.call(defaultSlotProps, slotKey)) {
                  const slotPropName = slotKey;
                  output[propName][slotPropName] = resolveProps(defaultSlotProps[slotPropName], slotProps[slotPropName]);
                }
              }
            }
          } else if (output[propName] === void 0) {
            output[propName] = defaultProps[propName];
          }
        }
      }
      return output;
    }
  }
});

// node_modules/@mui/utils/resolveProps/index.js
var require_resolveProps2 = __commonJS({
  "node_modules/@mui/utils/resolveProps/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _resolveProps.default;
      }
    });
    var _resolveProps = _interopRequireDefault(require_resolveProps());
  }
});

// node_modules/@mui/material/node_modules/@mui/system/useThemeProps/getThemeProps.js
var require_getThemeProps = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/useThemeProps/getThemeProps.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getThemeProps;
    var _resolveProps = _interopRequireDefault(require_resolveProps2());
    function getThemeProps(params) {
      const {
        theme: theme2,
        name,
        props
      } = params;
      if (!theme2 || !theme2.components || !theme2.components[name] || !theme2.components[name].defaultProps) {
        return props;
      }
      return (0, _resolveProps.default)(theme2.components[name].defaultProps, props);
    }
  }
});

// node_modules/@mui/material/node_modules/@mui/system/useThemeProps/useThemeProps.js
var require_useThemeProps = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/useThemeProps/useThemeProps.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = useThemeProps;
    var _getThemeProps = _interopRequireDefault(require_getThemeProps());
    var _useTheme = _interopRequireDefault(require_useTheme2());
    function useThemeProps({
      props,
      name,
      defaultTheme,
      themeId
    }) {
      let theme2 = (0, _useTheme.default)(defaultTheme);
      if (themeId) {
        theme2 = theme2[themeId] || theme2;
      }
      return (0, _getThemeProps.default)({
        theme: theme2,
        name,
        props
      });
    }
  }
});

// node_modules/@mui/material/node_modules/@mui/system/useThemeProps/index.js
var require_useThemeProps2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/useThemeProps/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _useThemeProps.default;
      }
    });
    Object.defineProperty(exports2, "getThemeProps", {
      enumerable: true,
      get: function() {
        return _getThemeProps.default;
      }
    });
    var _useThemeProps = _interopRequireDefault(require_useThemeProps());
    var _getThemeProps = _interopRequireDefault(require_getThemeProps());
  }
});

// node_modules/@mui/utils/useEnhancedEffect/useEnhancedEffect.js
var require_useEnhancedEffect = __commonJS({
  "node_modules/@mui/utils/useEnhancedEffect/useEnhancedEffect.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var useEnhancedEffect = typeof window !== "undefined" ? React7.useLayoutEffect : React7.useEffect;
    var _default = exports2.default = useEnhancedEffect;
  }
});

// node_modules/@mui/utils/useEnhancedEffect/index.js
var require_useEnhancedEffect2 = __commonJS({
  "node_modules/@mui/utils/useEnhancedEffect/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _useEnhancedEffect.default;
      }
    });
    var _useEnhancedEffect = _interopRequireDefault(require_useEnhancedEffect());
  }
});

// node_modules/@mui/material/node_modules/@mui/system/useMediaQuery/useMediaQuery.js
var require_useMediaQuery = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/useMediaQuery/useMediaQuery.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.unstable_createUseMediaQuery = unstable_createUseMediaQuery;
    var React7 = _interopRequireWildcard(require_react());
    var _useEnhancedEffect = _interopRequireDefault(require_useEnhancedEffect2());
    var _useThemeProps = require_useThemeProps2();
    var _useThemeWithoutDefault = _interopRequireDefault(require_useThemeWithoutDefault2());
    function useMediaQueryOld(query, defaultMatches, matchMedia2, ssrMatchMedia, noSsr) {
      const [match2, setMatch] = React7.useState(() => {
        if (noSsr && matchMedia2) {
          return matchMedia2(query).matches;
        }
        if (ssrMatchMedia) {
          return ssrMatchMedia(query).matches;
        }
        return defaultMatches;
      });
      (0, _useEnhancedEffect.default)(() => {
        if (!matchMedia2) {
          return void 0;
        }
        const queryList = matchMedia2(query);
        const updateMatch = () => {
          setMatch(queryList.matches);
        };
        updateMatch();
        queryList.addEventListener("change", updateMatch);
        return () => {
          queryList.removeEventListener("change", updateMatch);
        };
      }, [query, matchMedia2]);
      return match2;
    }
    var safeReact = {
      ...React7
    };
    var maybeReactUseSyncExternalStore = safeReact.useSyncExternalStore;
    function useMediaQueryNew(query, defaultMatches, matchMedia2, ssrMatchMedia, noSsr) {
      const getDefaultSnapshot = React7.useCallback(() => defaultMatches, [defaultMatches]);
      const getServerSnapshot = React7.useMemo(() => {
        if (noSsr && matchMedia2) {
          return () => matchMedia2(query).matches;
        }
        if (ssrMatchMedia !== null) {
          const {
            matches
          } = ssrMatchMedia(query);
          return () => matches;
        }
        return getDefaultSnapshot;
      }, [getDefaultSnapshot, query, ssrMatchMedia, noSsr, matchMedia2]);
      const [getSnapshot, subscribe] = React7.useMemo(() => {
        if (matchMedia2 === null) {
          return [getDefaultSnapshot, () => () => {
          }];
        }
        const mediaQueryList = matchMedia2(query);
        return [() => mediaQueryList.matches, (notify) => {
          mediaQueryList.addEventListener("change", notify);
          return () => {
            mediaQueryList.removeEventListener("change", notify);
          };
        }];
      }, [getDefaultSnapshot, matchMedia2, query]);
      const match2 = maybeReactUseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
      return match2;
    }
    function unstable_createUseMediaQuery(params = {}) {
      const {
        themeId
      } = params;
      return function useMediaQuery2(queryInput, options = {}) {
        let theme2 = (0, _useThemeWithoutDefault.default)();
        if (theme2 && themeId) {
          theme2 = theme2[themeId] || theme2;
        }
        const supportMatchMedia = typeof window !== "undefined" && typeof window.matchMedia !== "undefined";
        const {
          defaultMatches = false,
          matchMedia: matchMedia2 = supportMatchMedia ? window.matchMedia : null,
          ssrMatchMedia = null,
          noSsr = false
        } = (0, _useThemeProps.getThemeProps)({
          name: "MuiUseMediaQuery",
          props: options,
          theme: theme2
        });
        if (define_process_env_default.NODE_ENV !== "production") {
          if (typeof queryInput === "function" && theme2 === null) {
            console.error(["MUI: The `query` argument provided is invalid.", "You are providing a function without a theme in the context.", "One of the parent elements needs to use a ThemeProvider."].join("\n"));
          }
        }
        let query = typeof queryInput === "function" ? queryInput(theme2) : queryInput;
        query = query.replace(/^@media( ?)/m, "");
        const useMediaQueryImplementation = maybeReactUseSyncExternalStore !== void 0 ? useMediaQueryNew : useMediaQueryOld;
        const match2 = useMediaQueryImplementation(query, defaultMatches, matchMedia2, ssrMatchMedia, noSsr);
        if (define_process_env_default.NODE_ENV !== "production") {
          React7.useDebugValue({
            query,
            match: match2
          });
        }
        return match2;
      };
    }
    var useMediaQuery = unstable_createUseMediaQuery();
    var _default = exports2.default = useMediaQuery;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/useMediaQuery/index.js
var require_useMediaQuery2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/useMediaQuery/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _useMediaQuery.default;
      }
    });
    var _useMediaQuery = _interopRequireWildcard(require_useMediaQuery());
    Object.keys(_useMediaQuery).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _useMediaQuery[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _useMediaQuery[key];
        }
      });
    });
  }
});

// node_modules/@mui/utils/clamp/clamp.js
var require_clamp = __commonJS({
  "node_modules/@mui/utils/clamp/clamp.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    function clamp(val, min = Number.MIN_SAFE_INTEGER, max = Number.MAX_SAFE_INTEGER) {
      return Math.max(min, Math.min(val, max));
    }
    var _default = exports2.default = clamp;
  }
});

// node_modules/@mui/utils/clamp/index.js
var require_clamp2 = __commonJS({
  "node_modules/@mui/utils/clamp/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _clamp.default;
      }
    });
    var _clamp = _interopRequireDefault(require_clamp());
  }
});

// node_modules/@mui/material/node_modules/@mui/system/colorManipulator/colorManipulator.js
var require_colorManipulator = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/colorManipulator/colorManipulator.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.alpha = alpha;
    exports2.blend = blend;
    exports2.colorChannel = void 0;
    exports2.darken = darken;
    exports2.decomposeColor = decomposeColor;
    exports2.emphasize = emphasize;
    exports2.getContrastRatio = getContrastRatio;
    exports2.getLuminance = getLuminance;
    exports2.hexToRgb = hexToRgb;
    exports2.hslToRgb = hslToRgb;
    exports2.lighten = lighten;
    exports2.private_safeAlpha = private_safeAlpha;
    exports2.private_safeColorChannel = void 0;
    exports2.private_safeDarken = private_safeDarken;
    exports2.private_safeEmphasize = private_safeEmphasize;
    exports2.private_safeLighten = private_safeLighten;
    exports2.recomposeColor = recomposeColor;
    exports2.rgbToHex = rgbToHex;
    var _formatMuiErrorMessage2 = _interopRequireDefault(require_formatMuiErrorMessage2());
    var _clamp = _interopRequireDefault(require_clamp2());
    function clampWrapper(value, min = 0, max = 1) {
      if (define_process_env_default.NODE_ENV !== "production") {
        if (value < min || value > max) {
          console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);
        }
      }
      return (0, _clamp.default)(value, min, max);
    }
    function hexToRgb(color) {
      color = color.slice(1);
      const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, "g");
      let colors = color.match(re);
      if (colors && colors[0].length === 1) {
        colors = colors.map((n) => n + n);
      }
      if (define_process_env_default.NODE_ENV !== "production") {
        if (color.length !== color.trim().length) {
          console.error(`MUI: The color: "${color}" is invalid. Make sure the color input doesn't contain leading/trailing space.`);
        }
      }
      return colors ? `rgb${colors.length === 4 ? "a" : ""}(${colors.map((n, index) => {
        return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1e3) / 1e3;
      }).join(", ")})` : "";
    }
    function intToHex(int) {
      const hex = int.toString(16);
      return hex.length === 1 ? `0${hex}` : hex;
    }
    function decomposeColor(color) {
      if (color.type) {
        return color;
      }
      if (color.charAt(0) === "#") {
        return decomposeColor(hexToRgb(color));
      }
      const marker = color.indexOf("(");
      const type = color.substring(0, marker);
      if (!["rgb", "rgba", "hsl", "hsla", "color"].includes(type)) {
        throw new Error(define_process_env_default.NODE_ENV !== "production" ? `MUI: Unsupported \`${color}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : (0, _formatMuiErrorMessage2.default)(9, color));
      }
      let values = color.substring(marker + 1, color.length - 1);
      let colorSpace;
      if (type === "color") {
        values = values.split(" ");
        colorSpace = values.shift();
        if (values.length === 4 && values[3].charAt(0) === "/") {
          values[3] = values[3].slice(1);
        }
        if (!["srgb", "display-p3", "a98-rgb", "prophoto-rgb", "rec-2020"].includes(colorSpace)) {
          throw new Error(define_process_env_default.NODE_ENV !== "production" ? `MUI: unsupported \`${colorSpace}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : (0, _formatMuiErrorMessage2.default)(10, colorSpace));
        }
      } else {
        values = values.split(",");
      }
      values = values.map((value) => parseFloat(value));
      return {
        type,
        values,
        colorSpace
      };
    }
    var colorChannel = (color) => {
      const decomposedColor = decomposeColor(color);
      return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.includes("hsl") && idx !== 0 ? `${val}%` : val).join(" ");
    };
    exports2.colorChannel = colorChannel;
    var private_safeColorChannel = (color, warning) => {
      try {
        return colorChannel(color);
      } catch (error) {
        if (warning && define_process_env_default.NODE_ENV !== "production") {
          console.warn(warning);
        }
        return color;
      }
    };
    exports2.private_safeColorChannel = private_safeColorChannel;
    function recomposeColor(color) {
      const {
        type,
        colorSpace
      } = color;
      let {
        values
      } = color;
      if (type.includes("rgb")) {
        values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);
      } else if (type.includes("hsl")) {
        values[1] = `${values[1]}%`;
        values[2] = `${values[2]}%`;
      }
      if (type.includes("color")) {
        values = `${colorSpace} ${values.join(" ")}`;
      } else {
        values = `${values.join(", ")}`;
      }
      return `${type}(${values})`;
    }
    function rgbToHex(color) {
      if (color.startsWith("#")) {
        return color;
      }
      const {
        values
      } = decomposeColor(color);
      return `#${values.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join("")}`;
    }
    function hslToRgb(color) {
      color = decomposeColor(color);
      const {
        values
      } = color;
      const h = values[0];
      const s = values[1] / 100;
      const l = values[2] / 100;
      const a = s * Math.min(l, 1 - l);
      const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
      let type = "rgb";
      const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
      if (color.type === "hsla") {
        type += "a";
        rgb.push(values[3]);
      }
      return recomposeColor({
        type,
        values: rgb
      });
    }
    function getLuminance(color) {
      color = decomposeColor(color);
      let rgb = color.type === "hsl" || color.type === "hsla" ? decomposeColor(hslToRgb(color)).values : color.values;
      rgb = rgb.map((val) => {
        if (color.type !== "color") {
          val /= 255;
        }
        return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
      });
      return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
    }
    function getContrastRatio(foreground, background) {
      const lumA = getLuminance(foreground);
      const lumB = getLuminance(background);
      return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
    }
    function alpha(color, value) {
      color = decomposeColor(color);
      value = clampWrapper(value);
      if (color.type === "rgb" || color.type === "hsl") {
        color.type += "a";
      }
      if (color.type === "color") {
        color.values[3] = `/${value}`;
      } else {
        color.values[3] = value;
      }
      return recomposeColor(color);
    }
    function private_safeAlpha(color, value, warning) {
      try {
        return alpha(color, value);
      } catch (error) {
        if (warning && define_process_env_default.NODE_ENV !== "production") {
          console.warn(warning);
        }
        return color;
      }
    }
    function darken(color, coefficient) {
      color = decomposeColor(color);
      coefficient = clampWrapper(coefficient);
      if (color.type.includes("hsl")) {
        color.values[2] *= 1 - coefficient;
      } else if (color.type.includes("rgb") || color.type.includes("color")) {
        for (let i = 0; i < 3; i += 1) {
          color.values[i] *= 1 - coefficient;
        }
      }
      return recomposeColor(color);
    }
    function private_safeDarken(color, coefficient, warning) {
      try {
        return darken(color, coefficient);
      } catch (error) {
        if (warning && define_process_env_default.NODE_ENV !== "production") {
          console.warn(warning);
        }
        return color;
      }
    }
    function lighten(color, coefficient) {
      color = decomposeColor(color);
      coefficient = clampWrapper(coefficient);
      if (color.type.includes("hsl")) {
        color.values[2] += (100 - color.values[2]) * coefficient;
      } else if (color.type.includes("rgb")) {
        for (let i = 0; i < 3; i += 1) {
          color.values[i] += (255 - color.values[i]) * coefficient;
        }
      } else if (color.type.includes("color")) {
        for (let i = 0; i < 3; i += 1) {
          color.values[i] += (1 - color.values[i]) * coefficient;
        }
      }
      return recomposeColor(color);
    }
    function private_safeLighten(color, coefficient, warning) {
      try {
        return lighten(color, coefficient);
      } catch (error) {
        if (warning && define_process_env_default.NODE_ENV !== "production") {
          console.warn(warning);
        }
        return color;
      }
    }
    function emphasize(color, coefficient = 0.15) {
      return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);
    }
    function private_safeEmphasize(color, coefficient, warning) {
      try {
        return emphasize(color, coefficient);
      } catch (error) {
        if (warning && define_process_env_default.NODE_ENV !== "production") {
          console.warn(warning);
        }
        return color;
      }
    }
    function blend(background, overlay, opacity, gamma = 1) {
      const blendChannel = (b, o) => Math.round((b ** (1 / gamma) * (1 - opacity) + o ** (1 / gamma) * opacity) ** gamma);
      const backgroundColor = decomposeColor(background);
      const overlayColor = decomposeColor(overlay);
      const rgb = [blendChannel(backgroundColor.values[0], overlayColor.values[0]), blendChannel(backgroundColor.values[1], overlayColor.values[1]), blendChannel(backgroundColor.values[2], overlayColor.values[2])];
      return recomposeColor({
        type: "rgb",
        values: rgb
      });
    }
  }
});

// node_modules/@mui/material/node_modules/@mui/system/colorManipulator/index.js
var require_colorManipulator2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/colorManipulator/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _colorManipulator = require_colorManipulator();
    Object.keys(_colorManipulator).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _colorManipulator[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _colorManipulator[key];
        }
      });
    });
  }
});

// node_modules/@mui/utils/chainPropTypes/chainPropTypes.js
var require_chainPropTypes = __commonJS({
  "node_modules/@mui/utils/chainPropTypes/chainPropTypes.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = chainPropTypes;
    function chainPropTypes(propType1, propType2) {
      if (define_process_env_default.NODE_ENV === "production") {
        return () => null;
      }
      return function validate(...args) {
        return propType1(...args) || propType2(...args);
      };
    }
  }
});

// node_modules/@mui/utils/chainPropTypes/index.js
var require_chainPropTypes2 = __commonJS({
  "node_modules/@mui/utils/chainPropTypes/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _chainPropTypes.default;
      }
    });
    var _chainPropTypes = _interopRequireDefault(require_chainPropTypes());
  }
});

// node_modules/@mui/utils/elementAcceptingRef/elementAcceptingRef.js
var require_elementAcceptingRef = __commonJS({
  "node_modules/@mui/utils/elementAcceptingRef/elementAcceptingRef.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _chainPropTypes = _interopRequireDefault(require_chainPropTypes2());
    function isClassComponent(elementType) {
      const {
        prototype = {}
      } = elementType;
      return Boolean(prototype.isReactComponent);
    }
    function acceptingRef(props, propName, componentName, location, propFullName) {
      const element = props[propName];
      const safePropName = propFullName || propName;
      if (element == null || // When server-side rendering React doesn't warn either.
      // This is not an accurate check for SSR.
      // This is only in place for Emotion compat.
      // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
      typeof window === "undefined") {
        return null;
      }
      let warningHint;
      const elementType = element.type;
      if (typeof elementType === "function" && !isClassComponent(elementType)) {
        warningHint = "Did you accidentally use a plain function component for an element instead?";
      }
      if (warningHint !== void 0) {
        return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
      }
      return null;
    }
    var elementAcceptingRef = (0, _chainPropTypes.default)(_propTypes.default.element, acceptingRef);
    elementAcceptingRef.isRequired = (0, _chainPropTypes.default)(_propTypes.default.element.isRequired, acceptingRef);
    var _default = exports2.default = elementAcceptingRef;
  }
});

// node_modules/@mui/utils/elementAcceptingRef/index.js
var require_elementAcceptingRef2 = __commonJS({
  "node_modules/@mui/utils/elementAcceptingRef/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _elementAcceptingRef.default;
      }
    });
    var _elementAcceptingRef = _interopRequireDefault(require_elementAcceptingRef());
  }
});

// node_modules/@mui/utils/elementTypeAcceptingRef/elementTypeAcceptingRef.js
var require_elementTypeAcceptingRef = __commonJS({
  "node_modules/@mui/utils/elementTypeAcceptingRef/elementTypeAcceptingRef.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _chainPropTypes = _interopRequireDefault(require_chainPropTypes2());
    function isClassComponent(elementType) {
      const {
        prototype = {}
      } = elementType;
      return Boolean(prototype.isReactComponent);
    }
    function elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {
      const propValue = props[propName];
      const safePropName = propFullName || propName;
      if (propValue == null || // When server-side rendering React doesn't warn either.
      // This is not an accurate check for SSR.
      // This is only in place for emotion compat.
      // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
      typeof window === "undefined") {
        return null;
      }
      let warningHint;
      if (typeof propValue === "function" && !isClassComponent(propValue)) {
        warningHint = "Did you accidentally provide a plain function component instead?";
      }
      if (warningHint !== void 0) {
        return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element type that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
      }
      return null;
    }
    var _default = exports2.default = (0, _chainPropTypes.default)(_propTypes.default.elementType, elementTypeAcceptingRef);
  }
});

// node_modules/@mui/utils/elementTypeAcceptingRef/index.js
var require_elementTypeAcceptingRef2 = __commonJS({
  "node_modules/@mui/utils/elementTypeAcceptingRef/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _elementTypeAcceptingRef.default;
      }
    });
    var _elementTypeAcceptingRef = _interopRequireDefault(require_elementTypeAcceptingRef());
  }
});

// node_modules/@mui/utils/exactProp/exactProp.js
var require_exactProp = __commonJS({
  "node_modules/@mui/utils/exactProp/exactProp.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = exactProp;
    var specialProperty = "exact-prop: \u200B";
    function exactProp(propTypes) {
      if (define_process_env_default.NODE_ENV === "production") {
        return propTypes;
      }
      return {
        ...propTypes,
        [specialProperty]: (props) => {
          const unsupportedProps = Object.keys(props).filter((prop) => !propTypes.hasOwnProperty(prop));
          if (unsupportedProps.length > 0) {
            return new Error(`The following props are not supported: ${unsupportedProps.map((prop) => `\`${prop}\``).join(", ")}. Please remove them.`);
          }
          return null;
        }
      };
    }
  }
});

// node_modules/@mui/utils/exactProp/index.js
var require_exactProp2 = __commonJS({
  "node_modules/@mui/utils/exactProp/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _exactProp.default;
      }
    });
    var _exactProp = _interopRequireDefault(require_exactProp());
  }
});

// node_modules/@mui/utils/HTMLElementType/HTMLElementType.js
var require_HTMLElementType = __commonJS({
  "node_modules/@mui/utils/HTMLElementType/HTMLElementType.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = HTMLElementType;
    function HTMLElementType(props, propName, componentName, location, propFullName) {
      if (define_process_env_default.NODE_ENV === "production") {
        return null;
      }
      const propValue = props[propName];
      const safePropName = propFullName || propName;
      if (propValue == null) {
        return null;
      }
      if (propValue && propValue.nodeType !== 1) {
        return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an HTMLElement.`);
      }
      return null;
    }
  }
});

// node_modules/@mui/utils/HTMLElementType/index.js
var require_HTMLElementType2 = __commonJS({
  "node_modules/@mui/utils/HTMLElementType/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _HTMLElementType.default;
      }
    });
    var _HTMLElementType = _interopRequireDefault(require_HTMLElementType());
  }
});

// node_modules/@mui/utils/ponyfillGlobal/ponyfillGlobal.js
var require_ponyfillGlobal = __commonJS({
  "node_modules/@mui/utils/ponyfillGlobal/ponyfillGlobal.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _default = exports2.default = typeof window != "undefined" && window.Math == Math ? window : typeof self != "undefined" && self.Math == Math ? self : Function("return this")();
  }
});

// node_modules/@mui/utils/ponyfillGlobal/index.js
var require_ponyfillGlobal2 = __commonJS({
  "node_modules/@mui/utils/ponyfillGlobal/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _ponyfillGlobal.default;
      }
    });
    var _ponyfillGlobal = _interopRequireDefault(require_ponyfillGlobal());
  }
});

// node_modules/@mui/utils/refType/refType.js
var require_refType = __commonJS({
  "node_modules/@mui/utils/refType/refType.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    var refType = _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]);
    var _default = exports2.default = refType;
  }
});

// node_modules/@mui/utils/refType/index.js
var require_refType2 = __commonJS({
  "node_modules/@mui/utils/refType/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _refType.default;
      }
    });
    var _refType = _interopRequireDefault(require_refType());
  }
});

// node_modules/@mui/utils/createChainedFunction/createChainedFunction.js
var require_createChainedFunction = __commonJS({
  "node_modules/@mui/utils/createChainedFunction/createChainedFunction.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = createChainedFunction;
    function createChainedFunction(...funcs) {
      return funcs.reduce((acc, func) => {
        if (func == null) {
          return acc;
        }
        return function chainedFunction(...args) {
          acc.apply(this, args);
          func.apply(this, args);
        };
      }, () => {
      });
    }
  }
});

// node_modules/@mui/utils/createChainedFunction/index.js
var require_createChainedFunction2 = __commonJS({
  "node_modules/@mui/utils/createChainedFunction/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _createChainedFunction.default;
      }
    });
    var _createChainedFunction = _interopRequireDefault(require_createChainedFunction());
  }
});

// node_modules/@mui/utils/debounce/debounce.js
var require_debounce = __commonJS({
  "node_modules/@mui/utils/debounce/debounce.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = debounce;
    function debounce(func, wait = 166) {
      let timeout;
      function debounced(...args) {
        const later = () => {
          func.apply(this, args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      }
      debounced.clear = () => {
        clearTimeout(timeout);
      };
      return debounced;
    }
  }
});

// node_modules/@mui/utils/debounce/index.js
var require_debounce2 = __commonJS({
  "node_modules/@mui/utils/debounce/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _debounce.default;
      }
    });
    var _debounce = _interopRequireWildcard(require_debounce());
    Object.keys(_debounce).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _debounce[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _debounce[key];
        }
      });
    });
  }
});

// node_modules/@mui/utils/deprecatedPropType/deprecatedPropType.js
var require_deprecatedPropType = __commonJS({
  "node_modules/@mui/utils/deprecatedPropType/deprecatedPropType.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = deprecatedPropType;
    function deprecatedPropType(validator, reason) {
      if (define_process_env_default.NODE_ENV === "production") {
        return () => null;
      }
      return (props, propName, componentName, location, propFullName) => {
        const componentNameSafe = componentName || "<<anonymous>>";
        const propFullNameSafe = propFullName || propName;
        if (typeof props[propName] !== "undefined") {
          return new Error(`The ${location} \`${propFullNameSafe}\` of \`${componentNameSafe}\` is deprecated. ${reason}`);
        }
        return null;
      };
    }
  }
});

// node_modules/@mui/utils/deprecatedPropType/index.js
var require_deprecatedPropType2 = __commonJS({
  "node_modules/@mui/utils/deprecatedPropType/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _deprecatedPropType.default;
      }
    });
    var _deprecatedPropType = _interopRequireDefault(require_deprecatedPropType());
  }
});

// node_modules/@mui/utils/isMuiElement/isMuiElement.js
var require_isMuiElement = __commonJS({
  "node_modules/@mui/utils/isMuiElement/isMuiElement.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isMuiElement;
    var React7 = _interopRequireWildcard(require_react());
    function isMuiElement(element, muiNames) {
      return /* @__PURE__ */ React7.isValidElement(element) && muiNames.indexOf(
        // For server components `muiName` is avaialble in element.type._payload.value.muiName
        // relevant info - https://github.com/facebook/react/blob/2807d781a08db8e9873687fccc25c0f12b4fb3d4/packages/react/src/ReactLazy.js#L45
        // eslint-disable-next-line no-underscore-dangle
        element.type.muiName ?? element.type?._payload?.value?.muiName
      ) !== -1;
    }
  }
});

// node_modules/@mui/utils/isMuiElement/index.js
var require_isMuiElement2 = __commonJS({
  "node_modules/@mui/utils/isMuiElement/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _isMuiElement.default;
      }
    });
    var _isMuiElement = _interopRequireDefault(require_isMuiElement());
  }
});

// node_modules/@mui/utils/ownerDocument/ownerDocument.js
var require_ownerDocument = __commonJS({
  "node_modules/@mui/utils/ownerDocument/ownerDocument.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = ownerDocument;
    function ownerDocument(node2) {
      return node2 && node2.ownerDocument || document;
    }
  }
});

// node_modules/@mui/utils/ownerDocument/index.js
var require_ownerDocument2 = __commonJS({
  "node_modules/@mui/utils/ownerDocument/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _ownerDocument.default;
      }
    });
    var _ownerDocument = _interopRequireDefault(require_ownerDocument());
  }
});

// node_modules/@mui/utils/ownerWindow/ownerWindow.js
var require_ownerWindow = __commonJS({
  "node_modules/@mui/utils/ownerWindow/ownerWindow.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = ownerWindow;
    var _ownerDocument = _interopRequireDefault(require_ownerDocument2());
    function ownerWindow(node2) {
      const doc = (0, _ownerDocument.default)(node2);
      return doc.defaultView || window;
    }
  }
});

// node_modules/@mui/utils/ownerWindow/index.js
var require_ownerWindow2 = __commonJS({
  "node_modules/@mui/utils/ownerWindow/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _ownerWindow.default;
      }
    });
    var _ownerWindow = _interopRequireDefault(require_ownerWindow());
  }
});

// node_modules/@mui/utils/requirePropFactory/requirePropFactory.js
var require_requirePropFactory = __commonJS({
  "node_modules/@mui/utils/requirePropFactory/requirePropFactory.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = requirePropFactory;
    function requirePropFactory(componentNameInError, Component) {
      if (define_process_env_default.NODE_ENV === "production") {
        return () => null;
      }
      const prevPropTypes = Component ? {
        ...Component.propTypes
      } : null;
      const requireProp = (requiredProp) => (props, propName, componentName, location, propFullName, ...args) => {
        const propFullNameSafe = propFullName || propName;
        const defaultTypeChecker = prevPropTypes?.[propFullNameSafe];
        if (defaultTypeChecker) {
          const typeCheckerResult = defaultTypeChecker(props, propName, componentName, location, propFullName, ...args);
          if (typeCheckerResult) {
            return typeCheckerResult;
          }
        }
        if (typeof props[propName] !== "undefined" && !props[requiredProp]) {
          return new Error(`The prop \`${propFullNameSafe}\` of \`${componentNameInError}\` can only be used together with the \`${requiredProp}\` prop.`);
        }
        return null;
      };
      return requireProp;
    }
  }
});

// node_modules/@mui/utils/requirePropFactory/index.js
var require_requirePropFactory2 = __commonJS({
  "node_modules/@mui/utils/requirePropFactory/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _requirePropFactory.default;
      }
    });
    var _requirePropFactory = _interopRequireDefault(require_requirePropFactory());
  }
});

// node_modules/@mui/utils/setRef/setRef.js
var require_setRef = __commonJS({
  "node_modules/@mui/utils/setRef/setRef.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setRef;
    function setRef(ref, value) {
      if (typeof ref === "function") {
        ref(value);
      } else if (ref) {
        ref.current = value;
      }
    }
  }
});

// node_modules/@mui/utils/setRef/index.js
var require_setRef2 = __commonJS({
  "node_modules/@mui/utils/setRef/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _setRef.default;
      }
    });
    var _setRef = _interopRequireDefault(require_setRef());
  }
});

// node_modules/@mui/utils/useId/useId.js
var require_useId = __commonJS({
  "node_modules/@mui/utils/useId/useId.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = useId;
    var React7 = _interopRequireWildcard(require_react());
    var globalId = 0;
    function useGlobalId(idOverride) {
      const [defaultId, setDefaultId] = React7.useState(idOverride);
      const id = idOverride || defaultId;
      React7.useEffect(() => {
        if (defaultId == null) {
          globalId += 1;
          setDefaultId(`mui-${globalId}`);
        }
      }, [defaultId]);
      return id;
    }
    var safeReact = {
      ...React7
    };
    var maybeReactUseId = safeReact.useId;
    function useId(idOverride) {
      if (maybeReactUseId !== void 0) {
        const reactId = maybeReactUseId();
        return idOverride ?? reactId;
      }
      return useGlobalId(idOverride);
    }
  }
});

// node_modules/@mui/utils/useId/index.js
var require_useId2 = __commonJS({
  "node_modules/@mui/utils/useId/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _useId.default;
      }
    });
    var _useId = _interopRequireDefault(require_useId());
  }
});

// node_modules/@mui/utils/unsupportedProp/unsupportedProp.js
var require_unsupportedProp = __commonJS({
  "node_modules/@mui/utils/unsupportedProp/unsupportedProp.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = unsupportedProp;
    function unsupportedProp(props, propName, componentName, location, propFullName) {
      if (define_process_env_default.NODE_ENV === "production") {
        return null;
      }
      const propFullNameSafe = propFullName || propName;
      if (typeof props[propName] !== "undefined") {
        return new Error(`The prop \`${propFullNameSafe}\` is not supported. Please remove it.`);
      }
      return null;
    }
  }
});

// node_modules/@mui/utils/unsupportedProp/index.js
var require_unsupportedProp2 = __commonJS({
  "node_modules/@mui/utils/unsupportedProp/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _unsupportedProp.default;
      }
    });
    var _unsupportedProp = _interopRequireDefault(require_unsupportedProp());
  }
});

// node_modules/@mui/utils/useControlled/useControlled.js
var require_useControlled = __commonJS({
  "node_modules/@mui/utils/useControlled/useControlled.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = useControlled;
    var React7 = _interopRequireWildcard(require_react());
    function useControlled({
      controlled,
      default: defaultProp,
      name,
      state = "value"
    }) {
      const {
        current: isControlled
      } = React7.useRef(controlled !== void 0);
      const [valueState, setValue] = React7.useState(defaultProp);
      const value = isControlled ? controlled : valueState;
      if (define_process_env_default.NODE_ENV !== "production") {
        React7.useEffect(() => {
          if (isControlled !== (controlled !== void 0)) {
            console.error([`MUI: A component is changing the ${isControlled ? "" : "un"}controlled ${state} state of ${name} to be ${isControlled ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", `Decide between using a controlled or uncontrolled ${name} element for the lifetime of the component.`, "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join("\n"));
          }
        }, [state, name, controlled]);
        const {
          current: defaultValue
        } = React7.useRef(defaultProp);
        React7.useEffect(() => {
          if (!isControlled && !Object.is(defaultValue, defaultProp)) {
            console.error([`MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. To suppress this warning opt to use a controlled ${name}.`].join("\n"));
          }
        }, [JSON.stringify(defaultProp)]);
      }
      const setValueIfUncontrolled = React7.useCallback((newValue) => {
        if (!isControlled) {
          setValue(newValue);
        }
      }, []);
      return [value, setValueIfUncontrolled];
    }
  }
});

// node_modules/@mui/utils/useControlled/index.js
var require_useControlled2 = __commonJS({
  "node_modules/@mui/utils/useControlled/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _useControlled.default;
      }
    });
    var _useControlled = _interopRequireDefault(require_useControlled());
  }
});

// node_modules/@mui/utils/useEventCallback/useEventCallback.js
var require_useEventCallback = __commonJS({
  "node_modules/@mui/utils/useEventCallback/useEventCallback.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _useEnhancedEffect = _interopRequireDefault(require_useEnhancedEffect2());
    function useEventCallback(fn) {
      const ref = React7.useRef(fn);
      (0, _useEnhancedEffect.default)(() => {
        ref.current = fn;
      });
      return React7.useRef((...args) => (
        // @ts-expect-error hide `this`
        (0, ref.current)(...args)
      )).current;
    }
    var _default = exports2.default = useEventCallback;
  }
});

// node_modules/@mui/utils/useEventCallback/index.js
var require_useEventCallback2 = __commonJS({
  "node_modules/@mui/utils/useEventCallback/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _useEventCallback.default;
      }
    });
    var _useEventCallback = _interopRequireDefault(require_useEventCallback());
  }
});

// node_modules/@mui/utils/useForkRef/useForkRef.js
var require_useForkRef = __commonJS({
  "node_modules/@mui/utils/useForkRef/useForkRef.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = useForkRef;
    var React7 = _interopRequireWildcard(require_react());
    function useForkRef(...refs) {
      const cleanupRef = React7.useRef(void 0);
      const refEffect = React7.useCallback((instance) => {
        const cleanups = refs.map((ref) => {
          if (ref == null) {
            return null;
          }
          if (typeof ref === "function") {
            const refCallback = ref;
            const refCleanup = refCallback(instance);
            return typeof refCleanup === "function" ? refCleanup : () => {
              refCallback(null);
            };
          }
          ref.current = instance;
          return () => {
            ref.current = null;
          };
        });
        return () => {
          cleanups.forEach((refCleanup) => refCleanup?.());
        };
      }, refs);
      return React7.useMemo(() => {
        if (refs.every((ref) => ref == null)) {
          return null;
        }
        return (value) => {
          if (cleanupRef.current) {
            cleanupRef.current();
            cleanupRef.current = void 0;
          }
          if (value != null) {
            cleanupRef.current = refEffect(value);
          }
        };
      }, refs);
    }
  }
});

// node_modules/@mui/utils/useForkRef/index.js
var require_useForkRef2 = __commonJS({
  "node_modules/@mui/utils/useForkRef/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _useForkRef.default;
      }
    });
    var _useForkRef = _interopRequireDefault(require_useForkRef());
  }
});

// node_modules/@mui/utils/useLazyRef/useLazyRef.js
var require_useLazyRef = __commonJS({
  "node_modules/@mui/utils/useLazyRef/useLazyRef.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = useLazyRef;
    var React7 = _interopRequireWildcard(require_react());
    var UNINITIALIZED = {};
    function useLazyRef(init, initArg) {
      const ref = React7.useRef(UNINITIALIZED);
      if (ref.current === UNINITIALIZED) {
        ref.current = init(initArg);
      }
      return ref;
    }
  }
});

// node_modules/@mui/utils/useLazyRef/index.js
var require_useLazyRef2 = __commonJS({
  "node_modules/@mui/utils/useLazyRef/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _useLazyRef.default;
      }
    });
    var _useLazyRef = _interopRequireDefault(require_useLazyRef());
  }
});

// node_modules/@mui/utils/useOnMount/useOnMount.js
var require_useOnMount = __commonJS({
  "node_modules/@mui/utils/useOnMount/useOnMount.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = useOnMount;
    var React7 = _interopRequireWildcard(require_react());
    var EMPTY = [];
    function useOnMount(fn) {
      React7.useEffect(fn, EMPTY);
    }
  }
});

// node_modules/@mui/utils/useTimeout/useTimeout.js
var require_useTimeout = __commonJS({
  "node_modules/@mui/utils/useTimeout/useTimeout.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.Timeout = void 0;
    exports2.default = useTimeout;
    var _useLazyRef = _interopRequireDefault(require_useLazyRef());
    var _useOnMount = _interopRequireDefault(require_useOnMount());
    var Timeout = class _Timeout {
      static create() {
        return new _Timeout();
      }
      currentId = null;
      /**
       * Executes `fn` after `delay`, clearing any previously scheduled call.
       */
      start(delay, fn) {
        this.clear();
        this.currentId = setTimeout(() => {
          this.currentId = null;
          fn();
        }, delay);
      }
      clear = () => {
        if (this.currentId !== null) {
          clearTimeout(this.currentId);
          this.currentId = null;
        }
      };
      disposeEffect = () => {
        return this.clear;
      };
    };
    exports2.Timeout = Timeout;
    function useTimeout() {
      const timeout = (0, _useLazyRef.default)(Timeout.create).current;
      (0, _useOnMount.default)(timeout.disposeEffect);
      return timeout;
    }
  }
});

// node_modules/@mui/utils/useTimeout/index.js
var require_useTimeout2 = __commonJS({
  "node_modules/@mui/utils/useTimeout/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "Timeout", {
      enumerable: true,
      get: function() {
        return _useTimeout.Timeout;
      }
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _useTimeout.default;
      }
    });
    var _useTimeout = _interopRequireWildcard(require_useTimeout());
  }
});

// node_modules/@mui/utils/useOnMount/index.js
var require_useOnMount2 = __commonJS({
  "node_modules/@mui/utils/useOnMount/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _useOnMount.default;
      }
    });
    var _useOnMount = _interopRequireDefault(require_useOnMount());
  }
});

// node_modules/@mui/utils/useIsFocusVisible/useIsFocusVisible.js
var require_useIsFocusVisible = __commonJS({
  "node_modules/@mui/utils/useIsFocusVisible/useIsFocusVisible.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = useIsFocusVisible;
    exports2.teardown = teardown;
    var React7 = _interopRequireWildcard(require_react());
    var _useTimeout = require_useTimeout();
    var hadKeyboardEvent = true;
    var hadFocusVisibleRecently = false;
    var hadFocusVisibleRecentlyTimeout = new _useTimeout.Timeout();
    var inputTypesWhitelist = {
      text: true,
      search: true,
      url: true,
      tel: true,
      email: true,
      password: true,
      number: true,
      date: true,
      month: true,
      week: true,
      time: true,
      datetime: true,
      "datetime-local": true
    };
    function focusTriggersKeyboardModality(node2) {
      const {
        type,
        tagName
      } = node2;
      if (tagName === "INPUT" && inputTypesWhitelist[type] && !node2.readOnly) {
        return true;
      }
      if (tagName === "TEXTAREA" && !node2.readOnly) {
        return true;
      }
      if (node2.isContentEditable) {
        return true;
      }
      return false;
    }
    function handleKeyDown(event) {
      if (event.metaKey || event.altKey || event.ctrlKey) {
        return;
      }
      hadKeyboardEvent = true;
    }
    function handlePointerDown() {
      hadKeyboardEvent = false;
    }
    function handleVisibilityChange() {
      if (this.visibilityState === "hidden") {
        if (hadFocusVisibleRecently) {
          hadKeyboardEvent = true;
        }
      }
    }
    function prepare(doc) {
      doc.addEventListener("keydown", handleKeyDown, true);
      doc.addEventListener("mousedown", handlePointerDown, true);
      doc.addEventListener("pointerdown", handlePointerDown, true);
      doc.addEventListener("touchstart", handlePointerDown, true);
      doc.addEventListener("visibilitychange", handleVisibilityChange, true);
    }
    function teardown(doc) {
      doc.removeEventListener("keydown", handleKeyDown, true);
      doc.removeEventListener("mousedown", handlePointerDown, true);
      doc.removeEventListener("pointerdown", handlePointerDown, true);
      doc.removeEventListener("touchstart", handlePointerDown, true);
      doc.removeEventListener("visibilitychange", handleVisibilityChange, true);
    }
    function isFocusVisible(event) {
      const {
        target
      } = event;
      try {
        return target.matches(":focus-visible");
      } catch (error) {
      }
      return hadKeyboardEvent || focusTriggersKeyboardModality(target);
    }
    function useIsFocusVisible() {
      const ref = React7.useCallback((node2) => {
        if (node2 != null) {
          prepare(node2.ownerDocument);
        }
      }, []);
      const isFocusVisibleRef = React7.useRef(false);
      function handleBlurVisible() {
        if (isFocusVisibleRef.current) {
          hadFocusVisibleRecently = true;
          hadFocusVisibleRecentlyTimeout.start(100, () => {
            hadFocusVisibleRecently = false;
          });
          isFocusVisibleRef.current = false;
          return true;
        }
        return false;
      }
      function handleFocusVisible(event) {
        if (isFocusVisible(event)) {
          isFocusVisibleRef.current = true;
          return true;
        }
        return false;
      }
      return {
        isFocusVisibleRef,
        onFocus: handleFocusVisible,
        onBlur: handleBlurVisible,
        ref
      };
    }
  }
});

// node_modules/@mui/utils/useIsFocusVisible/index.js
var require_useIsFocusVisible2 = __commonJS({
  "node_modules/@mui/utils/useIsFocusVisible/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _useIsFocusVisible.default;
      }
    });
    var _useIsFocusVisible = _interopRequireWildcard(require_useIsFocusVisible());
    Object.keys(_useIsFocusVisible).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _useIsFocusVisible[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _useIsFocusVisible[key];
        }
      });
    });
  }
});

// node_modules/@mui/utils/isFocusVisible/isFocusVisible.js
var require_isFocusVisible = __commonJS({
  "node_modules/@mui/utils/isFocusVisible/isFocusVisible.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isFocusVisible;
    function isFocusVisible(element) {
      try {
        return element.matches(":focus-visible");
      } catch (error) {
        if (define_process_env_default.NODE_ENV !== "production" && !/jsdom/.test(window.navigator.userAgent)) {
          console.warn(["MUI: The `:focus-visible` pseudo class is not supported in this browser.", "Some components rely on this feature to work properly."].join("\n"));
        }
      }
      return false;
    }
  }
});

// node_modules/@mui/utils/isFocusVisible/index.js
var require_isFocusVisible2 = __commonJS({
  "node_modules/@mui/utils/isFocusVisible/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _isFocusVisible.default;
      }
    });
    var _isFocusVisible = _interopRequireDefault(require_isFocusVisible());
  }
});

// node_modules/@mui/utils/getScrollbarSize/getScrollbarSize.js
var require_getScrollbarSize = __commonJS({
  "node_modules/@mui/utils/getScrollbarSize/getScrollbarSize.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getScrollbarSize;
    function getScrollbarSize(win = window) {
      const documentWidth = win.document.documentElement.clientWidth;
      return win.innerWidth - documentWidth;
    }
  }
});

// node_modules/@mui/utils/getScrollbarSize/index.js
var require_getScrollbarSize2 = __commonJS({
  "node_modules/@mui/utils/getScrollbarSize/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _getScrollbarSize.default;
      }
    });
    var _getScrollbarSize = _interopRequireDefault(require_getScrollbarSize());
  }
});

// node_modules/@mui/utils/usePreviousProps/usePreviousProps.js
var require_usePreviousProps = __commonJS({
  "node_modules/@mui/utils/usePreviousProps/usePreviousProps.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var usePreviousProps = (value) => {
      const ref = React7.useRef({});
      React7.useEffect(() => {
        ref.current = value;
      });
      return ref.current;
    };
    var _default = exports2.default = usePreviousProps;
  }
});

// node_modules/@mui/utils/usePreviousProps/index.js
var require_usePreviousProps2 = __commonJS({
  "node_modules/@mui/utils/usePreviousProps/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _usePreviousProps.default;
      }
    });
    var _usePreviousProps = _interopRequireDefault(require_usePreviousProps());
  }
});

// node_modules/@mui/utils/getValidReactChildren/getValidReactChildren.js
var require_getValidReactChildren = __commonJS({
  "node_modules/@mui/utils/getValidReactChildren/getValidReactChildren.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getValidReactChildren;
    var React7 = _interopRequireWildcard(require_react());
    function getValidReactChildren(children) {
      return React7.Children.toArray(children).filter((child) => /* @__PURE__ */ React7.isValidElement(child));
    }
  }
});

// node_modules/@mui/utils/getValidReactChildren/index.js
var require_getValidReactChildren2 = __commonJS({
  "node_modules/@mui/utils/getValidReactChildren/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _getValidReactChildren.default;
      }
    });
    var _getValidReactChildren = _interopRequireDefault(require_getValidReactChildren());
  }
});

// node_modules/@mui/utils/visuallyHidden/visuallyHidden.js
var require_visuallyHidden = __commonJS({
  "node_modules/@mui/utils/visuallyHidden/visuallyHidden.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var visuallyHidden = {
      border: 0,
      clip: "rect(0 0 0 0)",
      height: "1px",
      margin: "-1px",
      overflow: "hidden",
      padding: 0,
      position: "absolute",
      whiteSpace: "nowrap",
      width: "1px"
    };
    var _default = exports2.default = visuallyHidden;
  }
});

// node_modules/@mui/utils/visuallyHidden/index.js
var require_visuallyHidden2 = __commonJS({
  "node_modules/@mui/utils/visuallyHidden/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _visuallyHidden.default;
      }
    });
    var _visuallyHidden = _interopRequireDefault(require_visuallyHidden());
  }
});

// node_modules/@mui/utils/integerPropType/integerPropType.js
var require_integerPropType = __commonJS({
  "node_modules/@mui/utils/integerPropType/integerPropType.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getTypeByValue = getTypeByValue;
    function getTypeByValue(value) {
      const valueType = typeof value;
      switch (valueType) {
        case "number":
          if (Number.isNaN(value)) {
            return "NaN";
          }
          if (!Number.isFinite(value)) {
            return "Infinity";
          }
          if (value !== Math.floor(value)) {
            return "float";
          }
          return "number";
        case "object":
          if (value === null) {
            return "null";
          }
          return value.constructor.name;
        default:
          return valueType;
      }
    }
    function requiredInteger(props, propName, componentName, location) {
      const propValue = props[propName];
      if (propValue == null || !Number.isInteger(propValue)) {
        const propType = getTypeByValue(propValue);
        return new RangeError(`Invalid ${location} \`${propName}\` of type \`${propType}\` supplied to \`${componentName}\`, expected \`integer\`.`);
      }
      return null;
    }
    function validator(props, propName, ...other) {
      const propValue = props[propName];
      if (propValue === void 0) {
        return null;
      }
      return requiredInteger(props, propName, ...other);
    }
    function validatorNoop() {
      return null;
    }
    validator.isRequired = requiredInteger;
    validatorNoop.isRequired = validatorNoop;
    var _default = exports2.default = define_process_env_default.NODE_ENV === "production" ? validatorNoop : validator;
  }
});

// node_modules/@mui/utils/integerPropType/index.js
var require_integerPropType2 = __commonJS({
  "node_modules/@mui/utils/integerPropType/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _integerPropType.default;
      }
    });
    var _integerPropType = _interopRequireWildcard(require_integerPropType());
    Object.keys(_integerPropType).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _integerPropType[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _integerPropType[key];
        }
      });
    });
  }
});

// node_modules/@mui/utils/composeClasses/composeClasses.js
var require_composeClasses = __commonJS({
  "node_modules/@mui/utils/composeClasses/composeClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = composeClasses;
    function composeClasses(slots, getUtilityClass, classes = void 0) {
      const output = {};
      for (const slotName in slots) {
        const slot = slots[slotName];
        let buffer = "";
        let start = true;
        for (let i = 0; i < slot.length; i += 1) {
          const value = slot[i];
          if (value) {
            buffer += (start === true ? "" : " ") + getUtilityClass(value);
            start = false;
            if (classes && classes[value]) {
              buffer += " " + classes[value];
            }
          }
        }
        output[slotName] = buffer;
      }
      return output;
    }
  }
});

// node_modules/@mui/utils/composeClasses/index.js
var require_composeClasses2 = __commonJS({
  "node_modules/@mui/utils/composeClasses/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _composeClasses.default;
      }
    });
    var _composeClasses = _interopRequireDefault(require_composeClasses());
  }
});

// node_modules/@mui/utils/isHostComponent/isHostComponent.js
var require_isHostComponent = __commonJS({
  "node_modules/@mui/utils/isHostComponent/isHostComponent.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    function isHostComponent(element) {
      return typeof element === "string";
    }
    var _default = exports2.default = isHostComponent;
  }
});

// node_modules/@mui/utils/isHostComponent/index.js
var require_isHostComponent2 = __commonJS({
  "node_modules/@mui/utils/isHostComponent/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _isHostComponent.default;
      }
    });
    var _isHostComponent = _interopRequireDefault(require_isHostComponent());
  }
});

// node_modules/@mui/utils/appendOwnerState/appendOwnerState.js
var require_appendOwnerState = __commonJS({
  "node_modules/@mui/utils/appendOwnerState/appendOwnerState.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _isHostComponent = _interopRequireDefault(require_isHostComponent2());
    function appendOwnerState(elementType, otherProps, ownerState) {
      if (elementType === void 0 || (0, _isHostComponent.default)(elementType)) {
        return otherProps;
      }
      return {
        ...otherProps,
        ownerState: {
          ...otherProps.ownerState,
          ...ownerState
        }
      };
    }
    var _default = exports2.default = appendOwnerState;
  }
});

// node_modules/@mui/utils/appendOwnerState/index.js
var require_appendOwnerState2 = __commonJS({
  "node_modules/@mui/utils/appendOwnerState/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _appendOwnerState.default;
      }
    });
    var _appendOwnerState = _interopRequireDefault(require_appendOwnerState());
  }
});

// node_modules/@mui/utils/extractEventHandlers/extractEventHandlers.js
var require_extractEventHandlers = __commonJS({
  "node_modules/@mui/utils/extractEventHandlers/extractEventHandlers.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    function extractEventHandlers(object, excludeKeys = []) {
      if (object === void 0) {
        return {};
      }
      const result = {};
      Object.keys(object).filter((prop) => prop.match(/^on[A-Z]/) && typeof object[prop] === "function" && !excludeKeys.includes(prop)).forEach((prop) => {
        result[prop] = object[prop];
      });
      return result;
    }
    var _default = exports2.default = extractEventHandlers;
  }
});

// node_modules/@mui/utils/extractEventHandlers/index.js
var require_extractEventHandlers2 = __commonJS({
  "node_modules/@mui/utils/extractEventHandlers/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _extractEventHandlers.default;
      }
    });
    var _extractEventHandlers = _interopRequireDefault(require_extractEventHandlers());
  }
});

// node_modules/@mui/utils/omitEventHandlers/omitEventHandlers.js
var require_omitEventHandlers = __commonJS({
  "node_modules/@mui/utils/omitEventHandlers/omitEventHandlers.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    function omitEventHandlers(object) {
      if (object === void 0) {
        return {};
      }
      const result = {};
      Object.keys(object).filter((prop) => !(prop.match(/^on[A-Z]/) && typeof object[prop] === "function")).forEach((prop) => {
        result[prop] = object[prop];
      });
      return result;
    }
    var _default = exports2.default = omitEventHandlers;
  }
});

// node_modules/@mui/utils/omitEventHandlers/index.js
var require_omitEventHandlers2 = __commonJS({
  "node_modules/@mui/utils/omitEventHandlers/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _omitEventHandlers.default;
      }
    });
    var _omitEventHandlers = _interopRequireDefault(require_omitEventHandlers());
  }
});

// node_modules/@mui/utils/mergeSlotProps/mergeSlotProps.js
var require_mergeSlotProps = __commonJS({
  "node_modules/@mui/utils/mergeSlotProps/mergeSlotProps.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _clsx = _interopRequireDefault(require_clsx());
    var _extractEventHandlers = _interopRequireDefault(require_extractEventHandlers2());
    var _omitEventHandlers = _interopRequireDefault(require_omitEventHandlers2());
    function mergeSlotProps(parameters) {
      const {
        getSlotProps,
        additionalProps,
        externalSlotProps,
        externalForwardedProps,
        className
      } = parameters;
      if (!getSlotProps) {
        const joinedClasses2 = (0, _clsx.default)(additionalProps?.className, className, externalForwardedProps?.className, externalSlotProps?.className);
        const mergedStyle2 = {
          ...additionalProps?.style,
          ...externalForwardedProps?.style,
          ...externalSlotProps?.style
        };
        const props2 = {
          ...additionalProps,
          ...externalForwardedProps,
          ...externalSlotProps
        };
        if (joinedClasses2.length > 0) {
          props2.className = joinedClasses2;
        }
        if (Object.keys(mergedStyle2).length > 0) {
          props2.style = mergedStyle2;
        }
        return {
          props: props2,
          internalRef: void 0
        };
      }
      const eventHandlers = (0, _extractEventHandlers.default)({
        ...externalForwardedProps,
        ...externalSlotProps
      });
      const componentsPropsWithoutEventHandlers = (0, _omitEventHandlers.default)(externalSlotProps);
      const otherPropsWithoutEventHandlers = (0, _omitEventHandlers.default)(externalForwardedProps);
      const internalSlotProps = getSlotProps(eventHandlers);
      const joinedClasses = (0, _clsx.default)(internalSlotProps?.className, additionalProps?.className, className, externalForwardedProps?.className, externalSlotProps?.className);
      const mergedStyle = {
        ...internalSlotProps?.style,
        ...additionalProps?.style,
        ...externalForwardedProps?.style,
        ...externalSlotProps?.style
      };
      const props = {
        ...internalSlotProps,
        ...additionalProps,
        ...otherPropsWithoutEventHandlers,
        ...componentsPropsWithoutEventHandlers
      };
      if (joinedClasses.length > 0) {
        props.className = joinedClasses;
      }
      if (Object.keys(mergedStyle).length > 0) {
        props.style = mergedStyle;
      }
      return {
        props,
        internalRef: internalSlotProps.ref
      };
    }
    var _default = exports2.default = mergeSlotProps;
  }
});

// node_modules/@mui/utils/mergeSlotProps/index.js
var require_mergeSlotProps2 = __commonJS({
  "node_modules/@mui/utils/mergeSlotProps/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _mergeSlotProps.default;
      }
    });
    var _mergeSlotProps = _interopRequireDefault(require_mergeSlotProps());
  }
});

// node_modules/@mui/utils/resolveComponentProps/resolveComponentProps.js
var require_resolveComponentProps = __commonJS({
  "node_modules/@mui/utils/resolveComponentProps/resolveComponentProps.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    function resolveComponentProps(componentProps, ownerState, slotState) {
      if (typeof componentProps === "function") {
        return componentProps(ownerState, slotState);
      }
      return componentProps;
    }
    var _default = exports2.default = resolveComponentProps;
  }
});

// node_modules/@mui/utils/resolveComponentProps/index.js
var require_resolveComponentProps2 = __commonJS({
  "node_modules/@mui/utils/resolveComponentProps/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _resolveComponentProps.default;
      }
    });
    var _resolveComponentProps = _interopRequireDefault(require_resolveComponentProps());
  }
});

// node_modules/@mui/utils/useSlotProps/useSlotProps.js
var require_useSlotProps = __commonJS({
  "node_modules/@mui/utils/useSlotProps/useSlotProps.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _useForkRef = _interopRequireDefault(require_useForkRef2());
    var _appendOwnerState = _interopRequireDefault(require_appendOwnerState2());
    var _mergeSlotProps = _interopRequireDefault(require_mergeSlotProps2());
    var _resolveComponentProps = _interopRequireDefault(require_resolveComponentProps2());
    function useSlotProps(parameters) {
      const {
        elementType,
        externalSlotProps,
        ownerState,
        skipResolvingSlotProps = false,
        ...other
      } = parameters;
      const resolvedComponentsProps = skipResolvingSlotProps ? {} : (0, _resolveComponentProps.default)(externalSlotProps, ownerState);
      const {
        props: mergedProps,
        internalRef
      } = (0, _mergeSlotProps.default)({
        ...other,
        externalSlotProps: resolvedComponentsProps
      });
      const ref = (0, _useForkRef.default)(internalRef, resolvedComponentsProps?.ref, parameters.additionalProps?.ref);
      const props = (0, _appendOwnerState.default)(elementType, {
        ...mergedProps,
        ref
      }, ownerState);
      return props;
    }
    var _default = exports2.default = useSlotProps;
  }
});

// node_modules/@mui/utils/useSlotProps/index.js
var require_useSlotProps2 = __commonJS({
  "node_modules/@mui/utils/useSlotProps/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _useSlotProps.default;
      }
    });
    var _useSlotProps = _interopRequireDefault(require_useSlotProps());
  }
});

// node_modules/@mui/utils/getReactNodeRef/getReactNodeRef.js
var require_getReactNodeRef = __commonJS({
  "node_modules/@mui/utils/getReactNodeRef/getReactNodeRef.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getReactNodeRef;
    var React7 = _interopRequireWildcard(require_react());
    function getReactNodeRef(element) {
      if (!element || !/* @__PURE__ */ React7.isValidElement(element)) {
        return null;
      }
      return element.props.propertyIsEnumerable("ref") ? element.props.ref : (
        // @ts-expect-error element.ref is not included in the ReactElement type
        // We cannot check for it, but isValidElement is true at this point
        // https://github.com/DefinitelyTyped/DefinitelyTyped/discussions/70189
        element.ref
      );
    }
  }
});

// node_modules/@mui/utils/getReactNodeRef/index.js
var require_getReactNodeRef2 = __commonJS({
  "node_modules/@mui/utils/getReactNodeRef/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _getReactNodeRef.default;
      }
    });
    var _getReactNodeRef = _interopRequireDefault(require_getReactNodeRef());
  }
});

// node_modules/@mui/utils/getReactElementRef/getReactElementRef.js
var require_getReactElementRef = __commonJS({
  "node_modules/@mui/utils/getReactElementRef/getReactElementRef.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getReactElementRef;
    var React7 = _interopRequireWildcard(require_react());
    function getReactElementRef(element) {
      if (parseInt(React7.version, 10) >= 19) {
        return element?.props?.ref || null;
      }
      return element?.ref || null;
    }
  }
});

// node_modules/@mui/utils/getReactElementRef/index.js
var require_getReactElementRef2 = __commonJS({
  "node_modules/@mui/utils/getReactElementRef/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _getReactElementRef.default;
      }
    });
    var _getReactElementRef = _interopRequireDefault(require_getReactElementRef());
  }
});

// node_modules/@mui/utils/types.js
var require_types = __commonJS({
  "node_modules/@mui/utils/types.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
  }
});

// node_modules/@mui/utils/index.js
var require_utils = __commonJS({
  "node_modules/@mui/utils/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      chainPropTypes: true,
      deepmerge: true,
      isPlainObject: true,
      elementAcceptingRef: true,
      elementTypeAcceptingRef: true,
      exactProp: true,
      formatMuiErrorMessage: true,
      getDisplayName: true,
      HTMLElementType: true,
      ponyfillGlobal: true,
      refType: true,
      unstable_capitalize: true,
      unstable_createChainedFunction: true,
      unstable_debounce: true,
      unstable_deprecatedPropType: true,
      unstable_isMuiElement: true,
      unstable_ownerDocument: true,
      unstable_ownerWindow: true,
      unstable_requirePropFactory: true,
      unstable_setRef: true,
      unstable_useEnhancedEffect: true,
      unstable_useId: true,
      unstable_unsupportedProp: true,
      unstable_useControlled: true,
      unstable_useEventCallback: true,
      unstable_useForkRef: true,
      unstable_useLazyRef: true,
      unstable_useTimeout: true,
      unstable_Timeout: true,
      unstable_useOnMount: true,
      unstable_useIsFocusVisible: true,
      unstable_isFocusVisible: true,
      unstable_getScrollbarSize: true,
      usePreviousProps: true,
      getValidReactChildren: true,
      visuallyHidden: true,
      integerPropType: true,
      internal_resolveProps: true,
      unstable_composeClasses: true,
      unstable_generateUtilityClass: true,
      unstable_isGlobalState: true,
      unstable_generateUtilityClasses: true,
      unstable_ClassNameGenerator: true,
      clamp: true,
      unstable_useSlotProps: true,
      unstable_resolveComponentProps: true,
      unstable_extractEventHandlers: true,
      unstable_getReactNodeRef: true,
      unstable_getReactElementRef: true
    };
    Object.defineProperty(exports2, "HTMLElementType", {
      enumerable: true,
      get: function() {
        return _HTMLElementType.default;
      }
    });
    Object.defineProperty(exports2, "chainPropTypes", {
      enumerable: true,
      get: function() {
        return _chainPropTypes.default;
      }
    });
    Object.defineProperty(exports2, "clamp", {
      enumerable: true,
      get: function() {
        return _clamp.default;
      }
    });
    Object.defineProperty(exports2, "deepmerge", {
      enumerable: true,
      get: function() {
        return _deepmerge.default;
      }
    });
    Object.defineProperty(exports2, "elementAcceptingRef", {
      enumerable: true,
      get: function() {
        return _elementAcceptingRef.default;
      }
    });
    Object.defineProperty(exports2, "elementTypeAcceptingRef", {
      enumerable: true,
      get: function() {
        return _elementTypeAcceptingRef.default;
      }
    });
    Object.defineProperty(exports2, "exactProp", {
      enumerable: true,
      get: function() {
        return _exactProp.default;
      }
    });
    Object.defineProperty(exports2, "formatMuiErrorMessage", {
      enumerable: true,
      get: function() {
        return _formatMuiErrorMessage.default;
      }
    });
    Object.defineProperty(exports2, "getDisplayName", {
      enumerable: true,
      get: function() {
        return _getDisplayName.default;
      }
    });
    Object.defineProperty(exports2, "getValidReactChildren", {
      enumerable: true,
      get: function() {
        return _getValidReactChildren.default;
      }
    });
    Object.defineProperty(exports2, "integerPropType", {
      enumerable: true,
      get: function() {
        return _integerPropType.default;
      }
    });
    Object.defineProperty(exports2, "internal_resolveProps", {
      enumerable: true,
      get: function() {
        return _resolveProps.default;
      }
    });
    Object.defineProperty(exports2, "isPlainObject", {
      enumerable: true,
      get: function() {
        return _deepmerge.isPlainObject;
      }
    });
    Object.defineProperty(exports2, "ponyfillGlobal", {
      enumerable: true,
      get: function() {
        return _ponyfillGlobal.default;
      }
    });
    Object.defineProperty(exports2, "refType", {
      enumerable: true,
      get: function() {
        return _refType.default;
      }
    });
    Object.defineProperty(exports2, "unstable_ClassNameGenerator", {
      enumerable: true,
      get: function() {
        return _ClassNameGenerator.default;
      }
    });
    Object.defineProperty(exports2, "unstable_Timeout", {
      enumerable: true,
      get: function() {
        return _useTimeout.Timeout;
      }
    });
    Object.defineProperty(exports2, "unstable_capitalize", {
      enumerable: true,
      get: function() {
        return _capitalize.default;
      }
    });
    Object.defineProperty(exports2, "unstable_composeClasses", {
      enumerable: true,
      get: function() {
        return _composeClasses.default;
      }
    });
    Object.defineProperty(exports2, "unstable_createChainedFunction", {
      enumerable: true,
      get: function() {
        return _createChainedFunction.default;
      }
    });
    Object.defineProperty(exports2, "unstable_debounce", {
      enumerable: true,
      get: function() {
        return _debounce.default;
      }
    });
    Object.defineProperty(exports2, "unstable_deprecatedPropType", {
      enumerable: true,
      get: function() {
        return _deprecatedPropType.default;
      }
    });
    Object.defineProperty(exports2, "unstable_extractEventHandlers", {
      enumerable: true,
      get: function() {
        return _extractEventHandlers.default;
      }
    });
    Object.defineProperty(exports2, "unstable_generateUtilityClass", {
      enumerable: true,
      get: function() {
        return _generateUtilityClass.default;
      }
    });
    Object.defineProperty(exports2, "unstable_generateUtilityClasses", {
      enumerable: true,
      get: function() {
        return _generateUtilityClasses.default;
      }
    });
    Object.defineProperty(exports2, "unstable_getReactElementRef", {
      enumerable: true,
      get: function() {
        return _getReactElementRef.default;
      }
    });
    Object.defineProperty(exports2, "unstable_getReactNodeRef", {
      enumerable: true,
      get: function() {
        return _getReactNodeRef.default;
      }
    });
    Object.defineProperty(exports2, "unstable_getScrollbarSize", {
      enumerable: true,
      get: function() {
        return _getScrollbarSize.default;
      }
    });
    Object.defineProperty(exports2, "unstable_isFocusVisible", {
      enumerable: true,
      get: function() {
        return _isFocusVisible.default;
      }
    });
    Object.defineProperty(exports2, "unstable_isGlobalState", {
      enumerable: true,
      get: function() {
        return _generateUtilityClass.isGlobalState;
      }
    });
    Object.defineProperty(exports2, "unstable_isMuiElement", {
      enumerable: true,
      get: function() {
        return _isMuiElement.default;
      }
    });
    Object.defineProperty(exports2, "unstable_ownerDocument", {
      enumerable: true,
      get: function() {
        return _ownerDocument.default;
      }
    });
    Object.defineProperty(exports2, "unstable_ownerWindow", {
      enumerable: true,
      get: function() {
        return _ownerWindow.default;
      }
    });
    Object.defineProperty(exports2, "unstable_requirePropFactory", {
      enumerable: true,
      get: function() {
        return _requirePropFactory.default;
      }
    });
    Object.defineProperty(exports2, "unstable_resolveComponentProps", {
      enumerable: true,
      get: function() {
        return _resolveComponentProps.default;
      }
    });
    Object.defineProperty(exports2, "unstable_setRef", {
      enumerable: true,
      get: function() {
        return _setRef.default;
      }
    });
    Object.defineProperty(exports2, "unstable_unsupportedProp", {
      enumerable: true,
      get: function() {
        return _unsupportedProp.default;
      }
    });
    Object.defineProperty(exports2, "unstable_useControlled", {
      enumerable: true,
      get: function() {
        return _useControlled.default;
      }
    });
    Object.defineProperty(exports2, "unstable_useEnhancedEffect", {
      enumerable: true,
      get: function() {
        return _useEnhancedEffect.default;
      }
    });
    Object.defineProperty(exports2, "unstable_useEventCallback", {
      enumerable: true,
      get: function() {
        return _useEventCallback.default;
      }
    });
    Object.defineProperty(exports2, "unstable_useForkRef", {
      enumerable: true,
      get: function() {
        return _useForkRef.default;
      }
    });
    Object.defineProperty(exports2, "unstable_useId", {
      enumerable: true,
      get: function() {
        return _useId.default;
      }
    });
    Object.defineProperty(exports2, "unstable_useIsFocusVisible", {
      enumerable: true,
      get: function() {
        return _useIsFocusVisible.default;
      }
    });
    Object.defineProperty(exports2, "unstable_useLazyRef", {
      enumerable: true,
      get: function() {
        return _useLazyRef.default;
      }
    });
    Object.defineProperty(exports2, "unstable_useOnMount", {
      enumerable: true,
      get: function() {
        return _useOnMount.default;
      }
    });
    Object.defineProperty(exports2, "unstable_useSlotProps", {
      enumerable: true,
      get: function() {
        return _useSlotProps.default;
      }
    });
    Object.defineProperty(exports2, "unstable_useTimeout", {
      enumerable: true,
      get: function() {
        return _useTimeout.default;
      }
    });
    Object.defineProperty(exports2, "usePreviousProps", {
      enumerable: true,
      get: function() {
        return _usePreviousProps.default;
      }
    });
    Object.defineProperty(exports2, "visuallyHidden", {
      enumerable: true,
      get: function() {
        return _visuallyHidden.default;
      }
    });
    var _chainPropTypes = _interopRequireDefault(require_chainPropTypes2());
    var _deepmerge = _interopRequireWildcard(require_deepmerge2());
    var _elementAcceptingRef = _interopRequireDefault(require_elementAcceptingRef2());
    var _elementTypeAcceptingRef = _interopRequireDefault(require_elementTypeAcceptingRef2());
    var _exactProp = _interopRequireDefault(require_exactProp2());
    var _formatMuiErrorMessage = _interopRequireDefault(require_formatMuiErrorMessage2());
    var _getDisplayName = _interopRequireDefault(require_getDisplayName2());
    var _HTMLElementType = _interopRequireDefault(require_HTMLElementType2());
    var _ponyfillGlobal = _interopRequireDefault(require_ponyfillGlobal2());
    var _refType = _interopRequireDefault(require_refType2());
    var _capitalize = _interopRequireDefault(require_capitalize2());
    var _createChainedFunction = _interopRequireDefault(require_createChainedFunction2());
    var _debounce = _interopRequireDefault(require_debounce2());
    var _deprecatedPropType = _interopRequireDefault(require_deprecatedPropType2());
    var _isMuiElement = _interopRequireDefault(require_isMuiElement2());
    var _ownerDocument = _interopRequireDefault(require_ownerDocument2());
    var _ownerWindow = _interopRequireDefault(require_ownerWindow2());
    var _requirePropFactory = _interopRequireDefault(require_requirePropFactory2());
    var _setRef = _interopRequireDefault(require_setRef2());
    var _useEnhancedEffect = _interopRequireDefault(require_useEnhancedEffect2());
    var _useId = _interopRequireDefault(require_useId2());
    var _unsupportedProp = _interopRequireDefault(require_unsupportedProp2());
    var _useControlled = _interopRequireDefault(require_useControlled2());
    var _useEventCallback = _interopRequireDefault(require_useEventCallback2());
    var _useForkRef = _interopRequireDefault(require_useForkRef2());
    var _useLazyRef = _interopRequireDefault(require_useLazyRef2());
    var _useTimeout = _interopRequireWildcard(require_useTimeout2());
    var _useOnMount = _interopRequireDefault(require_useOnMount2());
    var _useIsFocusVisible = _interopRequireDefault(require_useIsFocusVisible2());
    var _isFocusVisible = _interopRequireDefault(require_isFocusVisible2());
    var _getScrollbarSize = _interopRequireDefault(require_getScrollbarSize2());
    var _usePreviousProps = _interopRequireDefault(require_usePreviousProps2());
    var _getValidReactChildren = _interopRequireDefault(require_getValidReactChildren2());
    var _visuallyHidden = _interopRequireDefault(require_visuallyHidden2());
    var _integerPropType = _interopRequireDefault(require_integerPropType2());
    var _resolveProps = _interopRequireDefault(require_resolveProps2());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _generateUtilityClass = _interopRequireWildcard(require_generateUtilityClass2());
    Object.keys(_generateUtilityClass).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _generateUtilityClass[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _generateUtilityClass[key];
        }
      });
    });
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _ClassNameGenerator = _interopRequireDefault(require_ClassNameGenerator2());
    var _clamp = _interopRequireDefault(require_clamp2());
    var _useSlotProps = _interopRequireDefault(require_useSlotProps2());
    var _resolveComponentProps = _interopRequireDefault(require_resolveComponentProps2());
    var _extractEventHandlers = _interopRequireDefault(require_extractEventHandlers2());
    var _getReactNodeRef = _interopRequireDefault(require_getReactNodeRef2());
    var _getReactElementRef = _interopRequireDefault(require_getReactElementRef2());
    var _types = require_types();
    Object.keys(_types).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _types[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _types[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node_modules/@mui/private-theming/node/useTheme/ThemeContext.js
var require_ThemeContext = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/private-theming/node/useTheme/ThemeContext.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var ThemeContext2 = /* @__PURE__ */ React7.createContext(null);
    if (define_process_env_default.NODE_ENV !== "production") {
      ThemeContext2.displayName = "ThemeContext";
    }
    var _default = exports2.default = ThemeContext2;
  }
});

// node_modules/@mui/material/node_modules/@mui/private-theming/node/useTheme/useTheme.js
var require_useTheme3 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/private-theming/node/useTheme/useTheme.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = useTheme3;
    var React7 = _interopRequireWildcard(require_react());
    var _ThemeContext = _interopRequireDefault(require_ThemeContext());
    function useTheme3() {
      const theme2 = React7.useContext(_ThemeContext.default);
      if (define_process_env_default.NODE_ENV !== "production") {
        React7.useDebugValue(theme2);
      }
      return theme2;
    }
  }
});

// node_modules/@mui/material/node_modules/@mui/private-theming/node/useTheme/index.js
var require_useTheme4 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/private-theming/node/useTheme/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _useTheme.default;
      }
    });
    var _useTheme = _interopRequireDefault(require_useTheme3());
  }
});

// node_modules/@mui/material/node_modules/@mui/private-theming/node/ThemeProvider/nested.js
var require_nested = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/private-theming/node/ThemeProvider/nested.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var hasSymbol = typeof Symbol === "function" && Symbol.for;
    var _default = exports2.default = hasSymbol ? Symbol.for("mui.nested") : "__THEME_NESTED__";
  }
});

// node_modules/@mui/material/node_modules/@mui/private-theming/node/ThemeProvider/ThemeProvider.js
var require_ThemeProvider = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/private-theming/node/ThemeProvider/ThemeProvider.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _utils = require_utils();
    var _ThemeContext = _interopRequireDefault(require_ThemeContext());
    var _useTheme = _interopRequireDefault(require_useTheme4());
    var _nested = _interopRequireDefault(require_nested());
    var _jsxRuntime = require_jsx_runtime();
    function mergeOuterLocalTheme(outerTheme, localTheme) {
      if (typeof localTheme === "function") {
        const mergedTheme = localTheme(outerTheme);
        if (define_process_env_default.NODE_ENV !== "production") {
          if (!mergedTheme) {
            console.error(["MUI: You should return an object from your theme function, i.e.", "<ThemeProvider theme={() => ({})} />"].join("\n"));
          }
        }
        return mergedTheme;
      }
      return {
        ...outerTheme,
        ...localTheme
      };
    }
    function ThemeProvider4(props) {
      const {
        children,
        theme: localTheme
      } = props;
      const outerTheme = (0, _useTheme.default)();
      if (define_process_env_default.NODE_ENV !== "production") {
        if (outerTheme === null && typeof localTheme === "function") {
          console.error(["MUI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join("\n"));
        }
      }
      const theme2 = React7.useMemo(() => {
        const output = outerTheme === null ? {
          ...localTheme
        } : mergeOuterLocalTheme(outerTheme, localTheme);
        if (output != null) {
          output[_nested.default] = outerTheme !== null;
        }
        return output;
      }, [localTheme, outerTheme]);
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_ThemeContext.default.Provider, {
        value: theme2,
        children
      });
    }
    define_process_env_default.NODE_ENV !== "production" ? ThemeProvider4.propTypes = {
      /**
       * Your component tree.
       */
      children: _propTypes.default.node,
      /**
       * A theme object. You can provide a function to extend the outer theme.
       */
      theme: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func]).isRequired
    } : void 0;
    if (define_process_env_default.NODE_ENV !== "production") {
      define_process_env_default.NODE_ENV !== "production" ? ThemeProvider4.propTypes = (0, _utils.exactProp)(ThemeProvider4.propTypes) : void 0;
    }
    var _default = exports2.default = ThemeProvider4;
  }
});

// node_modules/@mui/material/node_modules/@mui/private-theming/node/ThemeProvider/index.js
var require_ThemeProvider2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/private-theming/node/ThemeProvider/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _ThemeProvider.default;
      }
    });
    Object.defineProperty(exports2, "unstable_nested", {
      enumerable: true,
      get: function() {
        return _nested.default;
      }
    });
    var _ThemeProvider = _interopRequireDefault(require_ThemeProvider());
    var _nested = _interopRequireDefault(require_nested());
  }
});

// node_modules/@mui/material/node_modules/@mui/private-theming/node/index.js
var require_node2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/private-theming/node/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      ThemeProvider: true,
      useTheme: true
    };
    Object.defineProperty(exports2, "ThemeProvider", {
      enumerable: true,
      get: function() {
        return _ThemeProvider.default;
      }
    });
    Object.defineProperty(exports2, "useTheme", {
      enumerable: true,
      get: function() {
        return _useTheme.default;
      }
    });
    var _ThemeProvider = _interopRequireWildcard(require_ThemeProvider2());
    Object.keys(_ThemeProvider).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _ThemeProvider[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _ThemeProvider[key];
        }
      });
    });
    var _useTheme = _interopRequireDefault(require_useTheme4());
  }
});

// node_modules/@mui/material/node_modules/@mui/system/RtlProvider/index.js
var require_RtlProvider = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/RtlProvider/index.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.useRtl = exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _jsxRuntime = require_jsx_runtime();
    var RtlContext = /* @__PURE__ */ React7.createContext();
    function RtlProvider({
      value,
      ...props
    }) {
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(RtlContext.Provider, {
        value: value ?? true,
        ...props
      });
    }
    define_process_env_default.NODE_ENV !== "production" ? RtlProvider.propTypes = {
      children: _propTypes.default.node,
      value: _propTypes.default.bool
    } : void 0;
    var useRtl = () => {
      const value = React7.useContext(RtlContext);
      return value ?? false;
    };
    exports2.useRtl = useRtl;
    var _default = exports2.default = RtlProvider;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/DefaultPropsProvider/DefaultPropsProvider.js
var require_DefaultPropsProvider = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/DefaultPropsProvider/DefaultPropsProvider.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.useDefaultProps = useDefaultProps;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _resolveProps = _interopRequireDefault(require_resolveProps2());
    var _jsxRuntime = require_jsx_runtime();
    var PropsContext = /* @__PURE__ */ React7.createContext(void 0);
    function DefaultPropsProvider({
      value,
      children
    }) {
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(PropsContext.Provider, {
        value,
        children
      });
    }
    define_process_env_default.NODE_ENV !== "production" ? DefaultPropsProvider.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * @ignore
       */
      children: _propTypes.default.node,
      /**
       * @ignore
       */
      value: _propTypes.default.object
    } : void 0;
    function getThemeProps(params) {
      const {
        theme: theme2,
        name,
        props
      } = params;
      if (!theme2 || !theme2.components || !theme2.components[name]) {
        return props;
      }
      const config = theme2.components[name];
      if (config.defaultProps) {
        return (0, _resolveProps.default)(config.defaultProps, props);
      }
      if (!config.styleOverrides && !config.variants) {
        return (0, _resolveProps.default)(config, props);
      }
      return props;
    }
    function useDefaultProps({
      props,
      name
    }) {
      const ctx = React7.useContext(PropsContext);
      return getThemeProps({
        props,
        name,
        theme: {
          components: ctx
        }
      });
    }
    var _default = exports2.default = DefaultPropsProvider;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/DefaultPropsProvider/index.js
var require_DefaultPropsProvider2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/DefaultPropsProvider/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _DefaultPropsProvider.default;
      }
    });
    Object.defineProperty(exports2, "useDefaultProps", {
      enumerable: true,
      get: function() {
        return _DefaultPropsProvider.useDefaultProps;
      }
    });
    var _DefaultPropsProvider = _interopRequireWildcard(require_DefaultPropsProvider());
  }
});

// node_modules/@mui/material/node_modules/@mui/system/ThemeProvider/ThemeProvider.js
var require_ThemeProvider3 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/ThemeProvider/ThemeProvider.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _privateTheming = require_node2();
    var _exactProp = _interopRequireDefault(require_exactProp2());
    var _styledEngine = require_node();
    var _useThemeWithoutDefault = _interopRequireDefault(require_useThemeWithoutDefault2());
    var _RtlProvider = _interopRequireDefault(require_RtlProvider());
    var _DefaultPropsProvider = _interopRequireDefault(require_DefaultPropsProvider2());
    var _jsxRuntime = require_jsx_runtime();
    var EMPTY_THEME = {};
    function useThemeScoping(themeId, upperTheme, localTheme, isPrivate = false) {
      return React7.useMemo(() => {
        const resolvedTheme = themeId ? upperTheme[themeId] || upperTheme : upperTheme;
        if (typeof localTheme === "function") {
          const mergedTheme = localTheme(resolvedTheme);
          const result = themeId ? {
            ...upperTheme,
            [themeId]: mergedTheme
          } : mergedTheme;
          if (isPrivate) {
            return () => result;
          }
          return result;
        }
        return themeId ? {
          ...upperTheme,
          [themeId]: localTheme
        } : {
          ...upperTheme,
          ...localTheme
        };
      }, [themeId, upperTheme, localTheme, isPrivate]);
    }
    function ThemeProvider4(props) {
      const {
        children,
        theme: localTheme,
        themeId
      } = props;
      const upperTheme = (0, _useThemeWithoutDefault.default)(EMPTY_THEME);
      const upperPrivateTheme = (0, _privateTheming.useTheme)() || EMPTY_THEME;
      if (define_process_env_default.NODE_ENV !== "production") {
        if (upperTheme === null && typeof localTheme === "function" || themeId && upperTheme && !upperTheme[themeId] && typeof localTheme === "function") {
          console.error(["MUI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join("\n"));
        }
      }
      const engineTheme = useThemeScoping(themeId, upperTheme, localTheme);
      const privateTheme = useThemeScoping(themeId, upperPrivateTheme, localTheme, true);
      const rtlValue = (themeId ? engineTheme[themeId] : engineTheme).direction === "rtl";
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_privateTheming.ThemeProvider, {
        theme: privateTheme,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(_styledEngine.ThemeContext.Provider, {
          value: engineTheme,
          children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(_RtlProvider.default, {
            value: rtlValue,
            children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(_DefaultPropsProvider.default, {
              value: themeId ? engineTheme[themeId].components : engineTheme.components,
              children
            })
          })
        })
      });
    }
    define_process_env_default.NODE_ENV !== "production" ? ThemeProvider4.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * Your component tree.
       */
      children: _propTypes.default.node,
      /**
       * A theme object. You can provide a function to extend the outer theme.
       */
      theme: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]).isRequired,
      /**
       * The design system's unique id for getting the corresponded theme when there are multiple design systems.
       */
      themeId: _propTypes.default.string
    } : void 0;
    if (define_process_env_default.NODE_ENV !== "production") {
      define_process_env_default.NODE_ENV !== "production" ? ThemeProvider4.propTypes = (0, _exactProp.default)(ThemeProvider4.propTypes) : void 0;
    }
    var _default = exports2.default = ThemeProvider4;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/ThemeProvider/index.js
var require_ThemeProvider4 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/ThemeProvider/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _ThemeProvider.default;
      }
    });
    var _ThemeProvider = _interopRequireDefault(require_ThemeProvider3());
  }
});

// node_modules/@mui/material/node_modules/@mui/system/memoTheme.js
var require_memoTheme = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/memoTheme.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = unstable_memoTheme;
    var _preprocessStyles = _interopRequireDefault(require_preprocessStyles());
    var arg = {
      theme: void 0
    };
    function unstable_memoTheme(styleFn) {
      let lastValue;
      let lastTheme;
      return function styleMemoized(props) {
        let value = lastValue;
        if (value === void 0 || props.theme !== lastTheme) {
          arg.theme = props.theme;
          value = (0, _preprocessStyles.default)(styleFn(arg));
          lastValue = value;
          lastTheme = props.theme;
        }
        return value;
      };
    }
  }
});

// node_modules/@mui/material/node_modules/@mui/system/InitColorSchemeScript/InitColorSchemeScript.js
var require_InitColorSchemeScript = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/InitColorSchemeScript/InitColorSchemeScript.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.DEFAULT_MODE_STORAGE_KEY = exports2.DEFAULT_COLOR_SCHEME_STORAGE_KEY = exports2.DEFAULT_ATTRIBUTE = void 0;
    exports2.default = InitColorSchemeScript;
    var React7 = _interopRequireWildcard(require_react());
    var _jsxRuntime = require_jsx_runtime();
    var DEFAULT_MODE_STORAGE_KEY = exports2.DEFAULT_MODE_STORAGE_KEY = "mode";
    var DEFAULT_COLOR_SCHEME_STORAGE_KEY = exports2.DEFAULT_COLOR_SCHEME_STORAGE_KEY = "color-scheme";
    var DEFAULT_ATTRIBUTE = exports2.DEFAULT_ATTRIBUTE = "data-color-scheme";
    function InitColorSchemeScript(options) {
      const {
        defaultMode = "system",
        defaultLightColorScheme = "light",
        defaultDarkColorScheme = "dark",
        modeStorageKey = DEFAULT_MODE_STORAGE_KEY,
        colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,
        attribute: initialAttribute = DEFAULT_ATTRIBUTE,
        colorSchemeNode = "document.documentElement",
        nonce
      } = options || {};
      let setter = "";
      let attribute = initialAttribute;
      if (initialAttribute === "class") {
        attribute = ".%s";
      }
      if (initialAttribute === "data") {
        attribute = "[data-%s]";
      }
      if (attribute.startsWith(".")) {
        const selector = attribute.substring(1);
        setter += `${colorSchemeNode}.classList.remove('${selector}'.replace('%s', light), '${selector}'.replace('%s', dark));
      ${colorSchemeNode}.classList.add('${selector}'.replace('%s', colorScheme));`;
      }
      const matches = attribute.match(/\[([^\]]+)\]/);
      if (matches) {
        const [attr, value] = matches[1].split("=");
        if (!value) {
          setter += `${colorSchemeNode}.removeAttribute('${attr}'.replace('%s', light));
      ${colorSchemeNode}.removeAttribute('${attr}'.replace('%s', dark));`;
        }
        setter += `
      ${colorSchemeNode}.setAttribute('${attr}'.replace('%s', colorScheme), ${value ? `${value}.replace('%s', colorScheme)` : '""'});`;
      } else {
        setter += `${colorSchemeNode}.setAttribute('${attribute}', colorScheme);`;
      }
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)("script", {
        suppressHydrationWarning: true,
        nonce: typeof window === "undefined" ? nonce : "",
        dangerouslySetInnerHTML: {
          __html: `(function() {
try {
  let colorScheme = '';
  const mode = localStorage.getItem('${modeStorageKey}') || '${defaultMode}';
  const dark = localStorage.getItem('${colorSchemeStorageKey}-dark') || '${defaultDarkColorScheme}';
  const light = localStorage.getItem('${colorSchemeStorageKey}-light') || '${defaultLightColorScheme}';
  if (mode === 'system') {
    // handle system mode
    const mql = window.matchMedia('(prefers-color-scheme: dark)');
    if (mql.matches) {
      colorScheme = dark
    } else {
      colorScheme = light
    }
  }
  if (mode === 'light') {
    colorScheme = light;
  }
  if (mode === 'dark') {
    colorScheme = dark;
  }
  if (colorScheme) {
    ${setter}
  }
} catch(e){}})();`
        }
      }, "mui-color-scheme-init");
    }
  }
});

// node_modules/@mui/material/node_modules/@mui/system/cssVars/localStorageManager.js
var require_localStorageManager = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/cssVars/localStorageManager.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    function noop() {
    }
    var localStorageManager = ({
      key,
      storageWindow
    }) => {
      if (!storageWindow && typeof window !== "undefined") {
        storageWindow = window;
      }
      return {
        get(defaultValue) {
          if (typeof window === "undefined") {
            return void 0;
          }
          if (!storageWindow) {
            return defaultValue;
          }
          let value;
          try {
            value = storageWindow.localStorage.getItem(key);
          } catch {
          }
          return value || defaultValue;
        },
        set: (value) => {
          if (storageWindow) {
            try {
              storageWindow.localStorage.setItem(key, value);
            } catch {
            }
          }
        },
        subscribe: (handler) => {
          if (!storageWindow) {
            return noop;
          }
          const listener = (event) => {
            const value = event.newValue;
            if (event.key === key) {
              handler(value);
            }
          };
          storageWindow.addEventListener("storage", listener);
          return () => {
            storageWindow.removeEventListener("storage", listener);
          };
        }
      };
    };
    var _default = exports2.default = localStorageManager;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/cssVars/useCurrentColorScheme.js
var require_useCurrentColorScheme = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/cssVars/useCurrentColorScheme.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = useCurrentColorScheme;
    exports2.getColorScheme = getColorScheme;
    exports2.getSystemMode = getSystemMode;
    var React7 = _interopRequireWildcard(require_react());
    var _InitColorSchemeScript = require_InitColorSchemeScript();
    var _localStorageManager = _interopRequireDefault(require_localStorageManager());
    function noop() {
    }
    function getSystemMode(mode) {
      if (typeof window !== "undefined" && typeof window.matchMedia === "function" && mode === "system") {
        const mql = window.matchMedia("(prefers-color-scheme: dark)");
        if (mql.matches) {
          return "dark";
        }
        return "light";
      }
      return void 0;
    }
    function processState(state, callback) {
      if (state.mode === "light" || state.mode === "system" && state.systemMode === "light") {
        return callback("light");
      }
      if (state.mode === "dark" || state.mode === "system" && state.systemMode === "dark") {
        return callback("dark");
      }
      return void 0;
    }
    function getColorScheme(state) {
      return processState(state, (mode) => {
        if (mode === "light") {
          return state.lightColorScheme;
        }
        if (mode === "dark") {
          return state.darkColorScheme;
        }
        return void 0;
      });
    }
    function useCurrentColorScheme(options) {
      const {
        defaultMode = "light",
        defaultLightColorScheme,
        defaultDarkColorScheme,
        supportedColorSchemes = [],
        modeStorageKey = _InitColorSchemeScript.DEFAULT_MODE_STORAGE_KEY,
        colorSchemeStorageKey = _InitColorSchemeScript.DEFAULT_COLOR_SCHEME_STORAGE_KEY,
        storageWindow = typeof window === "undefined" ? void 0 : window,
        storageManager = _localStorageManager.default,
        noSsr = false
      } = options;
      const joinedColorSchemes = supportedColorSchemes.join(",");
      const isMultiSchemes = supportedColorSchemes.length > 1;
      const modeStorage = React7.useMemo(() => storageManager?.({
        key: modeStorageKey,
        storageWindow
      }), [storageManager, modeStorageKey, storageWindow]);
      const lightStorage = React7.useMemo(() => storageManager?.({
        key: `${colorSchemeStorageKey}-light`,
        storageWindow
      }), [storageManager, colorSchemeStorageKey, storageWindow]);
      const darkStorage = React7.useMemo(() => storageManager?.({
        key: `${colorSchemeStorageKey}-dark`,
        storageWindow
      }), [storageManager, colorSchemeStorageKey, storageWindow]);
      const [state, setState] = React7.useState(() => {
        const initialMode = modeStorage?.get(defaultMode) || defaultMode;
        const lightColorScheme = lightStorage?.get(defaultLightColorScheme) || defaultLightColorScheme;
        const darkColorScheme = darkStorage?.get(defaultDarkColorScheme) || defaultDarkColorScheme;
        return {
          mode: initialMode,
          systemMode: getSystemMode(initialMode),
          lightColorScheme,
          darkColorScheme
        };
      });
      const [isClient, setIsClient] = React7.useState(noSsr || !isMultiSchemes);
      React7.useEffect(() => {
        setIsClient(true);
      }, []);
      const colorScheme = getColorScheme(state);
      const setMode = React7.useCallback((mode) => {
        setState((currentState) => {
          if (mode === currentState.mode) {
            return currentState;
          }
          const newMode = mode ?? defaultMode;
          modeStorage?.set(newMode);
          return {
            ...currentState,
            mode: newMode,
            systemMode: getSystemMode(newMode)
          };
        });
      }, [modeStorage, defaultMode]);
      const setColorScheme = React7.useCallback((value) => {
        if (!value) {
          setState((currentState) => {
            lightStorage?.set(defaultLightColorScheme);
            darkStorage?.set(defaultDarkColorScheme);
            return {
              ...currentState,
              lightColorScheme: defaultLightColorScheme,
              darkColorScheme: defaultDarkColorScheme
            };
          });
        } else if (typeof value === "string") {
          if (value && !joinedColorSchemes.includes(value)) {
            console.error(`\`${value}\` does not exist in \`theme.colorSchemes\`.`);
          } else {
            setState((currentState) => {
              const newState = {
                ...currentState
              };
              processState(currentState, (mode) => {
                if (mode === "light") {
                  lightStorage?.set(value);
                  newState.lightColorScheme = value;
                }
                if (mode === "dark") {
                  darkStorage?.set(value);
                  newState.darkColorScheme = value;
                }
              });
              return newState;
            });
          }
        } else {
          setState((currentState) => {
            const newState = {
              ...currentState
            };
            const newLightColorScheme = value.light === null ? defaultLightColorScheme : value.light;
            const newDarkColorScheme = value.dark === null ? defaultDarkColorScheme : value.dark;
            if (newLightColorScheme) {
              if (!joinedColorSchemes.includes(newLightColorScheme)) {
                console.error(`\`${newLightColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
              } else {
                newState.lightColorScheme = newLightColorScheme;
                lightStorage?.set(newLightColorScheme);
              }
            }
            if (newDarkColorScheme) {
              if (!joinedColorSchemes.includes(newDarkColorScheme)) {
                console.error(`\`${newDarkColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
              } else {
                newState.darkColorScheme = newDarkColorScheme;
                darkStorage?.set(newDarkColorScheme);
              }
            }
            return newState;
          });
        }
      }, [joinedColorSchemes, lightStorage, darkStorage, defaultLightColorScheme, defaultDarkColorScheme]);
      const handleMediaQuery = React7.useCallback((event) => {
        if (state.mode === "system") {
          setState((currentState) => {
            const systemMode = event?.matches ? "dark" : "light";
            if (currentState.systemMode === systemMode) {
              return currentState;
            }
            return {
              ...currentState,
              systemMode
            };
          });
        }
      }, [state.mode]);
      const mediaListener = React7.useRef(handleMediaQuery);
      mediaListener.current = handleMediaQuery;
      React7.useEffect(() => {
        if (typeof window.matchMedia !== "function" || !isMultiSchemes) {
          return void 0;
        }
        const handler = (...args) => mediaListener.current(...args);
        const media = window.matchMedia("(prefers-color-scheme: dark)");
        media.addListener(handler);
        handler(media);
        return () => {
          media.removeListener(handler);
        };
      }, [isMultiSchemes]);
      React7.useEffect(() => {
        if (isMultiSchemes) {
          const unsubscribeMode = modeStorage?.subscribe((value) => {
            if (!value || ["light", "dark", "system"].includes(value)) {
              setMode(value || defaultMode);
            }
          }) || noop;
          const unsubscribeLight = lightStorage?.subscribe((value) => {
            if (!value || joinedColorSchemes.match(value)) {
              setColorScheme({
                light: value
              });
            }
          }) || noop;
          const unsubscribeDark = darkStorage?.subscribe((value) => {
            if (!value || joinedColorSchemes.match(value)) {
              setColorScheme({
                dark: value
              });
            }
          }) || noop;
          return () => {
            unsubscribeMode();
            unsubscribeLight();
            unsubscribeDark();
          };
        }
        return void 0;
      }, [setColorScheme, setMode, joinedColorSchemes, defaultMode, storageWindow, isMultiSchemes, modeStorage, lightStorage, darkStorage]);
      return {
        ...state,
        mode: isClient ? state.mode : void 0,
        systemMode: isClient ? state.systemMode : void 0,
        colorScheme: isClient ? colorScheme : void 0,
        setMode,
        setColorScheme
      };
    }
  }
});

// node_modules/@mui/material/node_modules/@mui/system/cssVars/createCssVarsProvider.js
var require_createCssVarsProvider = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/cssVars/createCssVarsProvider.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.DISABLE_CSS_TRANSITION = void 0;
    exports2.default = createCssVarsProvider;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _styledEngine = require_node();
    var _privateTheming = require_node2();
    var _useEnhancedEffect = _interopRequireDefault(require_useEnhancedEffect2());
    var _ThemeProvider = _interopRequireDefault(require_ThemeProvider4());
    var _InitColorSchemeScript = _interopRequireWildcard(require_InitColorSchemeScript());
    var _useCurrentColorScheme = _interopRequireDefault(require_useCurrentColorScheme());
    var _jsxRuntime = require_jsx_runtime();
    var DISABLE_CSS_TRANSITION = exports2.DISABLE_CSS_TRANSITION = "*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}";
    function createCssVarsProvider(options) {
      const {
        themeId,
        /**
         * This `theme` object needs to follow a certain structure to
         * be used correctly by the finel `CssVarsProvider`. It should have a
         * `colorSchemes` key with the light and dark (and any other) palette.
         * It should also ideally have a vars object created using `prepareCssVars`.
         */
        theme: defaultTheme = {},
        modeStorageKey: defaultModeStorageKey = _InitColorSchemeScript.DEFAULT_MODE_STORAGE_KEY,
        colorSchemeStorageKey: defaultColorSchemeStorageKey = _InitColorSchemeScript.DEFAULT_COLOR_SCHEME_STORAGE_KEY,
        disableTransitionOnChange: designSystemTransitionOnChange = false,
        defaultColorScheme,
        resolveTheme
      } = options;
      const defaultContext = {
        allColorSchemes: [],
        colorScheme: void 0,
        darkColorScheme: void 0,
        lightColorScheme: void 0,
        mode: void 0,
        setColorScheme: () => {
        },
        setMode: () => {
        },
        systemMode: void 0
      };
      const ColorSchemeContext = /* @__PURE__ */ React7.createContext(void 0);
      if (define_process_env_default.NODE_ENV !== "production") {
        ColorSchemeContext.displayName = "ColorSchemeContext";
      }
      const useColorScheme = () => React7.useContext(ColorSchemeContext) || defaultContext;
      const defaultColorSchemes = {};
      const defaultComponents = {};
      function CssVarsProvider(props) {
        const {
          children,
          theme: themeProp,
          modeStorageKey = defaultModeStorageKey,
          colorSchemeStorageKey = defaultColorSchemeStorageKey,
          disableTransitionOnChange = designSystemTransitionOnChange,
          storageManager,
          storageWindow = typeof window === "undefined" ? void 0 : window,
          documentNode = typeof document === "undefined" ? void 0 : document,
          colorSchemeNode = typeof document === "undefined" ? void 0 : document.documentElement,
          disableNestedContext = false,
          disableStyleSheetGeneration = false,
          defaultMode: initialMode = "system",
          noSsr
        } = props;
        const hasMounted = React7.useRef(false);
        const upperTheme = (0, _privateTheming.useTheme)();
        const ctx = React7.useContext(ColorSchemeContext);
        const nested = !!ctx && !disableNestedContext;
        const initialTheme = React7.useMemo(() => {
          if (themeProp) {
            return themeProp;
          }
          return typeof defaultTheme === "function" ? defaultTheme() : defaultTheme;
        }, [themeProp]);
        const scopedTheme = initialTheme[themeId];
        const restThemeProp = scopedTheme || initialTheme;
        const {
          colorSchemes = defaultColorSchemes,
          components = defaultComponents,
          cssVarPrefix
        } = restThemeProp;
        const joinedColorSchemes = Object.keys(colorSchemes).filter((k) => !!colorSchemes[k]).join(",");
        const allColorSchemes = React7.useMemo(() => joinedColorSchemes.split(","), [joinedColorSchemes]);
        const defaultLightColorScheme2 = typeof defaultColorScheme === "string" ? defaultColorScheme : defaultColorScheme.light;
        const defaultDarkColorScheme2 = typeof defaultColorScheme === "string" ? defaultColorScheme : defaultColorScheme.dark;
        const defaultMode = colorSchemes[defaultLightColorScheme2] && colorSchemes[defaultDarkColorScheme2] ? initialMode : colorSchemes[restThemeProp.defaultColorScheme]?.palette?.mode || restThemeProp.palette?.mode;
        const {
          mode: stateMode,
          setMode,
          systemMode,
          lightColorScheme,
          darkColorScheme,
          colorScheme: stateColorScheme,
          setColorScheme
        } = (0, _useCurrentColorScheme.default)({
          supportedColorSchemes: allColorSchemes,
          defaultLightColorScheme: defaultLightColorScheme2,
          defaultDarkColorScheme: defaultDarkColorScheme2,
          modeStorageKey,
          colorSchemeStorageKey,
          defaultMode,
          storageManager,
          storageWindow,
          noSsr
        });
        let mode = stateMode;
        let colorScheme = stateColorScheme;
        if (nested) {
          mode = ctx.mode;
          colorScheme = ctx.colorScheme;
        }
        const memoTheme = React7.useMemo(() => {
          const calculatedColorScheme = colorScheme || restThemeProp.defaultColorScheme;
          const themeVars = restThemeProp.generateThemeVars?.() || restThemeProp.vars;
          const theme2 = {
            ...restThemeProp,
            components,
            colorSchemes,
            cssVarPrefix,
            vars: themeVars
          };
          if (typeof theme2.generateSpacing === "function") {
            theme2.spacing = theme2.generateSpacing();
          }
          if (calculatedColorScheme) {
            const scheme = colorSchemes[calculatedColorScheme];
            if (scheme && typeof scheme === "object") {
              Object.keys(scheme).forEach((schemeKey) => {
                if (scheme[schemeKey] && typeof scheme[schemeKey] === "object") {
                  theme2[schemeKey] = {
                    ...theme2[schemeKey],
                    ...scheme[schemeKey]
                  };
                } else {
                  theme2[schemeKey] = scheme[schemeKey];
                }
              });
            }
          }
          return resolveTheme ? resolveTheme(theme2) : theme2;
        }, [restThemeProp, colorScheme, components, colorSchemes, cssVarPrefix]);
        const colorSchemeSelector = restThemeProp.colorSchemeSelector;
        (0, _useEnhancedEffect.default)(() => {
          if (colorScheme && colorSchemeNode && colorSchemeSelector && colorSchemeSelector !== "media") {
            const selector = colorSchemeSelector;
            let rule = colorSchemeSelector;
            if (selector === "class") {
              rule = `.%s`;
            }
            if (selector === "data") {
              rule = `[data-%s]`;
            }
            if (selector?.startsWith("data-") && !selector.includes("%s")) {
              rule = `[${selector}="%s"]`;
            }
            if (rule.startsWith(".")) {
              colorSchemeNode.classList.remove(...allColorSchemes.map((scheme) => rule.substring(1).replace("%s", scheme)));
              colorSchemeNode.classList.add(rule.substring(1).replace("%s", colorScheme));
            } else {
              const matches = rule.replace("%s", colorScheme).match(/\[([^\]]+)\]/);
              if (matches) {
                const [attr, value] = matches[1].split("=");
                if (!value) {
                  allColorSchemes.forEach((scheme) => {
                    colorSchemeNode.removeAttribute(attr.replace(colorScheme, scheme));
                  });
                }
                colorSchemeNode.setAttribute(attr, value ? value.replace(/"|'/g, "") : "");
              } else {
                colorSchemeNode.setAttribute(rule, colorScheme);
              }
            }
          }
        }, [colorScheme, colorSchemeSelector, colorSchemeNode, allColorSchemes]);
        React7.useEffect(() => {
          let timer;
          if (disableTransitionOnChange && hasMounted.current && documentNode) {
            const css2 = documentNode.createElement("style");
            css2.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));
            documentNode.head.appendChild(css2);
            (() => window.getComputedStyle(documentNode.body))();
            timer = setTimeout(() => {
              documentNode.head.removeChild(css2);
            }, 1);
          }
          return () => {
            clearTimeout(timer);
          };
        }, [colorScheme, disableTransitionOnChange, documentNode]);
        React7.useEffect(() => {
          hasMounted.current = true;
          return () => {
            hasMounted.current = false;
          };
        }, []);
        const contextValue = React7.useMemo(() => ({
          allColorSchemes,
          colorScheme,
          darkColorScheme,
          lightColorScheme,
          mode,
          setColorScheme,
          setMode: define_process_env_default.NODE_ENV === "production" ? setMode : (newMode) => {
            if (memoTheme.colorSchemeSelector === "media") {
              console.error(["MUI: The `setMode` function has no effect if `colorSchemeSelector` is `media` (`media` is the default value).", "To toggle the mode manually, please configure `colorSchemeSelector` to use a class or data attribute.", "To learn more, visit https://mui.com/material-ui/customization/css-theme-variables/configuration/#toggling-dark-mode-manually"].join("\n"));
            }
            setMode(newMode);
          },
          systemMode
        }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode, memoTheme.colorSchemeSelector]);
        let shouldGenerateStyleSheet = true;
        if (disableStyleSheetGeneration || restThemeProp.cssVariables === false || nested && upperTheme?.cssVarPrefix === cssVarPrefix) {
          shouldGenerateStyleSheet = false;
        }
        const element = /* @__PURE__ */ (0, _jsxRuntime.jsxs)(React7.Fragment, {
          children: [/* @__PURE__ */ (0, _jsxRuntime.jsx)(_ThemeProvider.default, {
            themeId: scopedTheme ? themeId : void 0,
            theme: memoTheme,
            children
          }), shouldGenerateStyleSheet && /* @__PURE__ */ (0, _jsxRuntime.jsx)(_styledEngine.GlobalStyles, {
            styles: memoTheme.generateStyleSheets?.() || []
          })]
        });
        if (nested) {
          return element;
        }
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(ColorSchemeContext.Provider, {
          value: contextValue,
          children: element
        });
      }
      define_process_env_default.NODE_ENV !== "production" ? CssVarsProvider.propTypes = {
        /**
         * The component tree.
         */
        children: _propTypes.default.node,
        /**
         * The node used to attach the color-scheme attribute
         */
        colorSchemeNode: _propTypes.default.any,
        /**
         * localStorage key used to store `colorScheme`
         */
        colorSchemeStorageKey: _propTypes.default.string,
        /**
         * The default mode when the storage is empty,
         * require the theme to have `colorSchemes` with light and dark.
         */
        defaultMode: _propTypes.default.string,
        /**
         * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.
         */
        disableNestedContext: _propTypes.default.bool,
        /**
         * If `true`, the style sheet won't be generated.
         *
         * This is useful for controlling nested CssVarsProvider behavior.
         */
        disableStyleSheetGeneration: _propTypes.default.bool,
        /**
         * Disable CSS transitions when switching between modes or color schemes.
         */
        disableTransitionOnChange: _propTypes.default.bool,
        /**
         * The document to attach the attribute to.
         */
        documentNode: _propTypes.default.any,
        /**
         * The key in the local storage used to store current color scheme.
         */
        modeStorageKey: _propTypes.default.string,
        /**
         * If `true`, the mode will be the same value as the storage without an extra rerendering after the hydration.
         * You should use this option in conjuction with `InitColorSchemeScript` component.
         */
        noSsr: _propTypes.default.bool,
        /**
         * The storage manager to be used for storing the mode and color scheme
         * @default using `window.localStorage`
         */
        storageManager: _propTypes.default.func,
        /**
         * The window that attaches the 'storage' event listener.
         * @default window
         */
        storageWindow: _propTypes.default.any,
        /**
         * The calculated theme object that will be passed through context.
         */
        theme: _propTypes.default.object
      } : void 0;
      const defaultLightColorScheme = typeof defaultColorScheme === "string" ? defaultColorScheme : defaultColorScheme.light;
      const defaultDarkColorScheme = typeof defaultColorScheme === "string" ? defaultColorScheme : defaultColorScheme.dark;
      const getInitColorSchemeScript = (params) => (0, _InitColorSchemeScript.default)({
        colorSchemeStorageKey: defaultColorSchemeStorageKey,
        defaultLightColorScheme,
        defaultDarkColorScheme,
        modeStorageKey: defaultModeStorageKey,
        ...params
      });
      return {
        CssVarsProvider,
        useColorScheme,
        getInitColorSchemeScript
      };
    }
  }
});

// node_modules/@mui/material/node_modules/@mui/system/cssVars/createGetCssVar.js
var require_createGetCssVar = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/cssVars/createGetCssVar.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = createGetCssVar;
    function createGetCssVar(prefix2 = "") {
      function appendVar(...vars) {
        if (!vars.length) {
          return "";
        }
        const value = vars[0];
        if (typeof value === "string" && !value.match(/(#|\(|\)|(-?(\d*\.)?\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\d*\.)?\d+)$|(\d+ \d+ \d+)/)) {
          return `, var(--${prefix2 ? `${prefix2}-` : ""}${value}${appendVar(...vars.slice(1))})`;
        }
        return `, ${value}`;
      }
      const getCssVar = (field, ...fallbacks) => {
        return `var(--${prefix2 ? `${prefix2}-` : ""}${field}${appendVar(...fallbacks)})`;
      };
      return getCssVar;
    }
  }
});

// node_modules/@mui/material/node_modules/@mui/system/cssVars/cssVarsParser.js
var require_cssVarsParser = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/cssVars/cssVarsParser.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.assignNestedKeys = void 0;
    exports2.default = cssVarsParser;
    exports2.walkObjectDeep = void 0;
    var assignNestedKeys = (obj, keys, value, arrayKeys = []) => {
      let temp = obj;
      keys.forEach((k, index) => {
        if (index === keys.length - 1) {
          if (Array.isArray(temp)) {
            temp[Number(k)] = value;
          } else if (temp && typeof temp === "object") {
            temp[k] = value;
          }
        } else if (temp && typeof temp === "object") {
          if (!temp[k]) {
            temp[k] = arrayKeys.includes(k) ? [] : {};
          }
          temp = temp[k];
        }
      });
    };
    exports2.assignNestedKeys = assignNestedKeys;
    var walkObjectDeep = (obj, callback, shouldSkipPaths) => {
      function recurse(object, parentKeys = [], arrayKeys = []) {
        Object.entries(object).forEach(([key, value]) => {
          if (!shouldSkipPaths || shouldSkipPaths && !shouldSkipPaths([...parentKeys, key])) {
            if (value !== void 0 && value !== null) {
              if (typeof value === "object" && Object.keys(value).length > 0) {
                recurse(value, [...parentKeys, key], Array.isArray(value) ? [...arrayKeys, key] : arrayKeys);
              } else {
                callback([...parentKeys, key], value, arrayKeys);
              }
            }
          }
        });
      }
      recurse(obj);
    };
    exports2.walkObjectDeep = walkObjectDeep;
    var getCssValue = (keys, value) => {
      if (typeof value === "number") {
        if (["lineHeight", "fontWeight", "opacity", "zIndex"].some((prop) => keys.includes(prop))) {
          return value;
        }
        const lastKey = keys[keys.length - 1];
        if (lastKey.toLowerCase().includes("opacity")) {
          return value;
        }
        return `${value}px`;
      }
      return value;
    };
    function cssVarsParser(theme2, options) {
      const {
        prefix: prefix2,
        shouldSkipGeneratingVar
      } = options || {};
      const css2 = {};
      const vars = {};
      const varsWithDefaults = {};
      walkObjectDeep(
        theme2,
        (keys, value, arrayKeys) => {
          if (typeof value === "string" || typeof value === "number") {
            if (!shouldSkipGeneratingVar || !shouldSkipGeneratingVar(keys, value)) {
              const cssVar = `--${prefix2 ? `${prefix2}-` : ""}${keys.join("-")}`;
              const resolvedValue = getCssValue(keys, value);
              Object.assign(css2, {
                [cssVar]: resolvedValue
              });
              assignNestedKeys(vars, keys, `var(${cssVar})`, arrayKeys);
              assignNestedKeys(varsWithDefaults, keys, `var(${cssVar}, ${resolvedValue})`, arrayKeys);
            }
          }
        },
        (keys) => keys[0] === "vars"
        // skip 'vars/*' paths
      );
      return {
        css: css2,
        vars,
        varsWithDefaults
      };
    }
  }
});

// node_modules/@mui/material/node_modules/@mui/system/cssVars/prepareCssVars.js
var require_prepareCssVars = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/cssVars/prepareCssVars.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _deepmerge = _interopRequireDefault(require_deepmerge2());
    var _cssVarsParser = _interopRequireDefault(require_cssVarsParser());
    function prepareCssVars(theme2, parserConfig = {}) {
      const {
        getSelector = defaultGetSelector,
        disableCssColorScheme,
        colorSchemeSelector: selector
      } = parserConfig;
      const {
        colorSchemes = {},
        components,
        defaultColorScheme = "light",
        ...otherTheme
      } = theme2;
      const {
        vars: rootVars,
        css: rootCss,
        varsWithDefaults: rootVarsWithDefaults
      } = (0, _cssVarsParser.default)(otherTheme, parserConfig);
      let themeVars = rootVarsWithDefaults;
      const colorSchemesMap = {};
      const {
        [defaultColorScheme]: defaultScheme,
        ...otherColorSchemes
      } = colorSchemes;
      Object.entries(otherColorSchemes || {}).forEach(([key, scheme]) => {
        const {
          vars,
          css: css2,
          varsWithDefaults
        } = (0, _cssVarsParser.default)(scheme, parserConfig);
        themeVars = (0, _deepmerge.default)(themeVars, varsWithDefaults);
        colorSchemesMap[key] = {
          css: css2,
          vars
        };
      });
      if (defaultScheme) {
        const {
          css: css2,
          vars,
          varsWithDefaults
        } = (0, _cssVarsParser.default)(defaultScheme, parserConfig);
        themeVars = (0, _deepmerge.default)(themeVars, varsWithDefaults);
        colorSchemesMap[defaultColorScheme] = {
          css: css2,
          vars
        };
      }
      function defaultGetSelector(colorScheme, cssObject) {
        let rule = selector;
        if (selector === "class") {
          rule = ".%s";
        }
        if (selector === "data") {
          rule = "[data-%s]";
        }
        if (selector?.startsWith("data-") && !selector.includes("%s")) {
          rule = `[${selector}="%s"]`;
        }
        if (colorScheme) {
          if (rule === "media") {
            if (theme2.defaultColorScheme === colorScheme) {
              return ":root";
            }
            const mode = colorSchemes[colorScheme]?.palette?.mode || colorScheme;
            return {
              [`@media (prefers-color-scheme: ${mode})`]: {
                ":root": cssObject
              }
            };
          }
          if (rule) {
            if (theme2.defaultColorScheme === colorScheme) {
              return `:root, ${rule.replace("%s", String(colorScheme))}`;
            }
            return rule.replace("%s", String(colorScheme));
          }
        }
        return ":root";
      }
      const generateThemeVars = () => {
        let vars = {
          ...rootVars
        };
        Object.entries(colorSchemesMap).forEach(([, {
          vars: schemeVars
        }]) => {
          vars = (0, _deepmerge.default)(vars, schemeVars);
        });
        return vars;
      };
      const generateStyleSheets = () => {
        const stylesheets = [];
        const colorScheme = theme2.defaultColorScheme || "light";
        function insertStyleSheet(key, css2) {
          if (Object.keys(css2).length) {
            stylesheets.push(typeof key === "string" ? {
              [key]: {
                ...css2
              }
            } : key);
          }
        }
        insertStyleSheet(getSelector(void 0, {
          ...rootCss
        }), rootCss);
        const {
          [colorScheme]: defaultSchemeVal,
          ...other
        } = colorSchemesMap;
        if (defaultSchemeVal) {
          const {
            css: css2
          } = defaultSchemeVal;
          const cssColorSheme = colorSchemes[colorScheme]?.palette?.mode;
          const finalCss = !disableCssColorScheme && cssColorSheme ? {
            colorScheme: cssColorSheme,
            ...css2
          } : {
            ...css2
          };
          insertStyleSheet(getSelector(colorScheme, {
            ...finalCss
          }), finalCss);
        }
        Object.entries(other).forEach(([key, {
          css: css2
        }]) => {
          const cssColorSheme = colorSchemes[key]?.palette?.mode;
          const finalCss = !disableCssColorScheme && cssColorSheme ? {
            colorScheme: cssColorSheme,
            ...css2
          } : {
            ...css2
          };
          insertStyleSheet(getSelector(key, {
            ...finalCss
          }), finalCss);
        });
        return stylesheets;
      };
      return {
        vars: themeVars,
        generateThemeVars,
        generateStyleSheets
      };
    }
    var _default = exports2.default = prepareCssVars;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/cssVars/getColorSchemeSelector.js
var require_getColorSchemeSelector = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/cssVars/getColorSchemeSelector.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.createGetColorSchemeSelector = createGetColorSchemeSelector;
    function createGetColorSchemeSelector(selector) {
      return function getColorSchemeSelector(colorScheme) {
        if (selector === "media") {
          if (define_process_env_default.NODE_ENV !== "production") {
            if (colorScheme !== "light" && colorScheme !== "dark") {
              console.error(`MUI: @media (prefers-color-scheme) supports only 'light' or 'dark', but receive '${colorScheme}'.`);
            }
          }
          return `@media (prefers-color-scheme: ${colorScheme})`;
        }
        if (selector) {
          if (selector.startsWith("data-") && !selector.includes("%s")) {
            return `[${selector}="${colorScheme}"] &`;
          }
          if (selector === "class") {
            return `.${colorScheme} &`;
          }
          if (selector === "data") {
            return `[data-${colorScheme}] &`;
          }
          return `${selector.replace("%s", colorScheme)} &`;
        }
        return "&";
      };
    }
  }
});

// node_modules/@mui/material/node_modules/@mui/system/cssVars/createCssVarsTheme.js
var require_createCssVarsTheme = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/cssVars/createCssVarsTheme.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _prepareCssVars = _interopRequireDefault(require_prepareCssVars());
    var _getColorSchemeSelector = require_getColorSchemeSelector();
    var _InitColorSchemeScript = require_InitColorSchemeScript();
    function createCssVarsTheme({
      colorSchemeSelector = `[${_InitColorSchemeScript.DEFAULT_ATTRIBUTE}="%s"]`,
      ...theme2
    }) {
      const output = theme2;
      const result = (0, _prepareCssVars.default)(output, {
        ...theme2,
        prefix: theme2.cssVarPrefix,
        colorSchemeSelector
      });
      output.vars = result.vars;
      output.generateThemeVars = result.generateThemeVars;
      output.generateStyleSheets = result.generateStyleSheets;
      output.colorSchemeSelector = colorSchemeSelector;
      output.getColorSchemeSelector = (0, _getColorSchemeSelector.createGetColorSchemeSelector)(colorSchemeSelector);
      return output;
    }
    var _default = exports2.default = createCssVarsTheme;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/version/index.js
var require_version = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/version/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.version = exports2.prerelease = exports2.patch = exports2.minor = exports2.major = exports2.default = void 0;
    var version = exports2.version = "6.4.11";
    var major = exports2.major = Number("6");
    var minor = exports2.minor = Number("4");
    var patch = exports2.patch = Number("11");
    var prerelease = exports2.prerelease = void 0;
    var _default = exports2.default = version;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/Container/createContainer.js
var require_createContainer = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/Container/createContainer.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = createContainer;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _clsx = _interopRequireDefault(require_clsx());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _capitalize = _interopRequireDefault(require_capitalize2());
    var _useThemeProps = _interopRequireDefault(require_useThemeProps2());
    var _styled = _interopRequireDefault(require_styled2());
    var _createTheme = _interopRequireDefault(require_createTheme2());
    var _jsxRuntime = require_jsx_runtime();
    var defaultTheme = (0, _createTheme.default)();
    var defaultCreateStyledComponent = (0, _styled.default)("div", {
      name: "MuiContainer",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, styles[`maxWidth${(0, _capitalize.default)(String(ownerState.maxWidth))}`], ownerState.fixed && styles.fixed, ownerState.disableGutters && styles.disableGutters];
      }
    });
    var useThemePropsDefault = (inProps) => (0, _useThemeProps.default)({
      props: inProps,
      name: "MuiContainer",
      defaultTheme
    });
    var useUtilityClasses = (ownerState, componentName) => {
      const getContainerUtilityClass = (slot) => {
        return (0, _generateUtilityClass.default)(componentName, slot);
      };
      const {
        classes,
        fixed,
        disableGutters,
        maxWidth
      } = ownerState;
      const slots = {
        root: ["root", maxWidth && `maxWidth${(0, _capitalize.default)(String(maxWidth))}`, fixed && "fixed", disableGutters && "disableGutters"]
      };
      return (0, _composeClasses.default)(slots, getContainerUtilityClass, classes);
    };
    function createContainer(options = {}) {
      const {
        // This will allow adding custom styled fn (for example for custom sx style function)
        createStyledComponent = defaultCreateStyledComponent,
        useThemeProps = useThemePropsDefault,
        componentName = "MuiContainer"
      } = options;
      const ContainerRoot = createStyledComponent(({
        theme: theme2,
        ownerState
      }) => ({
        width: "100%",
        marginLeft: "auto",
        boxSizing: "border-box",
        marginRight: "auto",
        ...!ownerState.disableGutters && {
          paddingLeft: theme2.spacing(2),
          paddingRight: theme2.spacing(2),
          // @ts-ignore module augmentation fails if custom breakpoints are used
          [theme2.breakpoints.up("sm")]: {
            paddingLeft: theme2.spacing(3),
            paddingRight: theme2.spacing(3)
          }
        }
      }), ({
        theme: theme2,
        ownerState
      }) => ownerState.fixed && Object.keys(theme2.breakpoints.values).reduce((acc, breakpointValueKey) => {
        const breakpoint = breakpointValueKey;
        const value = theme2.breakpoints.values[breakpoint];
        if (value !== 0) {
          acc[theme2.breakpoints.up(breakpoint)] = {
            maxWidth: `${value}${theme2.breakpoints.unit}`
          };
        }
        return acc;
      }, {}), ({
        theme: theme2,
        ownerState
      }) => ({
        // @ts-ignore module augmentation fails if custom breakpoints are used
        ...ownerState.maxWidth === "xs" && {
          // @ts-ignore module augmentation fails if custom breakpoints are used
          [theme2.breakpoints.up("xs")]: {
            // @ts-ignore module augmentation fails if custom breakpoints are used
            maxWidth: Math.max(theme2.breakpoints.values.xs, 444)
          }
        },
        ...ownerState.maxWidth && // @ts-ignore module augmentation fails if custom breakpoints are used
        ownerState.maxWidth !== "xs" && {
          // @ts-ignore module augmentation fails if custom breakpoints are used
          [theme2.breakpoints.up(ownerState.maxWidth)]: {
            // @ts-ignore module augmentation fails if custom breakpoints are used
            maxWidth: `${theme2.breakpoints.values[ownerState.maxWidth]}${theme2.breakpoints.unit}`
          }
        }
      }));
      const Container = /* @__PURE__ */ React7.forwardRef(function Container2(inProps, ref) {
        const props = useThemeProps(inProps);
        const {
          className,
          component = "div",
          disableGutters = false,
          fixed = false,
          maxWidth = "lg",
          classes: classesProp,
          ...other
        } = props;
        const ownerState = {
          ...props,
          component,
          disableGutters,
          fixed,
          maxWidth
        };
        const classes = useUtilityClasses(ownerState, componentName);
        return (
          // @ts-ignore theme is injected by the styled util
          /* @__PURE__ */ (0, _jsxRuntime.jsx)(ContainerRoot, {
            as: component,
            ownerState,
            className: (0, _clsx.default)(classes.root, className),
            ref,
            ...other
          })
        );
      });
      define_process_env_default.NODE_ENV !== "production" ? Container.propTypes = {
        children: _propTypes.default.node,
        classes: _propTypes.default.object,
        className: _propTypes.default.string,
        component: _propTypes.default.elementType,
        disableGutters: _propTypes.default.bool,
        fixed: _propTypes.default.bool,
        maxWidth: _propTypes.default.oneOfType([_propTypes.default.oneOf(["xs", "sm", "md", "lg", "xl", false]), _propTypes.default.string]),
        sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
      } : void 0;
      return Container;
    }
  }
});

// node_modules/@mui/material/node_modules/@mui/system/Container/Container.js
var require_Container = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/Container/Container.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _createContainer = _interopRequireDefault(require_createContainer());
    var Container = (0, _createContainer.default)();
    define_process_env_default.NODE_ENV !== "production" ? Container.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * @ignore
       */
      children: _propTypes.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: _propTypes.default.elementType,
      /**
       * If `true`, the left and right padding is removed.
       * @default false
       */
      disableGutters: _propTypes.default.bool,
      /**
       * Set the max-width to match the min-width of the current breakpoint.
       * This is useful if you'd prefer to design for a fixed set of sizes
       * instead of trying to accommodate a fully fluid viewport.
       * It's fluid by default.
       * @default false
       */
      fixed: _propTypes.default.bool,
      /**
       * Determine the max-width of the container.
       * The container width grows with the size of the screen.
       * Set to `false` to disable `maxWidth`.
       * @default 'lg'
       */
      maxWidth: _propTypes.default.oneOfType([_propTypes.default.oneOf(["xs", "sm", "md", "lg", "xl", false]), _propTypes.default.string]),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
    } : void 0;
    var _default = exports2.default = Container;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/Container/containerClasses.js
var require_containerClasses = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/Container/containerClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getContainerUtilityClass = getContainerUtilityClass;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    function getContainerUtilityClass(slot) {
      return (0, _generateUtilityClass.default)("MuiContainer", slot);
    }
    var containerClasses = (0, _generateUtilityClasses.default)("MuiContainer", ["root", "disableGutters", "fixed", "maxWidthXs", "maxWidthSm", "maxWidthMd", "maxWidthLg", "maxWidthXl"]);
    var _default = exports2.default = containerClasses;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/Container/index.js
var require_Container2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/Container/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      containerClasses: true
    };
    Object.defineProperty(exports2, "containerClasses", {
      enumerable: true,
      get: function() {
        return _containerClasses.default;
      }
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _Container.default;
      }
    });
    var _Container = _interopRequireDefault(require_Container());
    var _containerClasses = _interopRequireWildcard(require_containerClasses());
    Object.keys(_containerClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _containerClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _containerClasses[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node_modules/@mui/system/Grid/traverseBreakpoints.js
var require_traverseBreakpoints = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/Grid/traverseBreakpoints.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.traverseBreakpoints = exports2.filterBreakpointKeys = void 0;
    var filterBreakpointKeys = (breakpointsKeys, responsiveKeys) => breakpointsKeys.filter((key) => responsiveKeys.includes(key));
    exports2.filterBreakpointKeys = filterBreakpointKeys;
    var traverseBreakpoints = (breakpoints, responsive, iterator) => {
      const smallestBreakpoint = breakpoints.keys[0];
      if (Array.isArray(responsive)) {
        responsive.forEach((breakpointValue, index) => {
          iterator((responsiveStyles, style) => {
            if (index <= breakpoints.keys.length - 1) {
              if (index === 0) {
                Object.assign(responsiveStyles, style);
              } else {
                responsiveStyles[breakpoints.up(breakpoints.keys[index])] = style;
              }
            }
          }, breakpointValue);
        });
      } else if (responsive && typeof responsive === "object") {
        const keys = Object.keys(responsive).length > breakpoints.keys.length ? breakpoints.keys : filterBreakpointKeys(breakpoints.keys, Object.keys(responsive));
        keys.forEach((key) => {
          if (breakpoints.keys.includes(key)) {
            const breakpointValue = responsive[key];
            if (breakpointValue !== void 0) {
              iterator((responsiveStyles, style) => {
                if (smallestBreakpoint === key) {
                  Object.assign(responsiveStyles, style);
                } else {
                  responsiveStyles[breakpoints.up(key)] = style;
                }
              }, breakpointValue);
            }
          }
        });
      } else if (typeof responsive === "number" || typeof responsive === "string") {
        iterator((responsiveStyles, style) => {
          Object.assign(responsiveStyles, style);
        }, responsive);
      }
    };
    exports2.traverseBreakpoints = traverseBreakpoints;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/Grid/gridGenerator.js
var require_gridGenerator = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/Grid/gridGenerator.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.generateSpacingClassNames = exports2.generateSizeClassNames = exports2.generateGridStyles = exports2.generateGridSizeStyles = exports2.generateGridRowSpacingStyles = exports2.generateGridOffsetStyles = exports2.generateGridDirectionStyles = exports2.generateGridColumnsStyles = exports2.generateGridColumnSpacingStyles = exports2.generateDirectionClasses = void 0;
    var _traverseBreakpoints = require_traverseBreakpoints();
    function getSelfSpacingVar(axis) {
      return `--Grid-${axis}Spacing`;
    }
    function getParentSpacingVar(axis) {
      return `--Grid-parent-${axis}Spacing`;
    }
    var selfColumnsVar = "--Grid-columns";
    var parentColumnsVar = "--Grid-parent-columns";
    var generateGridSizeStyles = ({
      theme: theme2,
      ownerState
    }) => {
      const styles = {};
      (0, _traverseBreakpoints.traverseBreakpoints)(theme2.breakpoints, ownerState.size, (appendStyle, value) => {
        let style = {};
        if (value === "grow") {
          style = {
            flexBasis: 0,
            flexGrow: 1,
            maxWidth: "100%"
          };
        }
        if (value === "auto") {
          style = {
            flexBasis: "auto",
            flexGrow: 0,
            flexShrink: 0,
            maxWidth: "none",
            width: "auto"
          };
        }
        if (typeof value === "number") {
          style = {
            flexGrow: 0,
            flexBasis: "auto",
            width: `calc(100% * ${value} / var(${parentColumnsVar}) - (var(${parentColumnsVar}) - ${value}) * (var(${getParentSpacingVar("column")}) / var(${parentColumnsVar})))`
          };
        }
        appendStyle(styles, style);
      });
      return styles;
    };
    exports2.generateGridSizeStyles = generateGridSizeStyles;
    var generateGridOffsetStyles = ({
      theme: theme2,
      ownerState
    }) => {
      const styles = {};
      (0, _traverseBreakpoints.traverseBreakpoints)(theme2.breakpoints, ownerState.offset, (appendStyle, value) => {
        let style = {};
        if (value === "auto") {
          style = {
            marginLeft: "auto"
          };
        }
        if (typeof value === "number") {
          style = {
            marginLeft: value === 0 ? "0px" : `calc(100% * ${value} / var(${parentColumnsVar}) + var(${getParentSpacingVar("column")}) * ${value} / var(${parentColumnsVar}))`
          };
        }
        appendStyle(styles, style);
      });
      return styles;
    };
    exports2.generateGridOffsetStyles = generateGridOffsetStyles;
    var generateGridColumnsStyles = ({
      theme: theme2,
      ownerState
    }) => {
      if (!ownerState.container) {
        return {};
      }
      const styles = {
        [selfColumnsVar]: 12
      };
      (0, _traverseBreakpoints.traverseBreakpoints)(theme2.breakpoints, ownerState.columns, (appendStyle, value) => {
        const columns = value ?? 12;
        appendStyle(styles, {
          [selfColumnsVar]: columns,
          "> *": {
            [parentColumnsVar]: columns
          }
        });
      });
      return styles;
    };
    exports2.generateGridColumnsStyles = generateGridColumnsStyles;
    var generateGridRowSpacingStyles = ({
      theme: theme2,
      ownerState
    }) => {
      if (!ownerState.container) {
        return {};
      }
      const styles = {};
      (0, _traverseBreakpoints.traverseBreakpoints)(theme2.breakpoints, ownerState.rowSpacing, (appendStyle, value) => {
        const spacing = typeof value === "string" ? value : theme2.spacing?.(value);
        appendStyle(styles, {
          [getSelfSpacingVar("row")]: spacing,
          "> *": {
            [getParentSpacingVar("row")]: spacing
          }
        });
      });
      return styles;
    };
    exports2.generateGridRowSpacingStyles = generateGridRowSpacingStyles;
    var generateGridColumnSpacingStyles = ({
      theme: theme2,
      ownerState
    }) => {
      if (!ownerState.container) {
        return {};
      }
      const styles = {};
      (0, _traverseBreakpoints.traverseBreakpoints)(theme2.breakpoints, ownerState.columnSpacing, (appendStyle, value) => {
        const spacing = typeof value === "string" ? value : theme2.spacing?.(value);
        appendStyle(styles, {
          [getSelfSpacingVar("column")]: spacing,
          "> *": {
            [getParentSpacingVar("column")]: spacing
          }
        });
      });
      return styles;
    };
    exports2.generateGridColumnSpacingStyles = generateGridColumnSpacingStyles;
    var generateGridDirectionStyles = ({
      theme: theme2,
      ownerState
    }) => {
      if (!ownerState.container) {
        return {};
      }
      const styles = {};
      (0, _traverseBreakpoints.traverseBreakpoints)(theme2.breakpoints, ownerState.direction, (appendStyle, value) => {
        appendStyle(styles, {
          flexDirection: value
        });
      });
      return styles;
    };
    exports2.generateGridDirectionStyles = generateGridDirectionStyles;
    var generateGridStyles = ({
      ownerState
    }) => {
      return {
        minWidth: 0,
        boxSizing: "border-box",
        ...ownerState.container && {
          display: "flex",
          flexWrap: "wrap",
          ...ownerState.wrap && ownerState.wrap !== "wrap" && {
            flexWrap: ownerState.wrap
          },
          gap: `var(${getSelfSpacingVar("row")}) var(${getSelfSpacingVar("column")})`
        }
      };
    };
    exports2.generateGridStyles = generateGridStyles;
    var generateSizeClassNames = (size) => {
      const classNames = [];
      Object.entries(size).forEach(([key, value]) => {
        if (value !== false && value !== void 0) {
          classNames.push(`grid-${key}-${String(value)}`);
        }
      });
      return classNames;
    };
    exports2.generateSizeClassNames = generateSizeClassNames;
    var generateSpacingClassNames = (spacing, smallestBreakpoint = "xs") => {
      function isValidSpacing(val) {
        if (val === void 0) {
          return false;
        }
        return typeof val === "string" && !Number.isNaN(Number(val)) || typeof val === "number" && val > 0;
      }
      if (isValidSpacing(spacing)) {
        return [`spacing-${smallestBreakpoint}-${String(spacing)}`];
      }
      if (typeof spacing === "object" && !Array.isArray(spacing)) {
        const classNames = [];
        Object.entries(spacing).forEach(([key, value]) => {
          if (isValidSpacing(value)) {
            classNames.push(`spacing-${key}-${String(value)}`);
          }
        });
        return classNames;
      }
      return [];
    };
    exports2.generateSpacingClassNames = generateSpacingClassNames;
    var generateDirectionClasses = (direction) => {
      if (direction === void 0) {
        return [];
      }
      if (typeof direction === "object") {
        return Object.entries(direction).map(([key, value]) => `direction-${key}-${value}`);
      }
      return [`direction-xs-${String(direction)}`];
    };
    exports2.generateDirectionClasses = generateDirectionClasses;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/Grid/deleteLegacyGridProps.js
var require_deleteLegacyGridProps = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/Grid/deleteLegacyGridProps.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = deleteLegacyGridProps;
    var getLegacyGridWarning = (propName) => {
      if (["item", "zeroMinWidth"].includes(propName)) {
        return `The \`${propName}\` prop has been removed and is no longer necessary. You can safely remove it.`;
      }
      return `The \`${propName}\` prop has been removed. See https://v6.mui.com/material-ui/migration/upgrade-to-grid-v2/ for migration instructions.`;
    };
    var warnedAboutProps = [];
    function deleteLegacyGridProps(props, breakpoints) {
      const propsToWarn = [];
      if (props.item !== void 0) {
        delete props.item;
        propsToWarn.push("item");
      }
      if (props.zeroMinWidth !== void 0) {
        delete props.zeroMinWidth;
        propsToWarn.push("zeroMinWidth");
      }
      breakpoints.keys.forEach((breakpoint) => {
        if (props[breakpoint] !== void 0) {
          propsToWarn.push(breakpoint);
          delete props[breakpoint];
        }
      });
      if (define_process_env_default.NODE_ENV !== "production") {
        propsToWarn.forEach((prop) => {
          if (!warnedAboutProps.includes(prop)) {
            warnedAboutProps.push(prop);
            console.warn(`MUI Grid2: ${getLegacyGridWarning(prop)}
`);
          }
        });
      }
    }
  }
});

// node_modules/@mui/material/node_modules/@mui/system/Grid/createGrid.js
var require_createGrid = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/Grid/createGrid.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = createGrid;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _clsx = _interopRequireDefault(require_clsx());
    var _isMuiElement = _interopRequireDefault(require_isMuiElement2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _styled = _interopRequireDefault(require_styled2());
    var _useThemeProps = _interopRequireDefault(require_useThemeProps2());
    var _useTheme = _interopRequireDefault(require_useTheme2());
    var _styleFunctionSx = require_styleFunctionSx2();
    var _createTheme = _interopRequireDefault(require_createTheme2());
    var _gridGenerator = require_gridGenerator();
    var _deleteLegacyGridProps = _interopRequireDefault(require_deleteLegacyGridProps());
    var _jsxRuntime = require_jsx_runtime();
    var defaultTheme = (0, _createTheme.default)();
    var defaultCreateStyledComponent = (0, _styled.default)("div", {
      name: "MuiGrid",
      slot: "Root",
      overridesResolver: (props, styles) => styles.root
    });
    function useThemePropsDefault(props) {
      return (0, _useThemeProps.default)({
        props,
        name: "MuiGrid",
        defaultTheme
      });
    }
    function createGrid(options = {}) {
      const {
        // This will allow adding custom styled fn (for example for custom sx style function)
        createStyledComponent = defaultCreateStyledComponent,
        useThemeProps = useThemePropsDefault,
        useTheme: useTheme3 = _useTheme.default,
        componentName = "MuiGrid"
      } = options;
      const useUtilityClasses = (ownerState, theme2) => {
        const {
          container,
          direction,
          spacing,
          wrap,
          size
        } = ownerState;
        const slots = {
          root: ["root", container && "container", wrap !== "wrap" && `wrap-xs-${String(wrap)}`, ...(0, _gridGenerator.generateDirectionClasses)(direction), ...(0, _gridGenerator.generateSizeClassNames)(size), ...container ? (0, _gridGenerator.generateSpacingClassNames)(spacing, theme2.breakpoints.keys[0]) : []]
        };
        return (0, _composeClasses.default)(slots, (slot) => (0, _generateUtilityClass.default)(componentName, slot), {});
      };
      function parseResponsiveProp(propValue, breakpoints, shouldUseValue = () => true) {
        const parsedProp = {};
        if (propValue === null) {
          return parsedProp;
        }
        if (Array.isArray(propValue)) {
          propValue.forEach((value, index) => {
            if (value !== null && shouldUseValue(value) && breakpoints.keys[index]) {
              parsedProp[breakpoints.keys[index]] = value;
            }
          });
        } else if (typeof propValue === "object") {
          Object.keys(propValue).forEach((key) => {
            const value = propValue[key];
            if (value !== null && value !== void 0 && shouldUseValue(value)) {
              parsedProp[key] = value;
            }
          });
        } else {
          parsedProp[breakpoints.keys[0]] = propValue;
        }
        return parsedProp;
      }
      const GridRoot = createStyledComponent(_gridGenerator.generateGridColumnsStyles, _gridGenerator.generateGridColumnSpacingStyles, _gridGenerator.generateGridRowSpacingStyles, _gridGenerator.generateGridSizeStyles, _gridGenerator.generateGridDirectionStyles, _gridGenerator.generateGridStyles, _gridGenerator.generateGridOffsetStyles);
      const Grid = /* @__PURE__ */ React7.forwardRef(function Grid2(inProps, ref) {
        const theme2 = useTheme3();
        const themeProps = useThemeProps(inProps);
        const props = (0, _styleFunctionSx.extendSxProp)(themeProps);
        (0, _deleteLegacyGridProps.default)(props, theme2.breakpoints);
        const {
          className,
          children,
          columns: columnsProp = 12,
          container = false,
          component = "div",
          direction = "row",
          wrap = "wrap",
          size: sizeProp = {},
          offset: offsetProp = {},
          spacing: spacingProp = 0,
          rowSpacing: rowSpacingProp = spacingProp,
          columnSpacing: columnSpacingProp = spacingProp,
          unstable_level: level = 0,
          ...other
        } = props;
        const size = parseResponsiveProp(sizeProp, theme2.breakpoints, (val) => val !== false);
        const offset = parseResponsiveProp(offsetProp, theme2.breakpoints);
        const columns = inProps.columns ?? (level ? void 0 : columnsProp);
        const spacing = inProps.spacing ?? (level ? void 0 : spacingProp);
        const rowSpacing = inProps.rowSpacing ?? inProps.spacing ?? (level ? void 0 : rowSpacingProp);
        const columnSpacing = inProps.columnSpacing ?? inProps.spacing ?? (level ? void 0 : columnSpacingProp);
        const ownerState = {
          ...props,
          level,
          columns,
          container,
          direction,
          wrap,
          spacing,
          rowSpacing,
          columnSpacing,
          size,
          offset
        };
        const classes = useUtilityClasses(ownerState, theme2);
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(GridRoot, {
          ref,
          as: component,
          ownerState,
          className: (0, _clsx.default)(classes.root, className),
          ...other,
          children: React7.Children.map(children, (child) => {
            if (/* @__PURE__ */ React7.isValidElement(child) && (0, _isMuiElement.default)(child, ["Grid"]) && container && child.props.container) {
              return /* @__PURE__ */ React7.cloneElement(child, {
                unstable_level: child.props?.unstable_level ?? level + 1
              });
            }
            return child;
          })
        });
      });
      define_process_env_default.NODE_ENV !== "production" ? Grid.propTypes = {
        children: _propTypes.default.node,
        className: _propTypes.default.string,
        columns: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.number), _propTypes.default.number, _propTypes.default.object]),
        columnSpacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
        component: _propTypes.default.elementType,
        container: _propTypes.default.bool,
        direction: _propTypes.default.oneOfType([_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), _propTypes.default.arrayOf(_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), _propTypes.default.object]),
        offset: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])), _propTypes.default.object]),
        rowSpacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
        size: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.bool, _propTypes.default.number, _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.bool, _propTypes.default.number])), _propTypes.default.object]),
        spacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
        sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
        wrap: _propTypes.default.oneOf(["nowrap", "wrap-reverse", "wrap"])
      } : void 0;
      Grid.muiName = "Grid";
      return Grid;
    }
  }
});

// node_modules/@mui/material/node_modules/@mui/system/Grid/Grid.js
var require_Grid = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/Grid/Grid.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _createGrid = _interopRequireDefault(require_createGrid());
    var Grid = (0, _createGrid.default)();
    define_process_env_default.NODE_ENV !== "production" ? Grid.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * The content of the component.
       */
      children: _propTypes.default.node,
      /**
       * The number of columns.
       * @default 12
       */
      columns: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.number), _propTypes.default.number, _propTypes.default.object]),
      /**
       * Defines the horizontal space between the type `item` components.
       * It overrides the value of the `spacing` prop.
       */
      columnSpacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
      /**
       * If `true`, the component will have the flex *container* behavior.
       * You should be wrapping *items* with a *container*.
       * @default false
       */
      container: _propTypes.default.bool,
      /**
       * Defines the `flex-direction` style property.
       * It is applied for all screen sizes.
       * @default 'row'
       */
      direction: _propTypes.default.oneOfType([_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), _propTypes.default.arrayOf(_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), _propTypes.default.object]),
      /**
       * Defines the offset value for the type `item` components.
       */
      offset: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])), _propTypes.default.object]),
      /**
       * Defines the vertical space between the type `item` components.
       * It overrides the value of the `spacing` prop.
       */
      rowSpacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
      /**
       * Defines the size of the the type `item` components.
       */
      size: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.bool, _propTypes.default.number, _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.bool, _propTypes.default.number])), _propTypes.default.object]),
      /**
       * Defines the space between the type `item` components.
       * It can only be used on a type `container` component.
       * @default 0
       */
      spacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
      /**
       * @ignore
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
      /**
       * @internal
       * The level of the grid starts from `0` and increases when the grid nests
       * inside another grid. Nesting is defined as a container Grid being a direct
       * child of a container Grid.
       *
       * ```js
       * <Grid container> // level 0
       *   <Grid container> // level 1
       *     <Grid container> // level 2
       * ```
       *
       * Only consecutive grid is considered nesting. A grid container will start at
       * `0` if there are non-Grid container element above it.
       *
       * ```js
       * <Grid container> // level 0
       *   <div>
       *     <Grid container> // level 0
       * ```
       *
       * ```js
       * <Grid container> // level 0
       *   <Grid>
       *     <Grid container> // level 0
       * ```
       */
      unstable_level: _propTypes.default.number,
      /**
       * Defines the `flex-wrap` style property.
       * It's applied for all screen sizes.
       * @default 'wrap'
       */
      wrap: _propTypes.default.oneOf(["nowrap", "wrap-reverse", "wrap"])
    } : void 0;
    var _default = exports2.default = Grid;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/Grid/GridProps.js
var require_GridProps = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/Grid/GridProps.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
  }
});

// node_modules/@mui/material/node_modules/@mui/system/Grid/gridClasses.js
var require_gridClasses = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/Grid/gridClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getGridUtilityClass = getGridUtilityClass;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    function getGridUtilityClass(slot) {
      return (0, _generateUtilityClass.default)("MuiGrid", slot);
    }
    var SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    var DIRECTIONS = ["column-reverse", "column", "row-reverse", "row"];
    var WRAPS = ["nowrap", "wrap-reverse", "wrap"];
    var GRID_SIZES = ["auto", "grow", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
    var gridClasses = (0, _generateUtilityClasses.default)("MuiGrid", [
      "root",
      "container",
      "item",
      // spacings
      ...SPACINGS.map((spacing) => `spacing-xs-${spacing}`),
      // direction values
      ...DIRECTIONS.map((direction) => `direction-xs-${direction}`),
      // wrap values
      ...WRAPS.map((wrap) => `wrap-xs-${wrap}`),
      // grid sizes for all breakpoints
      ...GRID_SIZES.map((size) => `grid-xs-${size}`),
      ...GRID_SIZES.map((size) => `grid-sm-${size}`),
      ...GRID_SIZES.map((size) => `grid-md-${size}`),
      ...GRID_SIZES.map((size) => `grid-lg-${size}`),
      ...GRID_SIZES.map((size) => `grid-xl-${size}`)
    ]);
    var _default = exports2.default = gridClasses;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/Grid/index.js
var require_Grid2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/Grid/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      createGrid: true,
      gridClasses: true,
      unstable_traverseBreakpoints: true,
      unstable_generateDirectionClasses: true,
      unstable_generateSizeClassNames: true,
      unstable_generateSpacingClassNames: true
    };
    Object.defineProperty(exports2, "createGrid", {
      enumerable: true,
      get: function() {
        return _createGrid.default;
      }
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _Grid.default;
      }
    });
    Object.defineProperty(exports2, "gridClasses", {
      enumerable: true,
      get: function() {
        return _gridClasses.default;
      }
    });
    Object.defineProperty(exports2, "unstable_generateDirectionClasses", {
      enumerable: true,
      get: function() {
        return _gridGenerator.generateDirectionClasses;
      }
    });
    Object.defineProperty(exports2, "unstable_generateSizeClassNames", {
      enumerable: true,
      get: function() {
        return _gridGenerator.generateSizeClassNames;
      }
    });
    Object.defineProperty(exports2, "unstable_generateSpacingClassNames", {
      enumerable: true,
      get: function() {
        return _gridGenerator.generateSpacingClassNames;
      }
    });
    Object.defineProperty(exports2, "unstable_traverseBreakpoints", {
      enumerable: true,
      get: function() {
        return _traverseBreakpoints.traverseBreakpoints;
      }
    });
    var _Grid = _interopRequireDefault(require_Grid());
    var _createGrid = _interopRequireDefault(require_createGrid());
    var _GridProps = require_GridProps();
    Object.keys(_GridProps).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _GridProps[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _GridProps[key];
        }
      });
    });
    var _gridClasses = _interopRequireWildcard(require_gridClasses());
    Object.keys(_gridClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _gridClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _gridClasses[key];
        }
      });
    });
    var _traverseBreakpoints = require_traverseBreakpoints();
    var _gridGenerator = require_gridGenerator();
  }
});

// node_modules/@mui/material/node_modules/@mui/system/Stack/createStack.js
var require_createStack = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/Stack/createStack.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = createStack;
    exports2.style = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _clsx = _interopRequireDefault(require_clsx());
    var _deepmerge = _interopRequireDefault(require_deepmerge2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _styled = _interopRequireDefault(require_styled2());
    var _useThemeProps = _interopRequireDefault(require_useThemeProps2());
    var _styleFunctionSx = require_styleFunctionSx2();
    var _createTheme = _interopRequireDefault(require_createTheme2());
    var _breakpoints = require_breakpoints2();
    var _spacing = require_spacing2();
    var _jsxRuntime = require_jsx_runtime();
    var defaultTheme = (0, _createTheme.default)();
    var defaultCreateStyledComponent = (0, _styled.default)("div", {
      name: "MuiStack",
      slot: "Root",
      overridesResolver: (props, styles) => styles.root
    });
    function useThemePropsDefault(props) {
      return (0, _useThemeProps.default)({
        props,
        name: "MuiStack",
        defaultTheme
      });
    }
    function joinChildren(children, separator) {
      const childrenArray = React7.Children.toArray(children).filter(Boolean);
      return childrenArray.reduce((output, child, index) => {
        output.push(child);
        if (index < childrenArray.length - 1) {
          output.push(/* @__PURE__ */ React7.cloneElement(separator, {
            key: `separator-${index}`
          }));
        }
        return output;
      }, []);
    }
    var getSideFromDirection = (direction) => {
      return {
        row: "Left",
        "row-reverse": "Right",
        column: "Top",
        "column-reverse": "Bottom"
      }[direction];
    };
    var style = ({
      ownerState,
      theme: theme2
    }) => {
      let styles = {
        display: "flex",
        flexDirection: "column",
        ...(0, _breakpoints.handleBreakpoints)({
          theme: theme2
        }, (0, _breakpoints.resolveBreakpointValues)({
          values: ownerState.direction,
          breakpoints: theme2.breakpoints.values
        }), (propValue) => ({
          flexDirection: propValue
        }))
      };
      if (ownerState.spacing) {
        const transformer = (0, _spacing.createUnarySpacing)(theme2);
        const base = Object.keys(theme2.breakpoints.values).reduce((acc, breakpoint) => {
          if (typeof ownerState.spacing === "object" && ownerState.spacing[breakpoint] != null || typeof ownerState.direction === "object" && ownerState.direction[breakpoint] != null) {
            acc[breakpoint] = true;
          }
          return acc;
        }, {});
        const directionValues = (0, _breakpoints.resolveBreakpointValues)({
          values: ownerState.direction,
          base
        });
        const spacingValues = (0, _breakpoints.resolveBreakpointValues)({
          values: ownerState.spacing,
          base
        });
        if (typeof directionValues === "object") {
          Object.keys(directionValues).forEach((breakpoint, index, breakpoints) => {
            const directionValue = directionValues[breakpoint];
            if (!directionValue) {
              const previousDirectionValue = index > 0 ? directionValues[breakpoints[index - 1]] : "column";
              directionValues[breakpoint] = previousDirectionValue;
            }
          });
        }
        const styleFromPropValue = (propValue, breakpoint) => {
          if (ownerState.useFlexGap) {
            return {
              gap: (0, _spacing.getValue)(transformer, propValue)
            };
          }
          return {
            // The useFlexGap={false} implement relies on each child to give up control of the margin.
            // We need to reset the margin to avoid double spacing.
            "& > :not(style):not(style)": {
              margin: 0
            },
            "& > :not(style) ~ :not(style)": {
              [`margin${getSideFromDirection(breakpoint ? directionValues[breakpoint] : ownerState.direction)}`]: (0, _spacing.getValue)(transformer, propValue)
            }
          };
        };
        styles = (0, _deepmerge.default)(styles, (0, _breakpoints.handleBreakpoints)({
          theme: theme2
        }, spacingValues, styleFromPropValue));
      }
      styles = (0, _breakpoints.mergeBreakpointsInOrder)(theme2.breakpoints, styles);
      return styles;
    };
    exports2.style = style;
    function createStack(options = {}) {
      const {
        // This will allow adding custom styled fn (for example for custom sx style function)
        createStyledComponent = defaultCreateStyledComponent,
        useThemeProps = useThemePropsDefault,
        componentName = "MuiStack"
      } = options;
      const useUtilityClasses = () => {
        const slots = {
          root: ["root"]
        };
        return (0, _composeClasses.default)(slots, (slot) => (0, _generateUtilityClass.default)(componentName, slot), {});
      };
      const StackRoot = createStyledComponent(style);
      const Stack = /* @__PURE__ */ React7.forwardRef(function Grid(inProps, ref) {
        const themeProps = useThemeProps(inProps);
        const props = (0, _styleFunctionSx.extendSxProp)(themeProps);
        const {
          component = "div",
          direction = "column",
          spacing = 0,
          divider,
          children,
          className,
          useFlexGap = false,
          ...other
        } = props;
        const ownerState = {
          direction,
          spacing,
          useFlexGap
        };
        const classes = useUtilityClasses();
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(StackRoot, {
          as: component,
          ownerState,
          ref,
          className: (0, _clsx.default)(classes.root, className),
          ...other,
          children: divider ? joinChildren(children, divider) : children
        });
      });
      define_process_env_default.NODE_ENV !== "production" ? Stack.propTypes = {
        children: _propTypes.default.node,
        direction: _propTypes.default.oneOfType([_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), _propTypes.default.arrayOf(_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), _propTypes.default.object]),
        divider: _propTypes.default.node,
        spacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
        sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
      } : void 0;
      return Stack;
    }
  }
});

// node_modules/@mui/material/node_modules/@mui/system/Stack/Stack.js
var require_Stack = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/Stack/Stack.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _createStack = _interopRequireDefault(require_createStack());
    var Stack = (0, _createStack.default)();
    define_process_env_default.NODE_ENV !== "production" ? Stack.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * The content of the component.
       */
      children: _propTypes.default.node,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: _propTypes.default.elementType,
      /**
       * Defines the `flex-direction` style property.
       * It is applied for all screen sizes.
       * @default 'column'
       */
      direction: _propTypes.default.oneOfType([_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), _propTypes.default.arrayOf(_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), _propTypes.default.object]),
      /**
       * Add an element between each child.
       */
      divider: _propTypes.default.node,
      /**
       * Defines the space between immediate children.
       * @default 0
       */
      spacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
      /**
       * The system prop, which allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
      /**
       * If `true`, the CSS flexbox `gap` is used instead of applying `margin` to children.
       *
       * While CSS `gap` removes the [known limitations](https://mui.com/joy-ui/react-stack/#limitations),
       * it is not fully supported in some browsers. We recommend checking https://caniuse.com/?search=flex%20gap before using this flag.
       *
       * To enable this flag globally, follow the theme's default props configuration.
       * @default false
       */
      useFlexGap: _propTypes.default.bool
    } : void 0;
    var _default = exports2.default = Stack;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/Stack/StackProps.js
var require_StackProps = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/Stack/StackProps.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
  }
});

// node_modules/@mui/material/node_modules/@mui/system/Stack/stackClasses.js
var require_stackClasses = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/Stack/stackClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getStackUtilityClass = getStackUtilityClass;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    function getStackUtilityClass(slot) {
      return (0, _generateUtilityClass.default)("MuiStack", slot);
    }
    var stackClasses = (0, _generateUtilityClasses.default)("MuiStack", ["root"]);
    var _default = exports2.default = stackClasses;
  }
});

// node_modules/@mui/material/node_modules/@mui/system/Stack/index.js
var require_Stack2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/Stack/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      createStack: true,
      stackClasses: true
    };
    Object.defineProperty(exports2, "createStack", {
      enumerable: true,
      get: function() {
        return _createStack.default;
      }
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _Stack.default;
      }
    });
    Object.defineProperty(exports2, "stackClasses", {
      enumerable: true,
      get: function() {
        return _stackClasses.default;
      }
    });
    var _Stack = _interopRequireDefault(require_Stack());
    var _createStack = _interopRequireDefault(require_createStack());
    var _StackProps = require_StackProps();
    Object.keys(_StackProps).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _StackProps[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _StackProps[key];
        }
      });
    });
    var _stackClasses = _interopRequireWildcard(require_stackClasses());
    Object.keys(_stackClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _stackClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _stackClasses[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node_modules/@mui/system/index.js
var require_system = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      experimental_sx: true,
      css: true,
      keyframes: true,
      StyledEngineProvider: true,
      GlobalStyles: true,
      borders: true,
      breakpoints: true,
      handleBreakpoints: true,
      mergeBreakpointsInOrder: true,
      unstable_resolveBreakpointValues: true,
      cssContainerQueries: true,
      compose: true,
      display: true,
      flexbox: true,
      grid: true,
      palette: true,
      positions: true,
      shadows: true,
      sizing: true,
      spacing: true,
      style: true,
      getPath: true,
      getStyleValue: true,
      typography: true,
      unstable_styleFunctionSx: true,
      unstable_createStyleFunctionSx: true,
      unstable_extendSxProp: true,
      unstable_defaultSxConfig: true,
      unstable_getThemeValue: true,
      Box: true,
      createBox: true,
      createStyled: true,
      styled: true,
      createTheme: true,
      createBreakpoints: true,
      createSpacing: true,
      shape: true,
      useThemeProps: true,
      getThemeProps: true,
      useTheme: true,
      useThemeWithoutDefault: true,
      useMediaQuery: true,
      ThemeProvider: true,
      unstable_memoTheme: true,
      unstable_createCssVarsProvider: true,
      unstable_createGetCssVar: true,
      unstable_cssVarsParser: true,
      unstable_prepareCssVars: true,
      unstable_createCssVarsTheme: true,
      responsivePropType: true,
      RtlProvider: true,
      createContainer: true,
      Container: true,
      Grid: true,
      Stack: true
    };
    Object.defineProperty(exports2, "Box", {
      enumerable: true,
      get: function() {
        return _Box.default;
      }
    });
    Object.defineProperty(exports2, "Container", {
      enumerable: true,
      get: function() {
        return _Container.default;
      }
    });
    Object.defineProperty(exports2, "GlobalStyles", {
      enumerable: true,
      get: function() {
        return _GlobalStyles.default;
      }
    });
    Object.defineProperty(exports2, "Grid", {
      enumerable: true,
      get: function() {
        return _Grid.default;
      }
    });
    Object.defineProperty(exports2, "RtlProvider", {
      enumerable: true,
      get: function() {
        return _RtlProvider.default;
      }
    });
    Object.defineProperty(exports2, "Stack", {
      enumerable: true,
      get: function() {
        return _Stack.default;
      }
    });
    Object.defineProperty(exports2, "StyledEngineProvider", {
      enumerable: true,
      get: function() {
        return _styledEngine.StyledEngineProvider;
      }
    });
    Object.defineProperty(exports2, "ThemeProvider", {
      enumerable: true,
      get: function() {
        return _ThemeProvider.default;
      }
    });
    Object.defineProperty(exports2, "borders", {
      enumerable: true,
      get: function() {
        return _borders.default;
      }
    });
    Object.defineProperty(exports2, "breakpoints", {
      enumerable: true,
      get: function() {
        return _breakpoints.default;
      }
    });
    Object.defineProperty(exports2, "compose", {
      enumerable: true,
      get: function() {
        return _compose.default;
      }
    });
    Object.defineProperty(exports2, "createBox", {
      enumerable: true,
      get: function() {
        return _createBox.default;
      }
    });
    Object.defineProperty(exports2, "createBreakpoints", {
      enumerable: true,
      get: function() {
        return _createBreakpoints.default;
      }
    });
    Object.defineProperty(exports2, "createContainer", {
      enumerable: true,
      get: function() {
        return _createContainer.default;
      }
    });
    Object.defineProperty(exports2, "createSpacing", {
      enumerable: true,
      get: function() {
        return _createSpacing.default;
      }
    });
    Object.defineProperty(exports2, "createStyled", {
      enumerable: true,
      get: function() {
        return _createStyled.default;
      }
    });
    Object.defineProperty(exports2, "createTheme", {
      enumerable: true,
      get: function() {
        return _createTheme.default;
      }
    });
    Object.defineProperty(exports2, "css", {
      enumerable: true,
      get: function() {
        return _styledEngine.css;
      }
    });
    Object.defineProperty(exports2, "cssContainerQueries", {
      enumerable: true,
      get: function() {
        return _cssContainerQueries.default;
      }
    });
    Object.defineProperty(exports2, "display", {
      enumerable: true,
      get: function() {
        return _display.default;
      }
    });
    exports2.experimental_sx = experimental_sx;
    Object.defineProperty(exports2, "flexbox", {
      enumerable: true,
      get: function() {
        return _flexbox.default;
      }
    });
    Object.defineProperty(exports2, "getPath", {
      enumerable: true,
      get: function() {
        return _style.getPath;
      }
    });
    Object.defineProperty(exports2, "getStyleValue", {
      enumerable: true,
      get: function() {
        return _style.getStyleValue;
      }
    });
    Object.defineProperty(exports2, "getThemeProps", {
      enumerable: true,
      get: function() {
        return _useThemeProps.getThemeProps;
      }
    });
    Object.defineProperty(exports2, "grid", {
      enumerable: true,
      get: function() {
        return _cssGrid.default;
      }
    });
    Object.defineProperty(exports2, "handleBreakpoints", {
      enumerable: true,
      get: function() {
        return _breakpoints.handleBreakpoints;
      }
    });
    Object.defineProperty(exports2, "keyframes", {
      enumerable: true,
      get: function() {
        return _styledEngine.keyframes;
      }
    });
    Object.defineProperty(exports2, "mergeBreakpointsInOrder", {
      enumerable: true,
      get: function() {
        return _breakpoints.mergeBreakpointsInOrder;
      }
    });
    Object.defineProperty(exports2, "palette", {
      enumerable: true,
      get: function() {
        return _palette.default;
      }
    });
    Object.defineProperty(exports2, "positions", {
      enumerable: true,
      get: function() {
        return _positions.default;
      }
    });
    Object.defineProperty(exports2, "responsivePropType", {
      enumerable: true,
      get: function() {
        return _responsivePropType.default;
      }
    });
    Object.defineProperty(exports2, "shadows", {
      enumerable: true,
      get: function() {
        return _shadows.default;
      }
    });
    Object.defineProperty(exports2, "shape", {
      enumerable: true,
      get: function() {
        return _shape.default;
      }
    });
    Object.defineProperty(exports2, "sizing", {
      enumerable: true,
      get: function() {
        return _sizing.default;
      }
    });
    Object.defineProperty(exports2, "spacing", {
      enumerable: true,
      get: function() {
        return _spacing.default;
      }
    });
    Object.defineProperty(exports2, "style", {
      enumerable: true,
      get: function() {
        return _style.default;
      }
    });
    Object.defineProperty(exports2, "styled", {
      enumerable: true,
      get: function() {
        return _styled.default;
      }
    });
    Object.defineProperty(exports2, "typography", {
      enumerable: true,
      get: function() {
        return _typography.default;
      }
    });
    Object.defineProperty(exports2, "unstable_createCssVarsProvider", {
      enumerable: true,
      get: function() {
        return _createCssVarsProvider.default;
      }
    });
    Object.defineProperty(exports2, "unstable_createCssVarsTheme", {
      enumerable: true,
      get: function() {
        return _createCssVarsTheme.default;
      }
    });
    Object.defineProperty(exports2, "unstable_createGetCssVar", {
      enumerable: true,
      get: function() {
        return _createGetCssVar.default;
      }
    });
    Object.defineProperty(exports2, "unstable_createStyleFunctionSx", {
      enumerable: true,
      get: function() {
        return _styleFunctionSx.unstable_createStyleFunctionSx;
      }
    });
    Object.defineProperty(exports2, "unstable_cssVarsParser", {
      enumerable: true,
      get: function() {
        return _cssVarsParser.default;
      }
    });
    Object.defineProperty(exports2, "unstable_defaultSxConfig", {
      enumerable: true,
      get: function() {
        return _styleFunctionSx.unstable_defaultSxConfig;
      }
    });
    Object.defineProperty(exports2, "unstable_extendSxProp", {
      enumerable: true,
      get: function() {
        return _styleFunctionSx.extendSxProp;
      }
    });
    Object.defineProperty(exports2, "unstable_getThemeValue", {
      enumerable: true,
      get: function() {
        return _getThemeValue.default;
      }
    });
    Object.defineProperty(exports2, "unstable_memoTheme", {
      enumerable: true,
      get: function() {
        return _memoTheme.default;
      }
    });
    Object.defineProperty(exports2, "unstable_prepareCssVars", {
      enumerable: true,
      get: function() {
        return _prepareCssVars.default;
      }
    });
    Object.defineProperty(exports2, "unstable_resolveBreakpointValues", {
      enumerable: true,
      get: function() {
        return _breakpoints.resolveBreakpointValues;
      }
    });
    Object.defineProperty(exports2, "unstable_styleFunctionSx", {
      enumerable: true,
      get: function() {
        return _styleFunctionSx.default;
      }
    });
    Object.defineProperty(exports2, "useMediaQuery", {
      enumerable: true,
      get: function() {
        return _useMediaQuery.default;
      }
    });
    Object.defineProperty(exports2, "useTheme", {
      enumerable: true,
      get: function() {
        return _useTheme.default;
      }
    });
    Object.defineProperty(exports2, "useThemeProps", {
      enumerable: true,
      get: function() {
        return _useThemeProps.default;
      }
    });
    Object.defineProperty(exports2, "useThemeWithoutDefault", {
      enumerable: true,
      get: function() {
        return _useThemeWithoutDefault.default;
      }
    });
    var _formatMuiErrorMessage2 = _interopRequireDefault(require_formatMuiErrorMessage2());
    var _styledEngine = require_node();
    var _GlobalStyles = _interopRequireDefault(require_GlobalStyles4());
    var _borders = _interopRequireWildcard(require_borders2());
    Object.keys(_borders).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _borders[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _borders[key];
        }
      });
    });
    var _breakpoints = _interopRequireWildcard(require_breakpoints2());
    var _cssContainerQueries = _interopRequireDefault(require_cssContainerQueries2());
    var _compose = _interopRequireDefault(require_compose2());
    var _display = _interopRequireDefault(require_display2());
    var _flexbox = _interopRequireWildcard(require_flexbox2());
    Object.keys(_flexbox).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _flexbox[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _flexbox[key];
        }
      });
    });
    var _cssGrid = _interopRequireWildcard(require_cssGrid2());
    Object.keys(_cssGrid).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _cssGrid[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _cssGrid[key];
        }
      });
    });
    var _palette = _interopRequireWildcard(require_palette2());
    Object.keys(_palette).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _palette[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _palette[key];
        }
      });
    });
    var _positions = _interopRequireWildcard(require_positions2());
    Object.keys(_positions).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _positions[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _positions[key];
        }
      });
    });
    var _shadows = _interopRequireDefault(require_shadows2());
    var _sizing = _interopRequireWildcard(require_sizing2());
    Object.keys(_sizing).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _sizing[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _sizing[key];
        }
      });
    });
    var _spacing = _interopRequireWildcard(require_spacing2());
    Object.keys(_spacing).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _spacing[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _spacing[key];
        }
      });
    });
    var _style = _interopRequireWildcard(require_style2());
    var _typography = _interopRequireWildcard(require_typography2());
    Object.keys(_typography).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _typography[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _typography[key];
        }
      });
    });
    var _styleFunctionSx = _interopRequireWildcard(require_styleFunctionSx2());
    var _getThemeValue = _interopRequireDefault(require_getThemeValue2());
    var _Box = _interopRequireDefault(require_Box2());
    var _createBox = _interopRequireDefault(require_createBox2());
    var _createStyled = _interopRequireWildcard(require_createStyled2());
    Object.keys(_createStyled).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _createStyled[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _createStyled[key];
        }
      });
    });
    var _styled = _interopRequireDefault(require_styled2());
    var _createTheme = _interopRequireDefault(require_createTheme2());
    var _createBreakpoints = _interopRequireDefault(require_createBreakpoints());
    var _createSpacing = _interopRequireDefault(require_createSpacing());
    var _shape = _interopRequireDefault(require_shape());
    var _useThemeProps = _interopRequireWildcard(require_useThemeProps2());
    var _useTheme = _interopRequireDefault(require_useTheme2());
    var _useThemeWithoutDefault = _interopRequireDefault(require_useThemeWithoutDefault2());
    var _useMediaQuery = _interopRequireDefault(require_useMediaQuery2());
    var _colorManipulator = require_colorManipulator2();
    Object.keys(_colorManipulator).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _colorManipulator[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _colorManipulator[key];
        }
      });
    });
    var _ThemeProvider = _interopRequireDefault(require_ThemeProvider4());
    var _memoTheme = _interopRequireDefault(require_memoTheme());
    var _createCssVarsProvider = _interopRequireDefault(require_createCssVarsProvider());
    var _createGetCssVar = _interopRequireDefault(require_createGetCssVar());
    var _cssVarsParser = _interopRequireDefault(require_cssVarsParser());
    var _prepareCssVars = _interopRequireDefault(require_prepareCssVars());
    var _createCssVarsTheme = _interopRequireDefault(require_createCssVarsTheme());
    var _responsivePropType = _interopRequireDefault(require_responsivePropType2());
    var _RtlProvider = _interopRequireWildcard(require_RtlProvider());
    Object.keys(_RtlProvider).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _RtlProvider[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _RtlProvider[key];
        }
      });
    });
    var _version = require_version();
    Object.keys(_version).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _version[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _version[key];
        }
      });
    });
    var _createContainer = _interopRequireDefault(require_createContainer());
    var _Container = _interopRequireWildcard(require_Container2());
    Object.keys(_Container).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _Container[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _Container[key];
        }
      });
    });
    var _Grid = _interopRequireDefault(require_Grid());
    var _Grid2 = require_Grid2();
    Object.keys(_Grid2).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _Grid2[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _Grid2[key];
        }
      });
    });
    var _Stack = _interopRequireDefault(require_Stack());
    var _Stack2 = require_Stack2();
    Object.keys(_Stack2).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _Stack2[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _Stack2[key];
        }
      });
    });
    function experimental_sx() {
      throw new Error(define_process_env_default.NODE_ENV !== "production" ? "MUI: The `experimental_sx` has been moved to `theme.unstable_sx`.For more details, see https://github.com/mui/material-ui/pull/35150." : (0, _formatMuiErrorMessage2.default)(19));
    }
  }
});

// node_modules/@mui/material/node/className/index.js
var require_className = __commonJS({
  "node_modules/@mui/material/node/className/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "unstable_ClassNameGenerator", {
      enumerable: true,
      get: function() {
        return _utils.unstable_ClassNameGenerator;
      }
    });
    var _utils = require_utils();
  }
});

// node_modules/@mui/material/node/styles/identifier.js
var require_identifier = __commonJS({
  "node_modules/@mui/material/node/styles/identifier.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _default = exports2.default = "$$material";
  }
});

// node_modules/@mui/material/node/styles/adaptV4Theme.js
var require_adaptV4Theme = __commonJS({
  "node_modules/@mui/material/node/styles/adaptV4Theme.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = adaptV4Theme;
    var _system = require_system();
    function adaptV4Theme(inputTheme) {
      if (define_process_env_default.NODE_ENV !== "production") {
        console.warn(["MUI: adaptV4Theme() is deprecated.", "Follow the upgrade guide on https://mui.com/r/migration-v4#theme."].join("\n"));
      }
      const {
        defaultProps = {},
        mixins = {},
        overrides = {},
        palette = {},
        props = {},
        styleOverrides = {},
        ...other
      } = inputTheme;
      const theme2 = {
        ...other,
        components: {}
      };
      Object.keys(defaultProps).forEach((component) => {
        const componentValue = theme2.components[component] || {};
        componentValue.defaultProps = defaultProps[component];
        theme2.components[component] = componentValue;
      });
      Object.keys(props).forEach((component) => {
        const componentValue = theme2.components[component] || {};
        componentValue.defaultProps = props[component];
        theme2.components[component] = componentValue;
      });
      Object.keys(styleOverrides).forEach((component) => {
        const componentValue = theme2.components[component] || {};
        componentValue.styleOverrides = styleOverrides[component];
        theme2.components[component] = componentValue;
      });
      Object.keys(overrides).forEach((component) => {
        const componentValue = theme2.components[component] || {};
        componentValue.styleOverrides = overrides[component];
        theme2.components[component] = componentValue;
      });
      theme2.spacing = (0, _system.createSpacing)(inputTheme.spacing);
      const breakpoints = (0, _system.createBreakpoints)(inputTheme.breakpoints || {});
      const spacing = theme2.spacing;
      theme2.mixins = {
        gutters: (styles = {}) => {
          return {
            paddingLeft: spacing(2),
            paddingRight: spacing(2),
            ...styles,
            [breakpoints.up("sm")]: {
              paddingLeft: spacing(3),
              paddingRight: spacing(3),
              ...styles[breakpoints.up("sm")]
            }
          };
        },
        ...mixins
      };
      const {
        type: typeInput,
        mode: modeInput,
        ...paletteRest
      } = palette;
      const finalMode = modeInput || typeInput || "light";
      theme2.palette = {
        // theme.palette.text.hint
        text: {
          hint: finalMode === "dark" ? "rgba(255, 255, 255, 0.5)" : "rgba(0, 0, 0, 0.38)"
        },
        mode: finalMode,
        type: finalMode,
        ...paletteRest
      };
      return theme2;
    }
  }
});

// node_modules/@mui/material/node_modules/@mui/system/createBreakpoints/index.js
var require_createBreakpoints2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/createBreakpoints/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "unstable_createBreakpoints", {
      enumerable: true,
      get: function() {
        return _createBreakpoints.default;
      }
    });
    var _createBreakpoints = _interopRequireDefault(require_createBreakpoints());
  }
});

// node_modules/@mui/material/node/colors/common.js
var require_common = __commonJS({
  "node_modules/@mui/material/node/colors/common.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var common = {
      black: "#000",
      white: "#fff"
    };
    var _default = exports2.default = common;
  }
});

// node_modules/@mui/material/node/colors/grey.js
var require_grey = __commonJS({
  "node_modules/@mui/material/node/colors/grey.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var grey = {
      50: "#fafafa",
      100: "#f5f5f5",
      200: "#eeeeee",
      300: "#e0e0e0",
      400: "#bdbdbd",
      500: "#9e9e9e",
      600: "#757575",
      700: "#616161",
      800: "#424242",
      900: "#212121",
      A100: "#f5f5f5",
      A200: "#eeeeee",
      A400: "#bdbdbd",
      A700: "#616161"
    };
    var _default = exports2.default = grey;
  }
});

// node_modules/@mui/material/node/colors/purple.js
var require_purple = __commonJS({
  "node_modules/@mui/material/node/colors/purple.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var purple = {
      50: "#f3e5f5",
      100: "#e1bee7",
      200: "#ce93d8",
      300: "#ba68c8",
      400: "#ab47bc",
      500: "#9c27b0",
      600: "#8e24aa",
      700: "#7b1fa2",
      800: "#6a1b9a",
      900: "#4a148c",
      A100: "#ea80fc",
      A200: "#e040fb",
      A400: "#d500f9",
      A700: "#aa00ff"
    };
    var _default = exports2.default = purple;
  }
});

// node_modules/@mui/material/node/colors/red.js
var require_red = __commonJS({
  "node_modules/@mui/material/node/colors/red.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var red = {
      50: "#ffebee",
      100: "#ffcdd2",
      200: "#ef9a9a",
      300: "#e57373",
      400: "#ef5350",
      500: "#f44336",
      600: "#e53935",
      700: "#d32f2f",
      800: "#c62828",
      900: "#b71c1c",
      A100: "#ff8a80",
      A200: "#ff5252",
      A400: "#ff1744",
      A700: "#d50000"
    };
    var _default = exports2.default = red;
  }
});

// node_modules/@mui/material/node/colors/orange.js
var require_orange = __commonJS({
  "node_modules/@mui/material/node/colors/orange.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var orange = {
      50: "#fff3e0",
      100: "#ffe0b2",
      200: "#ffcc80",
      300: "#ffb74d",
      400: "#ffa726",
      500: "#ff9800",
      600: "#fb8c00",
      700: "#f57c00",
      800: "#ef6c00",
      900: "#e65100",
      A100: "#ffd180",
      A200: "#ffab40",
      A400: "#ff9100",
      A700: "#ff6d00"
    };
    var _default = exports2.default = orange;
  }
});

// node_modules/@mui/material/node/colors/blue.js
var require_blue = __commonJS({
  "node_modules/@mui/material/node/colors/blue.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var blue = {
      50: "#e3f2fd",
      100: "#bbdefb",
      200: "#90caf9",
      300: "#64b5f6",
      400: "#42a5f5",
      500: "#2196f3",
      600: "#1e88e5",
      700: "#1976d2",
      800: "#1565c0",
      900: "#0d47a1",
      A100: "#82b1ff",
      A200: "#448aff",
      A400: "#2979ff",
      A700: "#2962ff"
    };
    var _default = exports2.default = blue;
  }
});

// node_modules/@mui/material/node/colors/lightBlue.js
var require_lightBlue = __commonJS({
  "node_modules/@mui/material/node/colors/lightBlue.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var lightBlue = {
      50: "#e1f5fe",
      100: "#b3e5fc",
      200: "#81d4fa",
      300: "#4fc3f7",
      400: "#29b6f6",
      500: "#03a9f4",
      600: "#039be5",
      700: "#0288d1",
      800: "#0277bd",
      900: "#01579b",
      A100: "#80d8ff",
      A200: "#40c4ff",
      A400: "#00b0ff",
      A700: "#0091ea"
    };
    var _default = exports2.default = lightBlue;
  }
});

// node_modules/@mui/material/node/colors/green.js
var require_green = __commonJS({
  "node_modules/@mui/material/node/colors/green.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var green = {
      50: "#e8f5e9",
      100: "#c8e6c9",
      200: "#a5d6a7",
      300: "#81c784",
      400: "#66bb6a",
      500: "#4caf50",
      600: "#43a047",
      700: "#388e3c",
      800: "#2e7d32",
      900: "#1b5e20",
      A100: "#b9f6ca",
      A200: "#69f0ae",
      A400: "#00e676",
      A700: "#00c853"
    };
    var _default = exports2.default = green;
  }
});

// node_modules/@mui/material/node/styles/createPalette.js
var require_createPalette = __commonJS({
  "node_modules/@mui/material/node/styles/createPalette.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.dark = void 0;
    exports2.default = createPalette;
    exports2.light = void 0;
    var _formatMuiErrorMessage2 = _interopRequireDefault(require_formatMuiErrorMessage2());
    var _deepmerge = _interopRequireDefault(require_deepmerge2());
    var _colorManipulator = require_colorManipulator2();
    var _common = _interopRequireDefault(require_common());
    var _grey = _interopRequireDefault(require_grey());
    var _purple = _interopRequireDefault(require_purple());
    var _red = _interopRequireDefault(require_red());
    var _orange = _interopRequireDefault(require_orange());
    var _blue = _interopRequireDefault(require_blue());
    var _lightBlue = _interopRequireDefault(require_lightBlue());
    var _green = _interopRequireDefault(require_green());
    function getLight() {
      return {
        // The colors used to style the text.
        text: {
          // The most important text.
          primary: "rgba(0, 0, 0, 0.87)",
          // Secondary text.
          secondary: "rgba(0, 0, 0, 0.6)",
          // Disabled text have even lower visual prominence.
          disabled: "rgba(0, 0, 0, 0.38)"
        },
        // The color used to divide different elements.
        divider: "rgba(0, 0, 0, 0.12)",
        // The background colors used to style the surfaces.
        // Consistency between these values is important.
        background: {
          paper: _common.default.white,
          default: _common.default.white
        },
        // The colors used to style the action elements.
        action: {
          // The color of an active action like an icon button.
          active: "rgba(0, 0, 0, 0.54)",
          // The color of an hovered action.
          hover: "rgba(0, 0, 0, 0.04)",
          hoverOpacity: 0.04,
          // The color of a selected action.
          selected: "rgba(0, 0, 0, 0.08)",
          selectedOpacity: 0.08,
          // The color of a disabled action.
          disabled: "rgba(0, 0, 0, 0.26)",
          // The background color of a disabled action.
          disabledBackground: "rgba(0, 0, 0, 0.12)",
          disabledOpacity: 0.38,
          focus: "rgba(0, 0, 0, 0.12)",
          focusOpacity: 0.12,
          activatedOpacity: 0.12
        }
      };
    }
    var light = exports2.light = getLight();
    function getDark() {
      return {
        text: {
          primary: _common.default.white,
          secondary: "rgba(255, 255, 255, 0.7)",
          disabled: "rgba(255, 255, 255, 0.5)",
          icon: "rgba(255, 255, 255, 0.5)"
        },
        divider: "rgba(255, 255, 255, 0.12)",
        background: {
          paper: "#121212",
          default: "#121212"
        },
        action: {
          active: _common.default.white,
          hover: "rgba(255, 255, 255, 0.08)",
          hoverOpacity: 0.08,
          selected: "rgba(255, 255, 255, 0.16)",
          selectedOpacity: 0.16,
          disabled: "rgba(255, 255, 255, 0.3)",
          disabledBackground: "rgba(255, 255, 255, 0.12)",
          disabledOpacity: 0.38,
          focus: "rgba(255, 255, 255, 0.12)",
          focusOpacity: 0.12,
          activatedOpacity: 0.24
        }
      };
    }
    var dark = exports2.dark = getDark();
    function addLightOrDark(intent, direction, shade, tonalOffset) {
      const tonalOffsetLight = tonalOffset.light || tonalOffset;
      const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
      if (!intent[direction]) {
        if (intent.hasOwnProperty(shade)) {
          intent[direction] = intent[shade];
        } else if (direction === "light") {
          intent.light = (0, _colorManipulator.lighten)(intent.main, tonalOffsetLight);
        } else if (direction === "dark") {
          intent.dark = (0, _colorManipulator.darken)(intent.main, tonalOffsetDark);
        }
      }
    }
    function getDefaultPrimary(mode = "light") {
      if (mode === "dark") {
        return {
          main: _blue.default[200],
          light: _blue.default[50],
          dark: _blue.default[400]
        };
      }
      return {
        main: _blue.default[700],
        light: _blue.default[400],
        dark: _blue.default[800]
      };
    }
    function getDefaultSecondary(mode = "light") {
      if (mode === "dark") {
        return {
          main: _purple.default[200],
          light: _purple.default[50],
          dark: _purple.default[400]
        };
      }
      return {
        main: _purple.default[500],
        light: _purple.default[300],
        dark: _purple.default[700]
      };
    }
    function getDefaultError(mode = "light") {
      if (mode === "dark") {
        return {
          main: _red.default[500],
          light: _red.default[300],
          dark: _red.default[700]
        };
      }
      return {
        main: _red.default[700],
        light: _red.default[400],
        dark: _red.default[800]
      };
    }
    function getDefaultInfo(mode = "light") {
      if (mode === "dark") {
        return {
          main: _lightBlue.default[400],
          light: _lightBlue.default[300],
          dark: _lightBlue.default[700]
        };
      }
      return {
        main: _lightBlue.default[700],
        light: _lightBlue.default[500],
        dark: _lightBlue.default[900]
      };
    }
    function getDefaultSuccess(mode = "light") {
      if (mode === "dark") {
        return {
          main: _green.default[400],
          light: _green.default[300],
          dark: _green.default[700]
        };
      }
      return {
        main: _green.default[800],
        light: _green.default[500],
        dark: _green.default[900]
      };
    }
    function getDefaultWarning(mode = "light") {
      if (mode === "dark") {
        return {
          main: _orange.default[400],
          light: _orange.default[300],
          dark: _orange.default[700]
        };
      }
      return {
        main: "#ed6c02",
        // closest to orange[800] that pass 3:1.
        light: _orange.default[500],
        dark: _orange.default[900]
      };
    }
    function createPalette(palette) {
      const {
        mode = "light",
        contrastThreshold = 3,
        tonalOffset = 0.2,
        ...other
      } = palette;
      const primary = palette.primary || getDefaultPrimary(mode);
      const secondary = palette.secondary || getDefaultSecondary(mode);
      const error = palette.error || getDefaultError(mode);
      const info = palette.info || getDefaultInfo(mode);
      const success = palette.success || getDefaultSuccess(mode);
      const warning = palette.warning || getDefaultWarning(mode);
      function getContrastText(background) {
        const contrastText = (0, _colorManipulator.getContrastRatio)(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
        if (define_process_env_default.NODE_ENV !== "production") {
          const contrast = (0, _colorManipulator.getContrastRatio)(background, contrastText);
          if (contrast < 3) {
            console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, "falls below the WCAG recommended absolute minimum contrast ratio of 3:1.", "https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast"].join("\n"));
          }
        }
        return contrastText;
      }
      const augmentColor = ({
        color,
        name,
        mainShade = 500,
        lightShade = 300,
        darkShade = 700
      }) => {
        color = {
          ...color
        };
        if (!color.main && color[mainShade]) {
          color.main = color[mainShade];
        }
        if (!color.hasOwnProperty("main")) {
          throw new Error(define_process_env_default.NODE_ENV !== "production" ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${mainShade}\` property.` : (0, _formatMuiErrorMessage2.default)(11, name ? ` (${name})` : "", mainShade));
        }
        if (typeof color.main !== "string") {
          throw new Error(define_process_env_default.NODE_ENV !== "production" ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(color.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });` : (0, _formatMuiErrorMessage2.default)(12, name ? ` (${name})` : "", JSON.stringify(color.main)));
        }
        addLightOrDark(color, "light", lightShade, tonalOffset);
        addLightOrDark(color, "dark", darkShade, tonalOffset);
        if (!color.contrastText) {
          color.contrastText = getContrastText(color.main);
        }
        return color;
      };
      let modeHydrated;
      if (mode === "light") {
        modeHydrated = getLight();
      } else if (mode === "dark") {
        modeHydrated = getDark();
      }
      if (define_process_env_default.NODE_ENV !== "production") {
        if (!modeHydrated) {
          console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
        }
      }
      const paletteOutput = (0, _deepmerge.default)({
        // A collection of common colors.
        common: {
          ..._common.default
        },
        // prevent mutable object.
        // The palette mode, can be light or dark.
        mode,
        // The colors used to represent primary interface elements for a user.
        primary: augmentColor({
          color: primary,
          name: "primary"
        }),
        // The colors used to represent secondary interface elements for a user.
        secondary: augmentColor({
          color: secondary,
          name: "secondary",
          mainShade: "A400",
          lightShade: "A200",
          darkShade: "A700"
        }),
        // The colors used to represent interface elements that the user should be made aware of.
        error: augmentColor({
          color: error,
          name: "error"
        }),
        // The colors used to represent potentially dangerous actions or important messages.
        warning: augmentColor({
          color: warning,
          name: "warning"
        }),
        // The colors used to present information to the user that is neutral and not necessarily important.
        info: augmentColor({
          color: info,
          name: "info"
        }),
        // The colors used to indicate the successful completion of an action that user triggered.
        success: augmentColor({
          color: success,
          name: "success"
        }),
        // The grey colors.
        grey: _grey.default,
        // Used by `getContrastText()` to maximize the contrast between
        // the background and the text.
        contrastThreshold,
        // Takes a background color and returns the text color that maximizes the contrast.
        getContrastText,
        // Generate a rich color object.
        augmentColor,
        // Used by the functions below to shift a color's luminance by approximately
        // two indexes within its tonal palette.
        // E.g., shift from Red 500 to Red 300 or Red 700.
        tonalOffset,
        // The light and dark mode object.
        ...modeHydrated
      }, other);
      return paletteOutput;
    }
  }
});

// node_modules/@mui/material/node_modules/@mui/system/cssVars/prepareTypographyVars.js
var require_prepareTypographyVars = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/cssVars/prepareTypographyVars.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = prepareTypographyVars;
    function prepareTypographyVars(typography) {
      const vars = {};
      const entries = Object.entries(typography);
      entries.forEach((entry) => {
        const [key, value] = entry;
        if (typeof value === "object") {
          vars[key] = `${value.fontStyle ? `${value.fontStyle} ` : ""}${value.fontVariant ? `${value.fontVariant} ` : ""}${value.fontWeight ? `${value.fontWeight} ` : ""}${value.fontStretch ? `${value.fontStretch} ` : ""}${value.fontSize || ""}${value.lineHeight ? `/${value.lineHeight} ` : ""}${value.fontFamily || ""}`;
        }
      });
      return vars;
    }
  }
});

// node_modules/@mui/material/node_modules/@mui/system/cssVars/index.js
var require_cssVars = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/cssVars/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "createCssVarsTheme", {
      enumerable: true,
      get: function() {
        return _createCssVarsTheme.default;
      }
    });
    Object.defineProperty(exports2, "createGetColorSchemeSelector", {
      enumerable: true,
      get: function() {
        return _getColorSchemeSelector.createGetColorSchemeSelector;
      }
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _createCssVarsProvider.default;
      }
    });
    Object.defineProperty(exports2, "prepareCssVars", {
      enumerable: true,
      get: function() {
        return _prepareCssVars.default;
      }
    });
    Object.defineProperty(exports2, "prepareTypographyVars", {
      enumerable: true,
      get: function() {
        return _prepareTypographyVars.default;
      }
    });
    var _createCssVarsProvider = _interopRequireDefault(require_createCssVarsProvider());
    var _prepareCssVars = _interopRequireDefault(require_prepareCssVars());
    var _prepareTypographyVars = _interopRequireDefault(require_prepareTypographyVars());
    var _createCssVarsTheme = _interopRequireDefault(require_createCssVarsTheme());
    var _getColorSchemeSelector = require_getColorSchemeSelector();
  }
});

// node_modules/@mui/material/node/styles/createMixins.js
var require_createMixins = __commonJS({
  "node_modules/@mui/material/node/styles/createMixins.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = createMixins;
    function createMixins(breakpoints, mixins) {
      return {
        toolbar: {
          minHeight: 56,
          [breakpoints.up("xs")]: {
            "@media (orientation: landscape)": {
              minHeight: 48
            }
          },
          [breakpoints.up("sm")]: {
            minHeight: 64
          }
        },
        ...mixins
      };
    }
  }
});

// node_modules/@mui/material/node/styles/createTypography.js
var require_createTypography = __commonJS({
  "node_modules/@mui/material/node/styles/createTypography.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = createTypography;
    var _deepmerge = _interopRequireDefault(require_deepmerge2());
    function round(value) {
      return Math.round(value * 1e5) / 1e5;
    }
    var caseAllCaps = {
      textTransform: "uppercase"
    };
    var defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
    function createTypography(palette, typography) {
      const {
        fontFamily = defaultFontFamily,
        // The default font size of the Material Specification.
        fontSize = 14,
        // px
        fontWeightLight = 300,
        fontWeightRegular = 400,
        fontWeightMedium = 500,
        fontWeightBold = 700,
        // Tell MUI what's the font-size on the html element.
        // 16px is the default font-size used by browsers.
        htmlFontSize = 16,
        // Apply the CSS properties to all the variants.
        allVariants,
        pxToRem: pxToRem2,
        ...other
      } = typeof typography === "function" ? typography(palette) : typography;
      if (define_process_env_default.NODE_ENV !== "production") {
        if (typeof fontSize !== "number") {
          console.error("MUI: `fontSize` is required to be a number.");
        }
        if (typeof htmlFontSize !== "number") {
          console.error("MUI: `htmlFontSize` is required to be a number.");
        }
      }
      const coef = fontSize / 14;
      const pxToRem = pxToRem2 || ((size) => `${size / htmlFontSize * coef}rem`);
      const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => ({
        fontFamily,
        fontWeight,
        fontSize: pxToRem(size),
        // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
        lineHeight,
        // The letter spacing was designed for the Roboto font-family. Using the same letter-spacing
        // across font-families can cause issues with the kerning.
        ...fontFamily === defaultFontFamily ? {
          letterSpacing: `${round(letterSpacing / size)}em`
        } : {},
        ...casing,
        ...allVariants
      });
      const variants = {
        h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
        h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
        h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
        h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
        h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
        h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
        subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
        subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
        body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
        body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
        button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
        caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
        overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps),
        // TODO v6: Remove handling of 'inherit' variant from the theme as it is already handled in Material UI's Typography component. Also, remember to remove the associated types.
        inherit: {
          fontFamily: "inherit",
          fontWeight: "inherit",
          fontSize: "inherit",
          lineHeight: "inherit",
          letterSpacing: "inherit"
        }
      };
      return (0, _deepmerge.default)({
        htmlFontSize,
        pxToRem,
        fontFamily,
        fontSize,
        fontWeightLight,
        fontWeightRegular,
        fontWeightMedium,
        fontWeightBold,
        ...variants
      }, other, {
        clone: false
        // No need to clone deep
      });
    }
  }
});

// node_modules/@mui/material/node/styles/shadows.js
var require_shadows3 = __commonJS({
  "node_modules/@mui/material/node/styles/shadows.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var shadowKeyUmbraOpacity = 0.2;
    var shadowKeyPenumbraOpacity = 0.14;
    var shadowAmbientShadowOpacity = 0.12;
    function createShadow(...px) {
      return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(",");
    }
    var shadows = ["none", createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
    var _default = exports2.default = shadows;
  }
});

// node_modules/@mui/material/node/styles/createTransitions.js
var require_createTransitions = __commonJS({
  "node_modules/@mui/material/node/styles/createTransitions.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = createTransitions;
    exports2.easing = exports2.duration = void 0;
    var easing = exports2.easing = {
      // This is the most common easing curve.
      easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
      // Objects enter the screen at full velocity from off-screen and
      // slowly decelerate to a resting point.
      easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
      // Objects leave the screen at full velocity. They do not decelerate when off-screen.
      easeIn: "cubic-bezier(0.4, 0, 1, 1)",
      // The sharp curve is used by objects that may return to the screen at any time.
      sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
    };
    var duration = exports2.duration = {
      shortest: 150,
      shorter: 200,
      short: 250,
      // most basic recommended timing
      standard: 300,
      // this is to be used in complex animations
      complex: 375,
      // recommended when something is entering screen
      enteringScreen: 225,
      // recommended when something is leaving screen
      leavingScreen: 195
    };
    function formatMs(milliseconds) {
      return `${Math.round(milliseconds)}ms`;
    }
    function getAutoHeightDuration(height) {
      if (!height) {
        return 0;
      }
      const constant = height / 36;
      return Math.min(Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10), 3e3);
    }
    function createTransitions(inputTransitions) {
      const mergedEasing = {
        ...easing,
        ...inputTransitions.easing
      };
      const mergedDuration = {
        ...duration,
        ...inputTransitions.duration
      };
      const create = (props = ["all"], options = {}) => {
        const {
          duration: durationOption = mergedDuration.standard,
          easing: easingOption = mergedEasing.easeInOut,
          delay = 0,
          ...other
        } = options;
        if (define_process_env_default.NODE_ENV !== "production") {
          const isString = (value) => typeof value === "string";
          const isNumber = (value) => !Number.isNaN(parseFloat(value));
          if (!isString(props) && !Array.isArray(props)) {
            console.error('MUI: Argument "props" must be a string or Array.');
          }
          if (!isNumber(durationOption) && !isString(durationOption)) {
            console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
          }
          if (!isString(easingOption)) {
            console.error('MUI: Argument "easing" must be a string.');
          }
          if (!isNumber(delay) && !isString(delay)) {
            console.error('MUI: Argument "delay" must be a number or a string.');
          }
          if (typeof options !== "object") {
            console.error(["MUI: Secong argument of transition.create must be an object.", "Arguments should be either `create('prop1', options)` or `create(['prop1', 'prop2'], options)`"].join("\n"));
          }
          if (Object.keys(other).length !== 0) {
            console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(",")}].`);
          }
        }
        return (Array.isArray(props) ? props : [props]).map((animatedProp) => `${animatedProp} ${typeof durationOption === "string" ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === "string" ? delay : formatMs(delay)}`).join(",");
      };
      return {
        getAutoHeightDuration,
        create,
        ...inputTransitions,
        easing: mergedEasing,
        duration: mergedDuration
      };
    }
  }
});

// node_modules/@mui/material/node/styles/zIndex.js
var require_zIndex = __commonJS({
  "node_modules/@mui/material/node/styles/zIndex.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var zIndex = {
      mobileStepper: 1e3,
      fab: 1050,
      speedDial: 1050,
      appBar: 1100,
      drawer: 1200,
      modal: 1300,
      snackbar: 1400,
      tooltip: 1500
    };
    var _default = exports2.default = zIndex;
  }
});

// node_modules/@mui/material/node/styles/stringifyTheme.js
var require_stringifyTheme = __commonJS({
  "node_modules/@mui/material/node/styles/stringifyTheme.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.stringifyTheme = stringifyTheme;
    var _deepmerge = require_deepmerge2();
    function isSerializable(val) {
      return (0, _deepmerge.isPlainObject)(val) || typeof val === "undefined" || typeof val === "string" || typeof val === "boolean" || typeof val === "number" || Array.isArray(val);
    }
    function stringifyTheme(baseTheme = {}) {
      const serializableTheme = {
        ...baseTheme
      };
      function serializeTheme(object) {
        const array = Object.entries(object);
        for (let index = 0; index < array.length; index++) {
          const [key, value] = array[index];
          if (!isSerializable(value) || key.startsWith("unstable_")) {
            delete object[key];
          } else if ((0, _deepmerge.isPlainObject)(value)) {
            object[key] = {
              ...value
            };
            serializeTheme(object[key]);
          }
        }
      }
      serializeTheme(serializableTheme);
      return `import { unstable_createBreakpoints as createBreakpoints, createTransitions } from '@mui/material/styles';

const theme = ${JSON.stringify(serializableTheme, null, 2)};

theme.breakpoints = createBreakpoints(theme.breakpoints || {});
theme.transitions = createTransitions(theme.transitions || {});

export default theme;`;
    }
  }
});

// node_modules/@mui/material/node/styles/createThemeNoVars.js
var require_createThemeNoVars = __commonJS({
  "node_modules/@mui/material/node/styles/createThemeNoVars.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.createMuiTheme = createMuiTheme;
    exports2.default = void 0;
    var _formatMuiErrorMessage2 = _interopRequireDefault(require_formatMuiErrorMessage2());
    var _deepmerge = _interopRequireDefault(require_deepmerge2());
    var _styleFunctionSx = _interopRequireWildcard(require_styleFunctionSx2());
    var _createTheme = _interopRequireDefault(require_createTheme2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    var _createMixins = _interopRequireDefault(require_createMixins());
    var _createPalette = _interopRequireDefault(require_createPalette());
    var _createTypography = _interopRequireDefault(require_createTypography());
    var _shadows = _interopRequireDefault(require_shadows3());
    var _createTransitions = _interopRequireDefault(require_createTransitions());
    var _zIndex = _interopRequireDefault(require_zIndex());
    var _stringifyTheme = require_stringifyTheme();
    function createThemeNoVars(options = {}, ...args) {
      const {
        breakpoints: breakpointsInput,
        mixins: mixinsInput = {},
        spacing: spacingInput,
        palette: paletteInput = {},
        transitions: transitionsInput = {},
        typography: typographyInput = {},
        shape: shapeInput,
        ...other
      } = options;
      if (options.vars && // The error should throw only for the root theme creation because user is not allowed to use a custom node `vars`.
      // `generateThemeVars` is the closest identifier for checking that the `options` is a result of `createTheme` with CSS variables so that user can create new theme for nested ThemeProvider.
      options.generateThemeVars === void 0) {
        throw new Error(define_process_env_default.NODE_ENV !== "production" ? "MUI: `vars` is a private field used for CSS variables support.\nPlease use another name or follow the [docs](https://mui.com/material-ui/customization/css-theme-variables/usage/) to enable the feature." : (0, _formatMuiErrorMessage2.default)(20));
      }
      const palette = (0, _createPalette.default)(paletteInput);
      const systemTheme = (0, _createTheme.default)(options);
      let muiTheme = (0, _deepmerge.default)(systemTheme, {
        mixins: (0, _createMixins.default)(systemTheme.breakpoints, mixinsInput),
        palette,
        // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
        shadows: _shadows.default.slice(),
        typography: (0, _createTypography.default)(palette, typographyInput),
        transitions: (0, _createTransitions.default)(transitionsInput),
        zIndex: {
          ..._zIndex.default
        }
      });
      muiTheme = (0, _deepmerge.default)(muiTheme, other);
      muiTheme = args.reduce((acc, argument) => (0, _deepmerge.default)(acc, argument), muiTheme);
      if (define_process_env_default.NODE_ENV !== "production") {
        const stateClasses = ["active", "checked", "completed", "disabled", "error", "expanded", "focused", "focusVisible", "required", "selected"];
        const traverse = (node2, component) => {
          let key;
          for (key in node2) {
            const child = node2[key];
            if (stateClasses.includes(key) && Object.keys(child).length > 0) {
              if (define_process_env_default.NODE_ENV !== "production") {
                const stateClass = (0, _generateUtilityClass.default)("", key);
                console.error([`MUI: The \`${component}\` component increases the CSS specificity of the \`${key}\` internal state.`, "You can not override it like this: ", JSON.stringify(node2, null, 2), "", `Instead, you need to use the '&.${stateClass}' syntax:`, JSON.stringify({
                  root: {
                    [`&.${stateClass}`]: child
                  }
                }, null, 2), "", "https://mui.com/r/state-classes-guide"].join("\n"));
              }
              node2[key] = {};
            }
          }
        };
        Object.keys(muiTheme.components).forEach((component) => {
          const styleOverrides = muiTheme.components[component].styleOverrides;
          if (styleOverrides && component.startsWith("Mui")) {
            traverse(styleOverrides, component);
          }
        });
      }
      muiTheme.unstable_sxConfig = {
        ..._styleFunctionSx.unstable_defaultSxConfig,
        ...other?.unstable_sxConfig
      };
      muiTheme.unstable_sx = function sx(props) {
        return (0, _styleFunctionSx.default)({
          sx: props,
          theme: this
        });
      };
      muiTheme.toRuntimeSource = _stringifyTheme.stringifyTheme;
      return muiTheme;
    }
    var warnedOnce = false;
    function createMuiTheme(...args) {
      if (define_process_env_default.NODE_ENV !== "production") {
        if (!warnedOnce) {
          warnedOnce = true;
          console.error(["MUI: the createMuiTheme function was renamed to createTheme.", "", "You should use `import { createTheme } from '@mui/material/styles'`"].join("\n"));
        }
      }
      return createThemeNoVars(...args);
    }
    var _default = exports2.default = createThemeNoVars;
  }
});

// node_modules/@mui/material/node/styles/getOverlayAlpha.js
var require_getOverlayAlpha = __commonJS({
  "node_modules/@mui/material/node/styles/getOverlayAlpha.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getOverlayAlpha;
    function getOverlayAlpha(elevation) {
      let alphaValue;
      if (elevation < 1) {
        alphaValue = 5.11916 * elevation ** 2;
      } else {
        alphaValue = 4.5 * Math.log(elevation + 1) + 2;
      }
      return Math.round(alphaValue * 10) / 1e3;
    }
  }
});

// node_modules/@mui/material/node/styles/createColorScheme.js
var require_createColorScheme = __commonJS({
  "node_modules/@mui/material/node/styles/createColorScheme.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = createColorScheme;
    exports2.getOpacity = getOpacity;
    exports2.getOverlays = getOverlays;
    var _createPalette = _interopRequireDefault(require_createPalette());
    var _getOverlayAlpha = _interopRequireDefault(require_getOverlayAlpha());
    var defaultDarkOverlays = [...Array(25)].map((_, index) => {
      if (index === 0) {
        return "none";
      }
      const overlay = (0, _getOverlayAlpha.default)(index);
      return `linear-gradient(rgba(255 255 255 / ${overlay}), rgba(255 255 255 / ${overlay}))`;
    });
    function getOpacity(mode) {
      return {
        inputPlaceholder: mode === "dark" ? 0.5 : 0.42,
        inputUnderline: mode === "dark" ? 0.7 : 0.42,
        switchTrackDisabled: mode === "dark" ? 0.2 : 0.12,
        switchTrack: mode === "dark" ? 0.3 : 0.38
      };
    }
    function getOverlays(mode) {
      return mode === "dark" ? defaultDarkOverlays : [];
    }
    function createColorScheme(options) {
      const {
        palette: paletteInput = {
          mode: "light"
        },
        // need to cast to avoid module augmentation test
        opacity,
        overlays,
        ...rest
      } = options;
      const palette = (0, _createPalette.default)(paletteInput);
      return {
        palette,
        opacity: {
          ...getOpacity(palette.mode),
          ...opacity
        },
        overlays: overlays || getOverlays(palette.mode),
        ...rest
      };
    }
  }
});

// node_modules/@mui/material/node/styles/shouldSkipGeneratingVar.js
var require_shouldSkipGeneratingVar = __commonJS({
  "node_modules/@mui/material/node/styles/shouldSkipGeneratingVar.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = shouldSkipGeneratingVar;
    function shouldSkipGeneratingVar(keys) {
      return !!keys[0].match(/(cssVarPrefix|colorSchemeSelector|rootSelector|typography|mixins|breakpoints|direction|transitions)/) || !!keys[0].match(/sxConfig$/) || // ends with sxConfig
      keys[0] === "palette" && !!keys[1]?.match(/(mode|contrastThreshold|tonalOffset)/);
    }
  }
});

// node_modules/@mui/material/node/styles/excludeVariablesFromRoot.js
var require_excludeVariablesFromRoot = __commonJS({
  "node_modules/@mui/material/node/styles/excludeVariablesFromRoot.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var excludeVariablesFromRoot = (cssVarPrefix) => [...[...Array(25)].map((_, index) => `--${cssVarPrefix ? `${cssVarPrefix}-` : ""}overlays-${index}`), `--${cssVarPrefix ? `${cssVarPrefix}-` : ""}palette-AppBar-darkBg`, `--${cssVarPrefix ? `${cssVarPrefix}-` : ""}palette-AppBar-darkColor`];
    var _default = exports2.default = excludeVariablesFromRoot;
  }
});

// node_modules/@mui/material/node/styles/createGetSelector.js
var require_createGetSelector = __commonJS({
  "node_modules/@mui/material/node/styles/createGetSelector.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _excludeVariablesFromRoot = _interopRequireDefault(require_excludeVariablesFromRoot());
    var _default = (theme2) => (colorScheme, css2) => {
      const root = theme2.rootSelector || ":root";
      const selector = theme2.colorSchemeSelector;
      let rule = selector;
      if (selector === "class") {
        rule = ".%s";
      }
      if (selector === "data") {
        rule = "[data-%s]";
      }
      if (selector?.startsWith("data-") && !selector.includes("%s")) {
        rule = `[${selector}="%s"]`;
      }
      if (theme2.defaultColorScheme === colorScheme) {
        if (colorScheme === "dark") {
          const excludedVariables = {};
          (0, _excludeVariablesFromRoot.default)(theme2.cssVarPrefix).forEach((cssVar) => {
            excludedVariables[cssVar] = css2[cssVar];
            delete css2[cssVar];
          });
          if (rule === "media") {
            return {
              [root]: css2,
              [`@media (prefers-color-scheme: dark)`]: {
                [root]: excludedVariables
              }
            };
          }
          if (rule) {
            return {
              [rule.replace("%s", colorScheme)]: excludedVariables,
              [`${root}, ${rule.replace("%s", colorScheme)}`]: css2
            };
          }
          return {
            [root]: {
              ...css2,
              ...excludedVariables
            }
          };
        }
        if (rule && rule !== "media") {
          return `${root}, ${rule.replace("%s", String(colorScheme))}`;
        }
      } else if (colorScheme) {
        if (rule === "media") {
          return {
            [`@media (prefers-color-scheme: ${String(colorScheme)})`]: {
              [root]: css2
            }
          };
        }
        if (rule) {
          return rule.replace("%s", String(colorScheme));
        }
      }
      return root;
    };
    exports2.default = _default;
  }
});

// node_modules/@mui/material/node/styles/createThemeWithVars.js
var require_createThemeWithVars = __commonJS({
  "node_modules/@mui/material/node/styles/createThemeWithVars.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.createGetCssVar = void 0;
    exports2.default = createThemeWithVars;
    var _formatMuiErrorMessage2 = _interopRequireDefault(require_formatMuiErrorMessage2());
    var _deepmerge = _interopRequireDefault(require_deepmerge2());
    var _system = require_system();
    var _spacing = require_spacing2();
    var _cssVars = require_cssVars();
    var _styleFunctionSx = _interopRequireWildcard(require_styleFunctionSx2());
    var _colorManipulator = require_colorManipulator2();
    var _createThemeNoVars = _interopRequireDefault(require_createThemeNoVars());
    var _createColorScheme = _interopRequireWildcard(require_createColorScheme());
    var _shouldSkipGeneratingVar = _interopRequireDefault(require_shouldSkipGeneratingVar());
    var _createGetSelector = _interopRequireDefault(require_createGetSelector());
    var _stringifyTheme = require_stringifyTheme();
    function assignNode(obj, keys) {
      keys.forEach((k) => {
        if (!obj[k]) {
          obj[k] = {};
        }
      });
    }
    function setColor(obj, key, defaultValue) {
      if (!obj[key] && defaultValue) {
        obj[key] = defaultValue;
      }
    }
    function toRgb(color) {
      if (typeof color !== "string" || !color.startsWith("hsl")) {
        return color;
      }
      return (0, _colorManipulator.hslToRgb)(color);
    }
    function setColorChannel(obj, key) {
      if (!(`${key}Channel` in obj)) {
        obj[`${key}Channel`] = (0, _colorManipulator.private_safeColorChannel)(toRgb(obj[key]), `MUI: Can't create \`palette.${key}Channel\` because \`palette.${key}\` is not one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().
To suppress this warning, you need to explicitly provide the \`palette.${key}Channel\` as a string (in rgb format, for example "12 12 12") or undefined if you want to remove the channel token.`);
      }
    }
    function getSpacingVal(spacingInput) {
      if (typeof spacingInput === "number") {
        return `${spacingInput}px`;
      }
      if (typeof spacingInput === "string" || typeof spacingInput === "function" || Array.isArray(spacingInput)) {
        return spacingInput;
      }
      return "8px";
    }
    var silent = (fn) => {
      try {
        return fn();
      } catch (error) {
      }
      return void 0;
    };
    var createGetCssVar = (cssVarPrefix = "mui") => (0, _system.unstable_createGetCssVar)(cssVarPrefix);
    exports2.createGetCssVar = createGetCssVar;
    function attachColorScheme(colorSchemes, scheme, restTheme, colorScheme) {
      if (!scheme) {
        return void 0;
      }
      scheme = scheme === true ? {} : scheme;
      const mode = colorScheme === "dark" ? "dark" : "light";
      if (!restTheme) {
        colorSchemes[colorScheme] = (0, _createColorScheme.default)({
          ...scheme,
          palette: {
            mode,
            ...scheme?.palette
          }
        });
        return void 0;
      }
      const {
        palette,
        ...muiTheme
      } = (0, _createThemeNoVars.default)({
        ...restTheme,
        palette: {
          mode,
          ...scheme?.palette
        }
      });
      colorSchemes[colorScheme] = {
        ...scheme,
        palette,
        opacity: {
          ...(0, _createColorScheme.getOpacity)(mode),
          ...scheme?.opacity
        },
        overlays: scheme?.overlays || (0, _createColorScheme.getOverlays)(mode)
      };
      return muiTheme;
    }
    function createThemeWithVars(options = {}, ...args) {
      const {
        colorSchemes: colorSchemesInput = {
          light: true
        },
        defaultColorScheme: defaultColorSchemeInput,
        disableCssColorScheme = false,
        cssVarPrefix = "mui",
        shouldSkipGeneratingVar = _shouldSkipGeneratingVar.default,
        colorSchemeSelector: selector = colorSchemesInput.light && colorSchemesInput.dark ? "media" : void 0,
        rootSelector = ":root",
        ...input
      } = options;
      const firstColorScheme = Object.keys(colorSchemesInput)[0];
      const defaultColorScheme = defaultColorSchemeInput || (colorSchemesInput.light && firstColorScheme !== "light" ? "light" : firstColorScheme);
      const getCssVar = createGetCssVar(cssVarPrefix);
      const {
        [defaultColorScheme]: defaultSchemeInput,
        light: builtInLight,
        dark: builtInDark,
        ...customColorSchemes
      } = colorSchemesInput;
      const colorSchemes = {
        ...customColorSchemes
      };
      let defaultScheme = defaultSchemeInput;
      if (defaultColorScheme === "dark" && !("dark" in colorSchemesInput) || defaultColorScheme === "light" && !("light" in colorSchemesInput)) {
        defaultScheme = true;
      }
      if (!defaultScheme) {
        throw new Error(define_process_env_default.NODE_ENV !== "production" ? `MUI: The \`colorSchemes.${defaultColorScheme}\` option is either missing or invalid.` : (0, _formatMuiErrorMessage2.default)(21, defaultColorScheme));
      }
      const muiTheme = attachColorScheme(colorSchemes, defaultScheme, input, defaultColorScheme);
      if (builtInLight && !colorSchemes.light) {
        attachColorScheme(colorSchemes, builtInLight, void 0, "light");
      }
      if (builtInDark && !colorSchemes.dark) {
        attachColorScheme(colorSchemes, builtInDark, void 0, "dark");
      }
      let theme2 = {
        defaultColorScheme,
        ...muiTheme,
        cssVarPrefix,
        colorSchemeSelector: selector,
        rootSelector,
        getCssVar,
        colorSchemes,
        font: {
          ...(0, _cssVars.prepareTypographyVars)(muiTheme.typography),
          ...muiTheme.font
        },
        spacing: getSpacingVal(input.spacing)
      };
      Object.keys(theme2.colorSchemes).forEach((key) => {
        const palette = theme2.colorSchemes[key].palette;
        const setCssVarColor = (cssVar) => {
          const tokens = cssVar.split("-");
          const color = tokens[1];
          const colorToken = tokens[2];
          return getCssVar(cssVar, palette[color][colorToken]);
        };
        if (palette.mode === "light") {
          setColor(palette.common, "background", "#fff");
          setColor(palette.common, "onBackground", "#000");
        }
        if (palette.mode === "dark") {
          setColor(palette.common, "background", "#000");
          setColor(palette.common, "onBackground", "#fff");
        }
        assignNode(palette, ["Alert", "AppBar", "Avatar", "Button", "Chip", "FilledInput", "LinearProgress", "Skeleton", "Slider", "SnackbarContent", "SpeedDialAction", "StepConnector", "StepContent", "Switch", "TableCell", "Tooltip"]);
        if (palette.mode === "light") {
          setColor(palette.Alert, "errorColor", (0, _colorManipulator.private_safeDarken)(palette.error.light, 0.6));
          setColor(palette.Alert, "infoColor", (0, _colorManipulator.private_safeDarken)(palette.info.light, 0.6));
          setColor(palette.Alert, "successColor", (0, _colorManipulator.private_safeDarken)(palette.success.light, 0.6));
          setColor(palette.Alert, "warningColor", (0, _colorManipulator.private_safeDarken)(palette.warning.light, 0.6));
          setColor(palette.Alert, "errorFilledBg", setCssVarColor("palette-error-main"));
          setColor(palette.Alert, "infoFilledBg", setCssVarColor("palette-info-main"));
          setColor(palette.Alert, "successFilledBg", setCssVarColor("palette-success-main"));
          setColor(palette.Alert, "warningFilledBg", setCssVarColor("palette-warning-main"));
          setColor(palette.Alert, "errorFilledColor", silent(() => palette.getContrastText(palette.error.main)));
          setColor(palette.Alert, "infoFilledColor", silent(() => palette.getContrastText(palette.info.main)));
          setColor(palette.Alert, "successFilledColor", silent(() => palette.getContrastText(palette.success.main)));
          setColor(palette.Alert, "warningFilledColor", silent(() => palette.getContrastText(palette.warning.main)));
          setColor(palette.Alert, "errorStandardBg", (0, _colorManipulator.private_safeLighten)(palette.error.light, 0.9));
          setColor(palette.Alert, "infoStandardBg", (0, _colorManipulator.private_safeLighten)(palette.info.light, 0.9));
          setColor(palette.Alert, "successStandardBg", (0, _colorManipulator.private_safeLighten)(palette.success.light, 0.9));
          setColor(palette.Alert, "warningStandardBg", (0, _colorManipulator.private_safeLighten)(palette.warning.light, 0.9));
          setColor(palette.Alert, "errorIconColor", setCssVarColor("palette-error-main"));
          setColor(palette.Alert, "infoIconColor", setCssVarColor("palette-info-main"));
          setColor(palette.Alert, "successIconColor", setCssVarColor("palette-success-main"));
          setColor(palette.Alert, "warningIconColor", setCssVarColor("palette-warning-main"));
          setColor(palette.AppBar, "defaultBg", setCssVarColor("palette-grey-100"));
          setColor(palette.Avatar, "defaultBg", setCssVarColor("palette-grey-400"));
          setColor(palette.Button, "inheritContainedBg", setCssVarColor("palette-grey-300"));
          setColor(palette.Button, "inheritContainedHoverBg", setCssVarColor("palette-grey-A100"));
          setColor(palette.Chip, "defaultBorder", setCssVarColor("palette-grey-400"));
          setColor(palette.Chip, "defaultAvatarColor", setCssVarColor("palette-grey-700"));
          setColor(palette.Chip, "defaultIconColor", setCssVarColor("palette-grey-700"));
          setColor(palette.FilledInput, "bg", "rgba(0, 0, 0, 0.06)");
          setColor(palette.FilledInput, "hoverBg", "rgba(0, 0, 0, 0.09)");
          setColor(palette.FilledInput, "disabledBg", "rgba(0, 0, 0, 0.12)");
          setColor(palette.LinearProgress, "primaryBg", (0, _colorManipulator.private_safeLighten)(palette.primary.main, 0.62));
          setColor(palette.LinearProgress, "secondaryBg", (0, _colorManipulator.private_safeLighten)(palette.secondary.main, 0.62));
          setColor(palette.LinearProgress, "errorBg", (0, _colorManipulator.private_safeLighten)(palette.error.main, 0.62));
          setColor(palette.LinearProgress, "infoBg", (0, _colorManipulator.private_safeLighten)(palette.info.main, 0.62));
          setColor(palette.LinearProgress, "successBg", (0, _colorManipulator.private_safeLighten)(palette.success.main, 0.62));
          setColor(palette.LinearProgress, "warningBg", (0, _colorManipulator.private_safeLighten)(palette.warning.main, 0.62));
          setColor(palette.Skeleton, "bg", `rgba(${setCssVarColor("palette-text-primaryChannel")} / 0.11)`);
          setColor(palette.Slider, "primaryTrack", (0, _colorManipulator.private_safeLighten)(palette.primary.main, 0.62));
          setColor(palette.Slider, "secondaryTrack", (0, _colorManipulator.private_safeLighten)(palette.secondary.main, 0.62));
          setColor(palette.Slider, "errorTrack", (0, _colorManipulator.private_safeLighten)(palette.error.main, 0.62));
          setColor(palette.Slider, "infoTrack", (0, _colorManipulator.private_safeLighten)(palette.info.main, 0.62));
          setColor(palette.Slider, "successTrack", (0, _colorManipulator.private_safeLighten)(palette.success.main, 0.62));
          setColor(palette.Slider, "warningTrack", (0, _colorManipulator.private_safeLighten)(palette.warning.main, 0.62));
          const snackbarContentBackground = (0, _colorManipulator.private_safeEmphasize)(palette.background.default, 0.8);
          setColor(palette.SnackbarContent, "bg", snackbarContentBackground);
          setColor(palette.SnackbarContent, "color", silent(() => palette.getContrastText(snackbarContentBackground)));
          setColor(palette.SpeedDialAction, "fabHoverBg", (0, _colorManipulator.private_safeEmphasize)(palette.background.paper, 0.15));
          setColor(palette.StepConnector, "border", setCssVarColor("palette-grey-400"));
          setColor(palette.StepContent, "border", setCssVarColor("palette-grey-400"));
          setColor(palette.Switch, "defaultColor", setCssVarColor("palette-common-white"));
          setColor(palette.Switch, "defaultDisabledColor", setCssVarColor("palette-grey-100"));
          setColor(palette.Switch, "primaryDisabledColor", (0, _colorManipulator.private_safeLighten)(palette.primary.main, 0.62));
          setColor(palette.Switch, "secondaryDisabledColor", (0, _colorManipulator.private_safeLighten)(palette.secondary.main, 0.62));
          setColor(palette.Switch, "errorDisabledColor", (0, _colorManipulator.private_safeLighten)(palette.error.main, 0.62));
          setColor(palette.Switch, "infoDisabledColor", (0, _colorManipulator.private_safeLighten)(palette.info.main, 0.62));
          setColor(palette.Switch, "successDisabledColor", (0, _colorManipulator.private_safeLighten)(palette.success.main, 0.62));
          setColor(palette.Switch, "warningDisabledColor", (0, _colorManipulator.private_safeLighten)(palette.warning.main, 0.62));
          setColor(palette.TableCell, "border", (0, _colorManipulator.private_safeLighten)((0, _colorManipulator.private_safeAlpha)(palette.divider, 1), 0.88));
          setColor(palette.Tooltip, "bg", (0, _colorManipulator.private_safeAlpha)(palette.grey[700], 0.92));
        }
        if (palette.mode === "dark") {
          setColor(palette.Alert, "errorColor", (0, _colorManipulator.private_safeLighten)(palette.error.light, 0.6));
          setColor(palette.Alert, "infoColor", (0, _colorManipulator.private_safeLighten)(palette.info.light, 0.6));
          setColor(palette.Alert, "successColor", (0, _colorManipulator.private_safeLighten)(palette.success.light, 0.6));
          setColor(palette.Alert, "warningColor", (0, _colorManipulator.private_safeLighten)(palette.warning.light, 0.6));
          setColor(palette.Alert, "errorFilledBg", setCssVarColor("palette-error-dark"));
          setColor(palette.Alert, "infoFilledBg", setCssVarColor("palette-info-dark"));
          setColor(palette.Alert, "successFilledBg", setCssVarColor("palette-success-dark"));
          setColor(palette.Alert, "warningFilledBg", setCssVarColor("palette-warning-dark"));
          setColor(palette.Alert, "errorFilledColor", silent(() => palette.getContrastText(palette.error.dark)));
          setColor(palette.Alert, "infoFilledColor", silent(() => palette.getContrastText(palette.info.dark)));
          setColor(palette.Alert, "successFilledColor", silent(() => palette.getContrastText(palette.success.dark)));
          setColor(palette.Alert, "warningFilledColor", silent(() => palette.getContrastText(palette.warning.dark)));
          setColor(palette.Alert, "errorStandardBg", (0, _colorManipulator.private_safeDarken)(palette.error.light, 0.9));
          setColor(palette.Alert, "infoStandardBg", (0, _colorManipulator.private_safeDarken)(palette.info.light, 0.9));
          setColor(palette.Alert, "successStandardBg", (0, _colorManipulator.private_safeDarken)(palette.success.light, 0.9));
          setColor(palette.Alert, "warningStandardBg", (0, _colorManipulator.private_safeDarken)(palette.warning.light, 0.9));
          setColor(palette.Alert, "errorIconColor", setCssVarColor("palette-error-main"));
          setColor(palette.Alert, "infoIconColor", setCssVarColor("palette-info-main"));
          setColor(palette.Alert, "successIconColor", setCssVarColor("palette-success-main"));
          setColor(palette.Alert, "warningIconColor", setCssVarColor("palette-warning-main"));
          setColor(palette.AppBar, "defaultBg", setCssVarColor("palette-grey-900"));
          setColor(palette.AppBar, "darkBg", setCssVarColor("palette-background-paper"));
          setColor(palette.AppBar, "darkColor", setCssVarColor("palette-text-primary"));
          setColor(palette.Avatar, "defaultBg", setCssVarColor("palette-grey-600"));
          setColor(palette.Button, "inheritContainedBg", setCssVarColor("palette-grey-800"));
          setColor(palette.Button, "inheritContainedHoverBg", setCssVarColor("palette-grey-700"));
          setColor(palette.Chip, "defaultBorder", setCssVarColor("palette-grey-700"));
          setColor(palette.Chip, "defaultAvatarColor", setCssVarColor("palette-grey-300"));
          setColor(palette.Chip, "defaultIconColor", setCssVarColor("palette-grey-300"));
          setColor(palette.FilledInput, "bg", "rgba(255, 255, 255, 0.09)");
          setColor(palette.FilledInput, "hoverBg", "rgba(255, 255, 255, 0.13)");
          setColor(palette.FilledInput, "disabledBg", "rgba(255, 255, 255, 0.12)");
          setColor(palette.LinearProgress, "primaryBg", (0, _colorManipulator.private_safeDarken)(palette.primary.main, 0.5));
          setColor(palette.LinearProgress, "secondaryBg", (0, _colorManipulator.private_safeDarken)(palette.secondary.main, 0.5));
          setColor(palette.LinearProgress, "errorBg", (0, _colorManipulator.private_safeDarken)(palette.error.main, 0.5));
          setColor(palette.LinearProgress, "infoBg", (0, _colorManipulator.private_safeDarken)(palette.info.main, 0.5));
          setColor(palette.LinearProgress, "successBg", (0, _colorManipulator.private_safeDarken)(palette.success.main, 0.5));
          setColor(palette.LinearProgress, "warningBg", (0, _colorManipulator.private_safeDarken)(palette.warning.main, 0.5));
          setColor(palette.Skeleton, "bg", `rgba(${setCssVarColor("palette-text-primaryChannel")} / 0.13)`);
          setColor(palette.Slider, "primaryTrack", (0, _colorManipulator.private_safeDarken)(palette.primary.main, 0.5));
          setColor(palette.Slider, "secondaryTrack", (0, _colorManipulator.private_safeDarken)(palette.secondary.main, 0.5));
          setColor(palette.Slider, "errorTrack", (0, _colorManipulator.private_safeDarken)(palette.error.main, 0.5));
          setColor(palette.Slider, "infoTrack", (0, _colorManipulator.private_safeDarken)(palette.info.main, 0.5));
          setColor(palette.Slider, "successTrack", (0, _colorManipulator.private_safeDarken)(palette.success.main, 0.5));
          setColor(palette.Slider, "warningTrack", (0, _colorManipulator.private_safeDarken)(palette.warning.main, 0.5));
          const snackbarContentBackground = (0, _colorManipulator.private_safeEmphasize)(palette.background.default, 0.98);
          setColor(palette.SnackbarContent, "bg", snackbarContentBackground);
          setColor(palette.SnackbarContent, "color", silent(() => palette.getContrastText(snackbarContentBackground)));
          setColor(palette.SpeedDialAction, "fabHoverBg", (0, _colorManipulator.private_safeEmphasize)(palette.background.paper, 0.15));
          setColor(palette.StepConnector, "border", setCssVarColor("palette-grey-600"));
          setColor(palette.StepContent, "border", setCssVarColor("palette-grey-600"));
          setColor(palette.Switch, "defaultColor", setCssVarColor("palette-grey-300"));
          setColor(palette.Switch, "defaultDisabledColor", setCssVarColor("palette-grey-600"));
          setColor(palette.Switch, "primaryDisabledColor", (0, _colorManipulator.private_safeDarken)(palette.primary.main, 0.55));
          setColor(palette.Switch, "secondaryDisabledColor", (0, _colorManipulator.private_safeDarken)(palette.secondary.main, 0.55));
          setColor(palette.Switch, "errorDisabledColor", (0, _colorManipulator.private_safeDarken)(palette.error.main, 0.55));
          setColor(palette.Switch, "infoDisabledColor", (0, _colorManipulator.private_safeDarken)(palette.info.main, 0.55));
          setColor(palette.Switch, "successDisabledColor", (0, _colorManipulator.private_safeDarken)(palette.success.main, 0.55));
          setColor(palette.Switch, "warningDisabledColor", (0, _colorManipulator.private_safeDarken)(palette.warning.main, 0.55));
          setColor(palette.TableCell, "border", (0, _colorManipulator.private_safeDarken)((0, _colorManipulator.private_safeAlpha)(palette.divider, 1), 0.68));
          setColor(palette.Tooltip, "bg", (0, _colorManipulator.private_safeAlpha)(palette.grey[700], 0.92));
        }
        setColorChannel(palette.background, "default");
        setColorChannel(palette.background, "paper");
        setColorChannel(palette.common, "background");
        setColorChannel(palette.common, "onBackground");
        setColorChannel(palette, "divider");
        Object.keys(palette).forEach((color) => {
          const colors = palette[color];
          if (color !== "tonalOffset" && colors && typeof colors === "object") {
            if (colors.main) {
              setColor(palette[color], "mainChannel", (0, _colorManipulator.private_safeColorChannel)(toRgb(colors.main)));
            }
            if (colors.light) {
              setColor(palette[color], "lightChannel", (0, _colorManipulator.private_safeColorChannel)(toRgb(colors.light)));
            }
            if (colors.dark) {
              setColor(palette[color], "darkChannel", (0, _colorManipulator.private_safeColorChannel)(toRgb(colors.dark)));
            }
            if (colors.contrastText) {
              setColor(palette[color], "contrastTextChannel", (0, _colorManipulator.private_safeColorChannel)(toRgb(colors.contrastText)));
            }
            if (color === "text") {
              setColorChannel(palette[color], "primary");
              setColorChannel(palette[color], "secondary");
            }
            if (color === "action") {
              if (colors.active) {
                setColorChannel(palette[color], "active");
              }
              if (colors.selected) {
                setColorChannel(palette[color], "selected");
              }
            }
          }
        });
      });
      theme2 = args.reduce((acc, argument) => (0, _deepmerge.default)(acc, argument), theme2);
      const parserConfig = {
        prefix: cssVarPrefix,
        disableCssColorScheme,
        shouldSkipGeneratingVar,
        getSelector: (0, _createGetSelector.default)(theme2)
      };
      const {
        vars,
        generateThemeVars,
        generateStyleSheets
      } = (0, _cssVars.prepareCssVars)(theme2, parserConfig);
      theme2.vars = vars;
      Object.entries(theme2.colorSchemes[theme2.defaultColorScheme]).forEach(([key, value]) => {
        theme2[key] = value;
      });
      theme2.generateThemeVars = generateThemeVars;
      theme2.generateStyleSheets = generateStyleSheets;
      theme2.generateSpacing = function generateSpacing() {
        return (0, _system.createSpacing)(input.spacing, (0, _spacing.createUnarySpacing)(this));
      };
      theme2.getColorSchemeSelector = (0, _cssVars.createGetColorSchemeSelector)(selector);
      theme2.spacing = theme2.generateSpacing();
      theme2.shouldSkipGeneratingVar = shouldSkipGeneratingVar;
      theme2.unstable_sxConfig = {
        ..._styleFunctionSx.unstable_defaultSxConfig,
        ...input?.unstable_sxConfig
      };
      theme2.unstable_sx = function sx(props) {
        return (0, _styleFunctionSx.default)({
          sx: props,
          theme: this
        });
      };
      theme2.toRuntimeSource = _stringifyTheme.stringifyTheme;
      return theme2;
    }
  }
});

// node_modules/@mui/material/node/styles/createTheme.js
var require_createTheme3 = __commonJS({
  "node_modules/@mui/material/node/styles/createTheme.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "createMuiTheme", {
      enumerable: true,
      get: function() {
        return _createThemeNoVars.createMuiTheme;
      }
    });
    exports2.default = createTheme2;
    var _createPalette = _interopRequireDefault(require_createPalette());
    var _createThemeWithVars = _interopRequireDefault(require_createThemeWithVars());
    var _createThemeNoVars = _interopRequireWildcard(require_createThemeNoVars());
    function attachColorScheme(theme2, scheme, colorScheme) {
      if (!theme2.colorSchemes) {
        return void 0;
      }
      if (colorScheme) {
        theme2.colorSchemes[scheme] = {
          ...colorScheme !== true && colorScheme,
          palette: (0, _createPalette.default)({
            ...colorScheme === true ? {} : colorScheme.palette,
            mode: scheme
          })
          // cast type to skip module augmentation test
        };
      }
    }
    function createTheme2(options = {}, ...args) {
      const {
        palette,
        cssVariables = false,
        colorSchemes: initialColorSchemes = !palette ? {
          light: true
        } : void 0,
        defaultColorScheme: initialDefaultColorScheme = palette?.mode,
        ...rest
      } = options;
      const defaultColorSchemeInput = initialDefaultColorScheme || "light";
      const defaultScheme = initialColorSchemes?.[defaultColorSchemeInput];
      const colorSchemesInput = {
        ...initialColorSchemes,
        ...palette ? {
          [defaultColorSchemeInput]: {
            ...typeof defaultScheme !== "boolean" && defaultScheme,
            palette
          }
        } : void 0
      };
      if (cssVariables === false) {
        if (!("colorSchemes" in options)) {
          return (0, _createThemeNoVars.default)(options, ...args);
        }
        let paletteOptions = palette;
        if (!("palette" in options)) {
          if (colorSchemesInput[defaultColorSchemeInput]) {
            if (colorSchemesInput[defaultColorSchemeInput] !== true) {
              paletteOptions = colorSchemesInput[defaultColorSchemeInput].palette;
            } else if (defaultColorSchemeInput === "dark") {
              paletteOptions = {
                mode: "dark"
              };
            }
          }
        }
        const theme2 = (0, _createThemeNoVars.default)({
          ...options,
          palette: paletteOptions
        }, ...args);
        theme2.defaultColorScheme = defaultColorSchemeInput;
        theme2.colorSchemes = colorSchemesInput;
        if (theme2.palette.mode === "light") {
          theme2.colorSchemes.light = {
            ...colorSchemesInput.light !== true && colorSchemesInput.light,
            palette: theme2.palette
          };
          attachColorScheme(theme2, "dark", colorSchemesInput.dark);
        }
        if (theme2.palette.mode === "dark") {
          theme2.colorSchemes.dark = {
            ...colorSchemesInput.dark !== true && colorSchemesInput.dark,
            palette: theme2.palette
          };
          attachColorScheme(theme2, "light", colorSchemesInput.light);
        }
        return theme2;
      }
      if (!palette && !("light" in colorSchemesInput) && defaultColorSchemeInput === "light") {
        colorSchemesInput.light = true;
      }
      return (0, _createThemeWithVars.default)({
        ...rest,
        colorSchemes: colorSchemesInput,
        defaultColorScheme: defaultColorSchemeInput,
        ...typeof cssVariables !== "boolean" && cssVariables
      }, ...args);
    }
  }
});

// node_modules/@mui/material/node/styles/createMuiStrictModeTheme.js
var require_createMuiStrictModeTheme = __commonJS({
  "node_modules/@mui/material/node/styles/createMuiStrictModeTheme.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = createMuiStrictModeTheme;
    var _deepmerge = _interopRequireDefault(require_deepmerge2());
    var _createTheme = _interopRequireDefault(require_createTheme3());
    function createMuiStrictModeTheme(options, ...args) {
      return (0, _createTheme.default)((0, _deepmerge.default)({
        unstable_strictMode: true
      }, options), ...args);
    }
  }
});

// node_modules/@mui/material/node/styles/createStyles.js
var require_createStyles = __commonJS({
  "node_modules/@mui/material/node/styles/createStyles.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = createStyles;
    var warnedOnce = false;
    function createStyles(styles) {
      if (!warnedOnce) {
        console.warn(["MUI: createStyles from @mui/material/styles is deprecated.", "Please use @mui/styles/createStyles"].join("\n"));
        warnedOnce = true;
      }
      return styles;
    }
  }
});

// node_modules/@mui/material/node/styles/cssUtils.js
var require_cssUtils = __commonJS({
  "node_modules/@mui/material/node/styles/cssUtils.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.alignProperty = alignProperty;
    exports2.convertLength = convertLength;
    exports2.fontGrid = fontGrid;
    exports2.getUnit = getUnit;
    exports2.isUnitless = isUnitless;
    exports2.responsiveProperty = responsiveProperty;
    exports2.toUnitless = toUnitless;
    function isUnitless(value) {
      return String(parseFloat(value)).length === String(value).length;
    }
    function getUnit(input) {
      return String(input).match(/[\d.\-+]*\s*(.*)/)[1] || "";
    }
    function toUnitless(length2) {
      return parseFloat(length2);
    }
    function convertLength(baseFontSize) {
      return (length2, toUnit) => {
        const fromUnit = getUnit(length2);
        if (fromUnit === toUnit) {
          return length2;
        }
        let pxLength = toUnitless(length2);
        if (fromUnit !== "px") {
          if (fromUnit === "em") {
            pxLength = toUnitless(length2) * toUnitless(baseFontSize);
          } else if (fromUnit === "rem") {
            pxLength = toUnitless(length2) * toUnitless(baseFontSize);
          }
        }
        let outputLength = pxLength;
        if (toUnit !== "px") {
          if (toUnit === "em") {
            outputLength = pxLength / toUnitless(baseFontSize);
          } else if (toUnit === "rem") {
            outputLength = pxLength / toUnitless(baseFontSize);
          } else {
            return length2;
          }
        }
        return parseFloat(outputLength.toFixed(5)) + toUnit;
      };
    }
    function alignProperty({
      size,
      grid
    }) {
      const sizeBelow = size - size % grid;
      const sizeAbove = sizeBelow + grid;
      return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;
    }
    function fontGrid({
      lineHeight,
      pixels,
      htmlFontSize
    }) {
      return pixels / (lineHeight * htmlFontSize);
    }
    function responsiveProperty({
      cssProperty,
      min,
      max,
      unit = "rem",
      breakpoints = [600, 900, 1200],
      transform = null
    }) {
      const output = {
        [cssProperty]: `${min}${unit}`
      };
      const factor = (max - min) / breakpoints[breakpoints.length - 1];
      breakpoints.forEach((breakpoint) => {
        let value = min + factor * breakpoint;
        if (transform !== null) {
          value = transform(value);
        }
        output[`@media (min-width:${breakpoint}px)`] = {
          [cssProperty]: `${Math.round(value * 1e4) / 1e4}${unit}`
        };
      });
      return output;
    }
  }
});

// node_modules/@mui/material/node/styles/responsiveFontSizes.js
var require_responsiveFontSizes = __commonJS({
  "node_modules/@mui/material/node/styles/responsiveFontSizes.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = responsiveFontSizes;
    var _formatMuiErrorMessage2 = _interopRequireDefault(require_formatMuiErrorMessage2());
    var _cssUtils = require_cssUtils();
    function responsiveFontSizes(themeInput, options = {}) {
      const {
        breakpoints = ["sm", "md", "lg"],
        disableAlign = false,
        factor = 2,
        variants = ["h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "caption", "button", "overline"]
      } = options;
      const theme2 = {
        ...themeInput
      };
      theme2.typography = {
        ...theme2.typography
      };
      const typography = theme2.typography;
      const convert = (0, _cssUtils.convertLength)(typography.htmlFontSize);
      const breakpointValues = breakpoints.map((x) => theme2.breakpoints.values[x]);
      variants.forEach((variant) => {
        const style = typography[variant];
        if (!style) {
          return;
        }
        const remFontSize = parseFloat(convert(style.fontSize, "rem"));
        if (remFontSize <= 1) {
          return;
        }
        const maxFontSize = remFontSize;
        const minFontSize = 1 + (maxFontSize - 1) / factor;
        let {
          lineHeight
        } = style;
        if (!(0, _cssUtils.isUnitless)(lineHeight) && !disableAlign) {
          throw new Error(define_process_env_default.NODE_ENV !== "production" ? "MUI: Unsupported non-unitless line height with grid alignment.\nUse unitless line heights instead." : (0, _formatMuiErrorMessage2.default)(6));
        }
        if (!(0, _cssUtils.isUnitless)(lineHeight)) {
          lineHeight = parseFloat(convert(lineHeight, "rem")) / parseFloat(remFontSize);
        }
        let transform = null;
        if (!disableAlign) {
          transform = (value) => (0, _cssUtils.alignProperty)({
            size: value,
            grid: (0, _cssUtils.fontGrid)({
              pixels: 4,
              lineHeight,
              htmlFontSize: typography.htmlFontSize
            })
          });
        }
        typography[variant] = {
          ...style,
          ...(0, _cssUtils.responsiveProperty)({
            cssProperty: "fontSize",
            min: minFontSize,
            max: maxFontSize,
            unit: "rem",
            breakpoints: breakpointValues,
            transform
          })
        };
      });
      return theme2;
    }
  }
});

// node_modules/@mui/material/node/styles/defaultTheme.js
var require_defaultTheme = __commonJS({
  "node_modules/@mui/material/node/styles/defaultTheme.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _createTheme = _interopRequireDefault(require_createTheme3());
    var defaultTheme = (0, _createTheme.default)();
    var _default = exports2.default = defaultTheme;
  }
});

// node_modules/@mui/material/node/styles/useTheme.js
var require_useTheme5 = __commonJS({
  "node_modules/@mui/material/node/styles/useTheme.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = useTheme3;
    var React7 = _interopRequireWildcard(require_react());
    var _system = require_system();
    var _defaultTheme = _interopRequireDefault(require_defaultTheme());
    var _identifier = _interopRequireDefault(require_identifier());
    function useTheme3() {
      const theme2 = (0, _system.useTheme)(_defaultTheme.default);
      if (define_process_env_default.NODE_ENV !== "production") {
        React7.useDebugValue(theme2);
      }
      return theme2[_identifier.default] || theme2;
    }
  }
});

// node_modules/@mui/material/node/styles/useThemeProps.js
var require_useThemeProps3 = __commonJS({
  "node_modules/@mui/material/node/styles/useThemeProps.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = useThemeProps;
    var _useThemeProps = _interopRequireDefault(require_useThemeProps2());
    var _defaultTheme = _interopRequireDefault(require_defaultTheme());
    var _identifier = _interopRequireDefault(require_identifier());
    function useThemeProps({
      props,
      name
    }) {
      return (0, _useThemeProps.default)({
        props,
        name,
        defaultTheme: _defaultTheme.default,
        themeId: _identifier.default
      });
    }
  }
});

// node_modules/@mui/material/node/styles/slotShouldForwardProp.js
var require_slotShouldForwardProp = __commonJS({
  "node_modules/@mui/material/node/styles/slotShouldForwardProp.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    function slotShouldForwardProp(prop) {
      return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
    }
    var _default = exports2.default = slotShouldForwardProp;
  }
});

// node_modules/@mui/material/node/styles/rootShouldForwardProp.js
var require_rootShouldForwardProp = __commonJS({
  "node_modules/@mui/material/node/styles/rootShouldForwardProp.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _slotShouldForwardProp = _interopRequireDefault(require_slotShouldForwardProp());
    var rootShouldForwardProp = (prop) => (0, _slotShouldForwardProp.default)(prop) && prop !== "classes";
    var _default = exports2.default = rootShouldForwardProp;
  }
});

// node_modules/@mui/material/node/styles/styled.js
var require_styled3 = __commonJS({
  "node_modules/@mui/material/node/styles/styled.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    Object.defineProperty(exports2, "rootShouldForwardProp", {
      enumerable: true,
      get: function() {
        return _rootShouldForwardProp.default;
      }
    });
    Object.defineProperty(exports2, "slotShouldForwardProp", {
      enumerable: true,
      get: function() {
        return _slotShouldForwardProp.default;
      }
    });
    var _createStyled = _interopRequireDefault(require_createStyled2());
    var _defaultTheme = _interopRequireDefault(require_defaultTheme());
    var _identifier = _interopRequireDefault(require_identifier());
    var _rootShouldForwardProp = _interopRequireDefault(require_rootShouldForwardProp());
    var _slotShouldForwardProp = _interopRequireDefault(require_slotShouldForwardProp());
    var styled = (0, _createStyled.default)({
      themeId: _identifier.default,
      defaultTheme: _defaultTheme.default,
      rootShouldForwardProp: _rootShouldForwardProp.default
    });
    var _default = exports2.default = styled;
  }
});

// node_modules/@mui/material/node/styles/ThemeProviderNoVars.js
var require_ThemeProviderNoVars = __commonJS({
  "node_modules/@mui/material/node/styles/ThemeProviderNoVars.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = ThemeProviderNoVars;
    var React7 = _interopRequireWildcard(require_react());
    var _system = require_system();
    var _identifier = _interopRequireDefault(require_identifier());
    var _jsxRuntime = require_jsx_runtime();
    function ThemeProviderNoVars({
      theme: themeInput,
      ...props
    }) {
      const scopedTheme = _identifier.default in themeInput ? themeInput[_identifier.default] : void 0;
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_system.ThemeProvider, {
        ...props,
        themeId: scopedTheme ? _identifier.default : void 0,
        theme: scopedTheme || themeInput
      });
    }
  }
});

// node_modules/@mui/material/node_modules/@mui/system/InitColorSchemeScript/index.js
var require_InitColorSchemeScript2 = __commonJS({
  "node_modules/@mui/material/node_modules/@mui/system/InitColorSchemeScript/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _InitColorSchemeScript.default;
      }
    });
    var _InitColorSchemeScript = _interopRequireDefault(require_InitColorSchemeScript());
  }
});

// node_modules/@mui/material/node/InitColorSchemeScript/InitColorSchemeScript.js
var require_InitColorSchemeScript3 = __commonJS({
  "node_modules/@mui/material/node/InitColorSchemeScript/InitColorSchemeScript.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.defaultConfig = exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _InitColorSchemeScript = _interopRequireDefault(require_InitColorSchemeScript2());
    var _jsxRuntime = require_jsx_runtime();
    var defaultConfig = exports2.defaultConfig = {
      attribute: "data-mui-color-scheme",
      colorSchemeStorageKey: "mui-color-scheme",
      defaultLightColorScheme: "light",
      defaultDarkColorScheme: "dark",
      modeStorageKey: "mui-mode"
    };
    var InitColorSchemeScript = exports2.default = function InitColorSchemeScript2(props) {
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_InitColorSchemeScript.default, {
        ...defaultConfig,
        ...props
      });
    };
  }
});

// node_modules/@mui/material/node/styles/ThemeProviderWithVars.js
var require_ThemeProviderWithVars = __commonJS({
  "node_modules/@mui/material/node/styles/ThemeProviderWithVars.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.CssVarsProvider = void 0;
    exports2.Experimental_CssVarsProvider = Experimental_CssVarsProvider;
    exports2.useColorScheme = exports2.getInitColorSchemeScript = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _styleFunctionSx = _interopRequireDefault(require_styleFunctionSx2());
    var _system = require_system();
    var _createTheme = _interopRequireDefault(require_createTheme3());
    var _createTypography = _interopRequireDefault(require_createTypography());
    var _identifier = _interopRequireDefault(require_identifier());
    var _InitColorSchemeScript = require_InitColorSchemeScript3();
    var _jsxRuntime = require_jsx_runtime();
    var {
      CssVarsProvider: InternalCssVarsProvider,
      useColorScheme,
      getInitColorSchemeScript: deprecatedGetInitColorSchemeScript
    } = (0, _system.unstable_createCssVarsProvider)({
      themeId: _identifier.default,
      // @ts-ignore ignore module augmentation tests
      theme: () => (0, _createTheme.default)({
        cssVariables: true
      }),
      colorSchemeStorageKey: _InitColorSchemeScript.defaultConfig.colorSchemeStorageKey,
      modeStorageKey: _InitColorSchemeScript.defaultConfig.modeStorageKey,
      defaultColorScheme: {
        light: _InitColorSchemeScript.defaultConfig.defaultLightColorScheme,
        dark: _InitColorSchemeScript.defaultConfig.defaultDarkColorScheme
      },
      resolveTheme: (theme2) => {
        const newTheme = {
          ...theme2,
          typography: (0, _createTypography.default)(theme2.palette, theme2.typography)
        };
        newTheme.unstable_sx = function sx(props) {
          return (0, _styleFunctionSx.default)({
            sx: props,
            theme: this
          });
        };
        return newTheme;
      }
    });
    exports2.useColorScheme = useColorScheme;
    var warnedOnce = false;
    function Experimental_CssVarsProvider(props) {
      if (define_process_env_default.NODE_ENV !== "production") {
        if (!warnedOnce) {
          console.warn(["MUI: The Experimental_CssVarsProvider component has been ported into ThemeProvider.", "", "You should use `import { ThemeProvider } from '@mui/material/styles'` instead.", "For more details, check out https://mui.com/material-ui/customization/css-theme-variables/usage/"].join("\n"));
          warnedOnce = true;
        }
      }
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(InternalCssVarsProvider, {
        ...props
      });
    }
    var warnedInitScriptOnce = false;
    var getInitColorSchemeScript = (params) => {
      if (!warnedInitScriptOnce) {
        console.warn(["MUI: The getInitColorSchemeScript function has been deprecated.", "", "You should use `import InitColorSchemeScript from '@mui/material/InitColorSchemeScript'`", "and replace the function call with `<InitColorSchemeScript />` instead."].join("\n"));
        warnedInitScriptOnce = true;
      }
      return deprecatedGetInitColorSchemeScript(params);
    };
    exports2.getInitColorSchemeScript = getInitColorSchemeScript;
    var CssVarsProvider = exports2.CssVarsProvider = InternalCssVarsProvider;
  }
});

// node_modules/@mui/material/node/styles/ThemeProvider.js
var require_ThemeProvider5 = __commonJS({
  "node_modules/@mui/material/node/styles/ThemeProvider.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = ThemeProvider4;
    var React7 = _interopRequireWildcard(require_react());
    var _ThemeProviderNoVars = _interopRequireDefault(require_ThemeProviderNoVars());
    var _ThemeProviderWithVars = require_ThemeProviderWithVars();
    var _identifier = _interopRequireDefault(require_identifier());
    var _jsxRuntime = require_jsx_runtime();
    function ThemeProvider4({
      theme: theme2,
      ...props
    }) {
      if (typeof theme2 === "function") {
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_ThemeProviderNoVars.default, {
          theme: theme2,
          ...props
        });
      }
      const muiTheme = _identifier.default in theme2 ? theme2[_identifier.default] : theme2;
      if (!("colorSchemes" in muiTheme)) {
        if (!("vars" in muiTheme)) {
          return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_ThemeProviderNoVars.default, {
            theme: {
              ...theme2,
              vars: null
            },
            ...props
          });
        }
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_ThemeProviderNoVars.default, {
          theme: theme2,
          ...props
        });
      }
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_ThemeProviderWithVars.CssVarsProvider, {
        theme: theme2,
        ...props
      });
    }
  }
});

// node_modules/@mui/material/node/styles/makeStyles.js
var require_makeStyles = __commonJS({
  "node_modules/@mui/material/node/styles/makeStyles.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = makeStyles;
    var _formatMuiErrorMessage2 = _interopRequireDefault(require_formatMuiErrorMessage2());
    function makeStyles() {
      throw new Error(define_process_env_default.NODE_ENV !== "production" ? "MUI: makeStyles is no longer exported from @mui/material/styles.\nYou have to import it from @mui/styles.\nSee https://mui.com/r/migration-v4/#mui-material-styles for more details." : (0, _formatMuiErrorMessage2.default)(14));
    }
  }
});

// node_modules/@mui/material/node/styles/withStyles.js
var require_withStyles = __commonJS({
  "node_modules/@mui/material/node/styles/withStyles.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = withStyles;
    var _formatMuiErrorMessage2 = _interopRequireDefault(require_formatMuiErrorMessage2());
    function withStyles() {
      throw new Error(define_process_env_default.NODE_ENV !== "production" ? "MUI: withStyles is no longer exported from @mui/material/styles.\nYou have to import it from @mui/styles.\nSee https://mui.com/r/migration-v4/#mui-material-styles for more details." : (0, _formatMuiErrorMessage2.default)(15));
    }
  }
});

// node_modules/@mui/material/node/styles/withTheme.js
var require_withTheme = __commonJS({
  "node_modules/@mui/material/node/styles/withTheme.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = withTheme2;
    var _formatMuiErrorMessage2 = _interopRequireDefault(require_formatMuiErrorMessage2());
    function withTheme2() {
      throw new Error(define_process_env_default.NODE_ENV !== "production" ? "MUI: withTheme is no longer exported from @mui/material/styles.\nYou have to import it from @mui/styles.\nSee https://mui.com/r/migration-v4/#mui-material-styles for more details." : (0, _formatMuiErrorMessage2.default)(16));
    }
  }
});

// node_modules/@mui/material/node/styles/experimental_extendTheme.js
var require_experimental_extendTheme = __commonJS({
  "node_modules/@mui/material/node/styles/experimental_extendTheme.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = deprecatedExtendTheme;
    var _createThemeWithVars = _interopRequireDefault(require_createThemeWithVars());
    var warnedOnce = false;
    function deprecatedExtendTheme(...args) {
      if (!warnedOnce) {
        console.warn(["MUI: The `experimental_extendTheme` has been stabilized.", "", "You should use `import { extendTheme } from '@mui/material/styles'`"].join("\n"));
        warnedOnce = true;
      }
      return (0, _createThemeWithVars.default)(...args);
    }
  }
});

// node_modules/@mui/material/node/styles/index.js
var require_styles = __commonJS({
  "node_modules/@mui/material/node/styles/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      experimental_sx: true,
      THEME_ID: true,
      adaptV4Theme: true,
      hexToRgb: true,
      rgbToHex: true,
      hslToRgb: true,
      decomposeColor: true,
      recomposeColor: true,
      getContrastRatio: true,
      getLuminance: true,
      emphasize: true,
      alpha: true,
      darken: true,
      lighten: true,
      css: true,
      keyframes: true,
      StyledEngineProvider: true,
      unstable_createBreakpoints: true,
      createTheme: true,
      createMuiTheme: true,
      unstable_createMuiStrictModeTheme: true,
      createStyles: true,
      unstable_getUnit: true,
      unstable_toUnitless: true,
      responsiveFontSizes: true,
      createTransitions: true,
      duration: true,
      easing: true,
      createColorScheme: true,
      useTheme: true,
      useThemeProps: true,
      styled: true,
      experimentalStyled: true,
      ThemeProvider: true,
      makeStyles: true,
      withStyles: true,
      withTheme: true,
      extendTheme: true,
      experimental_extendTheme: true,
      getOverlayAlpha: true,
      shouldSkipGeneratingVar: true,
      private_createTypography: true,
      private_createMixins: true,
      private_excludeVariablesFromRoot: true
    };
    Object.defineProperty(exports2, "StyledEngineProvider", {
      enumerable: true,
      get: function() {
        return _system.StyledEngineProvider;
      }
    });
    Object.defineProperty(exports2, "THEME_ID", {
      enumerable: true,
      get: function() {
        return _identifier.default;
      }
    });
    Object.defineProperty(exports2, "ThemeProvider", {
      enumerable: true,
      get: function() {
        return _ThemeProvider.default;
      }
    });
    Object.defineProperty(exports2, "adaptV4Theme", {
      enumerable: true,
      get: function() {
        return _adaptV4Theme.default;
      }
    });
    Object.defineProperty(exports2, "alpha", {
      enumerable: true,
      get: function() {
        return _system.alpha;
      }
    });
    Object.defineProperty(exports2, "createColorScheme", {
      enumerable: true,
      get: function() {
        return _createColorScheme.default;
      }
    });
    Object.defineProperty(exports2, "createMuiTheme", {
      enumerable: true,
      get: function() {
        return _createTheme.createMuiTheme;
      }
    });
    Object.defineProperty(exports2, "createStyles", {
      enumerable: true,
      get: function() {
        return _createStyles.default;
      }
    });
    Object.defineProperty(exports2, "createTheme", {
      enumerable: true,
      get: function() {
        return _createTheme.default;
      }
    });
    Object.defineProperty(exports2, "createTransitions", {
      enumerable: true,
      get: function() {
        return _createTransitions.default;
      }
    });
    Object.defineProperty(exports2, "css", {
      enumerable: true,
      get: function() {
        return _system.css;
      }
    });
    Object.defineProperty(exports2, "darken", {
      enumerable: true,
      get: function() {
        return _system.darken;
      }
    });
    Object.defineProperty(exports2, "decomposeColor", {
      enumerable: true,
      get: function() {
        return _system.decomposeColor;
      }
    });
    Object.defineProperty(exports2, "duration", {
      enumerable: true,
      get: function() {
        return _createTransitions.duration;
      }
    });
    Object.defineProperty(exports2, "easing", {
      enumerable: true,
      get: function() {
        return _createTransitions.easing;
      }
    });
    Object.defineProperty(exports2, "emphasize", {
      enumerable: true,
      get: function() {
        return _system.emphasize;
      }
    });
    Object.defineProperty(exports2, "experimentalStyled", {
      enumerable: true,
      get: function() {
        return _styled.default;
      }
    });
    Object.defineProperty(exports2, "experimental_extendTheme", {
      enumerable: true,
      get: function() {
        return _experimental_extendTheme.default;
      }
    });
    exports2.experimental_sx = experimental_sx;
    Object.defineProperty(exports2, "extendTheme", {
      enumerable: true,
      get: function() {
        return _createThemeWithVars.default;
      }
    });
    Object.defineProperty(exports2, "getContrastRatio", {
      enumerable: true,
      get: function() {
        return _system.getContrastRatio;
      }
    });
    Object.defineProperty(exports2, "getLuminance", {
      enumerable: true,
      get: function() {
        return _system.getLuminance;
      }
    });
    Object.defineProperty(exports2, "getOverlayAlpha", {
      enumerable: true,
      get: function() {
        return _getOverlayAlpha.default;
      }
    });
    Object.defineProperty(exports2, "hexToRgb", {
      enumerable: true,
      get: function() {
        return _system.hexToRgb;
      }
    });
    Object.defineProperty(exports2, "hslToRgb", {
      enumerable: true,
      get: function() {
        return _system.hslToRgb;
      }
    });
    Object.defineProperty(exports2, "keyframes", {
      enumerable: true,
      get: function() {
        return _system.keyframes;
      }
    });
    Object.defineProperty(exports2, "lighten", {
      enumerable: true,
      get: function() {
        return _system.lighten;
      }
    });
    Object.defineProperty(exports2, "makeStyles", {
      enumerable: true,
      get: function() {
        return _makeStyles.default;
      }
    });
    Object.defineProperty(exports2, "private_createMixins", {
      enumerable: true,
      get: function() {
        return _createMixins.default;
      }
    });
    Object.defineProperty(exports2, "private_createTypography", {
      enumerable: true,
      get: function() {
        return _createTypography.default;
      }
    });
    Object.defineProperty(exports2, "private_excludeVariablesFromRoot", {
      enumerable: true,
      get: function() {
        return _excludeVariablesFromRoot.default;
      }
    });
    Object.defineProperty(exports2, "recomposeColor", {
      enumerable: true,
      get: function() {
        return _system.recomposeColor;
      }
    });
    Object.defineProperty(exports2, "responsiveFontSizes", {
      enumerable: true,
      get: function() {
        return _responsiveFontSizes.default;
      }
    });
    Object.defineProperty(exports2, "rgbToHex", {
      enumerable: true,
      get: function() {
        return _system.rgbToHex;
      }
    });
    Object.defineProperty(exports2, "shouldSkipGeneratingVar", {
      enumerable: true,
      get: function() {
        return _shouldSkipGeneratingVar.default;
      }
    });
    Object.defineProperty(exports2, "styled", {
      enumerable: true,
      get: function() {
        return _styled.default;
      }
    });
    Object.defineProperty(exports2, "unstable_createBreakpoints", {
      enumerable: true,
      get: function() {
        return _createBreakpoints.unstable_createBreakpoints;
      }
    });
    Object.defineProperty(exports2, "unstable_createMuiStrictModeTheme", {
      enumerable: true,
      get: function() {
        return _createMuiStrictModeTheme.default;
      }
    });
    Object.defineProperty(exports2, "unstable_getUnit", {
      enumerable: true,
      get: function() {
        return _cssUtils.getUnit;
      }
    });
    Object.defineProperty(exports2, "unstable_toUnitless", {
      enumerable: true,
      get: function() {
        return _cssUtils.toUnitless;
      }
    });
    Object.defineProperty(exports2, "useTheme", {
      enumerable: true,
      get: function() {
        return _useTheme.default;
      }
    });
    Object.defineProperty(exports2, "useThemeProps", {
      enumerable: true,
      get: function() {
        return _useThemeProps.default;
      }
    });
    Object.defineProperty(exports2, "withStyles", {
      enumerable: true,
      get: function() {
        return _withStyles.default;
      }
    });
    Object.defineProperty(exports2, "withTheme", {
      enumerable: true,
      get: function() {
        return _withTheme.default;
      }
    });
    var _formatMuiErrorMessage2 = _interopRequireDefault(require_formatMuiErrorMessage2());
    var _identifier = _interopRequireDefault(require_identifier());
    var _adaptV4Theme = _interopRequireDefault(require_adaptV4Theme());
    var _system = require_system();
    var _createBreakpoints = require_createBreakpoints2();
    var _createTheme = _interopRequireWildcard(require_createTheme3());
    var _createMuiStrictModeTheme = _interopRequireDefault(require_createMuiStrictModeTheme());
    var _createStyles = _interopRequireDefault(require_createStyles());
    var _cssUtils = require_cssUtils();
    var _responsiveFontSizes = _interopRequireDefault(require_responsiveFontSizes());
    var _createTransitions = _interopRequireWildcard(require_createTransitions());
    var _createColorScheme = _interopRequireDefault(require_createColorScheme());
    var _useTheme = _interopRequireDefault(require_useTheme5());
    var _useThemeProps = _interopRequireDefault(require_useThemeProps3());
    var _styled = _interopRequireDefault(require_styled3());
    var _ThemeProvider = _interopRequireDefault(require_ThemeProvider5());
    var _makeStyles = _interopRequireDefault(require_makeStyles());
    var _withStyles = _interopRequireDefault(require_withStyles());
    var _withTheme = _interopRequireDefault(require_withTheme());
    var _ThemeProviderWithVars = require_ThemeProviderWithVars();
    Object.keys(_ThemeProviderWithVars).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _ThemeProviderWithVars[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _ThemeProviderWithVars[key];
        }
      });
    });
    var _createThemeWithVars = _interopRequireDefault(require_createThemeWithVars());
    var _experimental_extendTheme = _interopRequireDefault(require_experimental_extendTheme());
    var _getOverlayAlpha = _interopRequireDefault(require_getOverlayAlpha());
    var _shouldSkipGeneratingVar = _interopRequireDefault(require_shouldSkipGeneratingVar());
    var _createTypography = _interopRequireDefault(require_createTypography());
    var _createMixins = _interopRequireDefault(require_createMixins());
    var _excludeVariablesFromRoot = _interopRequireDefault(require_excludeVariablesFromRoot());
    function experimental_sx() {
      throw new Error(define_process_env_default.NODE_ENV !== "production" ? "MUI: The `experimental_sx` has been moved to `theme.unstable_sx`.For more details, see https://github.com/mui/material-ui/pull/35150." : (0, _formatMuiErrorMessage2.default)(19));
    }
  }
});

// node_modules/@mui/material/node/Box/boxClasses.js
var require_boxClasses2 = __commonJS({
  "node_modules/@mui/material/node/Box/boxClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var boxClasses = (0, _generateUtilityClasses.default)("MuiBox", ["root"]);
    var _default = exports2.default = boxClasses;
  }
});

// node_modules/@mui/material/node/Box/Box.js
var require_Box3 = __commonJS({
  "node_modules/@mui/material/node/Box/Box.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _system = require_system();
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _className = require_className();
    var _styles = require_styles();
    var _identifier = _interopRequireDefault(require_identifier());
    var _boxClasses = _interopRequireDefault(require_boxClasses2());
    var defaultTheme = (0, _styles.createTheme)();
    var Box2 = (0, _system.createBox)({
      themeId: _identifier.default,
      defaultTheme,
      defaultClassName: _boxClasses.default.root,
      generateClassName: _className.unstable_ClassNameGenerator.generate
    });
    define_process_env_default.NODE_ENV !== "production" ? Box2.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * @ignore
       */
      children: _propTypes.default.node,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: _propTypes.default.elementType,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
    } : void 0;
    var _default = exports2.default = Box2;
  }
});

// node_modules/@mui/material/node/Box/index.js
var require_Box4 = __commonJS({
  "node_modules/@mui/material/node/Box/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      boxClasses: true
    };
    Object.defineProperty(exports2, "boxClasses", {
      enumerable: true,
      get: function() {
        return _boxClasses.default;
      }
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _Box.default;
      }
    });
    var _Box = _interopRequireDefault(require_Box3());
    var _boxClasses = _interopRequireWildcard(require_boxClasses2());
    Object.keys(_boxClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _boxClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _boxClasses[key];
        }
      });
    });
  }
});

// node_modules/@mui/x-internals/warning/warning.js
var require_warning = __commonJS({
  "node_modules/@mui/x-internals/warning/warning.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.clearWarningsCache = clearWarningsCache;
    exports2.warnOnce = warnOnce;
    var warnedOnceCache = /* @__PURE__ */ new Set();
    function warnOnce(message, gravity = "warning") {
      if (define_process_env_default.NODE_ENV === "production") {
        return;
      }
      const cleanMessage = Array.isArray(message) ? message.join("\n") : message;
      if (!warnedOnceCache.has(cleanMessage)) {
        warnedOnceCache.add(cleanMessage);
        if (gravity === "error") {
          console.error(cleanMessage);
        } else {
          console.warn(cleanMessage);
        }
      }
    }
    function clearWarningsCache() {
      warnedOnceCache.clear();
    }
  }
});

// node_modules/@mui/x-internals/warning/index.js
var require_warning2 = __commonJS({
  "node_modules/@mui/x-internals/warning/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "clearWarningsCache", {
      enumerable: true,
      get: function() {
        return _warning.clearWarningsCache;
      }
    });
    Object.defineProperty(exports2, "warnOnce", {
      enumerable: true,
      get: function() {
        return _warning.warnOnce;
      }
    });
    var _warning = require_warning();
  }
});

// node_modules/@mui/x-tree-view/node/RichTreeView/richTreeViewClasses.js
var require_richTreeViewClasses = __commonJS({
  "node_modules/@mui/x-tree-view/node/RichTreeView/richTreeViewClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.getRichTreeViewUtilityClass = getRichTreeViewUtilityClass;
    exports2.richTreeViewClasses = void 0;
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    function getRichTreeViewUtilityClass(slot) {
      return (0, _generateUtilityClass.default)("MuiRichTreeView", slot);
    }
    var richTreeViewClasses = exports2.richTreeViewClasses = (0, _generateUtilityClasses.default)("MuiRichTreeView", ["root"]);
  }
});

// node_modules/@mui/x-tree-view/node/internals/zero-styled/index.js
var require_zero_styled = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/zero-styled/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.createUseThemeProps = createUseThemeProps;
    Object.defineProperty(exports2, "styled", {
      enumerable: true,
      get: function() {
        return _styles.styled;
      }
    });
    var _styles = require_styles();
    function createUseThemeProps(name) {
      return _styles.useThemeProps;
    }
  }
});

// node_modules/@mui/x-tree-view/node/internals/useTreeView/useTreeViewModels.js
var require_useTreeViewModels = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/useTreeView/useTreeViewModels.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.useTreeViewModels = void 0;
    var _extends2 = _interopRequireDefault(require_extends());
    var React7 = _interopRequireWildcard(require_react());
    var useTreeViewModels = (plugins, props) => {
      const modelsRef = React7.useRef({});
      const [modelsState, setModelsState] = React7.useState(() => {
        const initialState = {};
        plugins.forEach((plugin) => {
          if (plugin.models) {
            Object.entries(plugin.models).forEach(([modelName, modelInitializer]) => {
              modelsRef.current[modelName] = {
                isControlled: props[modelName] !== void 0,
                getDefaultValue: modelInitializer.getDefaultValue
              };
              initialState[modelName] = modelInitializer.getDefaultValue(props);
            });
          }
        });
        return initialState;
      });
      const models = Object.fromEntries(Object.entries(modelsRef.current).map(([modelName, model]) => {
        const value = props[modelName] ?? modelsState[modelName];
        return [modelName, {
          value,
          setControlledValue: (newValue) => {
            if (!model.isControlled) {
              setModelsState((prevState) => (0, _extends2.default)({}, prevState, {
                [modelName]: newValue
              }));
            }
          }
        }];
      }));
      if (define_process_env_default.NODE_ENV !== "production") {
        Object.entries(modelsRef.current).forEach(([modelName, model]) => {
          const controlled = props[modelName];
          const newDefaultValue = model.getDefaultValue(props);
          React7.useEffect(() => {
            if (model.isControlled !== (controlled !== void 0)) {
              console.error([`MUI X: A component is changing the ${model.isControlled ? "" : "un"}controlled ${modelName} state of TreeView to be ${model.isControlled ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", `Decide between using a controlled or uncontrolled ${modelName} element for the lifetime of the component.`, "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join("\n"));
            }
          }, [controlled]);
          const {
            current: defaultValue
          } = React7.useRef(newDefaultValue);
          React7.useEffect(() => {
            if (!model.isControlled && defaultValue !== newDefaultValue) {
              console.error([`MUI X: A component is changing the default ${modelName} state of an uncontrolled TreeView after being initialized. To suppress this warning opt to use a controlled TreeView.`].join("\n"));
            }
          }, [JSON.stringify(newDefaultValue)]);
        });
      }
      return models;
    };
    exports2.useTreeViewModels = useTreeViewModels;
  }
});

// node_modules/@mui/x-internals/EventManager/EventManager.js
var require_EventManager = __commonJS({
  "node_modules/@mui/x-internals/EventManager/EventManager.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.EventManager = void 0;
    var EventManager = class {
      constructor() {
        this.maxListeners = 20;
        this.warnOnce = false;
        this.events = {};
      }
      on(eventName, listener, options = {}) {
        let collection = this.events[eventName];
        if (!collection) {
          collection = {
            highPriority: /* @__PURE__ */ new Map(),
            regular: /* @__PURE__ */ new Map()
          };
          this.events[eventName] = collection;
        }
        if (options.isFirst) {
          collection.highPriority.set(listener, true);
        } else {
          collection.regular.set(listener, true);
        }
        if (define_process_env_default.NODE_ENV !== "production") {
          const collectionSize = collection.highPriority.size + collection.regular.size;
          if (collectionSize > this.maxListeners && !this.warnOnce) {
            this.warnOnce = true;
            console.warn([`Possible EventEmitter memory leak detected. ${collectionSize} ${eventName} listeners added.`].join("\n"));
          }
        }
      }
      removeListener(eventName, listener) {
        if (this.events[eventName]) {
          this.events[eventName].regular.delete(listener);
          this.events[eventName].highPriority.delete(listener);
        }
      }
      removeAllListeners() {
        this.events = {};
      }
      emit(eventName, ...args) {
        const collection = this.events[eventName];
        if (!collection) {
          return;
        }
        const highPriorityListeners = Array.from(collection.highPriority.keys());
        const regularListeners = Array.from(collection.regular.keys());
        for (let i = highPriorityListeners.length - 1; i >= 0; i -= 1) {
          const listener = highPriorityListeners[i];
          if (collection.highPriority.has(listener)) {
            listener.apply(this, args);
          }
        }
        for (let i = 0; i < regularListeners.length; i += 1) {
          const listener = regularListeners[i];
          if (collection.regular.has(listener)) {
            listener.apply(this, args);
          }
        }
      }
      once(eventName, listener) {
        const that = this;
        this.on(eventName, function oneTimeListener(...args) {
          that.removeListener(eventName, oneTimeListener);
          listener.apply(that, args);
        });
      }
    };
    exports2.EventManager = EventManager;
  }
});

// node_modules/@mui/x-internals/EventManager/index.js
var require_EventManager2 = __commonJS({
  "node_modules/@mui/x-internals/EventManager/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "EventManager", {
      enumerable: true,
      get: function() {
        return _EventManager.EventManager;
      }
    });
    var _EventManager = require_EventManager();
  }
});

// node_modules/@mui/x-tree-view/node/internals/corePlugins/useTreeViewInstanceEvents/useTreeViewInstanceEvents.js
var require_useTreeViewInstanceEvents = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/corePlugins/useTreeViewInstanceEvents/useTreeViewInstanceEvents.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.useTreeViewInstanceEvents = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _EventManager = require_EventManager2();
    var isSyntheticEvent = (event) => {
      return event.isPropagationStopped !== void 0;
    };
    var useTreeViewInstanceEvents = () => {
      const [eventManager] = React7.useState(() => new _EventManager.EventManager());
      const publishEvent = React7.useCallback((...args) => {
        const [name, params, event = {}] = args;
        event.defaultMuiPrevented = false;
        if (isSyntheticEvent(event) && event.isPropagationStopped()) {
          return;
        }
        eventManager.emit(name, params, event);
      }, [eventManager]);
      const subscribeEvent = React7.useCallback((event, handler) => {
        eventManager.on(event, handler);
        return () => {
          eventManager.removeListener(event, handler);
        };
      }, [eventManager]);
      return {
        instance: {
          $$publishEvent: publishEvent,
          $$subscribeEvent: subscribeEvent
        }
      };
    };
    exports2.useTreeViewInstanceEvents = useTreeViewInstanceEvents;
    useTreeViewInstanceEvents.params = {};
  }
});

// node_modules/@mui/x-tree-view/node/internals/corePlugins/useTreeViewInstanceEvents/index.js
var require_useTreeViewInstanceEvents2 = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/corePlugins/useTreeViewInstanceEvents/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "useTreeViewInstanceEvents", {
      enumerable: true,
      get: function() {
        return _useTreeViewInstanceEvents.useTreeViewInstanceEvents;
      }
    });
    var _useTreeViewInstanceEvents = require_useTreeViewInstanceEvents();
  }
});

// node_modules/@mui/x-tree-view/node/internals/corePlugins/useTreeViewOptionalPlugins/useTreeViewOptionalPlugins.js
var require_useTreeViewOptionalPlugins = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/corePlugins/useTreeViewOptionalPlugins/useTreeViewOptionalPlugins.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.useTreeViewOptionalPlugins = void 0;
    var useTreeViewOptionalPlugins = ({
      plugins
    }) => {
      const pluginSet = new Set(plugins);
      const getAvailablePlugins = () => pluginSet;
      return {
        instance: {
          getAvailablePlugins
        }
      };
    };
    exports2.useTreeViewOptionalPlugins = useTreeViewOptionalPlugins;
    useTreeViewOptionalPlugins.params = {};
  }
});

// node_modules/@mui/x-tree-view/node/internals/corePlugins/useTreeViewOptionalPlugins/index.js
var require_useTreeViewOptionalPlugins2 = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/corePlugins/useTreeViewOptionalPlugins/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "useTreeViewOptionalPlugins", {
      enumerable: true,
      get: function() {
        return _useTreeViewOptionalPlugins.useTreeViewOptionalPlugins;
      }
    });
    var _useTreeViewOptionalPlugins = require_useTreeViewOptionalPlugins();
  }
});

// node_modules/@mui/x-tree-view/node/internals/corePlugins/useTreeViewId/useTreeViewId.utils.js
var require_useTreeViewId_utils = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/corePlugins/useTreeViewId/useTreeViewId.utils.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.generateTreeItemIdAttribute = exports2.createTreeViewDefaultId = void 0;
    var globalTreeViewDefaultId = 0;
    var createTreeViewDefaultId = () => {
      globalTreeViewDefaultId += 1;
      return `mui-tree-view-${globalTreeViewDefaultId}`;
    };
    exports2.createTreeViewDefaultId = createTreeViewDefaultId;
    var generateTreeItemIdAttribute = ({
      id,
      treeId = "",
      itemId
    }) => {
      if (id != null) {
        return id;
      }
      return `${treeId}-${itemId}`;
    };
    exports2.generateTreeItemIdAttribute = generateTreeItemIdAttribute;
  }
});

// node_modules/@mui/x-tree-view/node/internals/corePlugins/useTreeViewId/useTreeViewId.js
var require_useTreeViewId = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/corePlugins/useTreeViewId/useTreeViewId.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.useTreeViewId = void 0;
    var _extends2 = _interopRequireDefault(require_extends());
    var React7 = _interopRequireWildcard(require_react());
    var _useTreeViewId = require_useTreeViewId_utils();
    var useTreeViewId = ({
      params,
      state,
      setState
    }) => {
      React7.useEffect(() => {
        setState((prevState) => {
          if (prevState.id.treeId === params.id && prevState.id.treeId !== void 0) {
            return prevState;
          }
          return (0, _extends2.default)({}, prevState, {
            id: (0, _extends2.default)({}, prevState.id, {
              treeId: params.id ?? (0, _useTreeViewId.createTreeViewDefaultId)()
            })
          });
        });
      }, [setState, params.id]);
      const treeId = params.id ?? state.id.treeId;
      return {
        getRootProps: () => ({
          id: treeId
        }),
        contextValue: {
          treeId
        }
      };
    };
    exports2.useTreeViewId = useTreeViewId;
    useTreeViewId.params = {
      id: true
    };
    useTreeViewId.getInitialState = ({
      id
    }) => ({
      id: {
        treeId: id ?? void 0
      }
    });
  }
});

// node_modules/@mui/x-tree-view/node/internals/corePlugins/useTreeViewId/index.js
var require_useTreeViewId2 = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/corePlugins/useTreeViewId/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "useTreeViewId", {
      enumerable: true,
      get: function() {
        return _useTreeViewId.useTreeViewId;
      }
    });
    var _useTreeViewId = require_useTreeViewId();
  }
});

// node_modules/@mui/x-tree-view/node/internals/corePlugins/corePlugins.js
var require_corePlugins = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/corePlugins/corePlugins.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.TREE_VIEW_CORE_PLUGINS = void 0;
    var _useTreeViewInstanceEvents = require_useTreeViewInstanceEvents2();
    var _useTreeViewOptionalPlugins = require_useTreeViewOptionalPlugins2();
    var _useTreeViewId = require_useTreeViewId2();
    var TREE_VIEW_CORE_PLUGINS = exports2.TREE_VIEW_CORE_PLUGINS = [_useTreeViewInstanceEvents.useTreeViewInstanceEvents, _useTreeViewOptionalPlugins.useTreeViewOptionalPlugins, _useTreeViewId.useTreeViewId];
  }
});

// node_modules/@mui/x-tree-view/node/internals/corePlugins/index.js
var require_corePlugins2 = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/corePlugins/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "TREE_VIEW_CORE_PLUGINS", {
      enumerable: true,
      get: function() {
        return _corePlugins.TREE_VIEW_CORE_PLUGINS;
      }
    });
    var _corePlugins = require_corePlugins();
  }
});

// node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js
var require_objectWithoutPropertiesLoose = __commonJS({
  "node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js"(exports2, module2) {
    init_define_process_env();
    function _objectWithoutPropertiesLoose(r, e) {
      if (null == r) return {};
      var t = {};
      for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
        if (-1 !== e.indexOf(n)) continue;
        t[n] = r[n];
      }
      return t;
    }
    module2.exports = _objectWithoutPropertiesLoose, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@mui/x-tree-view/node/internals/useTreeView/extractPluginParamsFromProps.js
var require_extractPluginParamsFromProps = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/useTreeView/extractPluginParamsFromProps.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.extractPluginParamsFromProps = void 0;
    var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
    var _excluded = ["slots", "slotProps", "apiRef", "experimentalFeatures"];
    var extractPluginParamsFromProps = (_ref) => {
      let {
        props: {
          slots,
          slotProps,
          apiRef,
          experimentalFeatures: inExperimentalFeatures
        },
        plugins
      } = _ref, props = (0, _objectWithoutPropertiesLoose2.default)(_ref.props, _excluded);
      const paramsLookup = {};
      plugins.forEach((plugin) => {
        Object.assign(paramsLookup, plugin.params);
      });
      const pluginParams = {};
      const forwardedProps = {};
      Object.keys(props).forEach((propName) => {
        const prop = props[propName];
        if (paramsLookup[propName]) {
          pluginParams[propName] = prop;
        } else {
          forwardedProps[propName] = prop;
        }
      });
      const experimentalFeatures = inExperimentalFeatures ?? {};
      const defaultizedPluginParams = plugins.reduce((acc, plugin) => {
        if (plugin.getDefaultizedParams) {
          return plugin.getDefaultizedParams({
            params: acc,
            experimentalFeatures
          });
        }
        return acc;
      }, pluginParams);
      return {
        apiRef,
        forwardedProps,
        pluginParams: defaultizedPluginParams,
        slots: slots ?? {},
        slotProps: slotProps ?? {},
        experimentalFeatures
      };
    };
    exports2.extractPluginParamsFromProps = extractPluginParamsFromProps;
  }
});

// node_modules/@mui/x-tree-view/node/internals/useTreeView/useTreeViewBuildContext.js
var require_useTreeViewBuildContext = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/useTreeView/useTreeViewBuildContext.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.useTreeViewBuildContext = void 0;
    var useTreeViewBuildContext = ({
      plugins,
      instance,
      publicAPI,
      rootRef
    }) => {
      const runItemPlugins = (itemPluginProps) => {
        let finalRootRef = null;
        let finalContentRef = null;
        const pluginPropEnhancers = [];
        const pluginPropEnhancersNames = {};
        plugins.forEach((plugin) => {
          if (!plugin.itemPlugin) {
            return;
          }
          const itemPluginResponse = plugin.itemPlugin({
            props: itemPluginProps,
            rootRef: finalRootRef,
            contentRef: finalContentRef
          });
          if (itemPluginResponse?.rootRef) {
            finalRootRef = itemPluginResponse.rootRef;
          }
          if (itemPluginResponse?.contentRef) {
            finalContentRef = itemPluginResponse.contentRef;
          }
          if (itemPluginResponse?.propsEnhancers) {
            pluginPropEnhancers.push(itemPluginResponse.propsEnhancers);
            Object.keys(itemPluginResponse.propsEnhancers).forEach((propsEnhancerName) => {
              pluginPropEnhancersNames[propsEnhancerName] = true;
            });
          }
        });
        const resolvePropsEnhancer = (currentSlotName) => (currentSlotParams) => {
          const enhancedProps = {};
          pluginPropEnhancers.forEach((propsEnhancersForCurrentPlugin) => {
            const propsEnhancerForCurrentPluginAndSlot = propsEnhancersForCurrentPlugin[currentSlotName];
            if (propsEnhancerForCurrentPluginAndSlot != null) {
              Object.assign(enhancedProps, propsEnhancerForCurrentPluginAndSlot(currentSlotParams));
            }
          });
          return enhancedProps;
        };
        const propsEnhancers = Object.fromEntries(Object.keys(pluginPropEnhancersNames).map((propEnhancerName) => [propEnhancerName, resolvePropsEnhancer(propEnhancerName)]));
        return {
          contentRef: finalContentRef,
          rootRef: finalRootRef,
          propsEnhancers
        };
      };
      const wrapItem = ({
        itemId,
        children
      }) => {
        let finalChildren = children;
        for (let i = plugins.length - 1; i >= 0; i -= 1) {
          const plugin = plugins[i];
          if (plugin.wrapItem) {
            finalChildren = plugin.wrapItem({
              itemId,
              children: finalChildren,
              instance
            });
          }
        }
        return finalChildren;
      };
      const wrapRoot = ({
        children
      }) => {
        let finalChildren = children;
        for (let i = plugins.length - 1; i >= 0; i -= 1) {
          const plugin = plugins[i];
          if (plugin.wrapRoot) {
            finalChildren = plugin.wrapRoot({
              children: finalChildren,
              instance
            });
          }
        }
        return finalChildren;
      };
      return {
        runItemPlugins,
        wrapItem,
        wrapRoot,
        instance,
        rootRef,
        publicAPI
      };
    };
    exports2.useTreeViewBuildContext = useTreeViewBuildContext;
  }
});

// node_modules/@mui/x-tree-view/node/internals/useTreeView/useTreeView.js
var require_useTreeView = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/useTreeView/useTreeView.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.useTreeView = void 0;
    exports2.useTreeViewApiInitialization = useTreeViewApiInitialization;
    var _extends2 = _interopRequireDefault(require_extends());
    var React7 = _interopRequireWildcard(require_react());
    var _useForkRef = _interopRequireDefault(require_useForkRef2());
    var _useTreeViewModels = require_useTreeViewModels();
    var _corePlugins = require_corePlugins2();
    var _extractPluginParamsFromProps = require_extractPluginParamsFromProps();
    var _useTreeViewBuildContext = require_useTreeViewBuildContext();
    function useTreeViewApiInitialization(inputApiRef) {
      const fallbackPublicApiRef = React7.useRef({});
      if (inputApiRef) {
        if (inputApiRef.current == null) {
          inputApiRef.current = {};
        }
        return inputApiRef.current;
      }
      return fallbackPublicApiRef.current;
    }
    var useTreeView = ({
      plugins: inPlugins,
      rootRef,
      props
    }) => {
      const plugins = [..._corePlugins.TREE_VIEW_CORE_PLUGINS, ...inPlugins];
      const {
        pluginParams,
        forwardedProps,
        apiRef,
        experimentalFeatures,
        slots,
        slotProps
      } = (0, _extractPluginParamsFromProps.extractPluginParamsFromProps)({
        plugins,
        props
      });
      const models = (0, _useTreeViewModels.useTreeViewModels)(plugins, pluginParams);
      const instanceRef = React7.useRef({});
      const instance = instanceRef.current;
      const publicAPI = useTreeViewApiInitialization(apiRef);
      const innerRootRef = React7.useRef(null);
      const handleRootRef = (0, _useForkRef.default)(innerRootRef, rootRef);
      const contextValue = (0, _useTreeViewBuildContext.useTreeViewBuildContext)({
        plugins,
        instance,
        publicAPI,
        rootRef: innerRootRef
      });
      const [state, setState] = React7.useState(() => {
        const temp = {};
        plugins.forEach((plugin) => {
          if (plugin.getInitialState) {
            Object.assign(temp, plugin.getInitialState(pluginParams));
          }
        });
        return temp;
      });
      const rootPropsGetters = [];
      const runPlugin = (plugin) => {
        const pluginResponse = plugin({
          instance,
          params: pluginParams,
          slots,
          slotProps,
          experimentalFeatures,
          state,
          setState,
          rootRef: innerRootRef,
          models,
          plugins
        });
        if (pluginResponse.getRootProps) {
          rootPropsGetters.push(pluginResponse.getRootProps);
        }
        if (pluginResponse.publicAPI) {
          Object.assign(publicAPI, pluginResponse.publicAPI);
        }
        if (pluginResponse.instance) {
          Object.assign(instance, pluginResponse.instance);
        }
        if (pluginResponse.contextValue) {
          Object.assign(contextValue, pluginResponse.contextValue);
        }
      };
      plugins.forEach(runPlugin);
      const getRootProps = (otherHandlers = {}) => {
        const rootProps = (0, _extends2.default)({
          role: "tree"
        }, forwardedProps, otherHandlers, {
          ref: handleRootRef
        });
        rootPropsGetters.forEach((rootPropsGetter) => {
          Object.assign(rootProps, rootPropsGetter(otherHandlers));
        });
        return rootProps;
      };
      return {
        getRootProps,
        rootRef: handleRootRef,
        contextValue,
        instance
      };
    };
    exports2.useTreeView = useTreeView;
  }
});

// node_modules/@mui/x-tree-view/node/internals/useTreeView/index.js
var require_useTreeView2 = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/useTreeView/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "useTreeView", {
      enumerable: true,
      get: function() {
        return _useTreeView.useTreeView;
      }
    });
    var _useTreeView = require_useTreeView();
  }
});

// node_modules/@mui/x-tree-view/node/internals/TreeViewProvider/TreeViewContext.js
var require_TreeViewContext = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/TreeViewProvider/TreeViewContext.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.TreeViewContext = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var TreeViewContext = exports2.TreeViewContext = /* @__PURE__ */ React7.createContext(null);
    if (define_process_env_default.NODE_ENV !== "production") {
      TreeViewContext.displayName = "TreeViewContext";
    }
  }
});

// node_modules/@mui/x-tree-view/node/internals/TreeViewProvider/TreeViewProvider.js
var require_TreeViewProvider = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/TreeViewProvider/TreeViewProvider.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.TreeViewProvider = TreeViewProvider;
    var React7 = _interopRequireWildcard(require_react());
    var _TreeViewContext = require_TreeViewContext();
    var _jsxRuntime = require_jsx_runtime();
    function TreeViewProvider(props) {
      const {
        value,
        children
      } = props;
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_TreeViewContext.TreeViewContext.Provider, {
        value,
        children: value.wrapRoot({
          children,
          instance: value.instance
        })
      });
    }
  }
});

// node_modules/@mui/x-tree-view/node/internals/TreeViewProvider/useTreeViewContext.js
var require_useTreeViewContext = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/TreeViewProvider/useTreeViewContext.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.useTreeViewContext = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _TreeViewContext = require_TreeViewContext();
    var useTreeViewContext = () => {
      const context = React7.useContext(_TreeViewContext.TreeViewContext);
      if (context == null) {
        throw new Error(["MUI X: Could not find the Tree View context.", "It looks like you rendered your component outside of a SimpleTreeView or RichTreeView parent component.", "This can also happen if you are bundling multiple versions of the Tree View."].join("\n"));
      }
      return context;
    };
    exports2.useTreeViewContext = useTreeViewContext;
  }
});

// node_modules/@mui/x-tree-view/node/internals/TreeViewProvider/index.js
var require_TreeViewProvider2 = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/TreeViewProvider/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "TreeViewProvider", {
      enumerable: true,
      get: function() {
        return _TreeViewProvider.TreeViewProvider;
      }
    });
    Object.defineProperty(exports2, "useTreeViewContext", {
      enumerable: true,
      get: function() {
        return _useTreeViewContext.useTreeViewContext;
      }
    });
    var _TreeViewProvider = require_TreeViewProvider();
    var _useTreeViewContext = require_useTreeViewContext();
  }
});

// node_modules/@mui/x-tree-view/node/internals/utils/publishTreeViewEvent.js
var require_publishTreeViewEvent = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/utils/publishTreeViewEvent.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.publishTreeViewEvent = void 0;
    var publishTreeViewEvent = (instance, eventName, params) => {
      instance.$$publishEvent(eventName, params);
    };
    exports2.publishTreeViewEvent = publishTreeViewEvent;
  }
});

// node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewItems/useTreeViewItems.utils.js
var require_useTreeViewItems_utils = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewItems/useTreeViewItems.utils.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.buildSiblingIndexes = exports2.TREE_VIEW_ROOT_PARENT_ID = void 0;
    var TREE_VIEW_ROOT_PARENT_ID = exports2.TREE_VIEW_ROOT_PARENT_ID = "__TREE_VIEW_ROOT_PARENT_ID__";
    var buildSiblingIndexes = (siblings) => {
      const siblingsIndexLookup = {};
      siblings.forEach((childId, index) => {
        siblingsIndexLookup[childId] = index;
      });
      return siblingsIndexLookup;
    };
    exports2.buildSiblingIndexes = buildSiblingIndexes;
  }
});

// node_modules/@mui/x-tree-view/node/internals/TreeViewItemDepthContext/TreeViewItemDepthContext.js
var require_TreeViewItemDepthContext = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/TreeViewItemDepthContext/TreeViewItemDepthContext.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.TreeViewItemDepthContext = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var TreeViewItemDepthContext = exports2.TreeViewItemDepthContext = /* @__PURE__ */ React7.createContext(() => -1);
    if (define_process_env_default.NODE_ENV !== "production") {
      TreeViewItemDepthContext.displayName = "TreeViewItemDepthContext";
    }
  }
});

// node_modules/@mui/x-tree-view/node/internals/TreeViewItemDepthContext/index.js
var require_TreeViewItemDepthContext2 = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/TreeViewItemDepthContext/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "TreeViewItemDepthContext", {
      enumerable: true,
      get: function() {
        return _TreeViewItemDepthContext.TreeViewItemDepthContext;
      }
    });
    var _TreeViewItemDepthContext = require_TreeViewItemDepthContext();
  }
});

// node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewItems/useTreeViewItems.js
var require_useTreeViewItems = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewItems/useTreeViewItems.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.useTreeViewItems = void 0;
    var _extends2 = _interopRequireDefault(require_extends());
    var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
    var React7 = _interopRequireWildcard(require_react());
    var _publishTreeViewEvent = require_publishTreeViewEvent();
    var _useTreeViewItems = require_useTreeViewItems_utils();
    var _TreeViewItemDepthContext = require_TreeViewItemDepthContext2();
    var _useTreeViewId = require_useTreeViewId_utils();
    var _jsxRuntime = require_jsx_runtime();
    var _excluded = ["children"];
    var updateItemsState = ({
      items,
      isItemDisabled,
      getItemLabel,
      getItemId
    }) => {
      const itemMetaMap = {};
      const itemMap = {};
      const itemOrderedChildrenIds = {
        [_useTreeViewItems.TREE_VIEW_ROOT_PARENT_ID]: []
      };
      const processItem = (item, depth, parentId) => {
        const id = getItemId ? getItemId(item) : item.id;
        if (id == null) {
          throw new Error(["MUI X: The Tree View component requires all items to have a unique `id` property.", "Alternatively, you can use the `getItemId` prop to specify a custom id for each item.", "An item was provided without id in the `items` prop:", JSON.stringify(item)].join("\n"));
        }
        if (itemMetaMap[id] != null) {
          throw new Error(["MUI X: The Tree View component requires all items to have a unique `id` property.", "Alternatively, you can use the `getItemId` prop to specify a custom id for each item.", `Two items were provided with the same id in the \`items\` prop: "${id}"`].join("\n"));
        }
        const label = getItemLabel ? getItemLabel(item) : item.label;
        if (label == null) {
          throw new Error(["MUI X: The Tree View component requires all items to have a `label` property.", "Alternatively, you can use the `getItemLabel` prop to specify a custom label for each item.", "An item was provided without label in the `items` prop:", JSON.stringify(item)].join("\n"));
        }
        itemMetaMap[id] = {
          id,
          label,
          parentId,
          idAttribute: void 0,
          expandable: !!item.children?.length,
          disabled: isItemDisabled ? isItemDisabled(item) : false,
          depth
        };
        itemMap[id] = item;
        const parentIdWithDefault = parentId ?? _useTreeViewItems.TREE_VIEW_ROOT_PARENT_ID;
        if (!itemOrderedChildrenIds[parentIdWithDefault]) {
          itemOrderedChildrenIds[parentIdWithDefault] = [];
        }
        itemOrderedChildrenIds[parentIdWithDefault].push(id);
        item.children?.forEach((child) => processItem(child, depth + 1, id));
      };
      items.forEach((item) => processItem(item, 0, null));
      const itemChildrenIndexes = {};
      Object.keys(itemOrderedChildrenIds).forEach((parentId) => {
        itemChildrenIndexes[parentId] = (0, _useTreeViewItems.buildSiblingIndexes)(itemOrderedChildrenIds[parentId]);
      });
      return {
        itemMetaMap,
        itemMap,
        itemOrderedChildrenIds,
        itemChildrenIndexes
      };
    };
    var useTreeViewItems = ({
      instance,
      params,
      state,
      setState,
      experimentalFeatures
    }) => {
      const getItemMeta = React7.useCallback((itemId) => state.items.itemMetaMap[itemId], [state.items.itemMetaMap]);
      const getItem = React7.useCallback((itemId) => state.items.itemMap[itemId], [state.items.itemMap]);
      const getItemTree = React7.useCallback(() => {
        const getItemFromItemId = (id) => {
          const _state$items$itemMap$ = state.items.itemMap[id], item = (0, _objectWithoutPropertiesLoose2.default)(_state$items$itemMap$, _excluded);
          const newChildren = state.items.itemOrderedChildrenIds[id];
          if (newChildren) {
            item.children = newChildren.map(getItemFromItemId);
          }
          return item;
        };
        return state.items.itemOrderedChildrenIds[_useTreeViewItems.TREE_VIEW_ROOT_PARENT_ID].map(getItemFromItemId);
      }, [state.items.itemMap, state.items.itemOrderedChildrenIds]);
      const isItemDisabled = React7.useCallback((itemId) => {
        if (itemId == null) {
          return false;
        }
        let itemMeta = instance.getItemMeta(itemId);
        if (!itemMeta) {
          return false;
        }
        if (itemMeta.disabled) {
          return true;
        }
        while (itemMeta.parentId != null) {
          itemMeta = instance.getItemMeta(itemMeta.parentId);
          if (itemMeta.disabled) {
            return true;
          }
        }
        return false;
      }, [instance]);
      const getItemIndex = React7.useCallback((itemId) => {
        const parentId = instance.getItemMeta(itemId).parentId ?? _useTreeViewItems.TREE_VIEW_ROOT_PARENT_ID;
        return state.items.itemChildrenIndexes[parentId][itemId];
      }, [instance, state.items.itemChildrenIndexes]);
      const getItemOrderedChildrenIds = React7.useCallback((itemId) => state.items.itemOrderedChildrenIds[itemId ?? _useTreeViewItems.TREE_VIEW_ROOT_PARENT_ID] ?? [], [state.items.itemOrderedChildrenIds]);
      const getItemDOMElement = (itemId) => {
        const itemMeta = instance.getItemMeta(itemId);
        if (itemMeta == null) {
          return null;
        }
        return document.getElementById((0, _useTreeViewId.generateTreeItemIdAttribute)({
          treeId: state.id.treeId,
          itemId,
          id: itemMeta.idAttribute
        }));
      };
      const isItemNavigable = (itemId) => {
        if (params.disabledItemsFocusable) {
          return true;
        }
        return !instance.isItemDisabled(itemId);
      };
      const areItemUpdatesPreventedRef = React7.useRef(false);
      const preventItemUpdates = React7.useCallback(() => {
        areItemUpdatesPreventedRef.current = true;
      }, []);
      const areItemUpdatesPrevented = React7.useCallback(() => areItemUpdatesPreventedRef.current, []);
      React7.useEffect(() => {
        if (instance.areItemUpdatesPrevented()) {
          return;
        }
        setState((prevState) => {
          const newState = updateItemsState({
            items: params.items,
            isItemDisabled: params.isItemDisabled,
            getItemId: params.getItemId,
            getItemLabel: params.getItemLabel
          });
          Object.values(prevState.items.itemMetaMap).forEach((item) => {
            if (!newState.itemMetaMap[item.id]) {
              (0, _publishTreeViewEvent.publishTreeViewEvent)(instance, "removeItem", {
                id: item.id
              });
            }
          });
          return (0, _extends2.default)({}, prevState, {
            items: newState
          });
        });
      }, [instance, setState, params.items, params.isItemDisabled, params.getItemId, params.getItemLabel]);
      const getItemsToRender = () => {
        const getPropsFromItemId = (id) => {
          const item = state.items.itemMetaMap[id];
          return {
            label: item.label,
            itemId: item.id,
            id: item.idAttribute,
            children: state.items.itemOrderedChildrenIds[id]?.map(getPropsFromItemId)
          };
        };
        return state.items.itemOrderedChildrenIds[_useTreeViewItems.TREE_VIEW_ROOT_PARENT_ID].map(getPropsFromItemId);
      };
      return {
        getRootProps: () => ({
          style: {
            "--TreeView-itemChildrenIndentation": typeof params.itemChildrenIndentation === "number" ? `${params.itemChildrenIndentation}px` : params.itemChildrenIndentation
          }
        }),
        publicAPI: {
          getItem,
          getItemDOMElement,
          getItemTree,
          getItemOrderedChildrenIds
        },
        instance: {
          getItemMeta,
          getItem,
          getItemTree,
          getItemsToRender,
          getItemIndex,
          getItemDOMElement,
          getItemOrderedChildrenIds,
          isItemDisabled,
          isItemNavigable,
          preventItemUpdates,
          areItemUpdatesPrevented
        },
        contextValue: {
          items: {
            onItemClick: params.onItemClick,
            disabledItemsFocusable: params.disabledItemsFocusable,
            indentationAtItemLevel: experimentalFeatures.indentationAtItemLevel ?? false
          }
        }
      };
    };
    exports2.useTreeViewItems = useTreeViewItems;
    useTreeViewItems.getInitialState = (params) => ({
      items: updateItemsState({
        items: params.items,
        isItemDisabled: params.isItemDisabled,
        getItemId: params.getItemId,
        getItemLabel: params.getItemLabel
      })
    });
    useTreeViewItems.getDefaultizedParams = ({
      params
    }) => (0, _extends2.default)({}, params, {
      disabledItemsFocusable: params.disabledItemsFocusable ?? false,
      itemChildrenIndentation: params.itemChildrenIndentation ?? "12px"
    });
    useTreeViewItems.wrapRoot = ({
      children,
      instance
    }) => {
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_TreeViewItemDepthContext.TreeViewItemDepthContext.Provider, {
        value: (itemId) => instance.getItemMeta(itemId)?.depth ?? 0,
        children
      });
    };
    useTreeViewItems.params = {
      disabledItemsFocusable: true,
      items: true,
      isItemDisabled: true,
      getItemLabel: true,
      getItemId: true,
      onItemClick: true,
      itemChildrenIndentation: true
    };
  }
});

// node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewItems/index.js
var require_useTreeViewItems2 = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewItems/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "TREE_VIEW_ROOT_PARENT_ID", {
      enumerable: true,
      get: function() {
        return _useTreeViewItems2.TREE_VIEW_ROOT_PARENT_ID;
      }
    });
    Object.defineProperty(exports2, "buildSiblingIndexes", {
      enumerable: true,
      get: function() {
        return _useTreeViewItems2.buildSiblingIndexes;
      }
    });
    Object.defineProperty(exports2, "useTreeViewItems", {
      enumerable: true,
      get: function() {
        return _useTreeViewItems.useTreeViewItems;
      }
    });
    var _useTreeViewItems = require_useTreeViewItems();
    var _useTreeViewItems2 = require_useTreeViewItems_utils();
  }
});

// node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewExpansion/useTreeViewExpansion.js
var require_useTreeViewExpansion = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewExpansion/useTreeViewExpansion.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.useTreeViewExpansion = void 0;
    var _extends2 = _interopRequireDefault(require_extends());
    var React7 = _interopRequireWildcard(require_react());
    var _useEventCallback = _interopRequireDefault(require_useEventCallback2());
    var useTreeViewExpansion = ({
      instance,
      params,
      models
    }) => {
      const expandedItemsMap = React7.useMemo(() => {
        const temp = /* @__PURE__ */ new Map();
        models.expandedItems.value.forEach((id) => {
          temp.set(id, true);
        });
        return temp;
      }, [models.expandedItems.value]);
      const setExpandedItems = (event, value) => {
        params.onExpandedItemsChange?.(event, value);
        models.expandedItems.setControlledValue(value);
      };
      const isItemExpanded = React7.useCallback((itemId) => expandedItemsMap.has(itemId), [expandedItemsMap]);
      const isItemExpandable = React7.useCallback((itemId) => !!instance.getItemMeta(itemId)?.expandable, [instance]);
      const toggleItemExpansion = (0, _useEventCallback.default)((event, itemId) => {
        const isExpandedBefore = instance.isItemExpanded(itemId);
        instance.setItemExpansion(event, itemId, !isExpandedBefore);
      });
      const setItemExpansion = (0, _useEventCallback.default)((event, itemId, isExpanded) => {
        const isExpandedBefore = instance.isItemExpanded(itemId);
        if (isExpandedBefore === isExpanded) {
          return;
        }
        let newExpanded;
        if (isExpanded) {
          newExpanded = [itemId].concat(models.expandedItems.value);
        } else {
          newExpanded = models.expandedItems.value.filter((id) => id !== itemId);
        }
        if (params.onItemExpansionToggle) {
          params.onItemExpansionToggle(event, itemId, isExpanded);
        }
        setExpandedItems(event, newExpanded);
      });
      const expandAllSiblings = (event, itemId) => {
        const itemMeta = instance.getItemMeta(itemId);
        const siblings = instance.getItemOrderedChildrenIds(itemMeta.parentId);
        const diff = siblings.filter((child) => instance.isItemExpandable(child) && !instance.isItemExpanded(child));
        const newExpanded = models.expandedItems.value.concat(diff);
        if (diff.length > 0) {
          if (params.onItemExpansionToggle) {
            diff.forEach((newlyExpandedItemId) => {
              params.onItemExpansionToggle(event, newlyExpandedItemId, true);
            });
          }
          setExpandedItems(event, newExpanded);
        }
      };
      const expansionTrigger = React7.useMemo(() => {
        if (params.expansionTrigger) {
          return params.expansionTrigger;
        }
        if (instance.isTreeViewEditable) {
          return "iconContainer";
        }
        return "content";
      }, [params.expansionTrigger, instance.isTreeViewEditable]);
      return {
        publicAPI: {
          setItemExpansion
        },
        instance: {
          isItemExpanded,
          isItemExpandable,
          setItemExpansion,
          toggleItemExpansion,
          expandAllSiblings
        },
        contextValue: {
          expansion: {
            expansionTrigger
          }
        }
      };
    };
    exports2.useTreeViewExpansion = useTreeViewExpansion;
    useTreeViewExpansion.models = {
      expandedItems: {
        getDefaultValue: (params) => params.defaultExpandedItems
      }
    };
    var DEFAULT_EXPANDED_ITEMS = [];
    useTreeViewExpansion.getDefaultizedParams = ({
      params
    }) => (0, _extends2.default)({}, params, {
      defaultExpandedItems: params.defaultExpandedItems ?? DEFAULT_EXPANDED_ITEMS
    });
    useTreeViewExpansion.params = {
      expandedItems: true,
      defaultExpandedItems: true,
      onExpandedItemsChange: true,
      onItemExpansionToggle: true,
      expansionTrigger: true
    };
  }
});

// node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewExpansion/index.js
var require_useTreeViewExpansion2 = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewExpansion/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "useTreeViewExpansion", {
      enumerable: true,
      get: function() {
        return _useTreeViewExpansion.useTreeViewExpansion;
      }
    });
    var _useTreeViewExpansion = require_useTreeViewExpansion();
  }
});

// node_modules/@mui/x-tree-view/node/internals/utils/tree.js
var require_tree = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/utils/tree.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.isTargetInDescendants = exports2.getPreviousNavigableItem = exports2.getNonDisabledItemsInRange = exports2.getNextNavigableItem = exports2.getLastNavigableItem = exports2.getFirstNavigableItem = exports2.getAllNavigableItems = exports2.findOrderInTremauxTree = void 0;
    var getLastNavigableItemInArray = (instance, items) => {
      let itemIndex = items.length - 1;
      while (itemIndex >= 0 && !instance.isItemNavigable(items[itemIndex])) {
        itemIndex -= 1;
      }
      if (itemIndex === -1) {
        return void 0;
      }
      return items[itemIndex];
    };
    var getPreviousNavigableItem = (instance, itemId) => {
      const itemMeta = instance.getItemMeta(itemId);
      const siblings = instance.getItemOrderedChildrenIds(itemMeta.parentId);
      const itemIndex = instance.getItemIndex(itemId);
      if (itemIndex === 0) {
        return itemMeta.parentId;
      }
      let previousNavigableSiblingIndex = itemIndex - 1;
      while (!instance.isItemNavigable(siblings[previousNavigableSiblingIndex]) && previousNavigableSiblingIndex >= 0) {
        previousNavigableSiblingIndex -= 1;
      }
      if (previousNavigableSiblingIndex === -1) {
        if (itemMeta.parentId == null) {
          return null;
        }
        return getPreviousNavigableItem(instance, itemMeta.parentId);
      }
      let currentItemId = siblings[previousNavigableSiblingIndex];
      let lastNavigableChild = getLastNavigableItemInArray(instance, instance.getItemOrderedChildrenIds(currentItemId));
      while (instance.isItemExpanded(currentItemId) && lastNavigableChild != null) {
        currentItemId = lastNavigableChild;
        lastNavigableChild = instance.getItemOrderedChildrenIds(currentItemId).find(instance.isItemNavigable);
      }
      return currentItemId;
    };
    exports2.getPreviousNavigableItem = getPreviousNavigableItem;
    var getNextNavigableItem = (instance, itemId) => {
      if (instance.isItemExpanded(itemId)) {
        const firstNavigableChild = instance.getItemOrderedChildrenIds(itemId).find(instance.isItemNavigable);
        if (firstNavigableChild != null) {
          return firstNavigableChild;
        }
      }
      let itemMeta = instance.getItemMeta(itemId);
      while (itemMeta != null) {
        const siblings = instance.getItemOrderedChildrenIds(itemMeta.parentId);
        const currentItemIndex = instance.getItemIndex(itemMeta.id);
        if (currentItemIndex < siblings.length - 1) {
          let nextItemIndex = currentItemIndex + 1;
          while (!instance.isItemNavigable(siblings[nextItemIndex]) && nextItemIndex < siblings.length - 1) {
            nextItemIndex += 1;
          }
          if (instance.isItemNavigable(siblings[nextItemIndex])) {
            return siblings[nextItemIndex];
          }
        }
        itemMeta = instance.getItemMeta(itemMeta.parentId);
      }
      return null;
    };
    exports2.getNextNavigableItem = getNextNavigableItem;
    var getLastNavigableItem = (instance) => {
      let itemId = null;
      while (itemId == null || instance.isItemExpanded(itemId)) {
        const children = instance.getItemOrderedChildrenIds(itemId);
        const lastNavigableChild = getLastNavigableItemInArray(instance, children);
        if (lastNavigableChild == null) {
          return itemId;
        }
        itemId = lastNavigableChild;
      }
      return itemId;
    };
    exports2.getLastNavigableItem = getLastNavigableItem;
    var getFirstNavigableItem = (instance) => instance.getItemOrderedChildrenIds(null).find(instance.isItemNavigable);
    exports2.getFirstNavigableItem = getFirstNavigableItem;
    var findOrderInTremauxTree = (instance, itemAId, itemBId) => {
      if (itemAId === itemBId) {
        return [itemAId, itemBId];
      }
      const itemMetaA = instance.getItemMeta(itemAId);
      const itemMetaB = instance.getItemMeta(itemBId);
      if (itemMetaA.parentId === itemMetaB.id || itemMetaB.parentId === itemMetaA.id) {
        return itemMetaB.parentId === itemMetaA.id ? [itemMetaA.id, itemMetaB.id] : [itemMetaB.id, itemMetaA.id];
      }
      const aFamily = [itemMetaA.id];
      const bFamily = [itemMetaB.id];
      let aAncestor = itemMetaA.parentId;
      let bAncestor = itemMetaB.parentId;
      let aAncestorIsCommon = bFamily.indexOf(aAncestor) !== -1;
      let bAncestorIsCommon = aFamily.indexOf(bAncestor) !== -1;
      let continueA = true;
      let continueB = true;
      while (!bAncestorIsCommon && !aAncestorIsCommon) {
        if (continueA) {
          aFamily.push(aAncestor);
          aAncestorIsCommon = bFamily.indexOf(aAncestor) !== -1;
          continueA = aAncestor !== null;
          if (!aAncestorIsCommon && continueA) {
            aAncestor = instance.getItemMeta(aAncestor).parentId;
          }
        }
        if (continueB && !aAncestorIsCommon) {
          bFamily.push(bAncestor);
          bAncestorIsCommon = aFamily.indexOf(bAncestor) !== -1;
          continueB = bAncestor !== null;
          if (!bAncestorIsCommon && continueB) {
            bAncestor = instance.getItemMeta(bAncestor).parentId;
          }
        }
      }
      const commonAncestor = aAncestorIsCommon ? aAncestor : bAncestor;
      const ancestorFamily = instance.getItemOrderedChildrenIds(commonAncestor);
      const aSide = aFamily[aFamily.indexOf(commonAncestor) - 1];
      const bSide = bFamily[bFamily.indexOf(commonAncestor) - 1];
      return ancestorFamily.indexOf(aSide) < ancestorFamily.indexOf(bSide) ? [itemAId, itemBId] : [itemBId, itemAId];
    };
    exports2.findOrderInTremauxTree = findOrderInTremauxTree;
    var getNonDisabledItemsInRange = (instance, itemAId, itemBId) => {
      const getNextItem = (itemId) => {
        if (instance.isItemExpandable(itemId) && instance.isItemExpanded(itemId)) {
          return instance.getItemOrderedChildrenIds(itemId)[0];
        }
        let itemMeta = instance.getItemMeta(itemId);
        while (itemMeta != null) {
          const siblings = instance.getItemOrderedChildrenIds(itemMeta.parentId);
          const currentItemIndex = instance.getItemIndex(itemMeta.id);
          if (currentItemIndex < siblings.length - 1) {
            return siblings[currentItemIndex + 1];
          }
          itemMeta = instance.getItemMeta(itemMeta.parentId);
        }
        throw new Error("Invalid range");
      };
      const [first, last] = findOrderInTremauxTree(instance, itemAId, itemBId);
      const items = [first];
      let current = first;
      while (current !== last) {
        current = getNextItem(current);
        if (!instance.isItemDisabled(current)) {
          items.push(current);
        }
      }
      return items;
    };
    exports2.getNonDisabledItemsInRange = getNonDisabledItemsInRange;
    var getAllNavigableItems = (instance) => {
      let item = getFirstNavigableItem(instance);
      const navigableItems = [];
      while (item != null) {
        navigableItems.push(item);
        item = getNextNavigableItem(instance, item);
      }
      return navigableItems;
    };
    exports2.getAllNavigableItems = getAllNavigableItems;
    var isTargetInDescendants = (target, itemRoot) => {
      return itemRoot !== target.closest('*[role="treeitem"]');
    };
    exports2.isTargetInDescendants = isTargetInDescendants;
  }
});

// node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewSelection/useTreeViewSelection.utils.js
var require_useTreeViewSelection_utils = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewSelection/useTreeViewSelection.utils.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.getLookupFromArray = exports2.convertSelectedItemsToArray = void 0;
    var convertSelectedItemsToArray = (model) => {
      if (Array.isArray(model)) {
        return model;
      }
      if (model != null) {
        return [model];
      }
      return [];
    };
    exports2.convertSelectedItemsToArray = convertSelectedItemsToArray;
    var getLookupFromArray = (array) => {
      const lookup = {};
      array.forEach((itemId) => {
        lookup[itemId] = true;
      });
      return lookup;
    };
    exports2.getLookupFromArray = getLookupFromArray;
  }
});

// node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewSelection/useTreeViewSelection.js
var require_useTreeViewSelection = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewSelection/useTreeViewSelection.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.useTreeViewSelection = void 0;
    var _extends2 = _interopRequireDefault(require_extends());
    var React7 = _interopRequireWildcard(require_react());
    var _tree = require_tree();
    var _useTreeViewSelection = require_useTreeViewSelection_utils();
    var useTreeViewSelection = ({
      instance,
      params,
      models
    }) => {
      const lastSelectedItem = React7.useRef(null);
      const lastSelectedRange = React7.useRef({});
      const selectedItemsMap = React7.useMemo(() => {
        const temp = /* @__PURE__ */ new Map();
        if (Array.isArray(models.selectedItems.value)) {
          models.selectedItems.value.forEach((id) => {
            temp.set(id, true);
          });
        } else if (models.selectedItems.value != null) {
          temp.set(models.selectedItems.value, true);
        }
        return temp;
      }, [models.selectedItems.value]);
      const setSelectedItems = (event, newSelectedItems) => {
        if (params.onItemSelectionToggle) {
          if (params.multiSelect) {
            const addedItems = newSelectedItems.filter((itemId) => !instance.isItemSelected(itemId));
            const removedItems = models.selectedItems.value.filter((itemId) => !newSelectedItems.includes(itemId));
            addedItems.forEach((itemId) => {
              params.onItemSelectionToggle(event, itemId, true);
            });
            removedItems.forEach((itemId) => {
              params.onItemSelectionToggle(event, itemId, false);
            });
          } else if (newSelectedItems !== models.selectedItems.value) {
            if (models.selectedItems.value != null) {
              params.onItemSelectionToggle(event, models.selectedItems.value, false);
            }
            if (newSelectedItems != null) {
              params.onItemSelectionToggle(event, newSelectedItems, true);
            }
          }
        }
        if (params.onSelectedItemsChange) {
          params.onSelectedItemsChange(event, newSelectedItems);
        }
        models.selectedItems.setControlledValue(newSelectedItems);
      };
      const isItemSelected = (itemId) => selectedItemsMap.has(itemId);
      const selectItem = ({
        event,
        itemId,
        keepExistingSelection = false,
        shouldBeSelected
      }) => {
        if (params.disableSelection) {
          return;
        }
        let newSelected;
        if (keepExistingSelection) {
          const cleanSelectedItems = (0, _useTreeViewSelection.convertSelectedItemsToArray)(models.selectedItems.value);
          const isSelectedBefore = instance.isItemSelected(itemId);
          if (isSelectedBefore && (shouldBeSelected === false || shouldBeSelected == null)) {
            newSelected = cleanSelectedItems.filter((id) => id !== itemId);
          } else if (!isSelectedBefore && (shouldBeSelected === true || shouldBeSelected == null)) {
            newSelected = [itemId].concat(cleanSelectedItems);
          } else {
            newSelected = cleanSelectedItems;
          }
        } else {
          if (shouldBeSelected === false || shouldBeSelected == null && instance.isItemSelected(itemId)) {
            newSelected = params.multiSelect ? [] : null;
          } else {
            newSelected = params.multiSelect ? [itemId] : itemId;
          }
        }
        setSelectedItems(event, newSelected);
        lastSelectedItem.current = itemId;
        lastSelectedRange.current = {};
      };
      const selectRange = (event, [start, end]) => {
        if (params.disableSelection || !params.multiSelect) {
          return;
        }
        let newSelectedItems = (0, _useTreeViewSelection.convertSelectedItemsToArray)(models.selectedItems.value).slice();
        if (Object.keys(lastSelectedRange.current).length > 0) {
          newSelectedItems = newSelectedItems.filter((id) => !lastSelectedRange.current[id]);
        }
        const selectedItemsLookup = (0, _useTreeViewSelection.getLookupFromArray)(newSelectedItems);
        const range = (0, _tree.getNonDisabledItemsInRange)(instance, start, end);
        const itemsToAddToModel = range.filter((id) => !selectedItemsLookup[id]);
        newSelectedItems = newSelectedItems.concat(itemsToAddToModel);
        setSelectedItems(event, newSelectedItems);
        lastSelectedRange.current = (0, _useTreeViewSelection.getLookupFromArray)(range);
      };
      const expandSelectionRange = (event, itemId) => {
        if (lastSelectedItem.current != null) {
          const [start, end] = (0, _tree.findOrderInTremauxTree)(instance, itemId, lastSelectedItem.current);
          selectRange(event, [start, end]);
        }
      };
      const selectRangeFromStartToItem = (event, itemId) => {
        selectRange(event, [(0, _tree.getFirstNavigableItem)(instance), itemId]);
      };
      const selectRangeFromItemToEnd = (event, itemId) => {
        selectRange(event, [itemId, (0, _tree.getLastNavigableItem)(instance)]);
      };
      const selectAllNavigableItems = (event) => {
        if (params.disableSelection || !params.multiSelect) {
          return;
        }
        const navigableItems = (0, _tree.getAllNavigableItems)(instance);
        setSelectedItems(event, navigableItems);
        lastSelectedRange.current = (0, _useTreeViewSelection.getLookupFromArray)(navigableItems);
      };
      const selectItemFromArrowNavigation = (event, currentItem, nextItem) => {
        if (params.disableSelection || !params.multiSelect) {
          return;
        }
        let newSelectedItems = (0, _useTreeViewSelection.convertSelectedItemsToArray)(models.selectedItems.value).slice();
        if (Object.keys(lastSelectedRange.current).length === 0) {
          newSelectedItems.push(nextItem);
          lastSelectedRange.current = {
            [currentItem]: true,
            [nextItem]: true
          };
        } else {
          if (!lastSelectedRange.current[currentItem]) {
            lastSelectedRange.current = {};
          }
          if (lastSelectedRange.current[nextItem]) {
            newSelectedItems = newSelectedItems.filter((id) => id !== currentItem);
            delete lastSelectedRange.current[currentItem];
          } else {
            newSelectedItems.push(nextItem);
            lastSelectedRange.current[nextItem] = true;
          }
        }
        setSelectedItems(event, newSelectedItems);
      };
      return {
        getRootProps: () => ({
          "aria-multiselectable": params.multiSelect
        }),
        publicAPI: {
          selectItem
        },
        instance: {
          isItemSelected,
          selectItem,
          selectAllNavigableItems,
          expandSelectionRange,
          selectRangeFromStartToItem,
          selectRangeFromItemToEnd,
          selectItemFromArrowNavigation
        },
        contextValue: {
          selection: {
            multiSelect: params.multiSelect,
            checkboxSelection: params.checkboxSelection,
            disableSelection: params.disableSelection
          }
        }
      };
    };
    exports2.useTreeViewSelection = useTreeViewSelection;
    useTreeViewSelection.models = {
      selectedItems: {
        getDefaultValue: (params) => params.defaultSelectedItems
      }
    };
    var DEFAULT_SELECTED_ITEMS = [];
    useTreeViewSelection.getDefaultizedParams = ({
      params
    }) => (0, _extends2.default)({}, params, {
      disableSelection: params.disableSelection ?? false,
      multiSelect: params.multiSelect ?? false,
      checkboxSelection: params.checkboxSelection ?? false,
      defaultSelectedItems: params.defaultSelectedItems ?? (params.multiSelect ? DEFAULT_SELECTED_ITEMS : null)
    });
    useTreeViewSelection.params = {
      disableSelection: true,
      multiSelect: true,
      checkboxSelection: true,
      defaultSelectedItems: true,
      selectedItems: true,
      onSelectedItemsChange: true,
      onItemSelectionToggle: true
    };
  }
});

// node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewSelection/index.js
var require_useTreeViewSelection2 = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewSelection/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "useTreeViewSelection", {
      enumerable: true,
      get: function() {
        return _useTreeViewSelection.useTreeViewSelection;
      }
    });
    var _useTreeViewSelection = require_useTreeViewSelection();
  }
});

// node_modules/@mui/x-tree-view/node/internals/utils/cleanupTracking/TimerBasedCleanupTracking.js
var require_TimerBasedCleanupTracking = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/utils/cleanupTracking/TimerBasedCleanupTracking.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.TimerBasedCleanupTracking = void 0;
    var CLEANUP_TIMER_LOOP_MILLIS = 1e3;
    var TimerBasedCleanupTracking = class {
      constructor(timeout = CLEANUP_TIMER_LOOP_MILLIS) {
        this.timeouts = /* @__PURE__ */ new Map();
        this.cleanupTimeout = CLEANUP_TIMER_LOOP_MILLIS;
        this.cleanupTimeout = timeout;
      }
      register(object, unsubscribe, unregisterToken) {
        if (!this.timeouts) {
          this.timeouts = /* @__PURE__ */ new Map();
        }
        const timeout = setTimeout(() => {
          if (typeof unsubscribe === "function") {
            unsubscribe();
          }
          this.timeouts.delete(unregisterToken.cleanupToken);
        }, this.cleanupTimeout);
        this.timeouts.set(unregisterToken.cleanupToken, timeout);
      }
      unregister(unregisterToken) {
        const timeout = this.timeouts.get(unregisterToken.cleanupToken);
        if (timeout) {
          this.timeouts.delete(unregisterToken.cleanupToken);
          clearTimeout(timeout);
        }
      }
      reset() {
        if (this.timeouts) {
          this.timeouts.forEach((value, key) => {
            this.unregister({
              cleanupToken: key
            });
          });
          this.timeouts = void 0;
        }
      }
    };
    exports2.TimerBasedCleanupTracking = TimerBasedCleanupTracking;
  }
});

// node_modules/@mui/x-tree-view/node/internals/utils/cleanupTracking/FinalizationRegistryBasedCleanupTracking.js
var require_FinalizationRegistryBasedCleanupTracking = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/utils/cleanupTracking/FinalizationRegistryBasedCleanupTracking.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.FinalizationRegistryBasedCleanupTracking = void 0;
    var FinalizationRegistryBasedCleanupTracking = class {
      constructor() {
        this.registry = new FinalizationRegistry((unsubscribe) => {
          if (typeof unsubscribe === "function") {
            unsubscribe();
          }
        });
      }
      register(object, unsubscribe, unregisterToken) {
        this.registry.register(object, unsubscribe, unregisterToken);
      }
      unregister(unregisterToken) {
        this.registry.unregister(unregisterToken);
      }
      // eslint-disable-next-line class-methods-use-this
      reset() {
      }
    };
    exports2.FinalizationRegistryBasedCleanupTracking = FinalizationRegistryBasedCleanupTracking;
  }
});

// node_modules/@mui/x-tree-view/node/internals/hooks/useInstanceEventHandler.js
var require_useInstanceEventHandler = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/hooks/useInstanceEventHandler.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.createUseInstanceEventHandler = createUseInstanceEventHandler;
    exports2.useInstanceEventHandler = exports2.unstable_resetCleanupTracking = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _TimerBasedCleanupTracking = require_TimerBasedCleanupTracking();
    var _FinalizationRegistryBasedCleanupTracking = require_FinalizationRegistryBasedCleanupTracking();
    var ObjectToBeRetainedByReact = class {
    };
    function createUseInstanceEventHandler(registryContainer2) {
      let cleanupTokensCounter = 0;
      return function useInstanceEventHandler2(instance, eventName, handler) {
        if (registryContainer2.registry === null) {
          registryContainer2.registry = typeof FinalizationRegistry !== "undefined" ? new _FinalizationRegistryBasedCleanupTracking.FinalizationRegistryBasedCleanupTracking() : new _TimerBasedCleanupTracking.TimerBasedCleanupTracking();
        }
        const [objectRetainedByReact] = React7.useState(new ObjectToBeRetainedByReact());
        const subscription = React7.useRef(null);
        const handlerRef = React7.useRef(void 0);
        handlerRef.current = handler;
        const cleanupTokenRef = React7.useRef(null);
        if (!subscription.current && handlerRef.current) {
          const enhancedHandler = (params, event) => {
            if (!event.defaultMuiPrevented) {
              handlerRef.current?.(params, event);
            }
          };
          subscription.current = instance.$$subscribeEvent(eventName, enhancedHandler);
          cleanupTokensCounter += 1;
          cleanupTokenRef.current = {
            cleanupToken: cleanupTokensCounter
          };
          registryContainer2.registry.register(
            objectRetainedByReact,
            // The callback below will be called once this reference stops being retained
            () => {
              subscription.current?.();
              subscription.current = null;
              cleanupTokenRef.current = null;
            },
            cleanupTokenRef.current
          );
        } else if (!handlerRef.current && subscription.current) {
          subscription.current();
          subscription.current = null;
          if (cleanupTokenRef.current) {
            registryContainer2.registry.unregister(cleanupTokenRef.current);
            cleanupTokenRef.current = null;
          }
        }
        React7.useEffect(() => {
          if (!subscription.current && handlerRef.current) {
            const enhancedHandler = (params, event) => {
              if (!event.defaultMuiPrevented) {
                handlerRef.current?.(params, event);
              }
            };
            subscription.current = instance.$$subscribeEvent(eventName, enhancedHandler);
          }
          if (cleanupTokenRef.current && registryContainer2.registry) {
            registryContainer2.registry.unregister(cleanupTokenRef.current);
            cleanupTokenRef.current = null;
          }
          return () => {
            subscription.current?.();
            subscription.current = null;
          };
        }, [instance, eventName]);
      };
    }
    var registryContainer = {
      registry: null
    };
    var unstable_resetCleanupTracking = () => {
      registryContainer.registry?.reset();
      registryContainer.registry = null;
    };
    exports2.unstable_resetCleanupTracking = unstable_resetCleanupTracking;
    var useInstanceEventHandler = exports2.useInstanceEventHandler = createUseInstanceEventHandler(registryContainer);
  }
});

// node_modules/@mui/x-tree-view/node/internals/utils/utils.js
var require_utils2 = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/utils/utils.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.escapeOperandAttributeSelector = escapeOperandAttributeSelector;
    exports2.getActiveElement = void 0;
    var getActiveElement = (root = document) => {
      const activeEl = root.activeElement;
      if (!activeEl) {
        return null;
      }
      if (activeEl.shadowRoot) {
        return getActiveElement(activeEl.shadowRoot);
      }
      return activeEl;
    };
    exports2.getActiveElement = getActiveElement;
    function escapeOperandAttributeSelector(operand) {
      return operand.replace(/["\\]/g, "\\$&");
    }
  }
});

// node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewFocus/useTreeViewFocus.js
var require_useTreeViewFocus = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewFocus/useTreeViewFocus.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.useTreeViewFocus = void 0;
    var _extends2 = _interopRequireDefault(require_extends());
    var React7 = _interopRequireWildcard(require_react());
    var _useEventCallback = _interopRequireDefault(require_useEventCallback2());
    var _ownerDocument = _interopRequireDefault(require_ownerDocument2());
    var _useInstanceEventHandler = require_useInstanceEventHandler();
    var _utils = require_utils2();
    var _tree = require_tree();
    var _useTreeViewSelection = require_useTreeViewSelection_utils();
    var useDefaultFocusableItemId = (instance, selectedItems) => {
      let tabbableItemId = (0, _useTreeViewSelection.convertSelectedItemsToArray)(selectedItems).find((itemId) => {
        if (!instance.isItemNavigable(itemId)) {
          return false;
        }
        const itemMeta = instance.getItemMeta(itemId);
        return itemMeta && (itemMeta.parentId == null || instance.isItemExpanded(itemMeta.parentId));
      });
      if (tabbableItemId == null) {
        tabbableItemId = (0, _tree.getFirstNavigableItem)(instance);
      }
      return tabbableItemId;
    };
    var useTreeViewFocus = ({
      instance,
      params,
      state,
      setState,
      models,
      rootRef
    }) => {
      const defaultFocusableItemId = useDefaultFocusableItemId(instance, models.selectedItems.value);
      const setFocusedItemId = (0, _useEventCallback.default)((itemId) => {
        const cleanItemId = typeof itemId === "function" ? itemId(state.focusedItemId) : itemId;
        if (state.focusedItemId !== cleanItemId) {
          setState((prevState) => (0, _extends2.default)({}, prevState, {
            focusedItemId: cleanItemId
          }));
        }
      });
      const isTreeViewFocused = React7.useCallback(() => !!rootRef.current && rootRef.current.contains((0, _utils.getActiveElement)((0, _ownerDocument.default)(rootRef.current))), [rootRef]);
      const isItemFocused = React7.useCallback((itemId) => state.focusedItemId === itemId && isTreeViewFocused(), [state.focusedItemId, isTreeViewFocused]);
      const isItemVisible = (itemId) => {
        const itemMeta = instance.getItemMeta(itemId);
        return itemMeta && (itemMeta.parentId == null || instance.isItemExpanded(itemMeta.parentId));
      };
      const innerFocusItem = (event, itemId) => {
        const itemElement = instance.getItemDOMElement(itemId);
        if (itemElement) {
          itemElement.focus();
        }
        setFocusedItemId(itemId);
        if (params.onItemFocus) {
          params.onItemFocus(event, itemId);
        }
      };
      const focusItem = (0, _useEventCallback.default)((event, itemId) => {
        if (isItemVisible(itemId)) {
          innerFocusItem(event, itemId);
        }
      });
      const removeFocusedItem = (0, _useEventCallback.default)(() => {
        if (state.focusedItemId == null) {
          return;
        }
        const itemMeta = instance.getItemMeta(state.focusedItemId);
        if (itemMeta) {
          const itemElement = instance.getItemDOMElement(state.focusedItemId);
          if (itemElement) {
            itemElement.blur();
          }
        }
        setFocusedItemId(null);
      });
      const canItemBeTabbed = (itemId) => itemId === defaultFocusableItemId;
      (0, _useInstanceEventHandler.useInstanceEventHandler)(instance, "removeItem", ({
        id
      }) => {
        if (state.focusedItemId === id) {
          innerFocusItem(null, defaultFocusableItemId);
        }
      });
      const createRootHandleFocus = (otherHandlers) => (event) => {
        otherHandlers.onFocus?.(event);
        if (event.defaultMuiPrevented) {
          return;
        }
        if (event.target === event.currentTarget) {
          innerFocusItem(event, defaultFocusableItemId);
        }
      };
      return {
        getRootProps: (otherHandlers) => ({
          onFocus: createRootHandleFocus(otherHandlers)
        }),
        publicAPI: {
          focusItem
        },
        instance: {
          isItemFocused,
          canItemBeTabbed,
          focusItem,
          removeFocusedItem
        }
      };
    };
    exports2.useTreeViewFocus = useTreeViewFocus;
    useTreeViewFocus.getInitialState = () => ({
      focusedItemId: null
    });
    useTreeViewFocus.params = {
      onItemFocus: true
    };
  }
});

// node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewFocus/index.js
var require_useTreeViewFocus2 = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewFocus/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "useTreeViewFocus", {
      enumerable: true,
      get: function() {
        return _useTreeViewFocus.useTreeViewFocus;
      }
    });
    var _useTreeViewFocus = require_useTreeViewFocus();
  }
});

// node_modules/@mui/system/RtlProvider/index.js
var require_RtlProvider2 = __commonJS({
  "node_modules/@mui/system/RtlProvider/index.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.useRtl = exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _jsxRuntime = require_jsx_runtime();
    var RtlContext = /* @__PURE__ */ React7.createContext();
    function RtlProvider({
      value,
      ...props
    }) {
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(RtlContext.Provider, {
        value: value ?? true,
        ...props
      });
    }
    define_process_env_default.NODE_ENV !== "production" ? RtlProvider.propTypes = {
      children: _propTypes.default.node,
      value: _propTypes.default.bool
    } : void 0;
    var useRtl = () => {
      const value = React7.useContext(RtlContext);
      return value ?? false;
    };
    exports2.useRtl = useRtl;
    var _default = exports2.default = RtlProvider;
  }
});

// node_modules/@mui/x-tree-view/node/internals/utils/plugins.js
var require_plugins = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/utils/plugins.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.hasPlugin = void 0;
    var hasPlugin = (instance, plugin) => {
      const plugins = instance.getAvailablePlugins();
      return plugins.has(plugin);
    };
    exports2.hasPlugin = hasPlugin;
  }
});

// node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewLabel/useTreeViewLabel.itemPlugin.js
var require_useTreeViewLabel_itemPlugin = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewLabel/useTreeViewLabel.itemPlugin.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.useTreeViewLabelItemPlugin = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _TreeViewProvider = require_TreeViewProvider2();
    var useTreeViewLabelItemPlugin = ({
      props
    }) => {
      const {
        instance
      } = (0, _TreeViewProvider.useTreeViewContext)();
      const {
        label,
        itemId
      } = props;
      const [labelInputValue, setLabelInputValue] = React7.useState(label);
      const isItemBeingEdited = instance.isItemBeingEdited(itemId);
      React7.useEffect(() => {
        if (!isItemBeingEdited) {
          setLabelInputValue(label);
        }
      }, [isItemBeingEdited, label]);
      return {
        propsEnhancers: {
          labelInput: ({
            externalEventHandlers,
            interactions
          }) => {
            const editable = instance.isItemEditable(itemId);
            if (!editable) {
              return {};
            }
            const handleKeydown = (event) => {
              externalEventHandlers.onKeyDown?.(event);
              if (event.defaultMuiPrevented) {
                return;
              }
              const target = event.target;
              if (event.key === "Enter" && target.value) {
                interactions.handleSaveItemLabel(event, target.value);
              } else if (event.key === "Escape") {
                interactions.handleCancelItemLabelEditing(event);
              }
            };
            const handleBlur = (event) => {
              externalEventHandlers.onBlur?.(event);
              if (event.defaultMuiPrevented) {
                return;
              }
              if (event.target.value) {
                interactions.handleSaveItemLabel(event, event.target.value);
              }
            };
            const handleInputChange = (event) => {
              externalEventHandlers.onChange?.(event);
              setLabelInputValue(event.target.value);
            };
            return {
              value: labelInputValue ?? "",
              "data-element": "labelInput",
              onChange: handleInputChange,
              onKeyDown: handleKeydown,
              onBlur: handleBlur,
              autoFocus: true,
              type: "text"
            };
          }
        }
      };
    };
    exports2.useTreeViewLabelItemPlugin = useTreeViewLabelItemPlugin;
  }
});

// node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewLabel/useTreeViewLabel.js
var require_useTreeViewLabel = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewLabel/useTreeViewLabel.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.useTreeViewLabel = void 0;
    var _extends2 = _interopRequireDefault(require_extends());
    var React7 = _interopRequireWildcard(require_react());
    var _warning = require_warning2();
    var _useTreeViewLabel = require_useTreeViewLabel_itemPlugin();
    var useTreeViewLabel = ({
      instance,
      state,
      setState,
      params
    }) => {
      const editedItemRef = React7.useRef(state.editedItemId);
      const isItemBeingEditedRef = (itemId) => editedItemRef.current === itemId;
      const setEditedItemId = (editedItemId) => {
        setState((prevState) => (0, _extends2.default)({}, prevState, {
          editedItemId
        }));
        editedItemRef.current = editedItemId;
      };
      const isItemBeingEdited = (itemId) => itemId === state.editedItemId;
      const isTreeViewEditable = Boolean(params.isItemEditable);
      const isItemEditable = (itemId) => {
        if (itemId == null || !isTreeViewEditable) {
          return false;
        }
        const item = instance.getItem(itemId);
        if (!item) {
          return false;
        }
        return typeof params.isItemEditable === "function" ? params.isItemEditable(item) : Boolean(params.isItemEditable);
      };
      const updateItemLabel = (itemId, label) => {
        if (!label) {
          throw new Error(["MUI X: The Tree View component requires all items to have a `label` property.", "The label of an item cannot be empty.", itemId].join("\n"));
        }
        setState((prevState) => {
          const item = prevState.items.itemMetaMap[itemId];
          if (item.label !== label) {
            return (0, _extends2.default)({}, prevState, {
              items: (0, _extends2.default)({}, prevState.items, {
                itemMetaMap: (0, _extends2.default)({}, prevState.items.itemMetaMap, {
                  [itemId]: (0, _extends2.default)({}, item, {
                    label
                  })
                })
              })
            });
          }
          return prevState;
        });
        if (params.onItemLabelChange) {
          params.onItemLabelChange(itemId, label);
        }
      };
      return {
        instance: {
          setEditedItemId,
          isItemBeingEdited,
          updateItemLabel,
          isItemEditable,
          isTreeViewEditable,
          isItemBeingEditedRef
        },
        publicAPI: {
          updateItemLabel
        }
      };
    };
    exports2.useTreeViewLabel = useTreeViewLabel;
    useTreeViewLabel.itemPlugin = _useTreeViewLabel.useTreeViewLabelItemPlugin;
    useTreeViewLabel.getDefaultizedParams = ({
      params,
      experimentalFeatures
    }) => {
      const canUseFeature = experimentalFeatures?.labelEditing;
      if (define_process_env_default.NODE_ENV !== "production") {
        if (params.isItemEditable && !canUseFeature) {
          (0, _warning.warnOnce)(["MUI X: The label editing feature requires the `labelEditing` experimental feature to be enabled.", "You can do it by passing `experimentalFeatures={{ labelEditing: true}}` to the Rich Tree View Pro component.", "Check the documentation for more details: https://mui.com/x/react-tree-view/rich-tree-view/editing/"]);
        }
      }
      return (0, _extends2.default)({}, params, {
        isItemEditable: canUseFeature ? params.isItemEditable ?? false : false
      });
    };
    useTreeViewLabel.getInitialState = () => ({
      editedItemId: null
    });
    useTreeViewLabel.params = {
      onItemLabelChange: true,
      isItemEditable: true
    };
  }
});

// node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewLabel/index.js
var require_useTreeViewLabel2 = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewLabel/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "useTreeViewLabel", {
      enumerable: true,
      get: function() {
        return _useTreeViewLabel.useTreeViewLabel;
      }
    });
    var _useTreeViewLabel = require_useTreeViewLabel();
  }
});

// node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewKeyboardNavigation/useTreeViewKeyboardNavigation.js
var require_useTreeViewKeyboardNavigation = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewKeyboardNavigation/useTreeViewKeyboardNavigation.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.useTreeViewKeyboardNavigation = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _RtlProvider = require_RtlProvider2();
    var _useEventCallback = _interopRequireDefault(require_useEventCallback2());
    var _tree = require_tree();
    var _plugins = require_plugins();
    var _useTreeViewLabel = require_useTreeViewLabel2();
    function isPrintableKey(string) {
      return !!string && string.length === 1 && !!string.match(/\S/);
    }
    var useTreeViewKeyboardNavigation = ({
      instance,
      params,
      state
    }) => {
      const isRtl = (0, _RtlProvider.useRtl)();
      const firstCharMap = React7.useRef({});
      const updateFirstCharMap = (0, _useEventCallback.default)((callback) => {
        firstCharMap.current = callback(firstCharMap.current);
      });
      React7.useEffect(() => {
        if (instance.areItemUpdatesPrevented()) {
          return;
        }
        const newFirstCharMap = {};
        const processItem = (item) => {
          newFirstCharMap[item.id] = item.label.substring(0, 1).toLowerCase();
        };
        Object.values(state.items.itemMetaMap).forEach(processItem);
        firstCharMap.current = newFirstCharMap;
      }, [state.items.itemMetaMap, params.getItemId, instance]);
      const getFirstMatchingItem = (itemId, query) => {
        const cleanQuery = query.toLowerCase();
        const getNextItem = (itemIdToCheck) => {
          const nextItemId = (0, _tree.getNextNavigableItem)(instance, itemIdToCheck);
          if (nextItemId === null) {
            return (0, _tree.getFirstNavigableItem)(instance);
          }
          return nextItemId;
        };
        let matchingItemId = null;
        let currentItemId = getNextItem(itemId);
        const checkedItems = {};
        while (matchingItemId == null && !checkedItems[currentItemId]) {
          if (firstCharMap.current[currentItemId] === cleanQuery) {
            matchingItemId = currentItemId;
          } else {
            checkedItems[currentItemId] = true;
            currentItemId = getNextItem(currentItemId);
          }
        }
        return matchingItemId;
      };
      const canToggleItemSelection = (itemId) => !params.disableSelection && !instance.isItemDisabled(itemId);
      const canToggleItemExpansion = (itemId) => {
        return !instance.isItemDisabled(itemId) && instance.isItemExpandable(itemId);
      };
      const handleItemKeyDown = (event, itemId) => {
        if (event.defaultMuiPrevented) {
          return;
        }
        if (event.altKey || (0, _tree.isTargetInDescendants)(event.target, event.currentTarget)) {
          return;
        }
        const ctrlPressed = event.ctrlKey || event.metaKey;
        const key = event.key;
        switch (true) {
          // Select the item when pressing "Space"
          case (key === " " && canToggleItemSelection(itemId)): {
            event.preventDefault();
            if (params.multiSelect && event.shiftKey) {
              instance.expandSelectionRange(event, itemId);
            } else {
              instance.selectItem({
                event,
                itemId,
                keepExistingSelection: params.multiSelect,
                shouldBeSelected: params.multiSelect ? void 0 : true
              });
            }
            break;
          }
          // If the focused item has children, we expand it.
          // If the focused item has no children, we select it.
          case key === "Enter": {
            if ((0, _plugins.hasPlugin)(instance, _useTreeViewLabel.useTreeViewLabel) && instance.isItemEditable(itemId) && !instance.isItemBeingEdited(itemId)) {
              instance.setEditedItemId(itemId);
            } else if (canToggleItemExpansion(itemId)) {
              instance.toggleItemExpansion(event, itemId);
              event.preventDefault();
            } else if (canToggleItemSelection(itemId)) {
              if (params.multiSelect) {
                event.preventDefault();
                instance.selectItem({
                  event,
                  itemId,
                  keepExistingSelection: true
                });
              } else if (!instance.isItemSelected(itemId)) {
                instance.selectItem({
                  event,
                  itemId
                });
                event.preventDefault();
              }
            }
            break;
          }
          // Focus the next focusable item
          case key === "ArrowDown": {
            const nextItem = (0, _tree.getNextNavigableItem)(instance, itemId);
            if (nextItem) {
              event.preventDefault();
              instance.focusItem(event, nextItem);
              if (params.multiSelect && event.shiftKey && canToggleItemSelection(nextItem)) {
                instance.selectItemFromArrowNavigation(event, itemId, nextItem);
              }
            }
            break;
          }
          // Focuses the previous focusable item
          case key === "ArrowUp": {
            const previousItem = (0, _tree.getPreviousNavigableItem)(instance, itemId);
            if (previousItem) {
              event.preventDefault();
              instance.focusItem(event, previousItem);
              if (params.multiSelect && event.shiftKey && canToggleItemSelection(previousItem)) {
                instance.selectItemFromArrowNavigation(event, itemId, previousItem);
              }
            }
            break;
          }
          // If the focused item is expanded, we move the focus to its first child
          // If the focused item is collapsed and has children, we expand it
          case (key === "ArrowRight" && !isRtl || key === "ArrowLeft" && isRtl): {
            if (ctrlPressed) {
              return;
            }
            if (instance.isItemExpanded(itemId)) {
              const nextItemId = (0, _tree.getNextNavigableItem)(instance, itemId);
              if (nextItemId) {
                instance.focusItem(event, nextItemId);
                event.preventDefault();
              }
            } else if (canToggleItemExpansion(itemId)) {
              instance.toggleItemExpansion(event, itemId);
              event.preventDefault();
            }
            break;
          }
          // If the focused item is expanded, we collapse it
          // If the focused item is collapsed and has a parent, we move the focus to this parent
          case (key === "ArrowLeft" && !isRtl || key === "ArrowRight" && isRtl): {
            if (ctrlPressed) {
              return;
            }
            if (canToggleItemExpansion(itemId) && instance.isItemExpanded(itemId)) {
              instance.toggleItemExpansion(event, itemId);
              event.preventDefault();
            } else {
              const parent = instance.getItemMeta(itemId).parentId;
              if (parent) {
                instance.focusItem(event, parent);
                event.preventDefault();
              }
            }
            break;
          }
          // Focuses the first item in the tree
          case key === "Home": {
            if (canToggleItemSelection(itemId) && params.multiSelect && ctrlPressed && event.shiftKey) {
              instance.selectRangeFromStartToItem(event, itemId);
            } else {
              instance.focusItem(event, (0, _tree.getFirstNavigableItem)(instance));
            }
            event.preventDefault();
            break;
          }
          // Focuses the last item in the tree
          case key === "End": {
            if (canToggleItemSelection(itemId) && params.multiSelect && ctrlPressed && event.shiftKey) {
              instance.selectRangeFromItemToEnd(event, itemId);
            } else {
              instance.focusItem(event, (0, _tree.getLastNavigableItem)(instance));
            }
            event.preventDefault();
            break;
          }
          // Expand all siblings that are at the same level as the focused item
          case key === "*": {
            instance.expandAllSiblings(event, itemId);
            event.preventDefault();
            break;
          }
          // Multi select behavior when pressing Ctrl + a
          // Selects all the items
          case (String.fromCharCode(event.keyCode) === "A" && ctrlPressed && params.multiSelect && !params.disableSelection): {
            instance.selectAllNavigableItems(event);
            event.preventDefault();
            break;
          }
          // Type-ahead
          // TODO: Support typing multiple characters
          case (!ctrlPressed && !event.shiftKey && isPrintableKey(key)): {
            const matchingItem = getFirstMatchingItem(itemId, key);
            if (matchingItem != null) {
              instance.focusItem(event, matchingItem);
              event.preventDefault();
            }
            break;
          }
        }
      };
      return {
        instance: {
          updateFirstCharMap,
          handleItemKeyDown
        }
      };
    };
    exports2.useTreeViewKeyboardNavigation = useTreeViewKeyboardNavigation;
    useTreeViewKeyboardNavigation.params = {};
  }
});

// node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewKeyboardNavigation/index.js
var require_useTreeViewKeyboardNavigation2 = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewKeyboardNavigation/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "useTreeViewKeyboardNavigation", {
      enumerable: true,
      get: function() {
        return _useTreeViewKeyboardNavigation.useTreeViewKeyboardNavigation;
      }
    });
    var _useTreeViewKeyboardNavigation = require_useTreeViewKeyboardNavigation();
  }
});

// node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewIcons/useTreeViewIcons.js
var require_useTreeViewIcons = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewIcons/useTreeViewIcons.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.useTreeViewIcons = void 0;
    var useTreeViewIcons = ({
      slots,
      slotProps
    }) => {
      return {
        contextValue: {
          icons: {
            slots: {
              collapseIcon: slots.collapseIcon,
              expandIcon: slots.expandIcon,
              endIcon: slots.endIcon
            },
            slotProps: {
              collapseIcon: slotProps.collapseIcon,
              expandIcon: slotProps.expandIcon,
              endIcon: slotProps.endIcon
            }
          }
        }
      };
    };
    exports2.useTreeViewIcons = useTreeViewIcons;
    useTreeViewIcons.params = {};
  }
});

// node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewIcons/index.js
var require_useTreeViewIcons2 = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/plugins/useTreeViewIcons/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "useTreeViewIcons", {
      enumerable: true,
      get: function() {
        return _useTreeViewIcons.useTreeViewIcons;
      }
    });
    var _useTreeViewIcons = require_useTreeViewIcons();
  }
});

// node_modules/@mui/x-tree-view/node/RichTreeView/RichTreeView.plugins.js
var require_RichTreeView_plugins = __commonJS({
  "node_modules/@mui/x-tree-view/node/RichTreeView/RichTreeView.plugins.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.RICH_TREE_VIEW_PLUGINS = void 0;
    var _useTreeViewItems = require_useTreeViewItems2();
    var _useTreeViewExpansion = require_useTreeViewExpansion2();
    var _useTreeViewSelection = require_useTreeViewSelection2();
    var _useTreeViewFocus = require_useTreeViewFocus2();
    var _useTreeViewKeyboardNavigation = require_useTreeViewKeyboardNavigation2();
    var _useTreeViewIcons = require_useTreeViewIcons2();
    var _useTreeViewLabel = require_useTreeViewLabel2();
    var RICH_TREE_VIEW_PLUGINS = exports2.RICH_TREE_VIEW_PLUGINS = [_useTreeViewItems.useTreeViewItems, _useTreeViewExpansion.useTreeViewExpansion, _useTreeViewSelection.useTreeViewSelection, _useTreeViewFocus.useTreeViewFocus, _useTreeViewKeyboardNavigation.useTreeViewKeyboardNavigation, _useTreeViewIcons.useTreeViewIcons, _useTreeViewLabel.useTreeViewLabel];
  }
});

// node_modules/dom-helpers/cjs/hasClass.js
var require_hasClass = __commonJS({
  "node_modules/dom-helpers/cjs/hasClass.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    exports2.__esModule = true;
    exports2.default = hasClass;
    function hasClass(element, className) {
      if (element.classList) return !!className && element.classList.contains(className);
      return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
    }
    module2.exports = exports2["default"];
  }
});

// node_modules/dom-helpers/cjs/addClass.js
var require_addClass = __commonJS({
  "node_modules/dom-helpers/cjs/addClass.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault();
    exports2.__esModule = true;
    exports2.default = addClass;
    var _hasClass = _interopRequireDefault(require_hasClass());
    function addClass(element, className) {
      if (element.classList) element.classList.add(className);
      else if (!(0, _hasClass.default)(element, className)) if (typeof element.className === "string") element.className = element.className + " " + className;
      else element.setAttribute("class", (element.className && element.className.baseVal || "") + " " + className);
    }
    module2.exports = exports2["default"];
  }
});

// node_modules/dom-helpers/cjs/removeClass.js
var require_removeClass = __commonJS({
  "node_modules/dom-helpers/cjs/removeClass.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    exports2.__esModule = true;
    exports2.default = removeClass;
    function replaceClassName(origClass, classToRemove) {
      return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", "g"), "$1").replace(/\s+/g, " ").replace(/^\s*|\s*$/g, "");
    }
    function removeClass(element, className) {
      if (element.classList) {
        element.classList.remove(className);
      } else if (typeof element.className === "string") {
        element.className = replaceClassName(element.className, className);
      } else {
        element.setAttribute("class", replaceClassName(element.className && element.className.baseVal || "", className));
      }
    }
    module2.exports = exports2["default"];
  }
});

// node_modules/react-transition-group/cjs/config.js
var require_config = __commonJS({
  "node_modules/react-transition-group/cjs/config.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    exports2.__esModule = true;
    exports2.default = void 0;
    var _default = {
      disabled: false
    };
    exports2.default = _default;
    module2.exports = exports2.default;
  }
});

// node_modules/react-transition-group/cjs/utils/PropTypes.js
var require_PropTypes = __commonJS({
  "node_modules/react-transition-group/cjs/utils/PropTypes.js"(exports2) {
    "use strict";
    init_define_process_env();
    exports2.__esModule = true;
    exports2.classNamesShape = exports2.timeoutsShape = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var timeoutsShape = define_process_env_default.NODE_ENV !== "production" ? _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
      enter: _propTypes.default.number,
      exit: _propTypes.default.number,
      appear: _propTypes.default.number
    }).isRequired]) : null;
    exports2.timeoutsShape = timeoutsShape;
    var classNamesShape = define_process_env_default.NODE_ENV !== "production" ? _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.shape({
      enter: _propTypes.default.string,
      exit: _propTypes.default.string,
      active: _propTypes.default.string
    }), _propTypes.default.shape({
      enter: _propTypes.default.string,
      enterDone: _propTypes.default.string,
      enterActive: _propTypes.default.string,
      exit: _propTypes.default.string,
      exitDone: _propTypes.default.string,
      exitActive: _propTypes.default.string
    })]) : null;
    exports2.classNamesShape = classNamesShape;
  }
});

// node_modules/react-transition-group/cjs/TransitionGroupContext.js
var require_TransitionGroupContext = __commonJS({
  "node_modules/react-transition-group/cjs/TransitionGroupContext.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    exports2.__esModule = true;
    exports2.default = void 0;
    var _react = _interopRequireDefault(require_react());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _default = _react.default.createContext(null);
    exports2.default = _default;
    module2.exports = exports2.default;
  }
});

// node_modules/react-transition-group/cjs/utils/reflow.js
var require_reflow = __commonJS({
  "node_modules/react-transition-group/cjs/utils/reflow.js"(exports2) {
    "use strict";
    init_define_process_env();
    exports2.__esModule = true;
    exports2.forceReflow = void 0;
    var forceReflow = function forceReflow2(node2) {
      return node2.scrollTop;
    };
    exports2.forceReflow = forceReflow;
  }
});

// node_modules/react-transition-group/cjs/Transition.js
var require_Transition = __commonJS({
  "node_modules/react-transition-group/cjs/Transition.js"(exports2) {
    "use strict";
    init_define_process_env();
    exports2.__esModule = true;
    exports2.default = exports2.EXITING = exports2.ENTERED = exports2.ENTERING = exports2.EXITED = exports2.UNMOUNTED = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _react = _interopRequireDefault(require_react());
    var _reactDom = _interopRequireDefault(require_react_dom());
    var _config = _interopRequireDefault(require_config());
    var _PropTypes = require_PropTypes();
    var _TransitionGroupContext = _interopRequireDefault(require_TransitionGroupContext());
    var _reflow = require_reflow();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var UNMOUNTED = "unmounted";
    exports2.UNMOUNTED = UNMOUNTED;
    var EXITED = "exited";
    exports2.EXITED = EXITED;
    var ENTERING = "entering";
    exports2.ENTERING = ENTERING;
    var ENTERED = "entered";
    exports2.ENTERED = ENTERED;
    var EXITING = "exiting";
    exports2.EXITING = EXITING;
    var Transition = /* @__PURE__ */ function(_React$Component) {
      _inheritsLoose(Transition2, _React$Component);
      function Transition2(props, context) {
        var _this;
        _this = _React$Component.call(this, props, context) || this;
        var parentGroup = context;
        var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
        var initialStatus;
        _this.appearStatus = null;
        if (props.in) {
          if (appear) {
            initialStatus = EXITED;
            _this.appearStatus = ENTERING;
          } else {
            initialStatus = ENTERED;
          }
        } else {
          if (props.unmountOnExit || props.mountOnEnter) {
            initialStatus = UNMOUNTED;
          } else {
            initialStatus = EXITED;
          }
        }
        _this.state = {
          status: initialStatus
        };
        _this.nextCallback = null;
        return _this;
      }
      Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
        var nextIn = _ref.in;
        if (nextIn && prevState.status === UNMOUNTED) {
          return {
            status: EXITED
          };
        }
        return null;
      };
      var _proto = Transition2.prototype;
      _proto.componentDidMount = function componentDidMount() {
        this.updateStatus(true, this.appearStatus);
      };
      _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        var nextStatus = null;
        if (prevProps !== this.props) {
          var status = this.state.status;
          if (this.props.in) {
            if (status !== ENTERING && status !== ENTERED) {
              nextStatus = ENTERING;
            }
          } else {
            if (status === ENTERING || status === ENTERED) {
              nextStatus = EXITING;
            }
          }
        }
        this.updateStatus(false, nextStatus);
      };
      _proto.componentWillUnmount = function componentWillUnmount() {
        this.cancelNextCallback();
      };
      _proto.getTimeouts = function getTimeouts() {
        var timeout = this.props.timeout;
        var exit, enter, appear;
        exit = enter = appear = timeout;
        if (timeout != null && typeof timeout !== "number") {
          exit = timeout.exit;
          enter = timeout.enter;
          appear = timeout.appear !== void 0 ? timeout.appear : enter;
        }
        return {
          exit,
          enter,
          appear
        };
      };
      _proto.updateStatus = function updateStatus(mounting, nextStatus) {
        if (mounting === void 0) {
          mounting = false;
        }
        if (nextStatus !== null) {
          this.cancelNextCallback();
          if (nextStatus === ENTERING) {
            if (this.props.unmountOnExit || this.props.mountOnEnter) {
              var node2 = this.props.nodeRef ? this.props.nodeRef.current : _reactDom.default.findDOMNode(this);
              if (node2) (0, _reflow.forceReflow)(node2);
            }
            this.performEnter(mounting);
          } else {
            this.performExit();
          }
        } else if (this.props.unmountOnExit && this.state.status === EXITED) {
          this.setState({
            status: UNMOUNTED
          });
        }
      };
      _proto.performEnter = function performEnter(mounting) {
        var _this2 = this;
        var enter = this.props.enter;
        var appearing = this.context ? this.context.isMounting : mounting;
        var _ref2 = this.props.nodeRef ? [appearing] : [_reactDom.default.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
        var timeouts = this.getTimeouts();
        var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
        if (!mounting && !enter || _config.default.disabled) {
          this.safeSetState({
            status: ENTERED
          }, function() {
            _this2.props.onEntered(maybeNode);
          });
          return;
        }
        this.props.onEnter(maybeNode, maybeAppearing);
        this.safeSetState({
          status: ENTERING
        }, function() {
          _this2.props.onEntering(maybeNode, maybeAppearing);
          _this2.onTransitionEnd(enterTimeout, function() {
            _this2.safeSetState({
              status: ENTERED
            }, function() {
              _this2.props.onEntered(maybeNode, maybeAppearing);
            });
          });
        });
      };
      _proto.performExit = function performExit() {
        var _this3 = this;
        var exit = this.props.exit;
        var timeouts = this.getTimeouts();
        var maybeNode = this.props.nodeRef ? void 0 : _reactDom.default.findDOMNode(this);
        if (!exit || _config.default.disabled) {
          this.safeSetState({
            status: EXITED
          }, function() {
            _this3.props.onExited(maybeNode);
          });
          return;
        }
        this.props.onExit(maybeNode);
        this.safeSetState({
          status: EXITING
        }, function() {
          _this3.props.onExiting(maybeNode);
          _this3.onTransitionEnd(timeouts.exit, function() {
            _this3.safeSetState({
              status: EXITED
            }, function() {
              _this3.props.onExited(maybeNode);
            });
          });
        });
      };
      _proto.cancelNextCallback = function cancelNextCallback() {
        if (this.nextCallback !== null) {
          this.nextCallback.cancel();
          this.nextCallback = null;
        }
      };
      _proto.safeSetState = function safeSetState(nextState, callback) {
        callback = this.setNextCallback(callback);
        this.setState(nextState, callback);
      };
      _proto.setNextCallback = function setNextCallback(callback) {
        var _this4 = this;
        var active = true;
        this.nextCallback = function(event) {
          if (active) {
            active = false;
            _this4.nextCallback = null;
            callback(event);
          }
        };
        this.nextCallback.cancel = function() {
          active = false;
        };
        return this.nextCallback;
      };
      _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
        this.setNextCallback(handler);
        var node2 = this.props.nodeRef ? this.props.nodeRef.current : _reactDom.default.findDOMNode(this);
        var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;
        if (!node2 || doesNotHaveTimeoutOrListener) {
          setTimeout(this.nextCallback, 0);
          return;
        }
        if (this.props.addEndListener) {
          var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node2, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
          this.props.addEndListener(maybeNode, maybeNextCallback);
        }
        if (timeout != null) {
          setTimeout(this.nextCallback, timeout);
        }
      };
      _proto.render = function render() {
        var status = this.state.status;
        if (status === UNMOUNTED) {
          return null;
        }
        var _this$props = this.props, children = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
        return (
          // allows for nested Transitions
          /* @__PURE__ */ _react.default.createElement(_TransitionGroupContext.default.Provider, {
            value: null
          }, typeof children === "function" ? children(status, childProps) : _react.default.cloneElement(_react.default.Children.only(children), childProps))
        );
      };
      return Transition2;
    }(_react.default.Component);
    Transition.contextType = _TransitionGroupContext.default;
    Transition.propTypes = define_process_env_default.NODE_ENV !== "production" ? {
      /**
       * A React reference to DOM element that need to transition:
       * https://stackoverflow.com/a/51127130/4671932
       *
       *   - When `nodeRef` prop is used, `node` is not passed to callback functions
       *      (e.g. `onEnter`) because user already has direct access to the node.
       *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
       *     `nodeRef` need to be provided to `Transition` with changed `key` prop
       *     (see
       *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
       */
      nodeRef: _propTypes.default.shape({
        current: typeof Element === "undefined" ? _propTypes.default.any : function(propValue, key, componentName, location, propFullName, secret) {
          var value = propValue[key];
          return _propTypes.default.instanceOf(value && "ownerDocument" in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
        }
      }),
      /**
       * A `function` child can be used instead of a React element. This function is
       * called with the current transition status (`'entering'`, `'entered'`,
       * `'exiting'`, `'exited'`), which can be used to apply context
       * specific props to a component.
       *
       * ```jsx
       * <Transition in={this.state.in} timeout={150}>
       *   {state => (
       *     <MyComponent className={`fade fade-${state}`} />
       *   )}
       * </Transition>
       * ```
       */
      children: _propTypes.default.oneOfType([_propTypes.default.func.isRequired, _propTypes.default.element.isRequired]).isRequired,
      /**
       * Show the component; triggers the enter or exit states
       */
      in: _propTypes.default.bool,
      /**
       * By default the child component is mounted immediately along with
       * the parent `Transition` component. If you want to "lazy mount" the component on the
       * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
       * mounted, even on "exited", unless you also specify `unmountOnExit`.
       */
      mountOnEnter: _propTypes.default.bool,
      /**
       * By default the child component stays mounted after it reaches the `'exited'` state.
       * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
       */
      unmountOnExit: _propTypes.default.bool,
      /**
       * By default the child component does not perform the enter transition when
       * it first mounts, regardless of the value of `in`. If you want this
       * behavior, set both `appear` and `in` to `true`.
       *
       * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
       * > only adds an additional enter transition. However, in the
       * > `<CSSTransition>` component that first enter transition does result in
       * > additional `.appear-*` classes, that way you can choose to style it
       * > differently.
       */
      appear: _propTypes.default.bool,
      /**
       * Enable or disable enter transitions.
       */
      enter: _propTypes.default.bool,
      /**
       * Enable or disable exit transitions.
       */
      exit: _propTypes.default.bool,
      /**
       * The duration of the transition, in milliseconds.
       * Required unless `addEndListener` is provided.
       *
       * You may specify a single timeout for all transitions:
       *
       * ```jsx
       * timeout={500}
       * ```
       *
       * or individually:
       *
       * ```jsx
       * timeout={{
       *  appear: 500,
       *  enter: 300,
       *  exit: 500,
       * }}
       * ```
       *
       * - `appear` defaults to the value of `enter`
       * - `enter` defaults to `0`
       * - `exit` defaults to `0`
       *
       * @type {number | { enter?: number, exit?: number, appear?: number }}
       */
      timeout: function timeout(props) {
        var pt = _PropTypes.timeoutsShape;
        if (!props.addEndListener) pt = pt.isRequired;
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        return pt.apply(void 0, [props].concat(args));
      },
      /**
       * Add a custom transition end trigger. Called with the transitioning
       * DOM node and a `done` callback. Allows for more fine grained transition end
       * logic. Timeouts are still used as a fallback if provided.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * ```jsx
       * addEndListener={(node, done) => {
       *   // use the css transitionend event to mark the finish of a transition
       *   node.addEventListener('transitionend', done, false);
       * }}
       * ```
       */
      addEndListener: _propTypes.default.func,
      /**
       * Callback fired before the "entering" status is applied. An extra parameter
       * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement, isAppearing: bool) -> void
       */
      onEnter: _propTypes.default.func,
      /**
       * Callback fired after the "entering" status is applied. An extra parameter
       * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement, isAppearing: bool)
       */
      onEntering: _propTypes.default.func,
      /**
       * Callback fired after the "entered" status is applied. An extra parameter
       * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement, isAppearing: bool) -> void
       */
      onEntered: _propTypes.default.func,
      /**
       * Callback fired before the "exiting" status is applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement) -> void
       */
      onExit: _propTypes.default.func,
      /**
       * Callback fired after the "exiting" status is applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement) -> void
       */
      onExiting: _propTypes.default.func,
      /**
       * Callback fired after the "exited" status is applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed
       *
       * @type Function(node: HtmlElement) -> void
       */
      onExited: _propTypes.default.func
    } : {};
    function noop() {
    }
    Transition.defaultProps = {
      in: false,
      mountOnEnter: false,
      unmountOnExit: false,
      appear: false,
      enter: true,
      exit: true,
      onEnter: noop,
      onEntering: noop,
      onEntered: noop,
      onExit: noop,
      onExiting: noop,
      onExited: noop
    };
    Transition.UNMOUNTED = UNMOUNTED;
    Transition.EXITED = EXITED;
    Transition.ENTERING = ENTERING;
    Transition.ENTERED = ENTERED;
    Transition.EXITING = EXITING;
    var _default = Transition;
    exports2.default = _default;
  }
});

// node_modules/react-transition-group/cjs/CSSTransition.js
var require_CSSTransition = __commonJS({
  "node_modules/react-transition-group/cjs/CSSTransition.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    exports2.__esModule = true;
    exports2.default = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _addClass2 = _interopRequireDefault(require_addClass());
    var _removeClass = _interopRequireDefault(require_removeClass());
    var _react = _interopRequireDefault(require_react());
    var _Transition = _interopRequireDefault(require_Transition());
    var _PropTypes = require_PropTypes();
    var _reflow = require_reflow();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var _addClass = function addClass(node2, classes) {
      return node2 && classes && classes.split(" ").forEach(function(c) {
        return (0, _addClass2.default)(node2, c);
      });
    };
    var removeClass = function removeClass2(node2, classes) {
      return node2 && classes && classes.split(" ").forEach(function(c) {
        return (0, _removeClass.default)(node2, c);
      });
    };
    var CSSTransition = /* @__PURE__ */ function(_React$Component) {
      _inheritsLoose(CSSTransition2, _React$Component);
      function CSSTransition2() {
        var _this;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
        _this.appliedClasses = {
          appear: {},
          enter: {},
          exit: {}
        };
        _this.onEnter = function(maybeNode, maybeAppearing) {
          var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing), node2 = _this$resolveArgument[0], appearing = _this$resolveArgument[1];
          _this.removeClasses(node2, "exit");
          _this.addClass(node2, appearing ? "appear" : "enter", "base");
          if (_this.props.onEnter) {
            _this.props.onEnter(maybeNode, maybeAppearing);
          }
        };
        _this.onEntering = function(maybeNode, maybeAppearing) {
          var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing), node2 = _this$resolveArgument2[0], appearing = _this$resolveArgument2[1];
          var type = appearing ? "appear" : "enter";
          _this.addClass(node2, type, "active");
          if (_this.props.onEntering) {
            _this.props.onEntering(maybeNode, maybeAppearing);
          }
        };
        _this.onEntered = function(maybeNode, maybeAppearing) {
          var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing), node2 = _this$resolveArgument3[0], appearing = _this$resolveArgument3[1];
          var type = appearing ? "appear" : "enter";
          _this.removeClasses(node2, type);
          _this.addClass(node2, type, "done");
          if (_this.props.onEntered) {
            _this.props.onEntered(maybeNode, maybeAppearing);
          }
        };
        _this.onExit = function(maybeNode) {
          var _this$resolveArgument4 = _this.resolveArguments(maybeNode), node2 = _this$resolveArgument4[0];
          _this.removeClasses(node2, "appear");
          _this.removeClasses(node2, "enter");
          _this.addClass(node2, "exit", "base");
          if (_this.props.onExit) {
            _this.props.onExit(maybeNode);
          }
        };
        _this.onExiting = function(maybeNode) {
          var _this$resolveArgument5 = _this.resolveArguments(maybeNode), node2 = _this$resolveArgument5[0];
          _this.addClass(node2, "exit", "active");
          if (_this.props.onExiting) {
            _this.props.onExiting(maybeNode);
          }
        };
        _this.onExited = function(maybeNode) {
          var _this$resolveArgument6 = _this.resolveArguments(maybeNode), node2 = _this$resolveArgument6[0];
          _this.removeClasses(node2, "exit");
          _this.addClass(node2, "exit", "done");
          if (_this.props.onExited) {
            _this.props.onExited(maybeNode);
          }
        };
        _this.resolveArguments = function(maybeNode, maybeAppearing) {
          return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] : [maybeNode, maybeAppearing];
        };
        _this.getClassNames = function(type) {
          var classNames = _this.props.classNames;
          var isStringClassNames = typeof classNames === "string";
          var prefix2 = isStringClassNames && classNames ? classNames + "-" : "";
          var baseClassName = isStringClassNames ? "" + prefix2 + type : classNames[type];
          var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames[type + "Active"];
          var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames[type + "Done"];
          return {
            baseClassName,
            activeClassName,
            doneClassName
          };
        };
        return _this;
      }
      var _proto = CSSTransition2.prototype;
      _proto.addClass = function addClass(node2, type, phase) {
        var className = this.getClassNames(type)[phase + "ClassName"];
        var _this$getClassNames = this.getClassNames("enter"), doneClassName = _this$getClassNames.doneClassName;
        if (type === "appear" && phase === "done" && doneClassName) {
          className += " " + doneClassName;
        }
        if (phase === "active") {
          if (node2) (0, _reflow.forceReflow)(node2);
        }
        if (className) {
          this.appliedClasses[type][phase] = className;
          _addClass(node2, className);
        }
      };
      _proto.removeClasses = function removeClasses(node2, type) {
        var _this$appliedClasses$ = this.appliedClasses[type], baseClassName = _this$appliedClasses$.base, activeClassName = _this$appliedClasses$.active, doneClassName = _this$appliedClasses$.done;
        this.appliedClasses[type] = {};
        if (baseClassName) {
          removeClass(node2, baseClassName);
        }
        if (activeClassName) {
          removeClass(node2, activeClassName);
        }
        if (doneClassName) {
          removeClass(node2, doneClassName);
        }
      };
      _proto.render = function render() {
        var _this$props = this.props, _ = _this$props.classNames, props = _objectWithoutPropertiesLoose(_this$props, ["classNames"]);
        return /* @__PURE__ */ _react.default.createElement(_Transition.default, _extends2({}, props, {
          onEnter: this.onEnter,
          onEntered: this.onEntered,
          onEntering: this.onEntering,
          onExit: this.onExit,
          onExiting: this.onExiting,
          onExited: this.onExited
        }));
      };
      return CSSTransition2;
    }(_react.default.Component);
    CSSTransition.defaultProps = {
      classNames: ""
    };
    CSSTransition.propTypes = define_process_env_default.NODE_ENV !== "production" ? _extends2({}, _Transition.default.propTypes, {
      /**
       * The animation classNames applied to the component as it appears, enters,
       * exits or has finished the transition. A single name can be provided, which
       * will be suffixed for each stage, e.g. `classNames="fade"` applies:
       *
       * - `fade-appear`, `fade-appear-active`, `fade-appear-done`
       * - `fade-enter`, `fade-enter-active`, `fade-enter-done`
       * - `fade-exit`, `fade-exit-active`, `fade-exit-done`
       *
       * A few details to note about how these classes are applied:
       *
       * 1. They are _joined_ with the ones that are already defined on the child
       *    component, so if you want to add some base styles, you can use
       *    `className` without worrying that it will be overridden.
       *
       * 2. If the transition component mounts with `in={false}`, no classes are
       *    applied yet. You might be expecting `*-exit-done`, but if you think
       *    about it, a component cannot finish exiting if it hasn't entered yet.
       *
       * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This
       *    allows you to define different behavior for when appearing is done and
       *    when regular entering is done, using selectors like
       *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply
       *    an epic entrance animation when element first appears in the DOM using
       *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
       *    simply use `fade-enter-done` for defining both cases.
       *
       * Each individual classNames can also be specified independently like:
       *
       * ```js
       * classNames={{
       *  appear: 'my-appear',
       *  appearActive: 'my-active-appear',
       *  appearDone: 'my-done-appear',
       *  enter: 'my-enter',
       *  enterActive: 'my-active-enter',
       *  enterDone: 'my-done-enter',
       *  exit: 'my-exit',
       *  exitActive: 'my-active-exit',
       *  exitDone: 'my-done-exit',
       * }}
       * ```
       *
       * If you want to set these classes using CSS Modules:
       *
       * ```js
       * import styles from './styles.css';
       * ```
       *
       * you might want to use camelCase in your CSS file, that way could simply
       * spread them instead of listing them one by one:
       *
       * ```js
       * classNames={{ ...styles }}
       * ```
       *
       * @type {string | {
       *  appear?: string,
       *  appearActive?: string,
       *  appearDone?: string,
       *  enter?: string,
       *  enterActive?: string,
       *  enterDone?: string,
       *  exit?: string,
       *  exitActive?: string,
       *  exitDone?: string,
       * }}
       */
      classNames: _PropTypes.classNamesShape,
      /**
       * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
       * applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement, isAppearing: bool)
       */
      onEnter: _propTypes.default.func,
      /**
       * A `<Transition>` callback fired immediately after the 'enter-active' or
       * 'appear-active' class is applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement, isAppearing: bool)
       */
      onEntering: _propTypes.default.func,
      /**
       * A `<Transition>` callback fired immediately after the 'enter' or
       * 'appear' classes are **removed** and the `done` class is added to the DOM node.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement, isAppearing: bool)
       */
      onEntered: _propTypes.default.func,
      /**
       * A `<Transition>` callback fired immediately after the 'exit' class is
       * applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed
       *
       * @type Function(node: HtmlElement)
       */
      onExit: _propTypes.default.func,
      /**
       * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed
       *
       * @type Function(node: HtmlElement)
       */
      onExiting: _propTypes.default.func,
      /**
       * A `<Transition>` callback fired immediately after the 'exit' classes
       * are **removed** and the `exit-done` class is added to the DOM node.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed
       *
       * @type Function(node: HtmlElement)
       */
      onExited: _propTypes.default.func
    }) : {};
    var _default = CSSTransition;
    exports2.default = _default;
    module2.exports = exports2.default;
  }
});

// node_modules/react-transition-group/cjs/utils/ChildMapping.js
var require_ChildMapping = __commonJS({
  "node_modules/react-transition-group/cjs/utils/ChildMapping.js"(exports2) {
    "use strict";
    init_define_process_env();
    exports2.__esModule = true;
    exports2.getChildMapping = getChildMapping;
    exports2.mergeChildMappings = mergeChildMappings;
    exports2.getInitialChildMapping = getInitialChildMapping;
    exports2.getNextChildMapping = getNextChildMapping;
    var _react = require_react();
    function getChildMapping(children, mapFn) {
      var mapper = function mapper2(child) {
        return mapFn && (0, _react.isValidElement)(child) ? mapFn(child) : child;
      };
      var result = /* @__PURE__ */ Object.create(null);
      if (children) _react.Children.map(children, function(c) {
        return c;
      }).forEach(function(child) {
        result[child.key] = mapper(child);
      });
      return result;
    }
    function mergeChildMappings(prev2, next2) {
      prev2 = prev2 || {};
      next2 = next2 || {};
      function getValueForKey(key) {
        return key in next2 ? next2[key] : prev2[key];
      }
      var nextKeysPending = /* @__PURE__ */ Object.create(null);
      var pendingKeys = [];
      for (var prevKey in prev2) {
        if (prevKey in next2) {
          if (pendingKeys.length) {
            nextKeysPending[prevKey] = pendingKeys;
            pendingKeys = [];
          }
        } else {
          pendingKeys.push(prevKey);
        }
      }
      var i;
      var childMapping = {};
      for (var nextKey in next2) {
        if (nextKeysPending[nextKey]) {
          for (i = 0; i < nextKeysPending[nextKey].length; i++) {
            var pendingNextKey = nextKeysPending[nextKey][i];
            childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
          }
        }
        childMapping[nextKey] = getValueForKey(nextKey);
      }
      for (i = 0; i < pendingKeys.length; i++) {
        childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
      }
      return childMapping;
    }
    function getProp(child, prop, props) {
      return props[prop] != null ? props[prop] : child.props[prop];
    }
    function getInitialChildMapping(props, onExited) {
      return getChildMapping(props.children, function(child) {
        return (0, _react.cloneElement)(child, {
          onExited: onExited.bind(null, child),
          in: true,
          appear: getProp(child, "appear", props),
          enter: getProp(child, "enter", props),
          exit: getProp(child, "exit", props)
        });
      });
    }
    function getNextChildMapping(nextProps, prevChildMapping, onExited) {
      var nextChildMapping = getChildMapping(nextProps.children);
      var children = mergeChildMappings(prevChildMapping, nextChildMapping);
      Object.keys(children).forEach(function(key) {
        var child = children[key];
        if (!(0, _react.isValidElement)(child)) return;
        var hasPrev = key in prevChildMapping;
        var hasNext = key in nextChildMapping;
        var prevChild = prevChildMapping[key];
        var isLeaving = (0, _react.isValidElement)(prevChild) && !prevChild.props.in;
        if (hasNext && (!hasPrev || isLeaving)) {
          children[key] = (0, _react.cloneElement)(child, {
            onExited: onExited.bind(null, child),
            in: true,
            exit: getProp(child, "exit", nextProps),
            enter: getProp(child, "enter", nextProps)
          });
        } else if (!hasNext && hasPrev && !isLeaving) {
          children[key] = (0, _react.cloneElement)(child, {
            in: false
          });
        } else if (hasNext && hasPrev && (0, _react.isValidElement)(prevChild)) {
          children[key] = (0, _react.cloneElement)(child, {
            onExited: onExited.bind(null, child),
            in: prevChild.props.in,
            exit: getProp(child, "exit", nextProps),
            enter: getProp(child, "enter", nextProps)
          });
        }
      });
      return children;
    }
  }
});

// node_modules/react-transition-group/cjs/TransitionGroup.js
var require_TransitionGroup = __commonJS({
  "node_modules/react-transition-group/cjs/TransitionGroup.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    exports2.__esModule = true;
    exports2.default = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _react = _interopRequireDefault(require_react());
    var _TransitionGroupContext = _interopRequireDefault(require_TransitionGroupContext());
    var _ChildMapping = require_ChildMapping();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var values = Object.values || function(obj) {
      return Object.keys(obj).map(function(k) {
        return obj[k];
      });
    };
    var defaultProps = {
      component: "div",
      childFactory: function childFactory(child) {
        return child;
      }
    };
    var TransitionGroup = /* @__PURE__ */ function(_React$Component) {
      _inheritsLoose(TransitionGroup2, _React$Component);
      function TransitionGroup2(props, context) {
        var _this;
        _this = _React$Component.call(this, props, context) || this;
        var handleExited = _this.handleExited.bind(_assertThisInitialized(_this));
        _this.state = {
          contextValue: {
            isMounting: true
          },
          handleExited,
          firstRender: true
        };
        return _this;
      }
      var _proto = TransitionGroup2.prototype;
      _proto.componentDidMount = function componentDidMount() {
        this.mounted = true;
        this.setState({
          contextValue: {
            isMounting: false
          }
        });
      };
      _proto.componentWillUnmount = function componentWillUnmount() {
        this.mounted = false;
      };
      TransitionGroup2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
        var prevChildMapping = _ref.children, handleExited = _ref.handleExited, firstRender = _ref.firstRender;
        return {
          children: firstRender ? (0, _ChildMapping.getInitialChildMapping)(nextProps, handleExited) : (0, _ChildMapping.getNextChildMapping)(nextProps, prevChildMapping, handleExited),
          firstRender: false
        };
      };
      _proto.handleExited = function handleExited(child, node2) {
        var currentChildMapping = (0, _ChildMapping.getChildMapping)(this.props.children);
        if (child.key in currentChildMapping) return;
        if (child.props.onExited) {
          child.props.onExited(node2);
        }
        if (this.mounted) {
          this.setState(function(state) {
            var children = _extends2({}, state.children);
            delete children[child.key];
            return {
              children
            };
          });
        }
      };
      _proto.render = function render() {
        var _this$props = this.props, Component = _this$props.component, childFactory = _this$props.childFactory, props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);
        var contextValue = this.state.contextValue;
        var children = values(this.state.children).map(childFactory);
        delete props.appear;
        delete props.enter;
        delete props.exit;
        if (Component === null) {
          return /* @__PURE__ */ _react.default.createElement(_TransitionGroupContext.default.Provider, {
            value: contextValue
          }, children);
        }
        return /* @__PURE__ */ _react.default.createElement(_TransitionGroupContext.default.Provider, {
          value: contextValue
        }, /* @__PURE__ */ _react.default.createElement(Component, props, children));
      };
      return TransitionGroup2;
    }(_react.default.Component);
    TransitionGroup.propTypes = define_process_env_default.NODE_ENV !== "production" ? {
      /**
       * `<TransitionGroup>` renders a `<div>` by default. You can change this
       * behavior by providing a `component` prop.
       * If you use React v16+ and would like to avoid a wrapping `<div>` element
       * you can pass in `component={null}`. This is useful if the wrapping div
       * borks your css styles.
       */
      component: _propTypes.default.any,
      /**
       * A set of `<Transition>` components, that are toggled `in` and out as they
       * leave. the `<TransitionGroup>` will inject specific transition props, so
       * remember to spread them through if you are wrapping the `<Transition>` as
       * with our `<Fade>` example.
       *
       * While this component is meant for multiple `Transition` or `CSSTransition`
       * children, sometimes you may want to have a single transition child with
       * content that you want to be transitioned out and in when you change it
       * (e.g. routes, images etc.) In that case you can change the `key` prop of
       * the transition child as you change its content, this will cause
       * `TransitionGroup` to transition the child out and back in.
       */
      children: _propTypes.default.node,
      /**
       * A convenience prop that enables or disables appear animations
       * for all children. Note that specifying this will override any defaults set
       * on individual children Transitions.
       */
      appear: _propTypes.default.bool,
      /**
       * A convenience prop that enables or disables enter animations
       * for all children. Note that specifying this will override any defaults set
       * on individual children Transitions.
       */
      enter: _propTypes.default.bool,
      /**
       * A convenience prop that enables or disables exit animations
       * for all children. Note that specifying this will override any defaults set
       * on individual children Transitions.
       */
      exit: _propTypes.default.bool,
      /**
       * You may need to apply reactive updates to a child as it is exiting.
       * This is generally done by using `cloneElement` however in the case of an exiting
       * child the element has already been removed and not accessible to the consumer.
       *
       * If you do need to update a child as it leaves you can provide a `childFactory`
       * to wrap every child, even the ones that are leaving.
       *
       * @type Function(child: ReactElement) -> ReactElement
       */
      childFactory: _propTypes.default.func
    } : {};
    TransitionGroup.defaultProps = defaultProps;
    var _default = TransitionGroup;
    exports2.default = _default;
    module2.exports = exports2.default;
  }
});

// node_modules/react-transition-group/cjs/ReplaceTransition.js
var require_ReplaceTransition = __commonJS({
  "node_modules/react-transition-group/cjs/ReplaceTransition.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    exports2.__esModule = true;
    exports2.default = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _react = _interopRequireDefault(require_react());
    var _reactDom = _interopRequireDefault(require_react_dom());
    var _TransitionGroup = _interopRequireDefault(require_TransitionGroup());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var ReplaceTransition = /* @__PURE__ */ function(_React$Component) {
      _inheritsLoose(ReplaceTransition2, _React$Component);
      function ReplaceTransition2() {
        var _this;
        for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
          _args[_key] = arguments[_key];
        }
        _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;
        _this.handleEnter = function() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          return _this.handleLifecycle("onEnter", 0, args);
        };
        _this.handleEntering = function() {
          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }
          return _this.handleLifecycle("onEntering", 0, args);
        };
        _this.handleEntered = function() {
          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
          }
          return _this.handleLifecycle("onEntered", 0, args);
        };
        _this.handleExit = function() {
          for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            args[_key5] = arguments[_key5];
          }
          return _this.handleLifecycle("onExit", 1, args);
        };
        _this.handleExiting = function() {
          for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
            args[_key6] = arguments[_key6];
          }
          return _this.handleLifecycle("onExiting", 1, args);
        };
        _this.handleExited = function() {
          for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
            args[_key7] = arguments[_key7];
          }
          return _this.handleLifecycle("onExited", 1, args);
        };
        return _this;
      }
      var _proto = ReplaceTransition2.prototype;
      _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {
        var _child$props;
        var children = this.props.children;
        var child = _react.default.Children.toArray(children)[idx];
        if (child.props[handler]) (_child$props = child.props)[handler].apply(_child$props, originalArgs);
        if (this.props[handler]) {
          var maybeNode = child.props.nodeRef ? void 0 : _reactDom.default.findDOMNode(this);
          this.props[handler](maybeNode);
        }
      };
      _proto.render = function render() {
        var _this$props = this.props, children = _this$props.children, inProp = _this$props.in, props = _objectWithoutPropertiesLoose(_this$props, ["children", "in"]);
        var _React$Children$toArr = _react.default.Children.toArray(children), first = _React$Children$toArr[0], second = _React$Children$toArr[1];
        delete props.onEnter;
        delete props.onEntering;
        delete props.onEntered;
        delete props.onExit;
        delete props.onExiting;
        delete props.onExited;
        return /* @__PURE__ */ _react.default.createElement(_TransitionGroup.default, props, inProp ? _react.default.cloneElement(first, {
          key: "first",
          onEnter: this.handleEnter,
          onEntering: this.handleEntering,
          onEntered: this.handleEntered
        }) : _react.default.cloneElement(second, {
          key: "second",
          onEnter: this.handleExit,
          onEntering: this.handleExiting,
          onEntered: this.handleExited
        }));
      };
      return ReplaceTransition2;
    }(_react.default.Component);
    ReplaceTransition.propTypes = define_process_env_default.NODE_ENV !== "production" ? {
      in: _propTypes.default.bool.isRequired,
      children: function children(props, propName) {
        if (_react.default.Children.count(props[propName]) !== 2) return new Error('"' + propName + '" must be exactly two transition components.');
        return null;
      }
    } : {};
    var _default = ReplaceTransition;
    exports2.default = _default;
    module2.exports = exports2.default;
  }
});

// node_modules/react-transition-group/cjs/SwitchTransition.js
var require_SwitchTransition = __commonJS({
  "node_modules/react-transition-group/cjs/SwitchTransition.js"(exports2) {
    "use strict";
    init_define_process_env();
    exports2.__esModule = true;
    exports2.default = exports2.modes = void 0;
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _Transition = require_Transition();
    var _TransitionGroupContext = _interopRequireDefault(require_TransitionGroupContext());
    var _leaveRenders;
    var _enterRenders;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    function areChildrenDifferent(oldChildren, newChildren) {
      if (oldChildren === newChildren) return false;
      if (_react.default.isValidElement(oldChildren) && _react.default.isValidElement(newChildren) && oldChildren.key != null && oldChildren.key === newChildren.key) {
        return false;
      }
      return true;
    }
    var modes = {
      out: "out-in",
      in: "in-out"
    };
    exports2.modes = modes;
    var callHook = function callHook2(element, name, cb) {
      return function() {
        var _element$props;
        element.props[name] && (_element$props = element.props)[name].apply(_element$props, arguments);
        cb();
      };
    };
    var leaveRenders = (_leaveRenders = {}, _leaveRenders[modes.out] = function(_ref) {
      var current = _ref.current, changeState = _ref.changeState;
      return _react.default.cloneElement(current, {
        in: false,
        onExited: callHook(current, "onExited", function() {
          changeState(_Transition.ENTERING, null);
        })
      });
    }, _leaveRenders[modes.in] = function(_ref2) {
      var current = _ref2.current, changeState = _ref2.changeState, children = _ref2.children;
      return [current, _react.default.cloneElement(children, {
        in: true,
        onEntered: callHook(children, "onEntered", function() {
          changeState(_Transition.ENTERING);
        })
      })];
    }, _leaveRenders);
    var enterRenders = (_enterRenders = {}, _enterRenders[modes.out] = function(_ref3) {
      var children = _ref3.children, changeState = _ref3.changeState;
      return _react.default.cloneElement(children, {
        in: true,
        onEntered: callHook(children, "onEntered", function() {
          changeState(_Transition.ENTERED, _react.default.cloneElement(children, {
            in: true
          }));
        })
      });
    }, _enterRenders[modes.in] = function(_ref4) {
      var current = _ref4.current, children = _ref4.children, changeState = _ref4.changeState;
      return [_react.default.cloneElement(current, {
        in: false,
        onExited: callHook(current, "onExited", function() {
          changeState(_Transition.ENTERED, _react.default.cloneElement(children, {
            in: true
          }));
        })
      }), _react.default.cloneElement(children, {
        in: true
      })];
    }, _enterRenders);
    var SwitchTransition = /* @__PURE__ */ function(_React$Component) {
      _inheritsLoose(SwitchTransition2, _React$Component);
      function SwitchTransition2() {
        var _this;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
        _this.state = {
          status: _Transition.ENTERED,
          current: null
        };
        _this.appeared = false;
        _this.changeState = function(status, current) {
          if (current === void 0) {
            current = _this.state.current;
          }
          _this.setState({
            status,
            current
          });
        };
        return _this;
      }
      var _proto = SwitchTransition2.prototype;
      _proto.componentDidMount = function componentDidMount() {
        this.appeared = true;
      };
      SwitchTransition2.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
        if (props.children == null) {
          return {
            current: null
          };
        }
        if (state.status === _Transition.ENTERING && props.mode === modes.in) {
          return {
            status: _Transition.ENTERING
          };
        }
        if (state.current && areChildrenDifferent(state.current, props.children)) {
          return {
            status: _Transition.EXITING
          };
        }
        return {
          current: _react.default.cloneElement(props.children, {
            in: true
          })
        };
      };
      _proto.render = function render() {
        var _this$props = this.props, children = _this$props.children, mode = _this$props.mode, _this$state = this.state, status = _this$state.status, current = _this$state.current;
        var data = {
          children,
          current,
          changeState: this.changeState,
          status
        };
        var component;
        switch (status) {
          case _Transition.ENTERING:
            component = enterRenders[mode](data);
            break;
          case _Transition.EXITING:
            component = leaveRenders[mode](data);
            break;
          case _Transition.ENTERED:
            component = current;
        }
        return /* @__PURE__ */ _react.default.createElement(_TransitionGroupContext.default.Provider, {
          value: {
            isMounting: !this.appeared
          }
        }, component);
      };
      return SwitchTransition2;
    }(_react.default.Component);
    SwitchTransition.propTypes = define_process_env_default.NODE_ENV !== "production" ? {
      /**
       * Transition modes.
       * `out-in`: Current element transitions out first, then when complete, the new element transitions in.
       * `in-out`: New element transitions in first, then when complete, the current element transitions out.
       *
       * @type {'out-in'|'in-out'}
       */
      mode: _propTypes.default.oneOf([modes.in, modes.out]),
      /**
       * Any `Transition` or `CSSTransition` component.
       */
      children: _propTypes.default.oneOfType([_propTypes.default.element.isRequired])
    } : {};
    SwitchTransition.defaultProps = {
      mode: modes.out
    };
    var _default = SwitchTransition;
    exports2.default = _default;
  }
});

// node_modules/react-transition-group/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/react-transition-group/cjs/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    exports2.__esModule = true;
    exports2.config = exports2.Transition = exports2.TransitionGroup = exports2.SwitchTransition = exports2.ReplaceTransition = exports2.CSSTransition = void 0;
    var _CSSTransition = _interopRequireDefault(require_CSSTransition());
    exports2.CSSTransition = _CSSTransition.default;
    var _ReplaceTransition = _interopRequireDefault(require_ReplaceTransition());
    exports2.ReplaceTransition = _ReplaceTransition.default;
    var _SwitchTransition = _interopRequireDefault(require_SwitchTransition());
    exports2.SwitchTransition = _SwitchTransition.default;
    var _TransitionGroup = _interopRequireDefault(require_TransitionGroup());
    exports2.TransitionGroup = _TransitionGroup.default;
    var _Transition = _interopRequireDefault(require_Transition());
    exports2.Transition = _Transition.default;
    var _config = _interopRequireDefault(require_config());
    exports2.config = _config.default;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
  }
});

// node_modules/@mui/material/node/GlobalStyles/GlobalStyles.js
var require_GlobalStyles5 = __commonJS({
  "node_modules/@mui/material/node/GlobalStyles/GlobalStyles.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _system = require_system();
    var _defaultTheme = _interopRequireDefault(require_defaultTheme());
    var _identifier = _interopRequireDefault(require_identifier());
    var _jsxRuntime = require_jsx_runtime();
    function GlobalStyles(props) {
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_system.GlobalStyles, {
        ...props,
        defaultTheme: _defaultTheme.default,
        themeId: _identifier.default
      });
    }
    define_process_env_default.NODE_ENV !== "production" ? GlobalStyles.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * The styles you want to apply globally.
       */
      styles: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.func, _propTypes.default.number, _propTypes.default.object, _propTypes.default.string, _propTypes.default.bool])
    } : void 0;
    var _default = exports2.default = GlobalStyles;
  }
});

// node_modules/@mui/material/node/GlobalStyles/index.js
var require_GlobalStyles6 = __commonJS({
  "node_modules/@mui/material/node/GlobalStyles/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _GlobalStyles.default;
      }
    });
    var _GlobalStyles = _interopRequireDefault(require_GlobalStyles5());
  }
});

// node_modules/@mui/material/node/zero-styled/index.js
var require_zero_styled2 = __commonJS({
  "node_modules/@mui/material/node/zero-styled/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "css", {
      enumerable: true,
      get: function() {
        return _system.css;
      }
    });
    exports2.globalCss = globalCss;
    exports2.internal_createExtendSxProp = internal_createExtendSxProp;
    Object.defineProperty(exports2, "keyframes", {
      enumerable: true,
      get: function() {
        return _system.keyframes;
      }
    });
    Object.defineProperty(exports2, "styled", {
      enumerable: true,
      get: function() {
        return _styled.default;
      }
    });
    Object.defineProperty(exports2, "useTheme", {
      enumerable: true,
      get: function() {
        return _useTheme.default;
      }
    });
    var React7 = _interopRequireWildcard(require_react());
    var _styleFunctionSx = require_styleFunctionSx2();
    var _useTheme = _interopRequireDefault(require_useTheme5());
    var _GlobalStyles = _interopRequireDefault(require_GlobalStyles6());
    var _jsxRuntime = require_jsx_runtime();
    var _system = require_system();
    var _styled = _interopRequireDefault(require_styled3());
    function globalCss(styles) {
      return function GlobalStylesWrapper(props) {
        return (
          // Pigment CSS `globalCss` support callback with theme inside an object but `GlobalStyles` support theme as a callback value.
          /* @__PURE__ */ (0, _jsxRuntime.jsx)(_GlobalStyles.default, {
            styles: typeof styles === "function" ? (theme2) => styles({
              theme: theme2,
              ...props
            }) : styles
          })
        );
      };
    }
    function internal_createExtendSxProp() {
      return _styleFunctionSx.extendSxProp;
    }
  }
});

// node_modules/@mui/material/node/utils/memoTheme.js
var require_memoTheme2 = __commonJS({
  "node_modules/@mui/material/node/utils/memoTheme.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _system = require_system();
    var memoTheme = _system.unstable_memoTheme;
    var _default = exports2.default = memoTheme;
  }
});

// node_modules/@mui/material/node/DefaultPropsProvider/DefaultPropsProvider.js
var require_DefaultPropsProvider3 = __commonJS({
  "node_modules/@mui/material/node/DefaultPropsProvider/DefaultPropsProvider.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.useDefaultProps = useDefaultProps;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _DefaultPropsProvider = _interopRequireWildcard(require_DefaultPropsProvider2());
    var _jsxRuntime = require_jsx_runtime();
    function DefaultPropsProvider(props) {
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_DefaultPropsProvider.default, {
        ...props
      });
    }
    define_process_env_default.NODE_ENV !== "production" ? DefaultPropsProvider.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * @ignore
       */
      children: _propTypes.default.node,
      /**
       * @ignore
       */
      value: _propTypes.default.object.isRequired
    } : void 0;
    var _default = exports2.default = DefaultPropsProvider;
    function useDefaultProps(params) {
      return (0, _DefaultPropsProvider.useDefaultProps)(params);
    }
  }
});

// node_modules/@mui/material/node/DefaultPropsProvider/index.js
var require_DefaultPropsProvider4 = __commonJS({
  "node_modules/@mui/material/node/DefaultPropsProvider/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _DefaultPropsProvider.default;
      }
    });
    Object.defineProperty(exports2, "useDefaultProps", {
      enumerable: true,
      get: function() {
        return _DefaultPropsProvider.useDefaultProps;
      }
    });
    var _DefaultPropsProvider = _interopRequireWildcard(require_DefaultPropsProvider3());
  }
});

// node_modules/@mui/material/node/transitions/utils.js
var require_utils3 = __commonJS({
  "node_modules/@mui/material/node/transitions/utils.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.getTransitionProps = getTransitionProps;
    exports2.reflow = void 0;
    var reflow = (node2) => node2.scrollTop;
    exports2.reflow = reflow;
    function getTransitionProps(props, options) {
      const {
        timeout,
        easing,
        style = {}
      } = props;
      return {
        duration: style.transitionDuration ?? (typeof timeout === "number" ? timeout : timeout[options.mode] || 0),
        easing: style.transitionTimingFunction ?? (typeof easing === "object" ? easing[options.mode] : easing),
        delay: style.transitionDelay
      };
    }
  }
});

// node_modules/@mui/material/node/utils/capitalize.js
var require_capitalize3 = __commonJS({
  "node_modules/@mui/material/node/utils/capitalize.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _capitalize = _interopRequireDefault(require_capitalize2());
    var _default = exports2.default = _capitalize.default;
  }
});

// node_modules/@mui/material/node/utils/createChainedFunction.js
var require_createChainedFunction3 = __commonJS({
  "node_modules/@mui/material/node/utils/createChainedFunction.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _createChainedFunction = _interopRequireDefault(require_createChainedFunction2());
    var _default = exports2.default = _createChainedFunction.default;
  }
});

// node_modules/@mui/material/node/SvgIcon/svgIconClasses.js
var require_svgIconClasses = __commonJS({
  "node_modules/@mui/material/node/SvgIcon/svgIconClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getSvgIconUtilityClass = getSvgIconUtilityClass;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    function getSvgIconUtilityClass(slot) {
      return (0, _generateUtilityClass.default)("MuiSvgIcon", slot);
    }
    var svgIconClasses = (0, _generateUtilityClasses.default)("MuiSvgIcon", ["root", "colorPrimary", "colorSecondary", "colorAction", "colorError", "colorDisabled", "fontSizeInherit", "fontSizeSmall", "fontSizeMedium", "fontSizeLarge"]);
    var _default = exports2.default = svgIconClasses;
  }
});

// node_modules/@mui/material/node/SvgIcon/SvgIcon.js
var require_SvgIcon = __commonJS({
  "node_modules/@mui/material/node/SvgIcon/SvgIcon.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _clsx = _interopRequireDefault(require_clsx());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _capitalize = _interopRequireDefault(require_capitalize3());
    var _zeroStyled = require_zero_styled2();
    var _memoTheme = _interopRequireDefault(require_memoTheme2());
    var _DefaultPropsProvider = require_DefaultPropsProvider4();
    var _svgIconClasses = require_svgIconClasses();
    var _jsxRuntime = require_jsx_runtime();
    var useUtilityClasses = (ownerState) => {
      const {
        color,
        fontSize,
        classes
      } = ownerState;
      const slots = {
        root: ["root", color !== "inherit" && `color${(0, _capitalize.default)(color)}`, `fontSize${(0, _capitalize.default)(fontSize)}`]
      };
      return (0, _composeClasses.default)(slots, _svgIconClasses.getSvgIconUtilityClass, classes);
    };
    var SvgIconRoot = (0, _zeroStyled.styled)("svg", {
      name: "MuiSvgIcon",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.color !== "inherit" && styles[`color${(0, _capitalize.default)(ownerState.color)}`], styles[`fontSize${(0, _capitalize.default)(ownerState.fontSize)}`]];
      }
    })((0, _memoTheme.default)(({
      theme: theme2
    }) => ({
      userSelect: "none",
      width: "1em",
      height: "1em",
      display: "inline-block",
      flexShrink: 0,
      transition: theme2.transitions?.create?.("fill", {
        duration: (theme2.vars ?? theme2).transitions?.duration?.shorter
      }),
      variants: [
        {
          props: (props) => !props.hasSvgAsChild,
          style: {
            // the <svg> will define the property that has `currentColor`
            // for example heroicons uses fill="none" and stroke="currentColor"
            fill: "currentColor"
          }
        },
        {
          props: {
            fontSize: "inherit"
          },
          style: {
            fontSize: "inherit"
          }
        },
        {
          props: {
            fontSize: "small"
          },
          style: {
            fontSize: theme2.typography?.pxToRem?.(20) || "1.25rem"
          }
        },
        {
          props: {
            fontSize: "medium"
          },
          style: {
            fontSize: theme2.typography?.pxToRem?.(24) || "1.5rem"
          }
        },
        {
          props: {
            fontSize: "large"
          },
          style: {
            fontSize: theme2.typography?.pxToRem?.(35) || "2.1875rem"
          }
        },
        // TODO v5 deprecate color prop, v6 remove for sx
        ...Object.entries((theme2.vars ?? theme2).palette).filter(([, value]) => value && value.main).map(([color]) => ({
          props: {
            color
          },
          style: {
            color: (theme2.vars ?? theme2).palette?.[color]?.main
          }
        })),
        {
          props: {
            color: "action"
          },
          style: {
            color: (theme2.vars ?? theme2).palette?.action?.active
          }
        },
        {
          props: {
            color: "disabled"
          },
          style: {
            color: (theme2.vars ?? theme2).palette?.action?.disabled
          }
        },
        {
          props: {
            color: "inherit"
          },
          style: {
            color: void 0
          }
        }
      ]
    })));
    var SvgIcon = /* @__PURE__ */ React7.forwardRef(function SvgIcon2(inProps, ref) {
      const props = (0, _DefaultPropsProvider.useDefaultProps)({
        props: inProps,
        name: "MuiSvgIcon"
      });
      const {
        children,
        className,
        color = "inherit",
        component = "svg",
        fontSize = "medium",
        htmlColor,
        inheritViewBox = false,
        titleAccess,
        viewBox = "0 0 24 24",
        ...other
      } = props;
      const hasSvgAsChild = /* @__PURE__ */ React7.isValidElement(children) && children.type === "svg";
      const ownerState = {
        ...props,
        color,
        component,
        fontSize,
        instanceFontSize: inProps.fontSize,
        inheritViewBox,
        viewBox,
        hasSvgAsChild
      };
      const more = {};
      if (!inheritViewBox) {
        more.viewBox = viewBox;
      }
      const classes = useUtilityClasses(ownerState);
      return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(SvgIconRoot, {
        as: component,
        className: (0, _clsx.default)(classes.root, className),
        focusable: "false",
        color: htmlColor,
        "aria-hidden": titleAccess ? void 0 : true,
        role: titleAccess ? "img" : void 0,
        ref,
        ...more,
        ...other,
        ...hasSvgAsChild && children.props,
        ownerState,
        children: [hasSvgAsChild ? children.props.children : children, titleAccess ? /* @__PURE__ */ (0, _jsxRuntime.jsx)("title", {
          children: titleAccess
        }) : null]
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? SvgIcon.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * Node passed into the SVG element.
       */
      children: _propTypes.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      /**
       * @ignore
       */
      className: _propTypes.default.string,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
       * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
       * @default 'inherit'
       */
      color: _propTypes.default.oneOfType([_propTypes.default.oneOf(["inherit", "action", "disabled", "primary", "secondary", "error", "info", "success", "warning"]), _propTypes.default.string]),
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: _propTypes.default.elementType,
      /**
       * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
       * @default 'medium'
       */
      fontSize: _propTypes.default.oneOfType([_propTypes.default.oneOf(["inherit", "large", "medium", "small"]), _propTypes.default.string]),
      /**
       * Applies a color attribute to the SVG element.
       */
      htmlColor: _propTypes.default.string,
      /**
       * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`
       * prop will be ignored.
       * Useful when you want to reference a custom `component` and have `SvgIcon` pass that
       * `component`'s viewBox to the root node.
       * @default false
       */
      inheritViewBox: _propTypes.default.bool,
      /**
       * The shape-rendering attribute. The behavior of the different options is described on the
       * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
       * If you are having issues with blurry icons you should investigate this prop.
       */
      shapeRendering: _propTypes.default.string,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
      /**
       * Provides a human-readable title for the element that contains it.
       * https://www.w3.org/TR/SVG-access/#Equivalent
       */
      titleAccess: _propTypes.default.string,
      /**
       * Allows you to redefine what the coordinates without units mean inside an SVG element.
       * For example, if the SVG element is 500 (width) by 200 (height),
       * and you pass viewBox="0 0 50 20",
       * this means that the coordinates inside the SVG will go from the top left corner (0,0)
       * to bottom right (50,20) and each unit will be worth 10px.
       * @default '0 0 24 24'
       */
      viewBox: _propTypes.default.string
    } : void 0;
    SvgIcon.muiName = "SvgIcon";
    var _default = exports2.default = SvgIcon;
  }
});

// node_modules/@mui/material/node/SvgIcon/index.js
var require_SvgIcon2 = __commonJS({
  "node_modules/@mui/material/node/SvgIcon/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      svgIconClasses: true
    };
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _SvgIcon.default;
      }
    });
    Object.defineProperty(exports2, "svgIconClasses", {
      enumerable: true,
      get: function() {
        return _svgIconClasses.default;
      }
    });
    var _SvgIcon = _interopRequireDefault(require_SvgIcon());
    var _svgIconClasses = _interopRequireWildcard(require_svgIconClasses());
    Object.keys(_svgIconClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _svgIconClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _svgIconClasses[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node/utils/createSvgIcon.js
var require_createSvgIcon = __commonJS({
  "node_modules/@mui/material/node/utils/createSvgIcon.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = createSvgIcon;
    var React7 = _interopRequireWildcard(require_react());
    var _SvgIcon = _interopRequireDefault(require_SvgIcon2());
    var _jsxRuntime = require_jsx_runtime();
    function createSvgIcon(path, displayName) {
      function Component(props, ref) {
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_SvgIcon.default, {
          "data-testid": `${displayName}Icon`,
          ref,
          ...props,
          children: path
        });
      }
      if (define_process_env_default.NODE_ENV !== "production") {
        Component.displayName = `${displayName}Icon`;
      }
      Component.muiName = _SvgIcon.default.muiName;
      return /* @__PURE__ */ React7.memo(/* @__PURE__ */ React7.forwardRef(Component));
    }
  }
});

// node_modules/@mui/material/node/utils/debounce.js
var require_debounce3 = __commonJS({
  "node_modules/@mui/material/node/utils/debounce.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _debounce = _interopRequireDefault(require_debounce2());
    var _default = exports2.default = _debounce.default;
  }
});

// node_modules/@mui/material/node/utils/deprecatedPropType.js
var require_deprecatedPropType3 = __commonJS({
  "node_modules/@mui/material/node/utils/deprecatedPropType.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _deprecatedPropType = _interopRequireDefault(require_deprecatedPropType2());
    var _default = exports2.default = _deprecatedPropType.default;
  }
});

// node_modules/@mui/material/node/utils/isMuiElement.js
var require_isMuiElement3 = __commonJS({
  "node_modules/@mui/material/node/utils/isMuiElement.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _isMuiElement = _interopRequireDefault(require_isMuiElement2());
    var _default = exports2.default = _isMuiElement.default;
  }
});

// node_modules/@mui/material/node/utils/ownerDocument.js
var require_ownerDocument3 = __commonJS({
  "node_modules/@mui/material/node/utils/ownerDocument.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _ownerDocument = _interopRequireDefault(require_ownerDocument2());
    var _default = exports2.default = _ownerDocument.default;
  }
});

// node_modules/@mui/material/node/utils/ownerWindow.js
var require_ownerWindow3 = __commonJS({
  "node_modules/@mui/material/node/utils/ownerWindow.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _ownerWindow = _interopRequireDefault(require_ownerWindow2());
    var _default = exports2.default = _ownerWindow.default;
  }
});

// node_modules/@mui/material/node/utils/requirePropFactory.js
var require_requirePropFactory3 = __commonJS({
  "node_modules/@mui/material/node/utils/requirePropFactory.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _requirePropFactory = _interopRequireDefault(require_requirePropFactory2());
    var _default = exports2.default = _requirePropFactory.default;
  }
});

// node_modules/@mui/material/node/utils/setRef.js
var require_setRef3 = __commonJS({
  "node_modules/@mui/material/node/utils/setRef.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _setRef = _interopRequireDefault(require_setRef2());
    var _default = exports2.default = _setRef.default;
  }
});

// node_modules/@mui/material/node/utils/useEnhancedEffect.js
var require_useEnhancedEffect3 = __commonJS({
  "node_modules/@mui/material/node/utils/useEnhancedEffect.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _useEnhancedEffect = _interopRequireDefault(require_useEnhancedEffect2());
    var _default = exports2.default = _useEnhancedEffect.default;
  }
});

// node_modules/@mui/material/node/utils/useId.js
var require_useId3 = __commonJS({
  "node_modules/@mui/material/node/utils/useId.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _useId = _interopRequireDefault(require_useId2());
    var _default = exports2.default = _useId.default;
  }
});

// node_modules/@mui/material/node/utils/unsupportedProp.js
var require_unsupportedProp3 = __commonJS({
  "node_modules/@mui/material/node/utils/unsupportedProp.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _unsupportedProp = _interopRequireDefault(require_unsupportedProp2());
    var _default = exports2.default = _unsupportedProp.default;
  }
});

// node_modules/@mui/material/node/utils/useControlled.js
var require_useControlled3 = __commonJS({
  "node_modules/@mui/material/node/utils/useControlled.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _useControlled = _interopRequireDefault(require_useControlled2());
    var _default = exports2.default = _useControlled.default;
  }
});

// node_modules/@mui/material/node/utils/useEventCallback.js
var require_useEventCallback3 = __commonJS({
  "node_modules/@mui/material/node/utils/useEventCallback.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _useEventCallback = _interopRequireDefault(require_useEventCallback2());
    var _default = exports2.default = _useEventCallback.default;
  }
});

// node_modules/@mui/material/node/utils/useForkRef.js
var require_useForkRef3 = __commonJS({
  "node_modules/@mui/material/node/utils/useForkRef.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _useForkRef = _interopRequireDefault(require_useForkRef2());
    var _default = exports2.default = _useForkRef.default;
  }
});

// node_modules/@mui/material/node/utils/mergeSlotProps.js
var require_mergeSlotProps3 = __commonJS({
  "node_modules/@mui/material/node/utils/mergeSlotProps.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = mergeSlotProps;
    var _clsx = _interopRequireDefault(require_clsx());
    function mergeSlotProps(externalSlotProps, defaultSlotProps) {
      if (!externalSlotProps) {
        return defaultSlotProps;
      }
      if (typeof externalSlotProps === "function" || typeof defaultSlotProps === "function") {
        return (ownerState) => {
          const defaultSlotPropsValue = typeof defaultSlotProps === "function" ? defaultSlotProps(ownerState) : defaultSlotProps;
          const externalSlotPropsValue = typeof externalSlotProps === "function" ? externalSlotProps({
            ...ownerState,
            ...defaultSlotPropsValue
          }) : externalSlotProps;
          const className2 = (0, _clsx.default)(ownerState?.className, defaultSlotPropsValue?.className, externalSlotPropsValue?.className);
          return {
            ...defaultSlotPropsValue,
            ...externalSlotPropsValue,
            ...!!className2 && {
              className: className2
            },
            ...defaultSlotPropsValue?.style && externalSlotPropsValue?.style && {
              style: {
                ...defaultSlotPropsValue.style,
                ...externalSlotPropsValue.style
              }
            },
            ...defaultSlotPropsValue?.sx && externalSlotPropsValue?.sx && {
              sx: [...Array.isArray(defaultSlotPropsValue.sx) ? defaultSlotPropsValue.sx : [defaultSlotPropsValue.sx], ...Array.isArray(externalSlotPropsValue.sx) ? externalSlotPropsValue.sx : [externalSlotPropsValue.sx]]
            }
          };
        };
      }
      const typedDefaultSlotProps = defaultSlotProps;
      const className = (0, _clsx.default)(typedDefaultSlotProps?.className, externalSlotProps?.className);
      return {
        ...defaultSlotProps,
        ...externalSlotProps,
        ...!!className && {
          className
        },
        ...typedDefaultSlotProps?.style && externalSlotProps?.style && {
          style: {
            ...typedDefaultSlotProps.style,
            ...externalSlotProps.style
          }
        },
        ...typedDefaultSlotProps?.sx && externalSlotProps?.sx && {
          sx: [...Array.isArray(typedDefaultSlotProps.sx) ? typedDefaultSlotProps.sx : [typedDefaultSlotProps.sx], ...Array.isArray(externalSlotProps.sx) ? externalSlotProps.sx : [externalSlotProps.sx]]
        }
      };
    }
  }
});

// node_modules/@mui/material/node/utils/index.js
var require_utils4 = __commonJS({
  "node_modules/@mui/material/node/utils/index.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "capitalize", {
      enumerable: true,
      get: function() {
        return _capitalize.default;
      }
    });
    Object.defineProperty(exports2, "createChainedFunction", {
      enumerable: true,
      get: function() {
        return _createChainedFunction.default;
      }
    });
    Object.defineProperty(exports2, "createSvgIcon", {
      enumerable: true,
      get: function() {
        return _createSvgIcon.default;
      }
    });
    Object.defineProperty(exports2, "debounce", {
      enumerable: true,
      get: function() {
        return _debounce.default;
      }
    });
    Object.defineProperty(exports2, "deprecatedPropType", {
      enumerable: true,
      get: function() {
        return _deprecatedPropType.default;
      }
    });
    Object.defineProperty(exports2, "isMuiElement", {
      enumerable: true,
      get: function() {
        return _isMuiElement.default;
      }
    });
    Object.defineProperty(exports2, "mergeSlotProps", {
      enumerable: true,
      get: function() {
        return _mergeSlotProps.default;
      }
    });
    Object.defineProperty(exports2, "ownerDocument", {
      enumerable: true,
      get: function() {
        return _ownerDocument.default;
      }
    });
    Object.defineProperty(exports2, "ownerWindow", {
      enumerable: true,
      get: function() {
        return _ownerWindow.default;
      }
    });
    Object.defineProperty(exports2, "requirePropFactory", {
      enumerable: true,
      get: function() {
        return _requirePropFactory.default;
      }
    });
    Object.defineProperty(exports2, "setRef", {
      enumerable: true,
      get: function() {
        return _setRef.default;
      }
    });
    exports2.unstable_ClassNameGenerator = void 0;
    Object.defineProperty(exports2, "unstable_memoTheme", {
      enumerable: true,
      get: function() {
        return _memoTheme.default;
      }
    });
    Object.defineProperty(exports2, "unstable_useEnhancedEffect", {
      enumerable: true,
      get: function() {
        return _useEnhancedEffect.default;
      }
    });
    Object.defineProperty(exports2, "unstable_useId", {
      enumerable: true,
      get: function() {
        return _useId.default;
      }
    });
    Object.defineProperty(exports2, "unsupportedProp", {
      enumerable: true,
      get: function() {
        return _unsupportedProp.default;
      }
    });
    Object.defineProperty(exports2, "useControlled", {
      enumerable: true,
      get: function() {
        return _useControlled.default;
      }
    });
    Object.defineProperty(exports2, "useEventCallback", {
      enumerable: true,
      get: function() {
        return _useEventCallback.default;
      }
    });
    Object.defineProperty(exports2, "useForkRef", {
      enumerable: true,
      get: function() {
        return _useForkRef.default;
      }
    });
    var _utils = require_utils();
    var _capitalize = _interopRequireDefault(require_capitalize3());
    var _createChainedFunction = _interopRequireDefault(require_createChainedFunction3());
    var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
    var _debounce = _interopRequireDefault(require_debounce3());
    var _deprecatedPropType = _interopRequireDefault(require_deprecatedPropType3());
    var _isMuiElement = _interopRequireDefault(require_isMuiElement3());
    var _memoTheme = _interopRequireDefault(require_memoTheme2());
    var _ownerDocument = _interopRequireDefault(require_ownerDocument3());
    var _ownerWindow = _interopRequireDefault(require_ownerWindow3());
    var _requirePropFactory = _interopRequireDefault(require_requirePropFactory3());
    var _setRef = _interopRequireDefault(require_setRef3());
    var _useEnhancedEffect = _interopRequireDefault(require_useEnhancedEffect3());
    var _useId = _interopRequireDefault(require_useId3());
    var _unsupportedProp = _interopRequireDefault(require_unsupportedProp3());
    var _useControlled = _interopRequireDefault(require_useControlled3());
    var _useEventCallback = _interopRequireDefault(require_useEventCallback3());
    var _useForkRef = _interopRequireDefault(require_useForkRef3());
    var _mergeSlotProps = _interopRequireDefault(require_mergeSlotProps3());
    var unstable_ClassNameGenerator = exports2.unstable_ClassNameGenerator = {
      configure: (generator) => {
        if (define_process_env_default.NODE_ENV !== "production") {
          console.warn(["MUI: `ClassNameGenerator` import from `@mui/material/utils` is outdated and might cause unexpected issues.", "", "You should use `import { unstable_ClassNameGenerator } from '@mui/material/className'` instead", "", "The detail of the issue: https://github.com/mui/material-ui/issues/30011#issuecomment-1024993401", "", "The updated documentation: https://mui.com/guides/classname-generator/"].join("\n"));
        }
        _utils.unstable_ClassNameGenerator.configure(generator);
      }
    };
  }
});

// node_modules/@mui/material/node/Collapse/collapseClasses.js
var require_collapseClasses = __commonJS({
  "node_modules/@mui/material/node/Collapse/collapseClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getCollapseUtilityClass = getCollapseUtilityClass;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    function getCollapseUtilityClass(slot) {
      return (0, _generateUtilityClass.default)("MuiCollapse", slot);
    }
    var collapseClasses = (0, _generateUtilityClasses.default)("MuiCollapse", ["root", "horizontal", "vertical", "entered", "hidden", "wrapper", "wrapperInner"]);
    var _default = exports2.default = collapseClasses;
  }
});

// node_modules/@mui/material/node/Collapse/Collapse.js
var require_Collapse = __commonJS({
  "node_modules/@mui/material/node/Collapse/Collapse.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _clsx = _interopRequireDefault(require_clsx());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _reactTransitionGroup = require_cjs();
    var _useTimeout = _interopRequireDefault(require_useTimeout2());
    var _elementTypeAcceptingRef = _interopRequireDefault(require_elementTypeAcceptingRef2());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _zeroStyled = require_zero_styled2();
    var _memoTheme = _interopRequireDefault(require_memoTheme2());
    var _DefaultPropsProvider = require_DefaultPropsProvider4();
    var _createTransitions = require_createTransitions();
    var _utils = require_utils3();
    var _utils2 = require_utils4();
    var _collapseClasses = require_collapseClasses();
    var _jsxRuntime = require_jsx_runtime();
    var useUtilityClasses = (ownerState) => {
      const {
        orientation,
        classes
      } = ownerState;
      const slots = {
        root: ["root", `${orientation}`],
        entered: ["entered"],
        hidden: ["hidden"],
        wrapper: ["wrapper", `${orientation}`],
        wrapperInner: ["wrapperInner", `${orientation}`]
      };
      return (0, _composeClasses.default)(slots, _collapseClasses.getCollapseUtilityClass, classes);
    };
    var CollapseRoot = (0, _zeroStyled.styled)("div", {
      name: "MuiCollapse",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, styles[ownerState.orientation], ownerState.state === "entered" && styles.entered, ownerState.state === "exited" && !ownerState.in && ownerState.collapsedSize === "0px" && styles.hidden];
      }
    })((0, _memoTheme.default)(({
      theme: theme2
    }) => ({
      height: 0,
      overflow: "hidden",
      transition: theme2.transitions.create("height"),
      variants: [{
        props: {
          orientation: "horizontal"
        },
        style: {
          height: "auto",
          width: 0,
          transition: theme2.transitions.create("width")
        }
      }, {
        props: {
          state: "entered"
        },
        style: {
          height: "auto",
          overflow: "visible"
        }
      }, {
        props: {
          state: "entered",
          orientation: "horizontal"
        },
        style: {
          width: "auto"
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.state === "exited" && !ownerState.in && ownerState.collapsedSize === "0px",
        style: {
          visibility: "hidden"
        }
      }]
    })));
    var CollapseWrapper = (0, _zeroStyled.styled)("div", {
      name: "MuiCollapse",
      slot: "Wrapper",
      overridesResolver: (props, styles) => styles.wrapper
    })({
      // Hack to get children with a negative margin to not falsify the height computation.
      display: "flex",
      width: "100%",
      variants: [{
        props: {
          orientation: "horizontal"
        },
        style: {
          width: "auto",
          height: "100%"
        }
      }]
    });
    var CollapseWrapperInner = (0, _zeroStyled.styled)("div", {
      name: "MuiCollapse",
      slot: "WrapperInner",
      overridesResolver: (props, styles) => styles.wrapperInner
    })({
      width: "100%",
      variants: [{
        props: {
          orientation: "horizontal"
        },
        style: {
          width: "auto",
          height: "100%"
        }
      }]
    });
    var Collapse = /* @__PURE__ */ React7.forwardRef(function Collapse2(inProps, ref) {
      const props = (0, _DefaultPropsProvider.useDefaultProps)({
        props: inProps,
        name: "MuiCollapse"
      });
      const {
        addEndListener,
        children,
        className,
        collapsedSize: collapsedSizeProp = "0px",
        component,
        easing,
        in: inProp,
        onEnter,
        onEntered,
        onEntering,
        onExit,
        onExited,
        onExiting,
        orientation = "vertical",
        style,
        timeout = _createTransitions.duration.standard,
        // eslint-disable-next-line react/prop-types
        TransitionComponent = _reactTransitionGroup.Transition,
        ...other
      } = props;
      const ownerState = {
        ...props,
        orientation,
        collapsedSize: collapsedSizeProp
      };
      const classes = useUtilityClasses(ownerState);
      const theme2 = (0, _zeroStyled.useTheme)();
      const timer = (0, _useTimeout.default)();
      const wrapperRef = React7.useRef(null);
      const autoTransitionDuration = React7.useRef();
      const collapsedSize = typeof collapsedSizeProp === "number" ? `${collapsedSizeProp}px` : collapsedSizeProp;
      const isHorizontal = orientation === "horizontal";
      const size = isHorizontal ? "width" : "height";
      const nodeRef = React7.useRef(null);
      const handleRef = (0, _utils2.useForkRef)(ref, nodeRef);
      const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
        if (callback) {
          const node2 = nodeRef.current;
          if (maybeIsAppearing === void 0) {
            callback(node2);
          } else {
            callback(node2, maybeIsAppearing);
          }
        }
      };
      const getWrapperSize = () => wrapperRef.current ? wrapperRef.current[isHorizontal ? "clientWidth" : "clientHeight"] : 0;
      const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
        if (wrapperRef.current && isHorizontal) {
          wrapperRef.current.style.position = "absolute";
        }
        node2.style[size] = collapsedSize;
        if (onEnter) {
          onEnter(node2, isAppearing);
        }
      });
      const handleEntering = normalizedTransitionCallback((node2, isAppearing) => {
        const wrapperSize = getWrapperSize();
        if (wrapperRef.current && isHorizontal) {
          wrapperRef.current.style.position = "";
        }
        const {
          duration: transitionDuration,
          easing: transitionTimingFunction
        } = (0, _utils.getTransitionProps)({
          style,
          timeout,
          easing
        }, {
          mode: "enter"
        });
        if (timeout === "auto") {
          const duration2 = theme2.transitions.getAutoHeightDuration(wrapperSize);
          node2.style.transitionDuration = `${duration2}ms`;
          autoTransitionDuration.current = duration2;
        } else {
          node2.style.transitionDuration = typeof transitionDuration === "string" ? transitionDuration : `${transitionDuration}ms`;
        }
        node2.style[size] = `${wrapperSize}px`;
        node2.style.transitionTimingFunction = transitionTimingFunction;
        if (onEntering) {
          onEntering(node2, isAppearing);
        }
      });
      const handleEntered = normalizedTransitionCallback((node2, isAppearing) => {
        node2.style[size] = "auto";
        if (onEntered) {
          onEntered(node2, isAppearing);
        }
      });
      const handleExit = normalizedTransitionCallback((node2) => {
        node2.style[size] = `${getWrapperSize()}px`;
        if (onExit) {
          onExit(node2);
        }
      });
      const handleExited = normalizedTransitionCallback(onExited);
      const handleExiting = normalizedTransitionCallback((node2) => {
        const wrapperSize = getWrapperSize();
        const {
          duration: transitionDuration,
          easing: transitionTimingFunction
        } = (0, _utils.getTransitionProps)({
          style,
          timeout,
          easing
        }, {
          mode: "exit"
        });
        if (timeout === "auto") {
          const duration2 = theme2.transitions.getAutoHeightDuration(wrapperSize);
          node2.style.transitionDuration = `${duration2}ms`;
          autoTransitionDuration.current = duration2;
        } else {
          node2.style.transitionDuration = typeof transitionDuration === "string" ? transitionDuration : `${transitionDuration}ms`;
        }
        node2.style[size] = collapsedSize;
        node2.style.transitionTimingFunction = transitionTimingFunction;
        if (onExiting) {
          onExiting(node2);
        }
      });
      const handleAddEndListener = (next2) => {
        if (timeout === "auto") {
          timer.start(autoTransitionDuration.current || 0, next2);
        }
        if (addEndListener) {
          addEndListener(nodeRef.current, next2);
        }
      };
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(TransitionComponent, {
        in: inProp,
        onEnter: handleEnter,
        onEntered: handleEntered,
        onEntering: handleEntering,
        onExit: handleExit,
        onExited: handleExited,
        onExiting: handleExiting,
        addEndListener: handleAddEndListener,
        nodeRef,
        timeout: timeout === "auto" ? null : timeout,
        ...other,
        children: (state, {
          ownerState: incomingOwnerState,
          ...restChildProps
        }) => /* @__PURE__ */ (0, _jsxRuntime.jsx)(CollapseRoot, {
          as: component,
          className: (0, _clsx.default)(classes.root, className, {
            "entered": classes.entered,
            "exited": !inProp && collapsedSize === "0px" && classes.hidden
          }[state]),
          style: {
            [isHorizontal ? "minWidth" : "minHeight"]: collapsedSize,
            ...style
          },
          ref: handleRef,
          ownerState: {
            ...ownerState,
            state
          },
          ...restChildProps,
          children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(CollapseWrapper, {
            ownerState: {
              ...ownerState,
              state
            },
            className: classes.wrapper,
            ref: wrapperRef,
            children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(CollapseWrapperInner, {
              ownerState: {
                ...ownerState,
                state
              },
              className: classes.wrapperInner,
              children
            })
          })
        })
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? Collapse.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * Add a custom transition end trigger. Called with the transitioning DOM
       * node and a done callback. Allows for more fine grained transition end
       * logic. Note: Timeouts are still used as a fallback if provided.
       */
      addEndListener: _propTypes.default.func,
      /**
       * The content node to be collapsed.
       */
      children: _propTypes.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      /**
       * @ignore
       */
      className: _propTypes.default.string,
      /**
       * The width (horizontal) or height (vertical) of the container when collapsed.
       * @default '0px'
       */
      collapsedSize: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: _elementTypeAcceptingRef.default,
      /**
       * The transition timing function.
       * You may specify a single easing or a object containing enter and exit values.
       */
      easing: _propTypes.default.oneOfType([_propTypes.default.shape({
        enter: _propTypes.default.string,
        exit: _propTypes.default.string
      }), _propTypes.default.string]),
      /**
       * If `true`, the component will transition in.
       */
      in: _propTypes.default.bool,
      /**
       * @ignore
       */
      onEnter: _propTypes.default.func,
      /**
       * @ignore
       */
      onEntered: _propTypes.default.func,
      /**
       * @ignore
       */
      onEntering: _propTypes.default.func,
      /**
       * @ignore
       */
      onExit: _propTypes.default.func,
      /**
       * @ignore
       */
      onExited: _propTypes.default.func,
      /**
       * @ignore
       */
      onExiting: _propTypes.default.func,
      /**
       * The transition orientation.
       * @default 'vertical'
       */
      orientation: _propTypes.default.oneOf(["horizontal", "vertical"]),
      /**
       * @ignore
       */
      style: _propTypes.default.object,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       *
       * Set to 'auto' to automatically calculate transition time based on height.
       * @default duration.standard
       */
      timeout: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.shape({
        appear: _propTypes.default.number,
        enter: _propTypes.default.number,
        exit: _propTypes.default.number
      })])
    } : void 0;
    if (Collapse) {
      Collapse.muiSupportAuto = true;
    }
    var _default = exports2.default = Collapse;
  }
});

// node_modules/@mui/material/node/Collapse/index.js
var require_Collapse2 = __commonJS({
  "node_modules/@mui/material/node/Collapse/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      collapseClasses: true
    };
    Object.defineProperty(exports2, "collapseClasses", {
      enumerable: true,
      get: function() {
        return _collapseClasses.default;
      }
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _Collapse.default;
      }
    });
    var _Collapse = _interopRequireDefault(require_Collapse());
    var _collapseClasses = _interopRequireWildcard(require_collapseClasses());
    Object.keys(_collapseClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _collapseClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _collapseClasses[key];
        }
      });
    });
  }
});

// node_modules/@mui/styled-engine/StyledEngineProvider/StyledEngineProvider.js
var require_StyledEngineProvider3 = __commonJS({
  "node_modules/@mui/styled-engine/StyledEngineProvider/StyledEngineProvider.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.TEST_INTERNALS_DO_NOT_USE = void 0;
    exports2.default = StyledEngineProvider;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _react2 = (init_emotion_react_esm(), __toCommonJS(emotion_react_esm_exports));
    var _cache = _interopRequireDefault((init_emotion_cache_esm(), __toCommonJS(emotion_cache_esm_exports)));
    var _sheet = (init_emotion_sheet_esm(), __toCommonJS(emotion_sheet_esm_exports));
    var _jsxRuntime = require_jsx_runtime();
    var cacheMap = /* @__PURE__ */ new Map();
    var TEST_INTERNALS_DO_NOT_USE = exports2.TEST_INTERNALS_DO_NOT_USE = {
      /**
       * to intercept the generated CSS before inserting to the style tag, so that we can check the generated CSS.
       *
       * let rule;
       * TEST_INTERNALS_DO_NOT_USE.insert = (...args) => {
       *    rule = args[0];
       * };
       *
       * expect(rule).to.equal(...);
       */
      insert: void 0
    };
    var createEmotionCache = (options, CustomSheet) => {
      const cache = (0, _cache.default)(options);
      cache.sheet = new CustomSheet({
        key: cache.key,
        nonce: cache.sheet.nonce,
        container: cache.sheet.container,
        speedy: cache.sheet.isSpeedy,
        prepend: cache.sheet.prepend,
        insertionPoint: cache.sheet.insertionPoint
      });
      return cache;
    };
    var insertionPoint;
    if (typeof document === "object") {
      insertionPoint = document.querySelector('[name="emotion-insertion-point"]');
      if (!insertionPoint) {
        insertionPoint = document.createElement("meta");
        insertionPoint.setAttribute("name", "emotion-insertion-point");
        insertionPoint.setAttribute("content", "");
        const head = document.querySelector("head");
        if (head) {
          head.prepend(insertionPoint);
        }
      }
    }
    function getCache(injectFirst, enableCssLayer) {
      if (injectFirst || enableCssLayer) {
        class MyStyleSheet extends _sheet.StyleSheet {
          insert(rule, options) {
            if (TEST_INTERNALS_DO_NOT_USE.insert) {
              return TEST_INTERNALS_DO_NOT_USE.insert(rule, options);
            }
            if (this.key && this.key.endsWith("global")) {
              this.before = insertionPoint;
            }
            return super.insert(rule, options);
          }
        }
        const emotionCache = createEmotionCache({
          key: "css",
          insertionPoint: injectFirst ? insertionPoint : void 0
        }, MyStyleSheet);
        if (enableCssLayer) {
          const prevInsert = emotionCache.insert;
          emotionCache.insert = (...args) => {
            if (!args[1].styles.startsWith("@layer")) {
              args[1].styles = `@layer mui {${args[1].styles}}`;
            }
            return prevInsert(...args);
          };
        }
        return emotionCache;
      }
      return void 0;
    }
    function StyledEngineProvider(props) {
      const {
        injectFirst,
        enableCssLayer,
        children
      } = props;
      const cache = React7.useMemo(() => {
        const cacheKey = `${injectFirst}-${enableCssLayer}`;
        if (cacheMap.has(cacheKey)) {
          return cacheMap.get(cacheKey);
        }
        const fresh = getCache(injectFirst, enableCssLayer);
        cacheMap.set(cacheKey, fresh);
        return fresh;
      }, [injectFirst, enableCssLayer]);
      return cache ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(_react2.CacheProvider, {
        value: cache,
        children
      }) : children;
    }
    define_process_env_default.NODE_ENV !== "production" ? StyledEngineProvider.propTypes = {
      /**
       * Your component tree.
       */
      children: _propTypes.default.node,
      /**
       * If `true`, the styles are wrapped in `@layer mui`.
       * Learn more about [Cascade layers](https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Styling_basics/Cascade_layers).
       */
      enableCssLayer: _propTypes.default.bool,
      /**
       * By default, the styles are injected last in the <head> element of the page.
       * As a result, they gain more specificity than any other style sheet.
       * If you want to override MUI's styles, set this prop.
       */
      injectFirst: _propTypes.default.bool
    } : void 0;
  }
});

// node_modules/@mui/styled-engine/StyledEngineProvider/index.js
var require_StyledEngineProvider4 = __commonJS({
  "node_modules/@mui/styled-engine/StyledEngineProvider/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _StyledEngineProvider.default;
      }
    });
    var _StyledEngineProvider = _interopRequireDefault(require_StyledEngineProvider3());
  }
});

// node_modules/@mui/styled-engine/GlobalStyles/GlobalStyles.js
var require_GlobalStyles7 = __commonJS({
  "node_modules/@mui/styled-engine/GlobalStyles/GlobalStyles.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = GlobalStyles;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _react2 = (init_emotion_react_esm(), __toCommonJS(emotion_react_esm_exports));
    var _jsxRuntime = require_jsx_runtime();
    function isEmpty(obj) {
      return obj === void 0 || obj === null || Object.keys(obj).length === 0;
    }
    function GlobalStyles(props) {
      const {
        styles,
        defaultTheme = {}
      } = props;
      const globalStyles = typeof styles === "function" ? (themeInput) => styles(isEmpty(themeInput) ? defaultTheme : themeInput) : styles;
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_react2.Global, {
        styles: globalStyles
      });
    }
    define_process_env_default.NODE_ENV !== "production" ? GlobalStyles.propTypes = {
      defaultTheme: _propTypes.default.object,
      styles: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.string, _propTypes.default.object, _propTypes.default.func])
    } : void 0;
  }
});

// node_modules/@mui/styled-engine/GlobalStyles/index.js
var require_GlobalStyles8 = __commonJS({
  "node_modules/@mui/styled-engine/GlobalStyles/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _GlobalStyles.default;
      }
    });
    var _GlobalStyles = _interopRequireDefault(require_GlobalStyles7());
  }
});

// node_modules/@mui/styled-engine/index.js
var require_styled_engine = __commonJS({
  "node_modules/@mui/styled-engine/index.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "GlobalStyles", {
      enumerable: true,
      get: function() {
        return _GlobalStyles.default;
      }
    });
    Object.defineProperty(exports2, "StyledEngineProvider", {
      enumerable: true,
      get: function() {
        return _StyledEngineProvider.default;
      }
    });
    Object.defineProperty(exports2, "ThemeContext", {
      enumerable: true,
      get: function() {
        return _react.ThemeContext;
      }
    });
    Object.defineProperty(exports2, "css", {
      enumerable: true,
      get: function() {
        return _react.css;
      }
    });
    exports2.default = styled;
    exports2.internal_mutateStyles = internal_mutateStyles;
    exports2.internal_serializeStyles = internal_serializeStyles;
    Object.defineProperty(exports2, "keyframes", {
      enumerable: true,
      get: function() {
        return _react.keyframes;
      }
    });
    var _styled = _interopRequireDefault((init_emotion_styled_esm(), __toCommonJS(emotion_styled_esm_exports)));
    var _serialize = (init_emotion_serialize_esm(), __toCommonJS(emotion_serialize_esm_exports));
    var _react = (init_emotion_react_esm(), __toCommonJS(emotion_react_esm_exports));
    var _StyledEngineProvider = _interopRequireDefault(require_StyledEngineProvider4());
    var _GlobalStyles = _interopRequireDefault(require_GlobalStyles8());
    function styled(tag, options) {
      const stylesFactory = (0, _styled.default)(tag, options);
      if (define_process_env_default.NODE_ENV !== "production") {
        return (...styles) => {
          const component = typeof tag === "string" ? `"${tag}"` : "component";
          if (styles.length === 0) {
            console.error([`MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join("\n"));
          } else if (styles.some((style) => style === void 0)) {
            console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
          }
          return stylesFactory(...styles);
        };
      }
      return stylesFactory;
    }
    function internal_mutateStyles(tag, processor) {
      if (Array.isArray(tag.__emotion_styles)) {
        tag.__emotion_styles = processor(tag.__emotion_styles);
      }
    }
    var wrapper = [];
    function internal_serializeStyles(styles) {
      wrapper[0] = styles;
      return (0, _serialize.serializeStyles)(wrapper);
    }
  }
});

// node_modules/@mui/system/node_modules/@mui/utils/deepmerge/deepmerge.js
var require_deepmerge3 = __commonJS({
  "node_modules/@mui/system/node_modules/@mui/utils/deepmerge/deepmerge.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = deepmerge;
    exports2.isPlainObject = isPlainObject;
    var React7 = _interopRequireWildcard(require_react());
    var _reactIs = require_react_is3();
    function isPlainObject(item) {
      if (typeof item !== "object" || item === null) {
        return false;
      }
      const prototype = Object.getPrototypeOf(item);
      return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in item) && !(Symbol.iterator in item);
    }
    function deepClone(source) {
      if (/* @__PURE__ */ React7.isValidElement(source) || (0, _reactIs.isValidElementType)(source) || !isPlainObject(source)) {
        return source;
      }
      const output = {};
      Object.keys(source).forEach((key) => {
        output[key] = deepClone(source[key]);
      });
      return output;
    }
    function deepmerge(target, source, options = {
      clone: true
    }) {
      const output = options.clone ? {
        ...target
      } : target;
      if (isPlainObject(target) && isPlainObject(source)) {
        Object.keys(source).forEach((key) => {
          if (/* @__PURE__ */ React7.isValidElement(source[key]) || (0, _reactIs.isValidElementType)(source[key])) {
            output[key] = source[key];
          } else if (isPlainObject(source[key]) && // Avoid prototype pollution
          Object.prototype.hasOwnProperty.call(target, key) && isPlainObject(target[key])) {
            output[key] = deepmerge(target[key], source[key], options);
          } else if (options.clone) {
            output[key] = isPlainObject(source[key]) ? deepClone(source[key]) : source[key];
          } else {
            output[key] = source[key];
          }
        });
      }
      return output;
    }
  }
});

// node_modules/@mui/system/node_modules/@mui/utils/deepmerge/index.js
var require_deepmerge4 = __commonJS({
  "node_modules/@mui/system/node_modules/@mui/utils/deepmerge/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _deepmerge.default;
      }
    });
    var _deepmerge = _interopRequireWildcard(require_deepmerge3());
    Object.keys(_deepmerge).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _deepmerge[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _deepmerge[key];
        }
      });
    });
  }
});

// node_modules/@mui/system/node_modules/@mui/utils/formatMuiErrorMessage/formatMuiErrorMessage.js
var require_formatMuiErrorMessage3 = __commonJS({
  "node_modules/@mui/system/node_modules/@mui/utils/formatMuiErrorMessage/formatMuiErrorMessage.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = formatMuiErrorMessage;
    function formatMuiErrorMessage(code, ...args) {
      const url = new URL(`https://mui.com/production-error/?code=${code}`);
      args.forEach((arg) => url.searchParams.append("args[]", arg));
      return `Minified MUI error #${code}; visit ${url} for the full message.`;
    }
  }
});

// node_modules/@mui/system/node_modules/@mui/utils/formatMuiErrorMessage/index.js
var require_formatMuiErrorMessage4 = __commonJS({
  "node_modules/@mui/system/node_modules/@mui/utils/formatMuiErrorMessage/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _formatMuiErrorMessage.default;
      }
    });
    var _formatMuiErrorMessage = _interopRequireDefault(require_formatMuiErrorMessage3());
  }
});

// node_modules/@mui/system/node_modules/@mui/utils/capitalize/capitalize.js
var require_capitalize4 = __commonJS({
  "node_modules/@mui/system/node_modules/@mui/utils/capitalize/capitalize.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = capitalize;
    var _formatMuiErrorMessage = _interopRequireDefault(require_formatMuiErrorMessage4());
    function capitalize(string) {
      if (typeof string !== "string") {
        throw new Error(define_process_env_default.NODE_ENV !== "production" ? "MUI: `capitalize(string)` expects a string argument." : (0, _formatMuiErrorMessage.default)(7));
      }
      return string.charAt(0).toUpperCase() + string.slice(1);
    }
  }
});

// node_modules/@mui/system/node_modules/@mui/utils/capitalize/index.js
var require_capitalize5 = __commonJS({
  "node_modules/@mui/system/node_modules/@mui/utils/capitalize/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _capitalize.default;
      }
    });
    var _capitalize = _interopRequireDefault(require_capitalize4());
  }
});

// node_modules/@mui/system/node_modules/@mui/utils/getDisplayName/getDisplayName.js
var require_getDisplayName3 = __commonJS({
  "node_modules/@mui/system/node_modules/@mui/utils/getDisplayName/getDisplayName.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getDisplayName;
    var _reactIs = require_react_is3();
    function getFunctionComponentName(Component, fallback = "") {
      return Component.displayName || Component.name || fallback;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
      const functionName = getFunctionComponentName(innerType);
      return outerType.displayName || (functionName !== "" ? `${wrapperName}(${functionName})` : wrapperName);
    }
    function getDisplayName(Component) {
      if (Component == null) {
        return void 0;
      }
      if (typeof Component === "string") {
        return Component;
      }
      if (typeof Component === "function") {
        return getFunctionComponentName(Component, "Component");
      }
      if (typeof Component === "object") {
        switch (Component.$$typeof) {
          case _reactIs.ForwardRef:
            return getWrappedName(Component, Component.render, "ForwardRef");
          case _reactIs.Memo:
            return getWrappedName(Component, Component.type, "memo");
          default:
            return void 0;
        }
      }
      return void 0;
    }
  }
});

// node_modules/@mui/system/node_modules/@mui/utils/getDisplayName/index.js
var require_getDisplayName4 = __commonJS({
  "node_modules/@mui/system/node_modules/@mui/utils/getDisplayName/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _getDisplayName.default;
      }
    });
    var _getDisplayName = _interopRequireDefault(require_getDisplayName3());
  }
});

// node_modules/@mui/system/createBreakpoints/createBreakpoints.js
var require_createBreakpoints3 = __commonJS({
  "node_modules/@mui/system/createBreakpoints/createBreakpoints.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.breakpointKeys = void 0;
    exports2.default = createBreakpoints;
    var breakpointKeys = exports2.breakpointKeys = ["xs", "sm", "md", "lg", "xl"];
    var sortBreakpointsValues = (values) => {
      const breakpointsAsArray = Object.keys(values).map((key) => ({
        key,
        val: values[key]
      })) || [];
      breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
      return breakpointsAsArray.reduce((acc, obj) => {
        return {
          ...acc,
          [obj.key]: obj.val
        };
      }, {});
    };
    function createBreakpoints(breakpoints) {
      const {
        // The breakpoint **start** at this value.
        // For instance with the first breakpoint xs: [xs, sm).
        values = {
          xs: 0,
          // phone
          sm: 600,
          // tablet
          md: 900,
          // small laptop
          lg: 1200,
          // desktop
          xl: 1536
          // large screen
        },
        unit = "px",
        step = 5,
        ...other
      } = breakpoints;
      const sortedValues = sortBreakpointsValues(values);
      const keys = Object.keys(sortedValues);
      function up(key) {
        const value = typeof values[key] === "number" ? values[key] : key;
        return `@media (min-width:${value}${unit})`;
      }
      function down(key) {
        const value = typeof values[key] === "number" ? values[key] : key;
        return `@media (max-width:${value - step / 100}${unit})`;
      }
      function between(start, end) {
        const endIndex = keys.indexOf(end);
        return `@media (min-width:${typeof values[start] === "number" ? values[start] : start}${unit}) and (max-width:${(endIndex !== -1 && typeof values[keys[endIndex]] === "number" ? values[keys[endIndex]] : end) - step / 100}${unit})`;
      }
      function only(key) {
        if (keys.indexOf(key) + 1 < keys.length) {
          return between(key, keys[keys.indexOf(key) + 1]);
        }
        return up(key);
      }
      function not(key) {
        const keyIndex = keys.indexOf(key);
        if (keyIndex === 0) {
          return up(keys[1]);
        }
        if (keyIndex === keys.length - 1) {
          return down(keys[keyIndex]);
        }
        return between(key, keys[keys.indexOf(key) + 1]).replace("@media", "@media not all and");
      }
      return {
        keys,
        values: sortedValues,
        up,
        down,
        between,
        only,
        not,
        unit,
        ...other
      };
    }
  }
});

// node_modules/@mui/system/cssContainerQueries/cssContainerQueries.js
var require_cssContainerQueries3 = __commonJS({
  "node_modules/@mui/system/cssContainerQueries/cssContainerQueries.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = cssContainerQueries;
    exports2.getContainerQuery = getContainerQuery;
    exports2.isCqShorthand = isCqShorthand;
    exports2.sortContainerQueries = sortContainerQueries;
    var _formatMuiErrorMessage = _interopRequireDefault(require_formatMuiErrorMessage4());
    function sortContainerQueries(theme2, css2) {
      if (!theme2.containerQueries) {
        return css2;
      }
      const sorted = Object.keys(css2).filter((key) => key.startsWith("@container")).sort((a, b) => {
        const regex = /min-width:\s*([0-9.]+)/;
        return +(a.match(regex)?.[1] || 0) - +(b.match(regex)?.[1] || 0);
      });
      if (!sorted.length) {
        return css2;
      }
      return sorted.reduce((acc, key) => {
        const value = css2[key];
        delete acc[key];
        acc[key] = value;
        return acc;
      }, {
        ...css2
      });
    }
    function isCqShorthand(breakpointKeys, value) {
      return value === "@" || value.startsWith("@") && (breakpointKeys.some((key) => value.startsWith(`@${key}`)) || !!value.match(/^@\d/));
    }
    function getContainerQuery(theme2, shorthand) {
      const matches = shorthand.match(/^@([^/]+)?\/?(.+)?$/);
      if (!matches) {
        if (define_process_env_default.NODE_ENV !== "production") {
          throw new Error(define_process_env_default.NODE_ENV !== "production" ? `MUI: The provided shorthand ${`(${shorthand})`} is invalid. The format should be \`@<breakpoint | number>\` or \`@<breakpoint | number>/<container>\`.
For example, \`@sm\` or \`@600\` or \`@40rem/sidebar\`.` : (0, _formatMuiErrorMessage.default)(18, `(${shorthand})`));
        }
        return null;
      }
      const [, containerQuery, containerName] = matches;
      const value = Number.isNaN(+containerQuery) ? containerQuery || 0 : +containerQuery;
      return theme2.containerQueries(containerName).up(value);
    }
    function cssContainerQueries(themeInput) {
      const toContainerQuery = (mediaQuery, name) => mediaQuery.replace("@media", name ? `@container ${name}` : "@container");
      function attachCq(node3, name) {
        node3.up = (...args) => toContainerQuery(themeInput.breakpoints.up(...args), name);
        node3.down = (...args) => toContainerQuery(themeInput.breakpoints.down(...args), name);
        node3.between = (...args) => toContainerQuery(themeInput.breakpoints.between(...args), name);
        node3.only = (...args) => toContainerQuery(themeInput.breakpoints.only(...args), name);
        node3.not = (...args) => {
          const result = toContainerQuery(themeInput.breakpoints.not(...args), name);
          if (result.includes("not all and")) {
            return result.replace("not all and ", "").replace("min-width:", "width<").replace("max-width:", "width>").replace("and", "or");
          }
          return result;
        };
      }
      const node2 = {};
      const containerQueries = (name) => {
        attachCq(node2, name);
        return node2;
      };
      attachCq(containerQueries);
      return {
        ...themeInput,
        containerQueries
      };
    }
  }
});

// node_modules/@mui/system/cssContainerQueries/index.js
var require_cssContainerQueries4 = __commonJS({
  "node_modules/@mui/system/cssContainerQueries/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _cssContainerQueries.default;
      }
    });
    Object.defineProperty(exports2, "getContainerQuery", {
      enumerable: true,
      get: function() {
        return _cssContainerQueries.getContainerQuery;
      }
    });
    Object.defineProperty(exports2, "isCqShorthand", {
      enumerable: true,
      get: function() {
        return _cssContainerQueries.isCqShorthand;
      }
    });
    Object.defineProperty(exports2, "sortContainerQueries", {
      enumerable: true,
      get: function() {
        return _cssContainerQueries.sortContainerQueries;
      }
    });
    var _cssContainerQueries = _interopRequireWildcard(require_cssContainerQueries3());
  }
});

// node_modules/@mui/system/createTheme/shape.js
var require_shape2 = __commonJS({
  "node_modules/@mui/system/createTheme/shape.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var shape = {
      borderRadius: 4
    };
    var _default = exports2.default = shape;
  }
});

// node_modules/@mui/system/responsivePropType/responsivePropType.js
var require_responsivePropType3 = __commonJS({
  "node_modules/@mui/system/responsivePropType/responsivePropType.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    var responsivePropType = define_process_env_default.NODE_ENV !== "production" ? _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.object, _propTypes.default.array]) : {};
    var _default = exports2.default = responsivePropType;
  }
});

// node_modules/@mui/system/responsivePropType/index.js
var require_responsivePropType4 = __commonJS({
  "node_modules/@mui/system/responsivePropType/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _responsivePropType.default;
      }
    });
    var _responsivePropType = _interopRequireDefault(require_responsivePropType3());
  }
});

// node_modules/@mui/system/merge/merge.js
var require_merge3 = __commonJS({
  "node_modules/@mui/system/merge/merge.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _deepmerge = _interopRequireDefault(require_deepmerge4());
    function merge2(acc, item) {
      if (!item) {
        return acc;
      }
      return (0, _deepmerge.default)(acc, item, {
        clone: false
        // No need to clone deep, it's way faster.
      });
    }
    var _default = exports2.default = merge2;
  }
});

// node_modules/@mui/system/merge/index.js
var require_merge4 = __commonJS({
  "node_modules/@mui/system/merge/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _merge.default;
      }
    });
    var _merge = _interopRequireDefault(require_merge3());
  }
});

// node_modules/@mui/system/breakpoints/breakpoints.js
var require_breakpoints3 = __commonJS({
  "node_modules/@mui/system/breakpoints/breakpoints.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.computeBreakpointsBase = computeBreakpointsBase;
    exports2.createEmptyBreakpointObject = createEmptyBreakpointObject;
    exports2.default = void 0;
    exports2.handleBreakpoints = handleBreakpoints;
    exports2.mergeBreakpointsInOrder = mergeBreakpointsInOrder;
    exports2.removeUnusedBreakpoints = removeUnusedBreakpoints;
    exports2.resolveBreakpointValues = resolveBreakpointValues;
    exports2.values = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _deepmerge = _interopRequireDefault(require_deepmerge4());
    var _merge = _interopRequireDefault(require_merge4());
    var _cssContainerQueries = require_cssContainerQueries4();
    var values = exports2.values = {
      xs: 0,
      // phone
      sm: 600,
      // tablet
      md: 900,
      // small laptop
      lg: 1200,
      // desktop
      xl: 1536
      // large screen
    };
    var defaultBreakpoints = {
      // Sorted ASC by size. That's important.
      // It can't be configured as it's used statically for propTypes.
      keys: ["xs", "sm", "md", "lg", "xl"],
      up: (key) => `@media (min-width:${values[key]}px)`
    };
    var defaultContainerQueries = {
      containerQueries: (containerName) => ({
        up: (key) => {
          let result = typeof key === "number" ? key : values[key] || key;
          if (typeof result === "number") {
            result = `${result}px`;
          }
          return containerName ? `@container ${containerName} (min-width:${result})` : `@container (min-width:${result})`;
        }
      })
    };
    function handleBreakpoints(props, propValue, styleFromPropValue) {
      const theme2 = props.theme || {};
      if (Array.isArray(propValue)) {
        const themeBreakpoints = theme2.breakpoints || defaultBreakpoints;
        return propValue.reduce((acc, item, index) => {
          acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
          return acc;
        }, {});
      }
      if (typeof propValue === "object") {
        const themeBreakpoints = theme2.breakpoints || defaultBreakpoints;
        return Object.keys(propValue).reduce((acc, breakpoint) => {
          if ((0, _cssContainerQueries.isCqShorthand)(themeBreakpoints.keys, breakpoint)) {
            const containerKey = (0, _cssContainerQueries.getContainerQuery)(theme2.containerQueries ? theme2 : defaultContainerQueries, breakpoint);
            if (containerKey) {
              acc[containerKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
            }
          } else if (Object.keys(themeBreakpoints.values || values).includes(breakpoint)) {
            const mediaKey = themeBreakpoints.up(breakpoint);
            acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
          } else {
            const cssKey = breakpoint;
            acc[cssKey] = propValue[cssKey];
          }
          return acc;
        }, {});
      }
      const output = styleFromPropValue(propValue);
      return output;
    }
    function breakpoints(styleFunction) {
      const newStyleFunction = (props) => {
        const theme2 = props.theme || {};
        const base = styleFunction(props);
        const themeBreakpoints = theme2.breakpoints || defaultBreakpoints;
        const extended = themeBreakpoints.keys.reduce((acc, key) => {
          if (props[key]) {
            acc = acc || {};
            acc[themeBreakpoints.up(key)] = styleFunction({
              theme: theme2,
              ...props[key]
            });
          }
          return acc;
        }, null);
        return (0, _merge.default)(base, extended);
      };
      newStyleFunction.propTypes = define_process_env_default.NODE_ENV !== "production" ? {
        ...styleFunction.propTypes,
        xs: _propTypes.default.object,
        sm: _propTypes.default.object,
        md: _propTypes.default.object,
        lg: _propTypes.default.object,
        xl: _propTypes.default.object
      } : {};
      newStyleFunction.filterProps = ["xs", "sm", "md", "lg", "xl", ...styleFunction.filterProps];
      return newStyleFunction;
    }
    function createEmptyBreakpointObject(breakpointsInput = {}) {
      const breakpointsInOrder = breakpointsInput.keys?.reduce((acc, key) => {
        const breakpointStyleKey = breakpointsInput.up(key);
        acc[breakpointStyleKey] = {};
        return acc;
      }, {});
      return breakpointsInOrder || {};
    }
    function removeUnusedBreakpoints(breakpointKeys, style) {
      return breakpointKeys.reduce((acc, key) => {
        const breakpointOutput = acc[key];
        const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
        if (isBreakpointUnused) {
          delete acc[key];
        }
        return acc;
      }, style);
    }
    function mergeBreakpointsInOrder(breakpointsInput, ...styles) {
      const emptyBreakpoints = createEmptyBreakpointObject(breakpointsInput);
      const mergedOutput = [emptyBreakpoints, ...styles].reduce((prev2, next2) => (0, _deepmerge.default)(prev2, next2), {});
      return removeUnusedBreakpoints(Object.keys(emptyBreakpoints), mergedOutput);
    }
    function computeBreakpointsBase(breakpointValues, themeBreakpoints) {
      if (typeof breakpointValues !== "object") {
        return {};
      }
      const base = {};
      const breakpointsKeys = Object.keys(themeBreakpoints);
      if (Array.isArray(breakpointValues)) {
        breakpointsKeys.forEach((breakpoint, i) => {
          if (i < breakpointValues.length) {
            base[breakpoint] = true;
          }
        });
      } else {
        breakpointsKeys.forEach((breakpoint) => {
          if (breakpointValues[breakpoint] != null) {
            base[breakpoint] = true;
          }
        });
      }
      return base;
    }
    function resolveBreakpointValues({
      values: breakpointValues,
      breakpoints: themeBreakpoints,
      base: customBase
    }) {
      const base = customBase || computeBreakpointsBase(breakpointValues, themeBreakpoints);
      const keys = Object.keys(base);
      if (keys.length === 0) {
        return breakpointValues;
      }
      let previous;
      return keys.reduce((acc, breakpoint, i) => {
        if (Array.isArray(breakpointValues)) {
          acc[breakpoint] = breakpointValues[i] != null ? breakpointValues[i] : breakpointValues[previous];
          previous = i;
        } else if (typeof breakpointValues === "object") {
          acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous];
          previous = breakpoint;
        } else {
          acc[breakpoint] = breakpointValues;
        }
        return acc;
      }, {});
    }
    var _default = exports2.default = breakpoints;
  }
});

// node_modules/@mui/system/breakpoints/index.js
var require_breakpoints4 = __commonJS({
  "node_modules/@mui/system/breakpoints/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _breakpoints.default;
      }
    });
    var _breakpoints = _interopRequireWildcard(require_breakpoints3());
    Object.keys(_breakpoints).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _breakpoints[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _breakpoints[key];
        }
      });
    });
  }
});

// node_modules/@mui/system/style/style.js
var require_style3 = __commonJS({
  "node_modules/@mui/system/style/style.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getPath = getPath;
    exports2.getStyleValue = getStyleValue;
    var _capitalize = _interopRequireDefault(require_capitalize5());
    var _responsivePropType = _interopRequireDefault(require_responsivePropType4());
    var _breakpoints = require_breakpoints4();
    function getPath(obj, path, checkVars = true) {
      if (!path || typeof path !== "string") {
        return null;
      }
      if (obj && obj.vars && checkVars) {
        const val = `vars.${path}`.split(".").reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
        if (val != null) {
          return val;
        }
      }
      return path.split(".").reduce((acc, item) => {
        if (acc && acc[item] != null) {
          return acc[item];
        }
        return null;
      }, obj);
    }
    function getStyleValue(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
      let value;
      if (typeof themeMapping === "function") {
        value = themeMapping(propValueFinal);
      } else if (Array.isArray(themeMapping)) {
        value = themeMapping[propValueFinal] || userValue;
      } else {
        value = getPath(themeMapping, propValueFinal) || userValue;
      }
      if (transform) {
        value = transform(value, userValue, themeMapping);
      }
      return value;
    }
    function style(options) {
      const {
        prop,
        cssProperty = options.prop,
        themeKey,
        transform
      } = options;
      const fn = (props) => {
        if (props[prop] == null) {
          return null;
        }
        const propValue = props[prop];
        const theme2 = props.theme;
        const themeMapping = getPath(theme2, themeKey) || {};
        const styleFromPropValue = (propValueFinal) => {
          let value = getStyleValue(themeMapping, transform, propValueFinal);
          if (propValueFinal === value && typeof propValueFinal === "string") {
            value = getStyleValue(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : (0, _capitalize.default)(propValueFinal)}`, propValueFinal);
          }
          if (cssProperty === false) {
            return value;
          }
          return {
            [cssProperty]: value
          };
        };
        return (0, _breakpoints.handleBreakpoints)(props, propValue, styleFromPropValue);
      };
      fn.propTypes = define_process_env_default.NODE_ENV !== "production" ? {
        [prop]: _responsivePropType.default
      } : {};
      fn.filterProps = [prop];
      return fn;
    }
    var _default = exports2.default = style;
  }
});

// node_modules/@mui/system/style/index.js
var require_style4 = __commonJS({
  "node_modules/@mui/system/style/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _style.default;
      }
    });
    var _style = _interopRequireWildcard(require_style3());
    Object.keys(_style).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _style[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _style[key];
        }
      });
    });
  }
});

// node_modules/@mui/system/memoize/memoize.js
var require_memoize3 = __commonJS({
  "node_modules/@mui/system/memoize/memoize.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = memoize2;
    function memoize2(fn) {
      const cache = {};
      return (arg) => {
        if (cache[arg] === void 0) {
          cache[arg] = fn(arg);
        }
        return cache[arg];
      };
    }
  }
});

// node_modules/@mui/system/memoize/index.js
var require_memoize4 = __commonJS({
  "node_modules/@mui/system/memoize/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _memoize.default;
      }
    });
    var _memoize = _interopRequireDefault(require_memoize3());
  }
});

// node_modules/@mui/system/spacing/spacing.js
var require_spacing3 = __commonJS({
  "node_modules/@mui/system/spacing/spacing.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.createUnarySpacing = createUnarySpacing;
    exports2.createUnaryUnit = createUnaryUnit;
    exports2.default = void 0;
    exports2.getStyleFromPropValue = getStyleFromPropValue;
    exports2.getValue = getValue;
    exports2.margin = margin;
    exports2.marginKeys = void 0;
    exports2.padding = padding;
    exports2.paddingKeys = void 0;
    var _responsivePropType = _interopRequireDefault(require_responsivePropType4());
    var _breakpoints = require_breakpoints4();
    var _style = require_style4();
    var _merge = _interopRequireDefault(require_merge4());
    var _memoize = _interopRequireDefault(require_memoize4());
    var properties = {
      m: "margin",
      p: "padding"
    };
    var directions = {
      t: "Top",
      r: "Right",
      b: "Bottom",
      l: "Left",
      x: ["Left", "Right"],
      y: ["Top", "Bottom"]
    };
    var aliases = {
      marginX: "mx",
      marginY: "my",
      paddingX: "px",
      paddingY: "py"
    };
    var getCssProperties = (0, _memoize.default)((prop) => {
      if (prop.length > 2) {
        if (aliases[prop]) {
          prop = aliases[prop];
        } else {
          return [prop];
        }
      }
      const [a, b] = prop.split("");
      const property = properties[a];
      const direction = directions[b] || "";
      return Array.isArray(direction) ? direction.map((dir) => property + dir) : [property + direction];
    });
    var marginKeys = exports2.marginKeys = ["m", "mt", "mr", "mb", "ml", "mx", "my", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "marginInline", "marginInlineStart", "marginInlineEnd", "marginBlock", "marginBlockStart", "marginBlockEnd"];
    var paddingKeys = exports2.paddingKeys = ["p", "pt", "pr", "pb", "pl", "px", "py", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY", "paddingInline", "paddingInlineStart", "paddingInlineEnd", "paddingBlock", "paddingBlockStart", "paddingBlockEnd"];
    var spacingKeys = [...marginKeys, ...paddingKeys];
    function createUnaryUnit(theme2, themeKey, defaultValue, propName) {
      const themeSpacing = (0, _style.getPath)(theme2, themeKey, true) ?? defaultValue;
      if (typeof themeSpacing === "number" || typeof themeSpacing === "string") {
        return (val) => {
          if (typeof val === "string") {
            return val;
          }
          if (define_process_env_default.NODE_ENV !== "production") {
            if (typeof val !== "number") {
              console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${val}.`);
            }
          }
          if (typeof themeSpacing === "string") {
            if (themeSpacing.startsWith("var(") && val === 0) {
              return 0;
            }
            if (themeSpacing.startsWith("var(") && val === 1) {
              return themeSpacing;
            }
            return `calc(${val} * ${themeSpacing})`;
          }
          return themeSpacing * val;
        };
      }
      if (Array.isArray(themeSpacing)) {
        return (val) => {
          if (typeof val === "string") {
            return val;
          }
          const abs2 = Math.abs(val);
          if (define_process_env_default.NODE_ENV !== "production") {
            if (!Number.isInteger(abs2)) {
              console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join("\n"));
            } else if (abs2 > themeSpacing.length - 1) {
              console.error([`MUI: The value provided (${abs2}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs2} > ${themeSpacing.length - 1}, you need to add the missing values.`].join("\n"));
            }
          }
          const transformed = themeSpacing[abs2];
          if (val >= 0) {
            return transformed;
          }
          if (typeof transformed === "number") {
            return -transformed;
          }
          if (typeof transformed === "string" && transformed.startsWith("var(")) {
            return `calc(-1 * ${transformed})`;
          }
          return `-${transformed}`;
        };
      }
      if (typeof themeSpacing === "function") {
        return themeSpacing;
      }
      if (define_process_env_default.NODE_ENV !== "production") {
        console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, "It should be a number, an array or a function."].join("\n"));
      }
      return () => void 0;
    }
    function createUnarySpacing(theme2) {
      return createUnaryUnit(theme2, "spacing", 8, "spacing");
    }
    function getValue(transformer, propValue) {
      if (typeof propValue === "string" || propValue == null) {
        return propValue;
      }
      return transformer(propValue);
    }
    function getStyleFromPropValue(cssProperties, transformer) {
      return (propValue) => cssProperties.reduce((acc, cssProperty) => {
        acc[cssProperty] = getValue(transformer, propValue);
        return acc;
      }, {});
    }
    function resolveCssProperty(props, keys, prop, transformer) {
      if (!keys.includes(prop)) {
        return null;
      }
      const cssProperties = getCssProperties(prop);
      const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
      const propValue = props[prop];
      return (0, _breakpoints.handleBreakpoints)(props, propValue, styleFromPropValue);
    }
    function style(props, keys) {
      const transformer = createUnarySpacing(props.theme);
      return Object.keys(props).map((prop) => resolveCssProperty(props, keys, prop, transformer)).reduce(_merge.default, {});
    }
    function margin(props) {
      return style(props, marginKeys);
    }
    margin.propTypes = define_process_env_default.NODE_ENV !== "production" ? marginKeys.reduce((obj, key) => {
      obj[key] = _responsivePropType.default;
      return obj;
    }, {}) : {};
    margin.filterProps = marginKeys;
    function padding(props) {
      return style(props, paddingKeys);
    }
    padding.propTypes = define_process_env_default.NODE_ENV !== "production" ? paddingKeys.reduce((obj, key) => {
      obj[key] = _responsivePropType.default;
      return obj;
    }, {}) : {};
    padding.filterProps = paddingKeys;
    function spacing(props) {
      return style(props, spacingKeys);
    }
    spacing.propTypes = define_process_env_default.NODE_ENV !== "production" ? spacingKeys.reduce((obj, key) => {
      obj[key] = _responsivePropType.default;
      return obj;
    }, {}) : {};
    spacing.filterProps = spacingKeys;
    var _default = exports2.default = spacing;
  }
});

// node_modules/@mui/system/spacing/index.js
var require_spacing4 = __commonJS({
  "node_modules/@mui/system/spacing/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _spacing.default;
      }
    });
    var _spacing = _interopRequireWildcard(require_spacing3());
    Object.keys(_spacing).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _spacing[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _spacing[key];
        }
      });
    });
  }
});

// node_modules/@mui/system/createTheme/createSpacing.js
var require_createSpacing2 = __commonJS({
  "node_modules/@mui/system/createTheme/createSpacing.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = createSpacing;
    var _spacing = require_spacing4();
    function createSpacing(spacingInput = 8, transform = (0, _spacing.createUnarySpacing)({
      spacing: spacingInput
    })) {
      if (spacingInput.mui) {
        return spacingInput;
      }
      const spacing = (...argsInput) => {
        if (define_process_env_default.NODE_ENV !== "production") {
          if (!(argsInput.length <= 4)) {
            console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
          }
        }
        const args = argsInput.length === 0 ? [1] : argsInput;
        return args.map((argument) => {
          const output = transform(argument);
          return typeof output === "number" ? `${output}px` : output;
        }).join(" ");
      };
      spacing.mui = true;
      return spacing;
    }
  }
});

// node_modules/@mui/system/compose/compose.js
var require_compose3 = __commonJS({
  "node_modules/@mui/system/compose/compose.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _merge = _interopRequireDefault(require_merge4());
    function compose(...styles) {
      const handlers = styles.reduce((acc, style) => {
        style.filterProps.forEach((prop) => {
          acc[prop] = style;
        });
        return acc;
      }, {});
      const fn = (props) => {
        return Object.keys(props).reduce((acc, prop) => {
          if (handlers[prop]) {
            return (0, _merge.default)(acc, handlers[prop](props));
          }
          return acc;
        }, {});
      };
      fn.propTypes = define_process_env_default.NODE_ENV !== "production" ? styles.reduce((acc, style) => Object.assign(acc, style.propTypes), {}) : {};
      fn.filterProps = styles.reduce((acc, style) => acc.concat(style.filterProps), []);
      return fn;
    }
    var _default = exports2.default = compose;
  }
});

// node_modules/@mui/system/compose/index.js
var require_compose4 = __commonJS({
  "node_modules/@mui/system/compose/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _compose.default;
      }
    });
    var _compose = _interopRequireDefault(require_compose3());
  }
});

// node_modules/@mui/system/borders/borders.js
var require_borders3 = __commonJS({
  "node_modules/@mui/system/borders/borders.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.borderTopColor = exports2.borderTop = exports2.borderRightColor = exports2.borderRight = exports2.borderRadius = exports2.borderLeftColor = exports2.borderLeft = exports2.borderColor = exports2.borderBottomColor = exports2.borderBottom = exports2.border = void 0;
    exports2.borderTransform = borderTransform;
    exports2.outlineColor = exports2.outline = exports2.default = void 0;
    var _responsivePropType = _interopRequireDefault(require_responsivePropType4());
    var _style = _interopRequireDefault(require_style4());
    var _compose = _interopRequireDefault(require_compose4());
    var _spacing = require_spacing4();
    var _breakpoints = require_breakpoints4();
    function borderTransform(value) {
      if (typeof value !== "number") {
        return value;
      }
      return `${value}px solid`;
    }
    function createBorderStyle(prop, transform) {
      return (0, _style.default)({
        prop,
        themeKey: "borders",
        transform
      });
    }
    var border = exports2.border = createBorderStyle("border", borderTransform);
    var borderTop = exports2.borderTop = createBorderStyle("borderTop", borderTransform);
    var borderRight = exports2.borderRight = createBorderStyle("borderRight", borderTransform);
    var borderBottom = exports2.borderBottom = createBorderStyle("borderBottom", borderTransform);
    var borderLeft = exports2.borderLeft = createBorderStyle("borderLeft", borderTransform);
    var borderColor = exports2.borderColor = createBorderStyle("borderColor");
    var borderTopColor = exports2.borderTopColor = createBorderStyle("borderTopColor");
    var borderRightColor = exports2.borderRightColor = createBorderStyle("borderRightColor");
    var borderBottomColor = exports2.borderBottomColor = createBorderStyle("borderBottomColor");
    var borderLeftColor = exports2.borderLeftColor = createBorderStyle("borderLeftColor");
    var outline = exports2.outline = createBorderStyle("outline", borderTransform);
    var outlineColor = exports2.outlineColor = createBorderStyle("outlineColor");
    var borderRadius = (props) => {
      if (props.borderRadius !== void 0 && props.borderRadius !== null) {
        const transformer = (0, _spacing.createUnaryUnit)(props.theme, "shape.borderRadius", 4, "borderRadius");
        const styleFromPropValue = (propValue) => ({
          borderRadius: (0, _spacing.getValue)(transformer, propValue)
        });
        return (0, _breakpoints.handleBreakpoints)(props, props.borderRadius, styleFromPropValue);
      }
      return null;
    };
    exports2.borderRadius = borderRadius;
    borderRadius.propTypes = define_process_env_default.NODE_ENV !== "production" ? {
      borderRadius: _responsivePropType.default
    } : {};
    borderRadius.filterProps = ["borderRadius"];
    var borders = (0, _compose.default)(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius, outline, outlineColor);
    var _default = exports2.default = borders;
  }
});

// node_modules/@mui/system/borders/index.js
var require_borders4 = __commonJS({
  "node_modules/@mui/system/borders/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _borders.default;
      }
    });
    var _borders = _interopRequireWildcard(require_borders3());
    Object.keys(_borders).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _borders[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _borders[key];
        }
      });
    });
  }
});

// node_modules/@mui/system/cssGrid/cssGrid.js
var require_cssGrid3 = __commonJS({
  "node_modules/@mui/system/cssGrid/cssGrid.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.rowGap = exports2.gridTemplateRows = exports2.gridTemplateColumns = exports2.gridTemplateAreas = exports2.gridRow = exports2.gridColumn = exports2.gridAutoRows = exports2.gridAutoFlow = exports2.gridAutoColumns = exports2.gridArea = exports2.gap = exports2.default = exports2.columnGap = void 0;
    var _style = _interopRequireDefault(require_style4());
    var _compose = _interopRequireDefault(require_compose4());
    var _spacing = require_spacing4();
    var _breakpoints = require_breakpoints4();
    var _responsivePropType = _interopRequireDefault(require_responsivePropType4());
    var gap = (props) => {
      if (props.gap !== void 0 && props.gap !== null) {
        const transformer = (0, _spacing.createUnaryUnit)(props.theme, "spacing", 8, "gap");
        const styleFromPropValue = (propValue) => ({
          gap: (0, _spacing.getValue)(transformer, propValue)
        });
        return (0, _breakpoints.handleBreakpoints)(props, props.gap, styleFromPropValue);
      }
      return null;
    };
    exports2.gap = gap;
    gap.propTypes = define_process_env_default.NODE_ENV !== "production" ? {
      gap: _responsivePropType.default
    } : {};
    gap.filterProps = ["gap"];
    var columnGap = (props) => {
      if (props.columnGap !== void 0 && props.columnGap !== null) {
        const transformer = (0, _spacing.createUnaryUnit)(props.theme, "spacing", 8, "columnGap");
        const styleFromPropValue = (propValue) => ({
          columnGap: (0, _spacing.getValue)(transformer, propValue)
        });
        return (0, _breakpoints.handleBreakpoints)(props, props.columnGap, styleFromPropValue);
      }
      return null;
    };
    exports2.columnGap = columnGap;
    columnGap.propTypes = define_process_env_default.NODE_ENV !== "production" ? {
      columnGap: _responsivePropType.default
    } : {};
    columnGap.filterProps = ["columnGap"];
    var rowGap = (props) => {
      if (props.rowGap !== void 0 && props.rowGap !== null) {
        const transformer = (0, _spacing.createUnaryUnit)(props.theme, "spacing", 8, "rowGap");
        const styleFromPropValue = (propValue) => ({
          rowGap: (0, _spacing.getValue)(transformer, propValue)
        });
        return (0, _breakpoints.handleBreakpoints)(props, props.rowGap, styleFromPropValue);
      }
      return null;
    };
    exports2.rowGap = rowGap;
    rowGap.propTypes = define_process_env_default.NODE_ENV !== "production" ? {
      rowGap: _responsivePropType.default
    } : {};
    rowGap.filterProps = ["rowGap"];
    var gridColumn = exports2.gridColumn = (0, _style.default)({
      prop: "gridColumn"
    });
    var gridRow = exports2.gridRow = (0, _style.default)({
      prop: "gridRow"
    });
    var gridAutoFlow = exports2.gridAutoFlow = (0, _style.default)({
      prop: "gridAutoFlow"
    });
    var gridAutoColumns = exports2.gridAutoColumns = (0, _style.default)({
      prop: "gridAutoColumns"
    });
    var gridAutoRows = exports2.gridAutoRows = (0, _style.default)({
      prop: "gridAutoRows"
    });
    var gridTemplateColumns = exports2.gridTemplateColumns = (0, _style.default)({
      prop: "gridTemplateColumns"
    });
    var gridTemplateRows = exports2.gridTemplateRows = (0, _style.default)({
      prop: "gridTemplateRows"
    });
    var gridTemplateAreas = exports2.gridTemplateAreas = (0, _style.default)({
      prop: "gridTemplateAreas"
    });
    var gridArea = exports2.gridArea = (0, _style.default)({
      prop: "gridArea"
    });
    var grid = (0, _compose.default)(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
    var _default = exports2.default = grid;
  }
});

// node_modules/@mui/system/cssGrid/index.js
var require_cssGrid4 = __commonJS({
  "node_modules/@mui/system/cssGrid/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _cssGrid.default;
      }
    });
    var _cssGrid = _interopRequireWildcard(require_cssGrid3());
    Object.keys(_cssGrid).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _cssGrid[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _cssGrid[key];
        }
      });
    });
  }
});

// node_modules/@mui/system/palette/palette.js
var require_palette3 = __commonJS({
  "node_modules/@mui/system/palette/palette.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = exports2.color = exports2.bgcolor = exports2.backgroundColor = void 0;
    exports2.paletteTransform = paletteTransform;
    var _style = _interopRequireDefault(require_style4());
    var _compose = _interopRequireDefault(require_compose4());
    function paletteTransform(value, userValue) {
      if (userValue === "grey") {
        return userValue;
      }
      return value;
    }
    var color = exports2.color = (0, _style.default)({
      prop: "color",
      themeKey: "palette",
      transform: paletteTransform
    });
    var bgcolor = exports2.bgcolor = (0, _style.default)({
      prop: "bgcolor",
      cssProperty: "backgroundColor",
      themeKey: "palette",
      transform: paletteTransform
    });
    var backgroundColor = exports2.backgroundColor = (0, _style.default)({
      prop: "backgroundColor",
      themeKey: "palette",
      transform: paletteTransform
    });
    var palette = (0, _compose.default)(color, bgcolor, backgroundColor);
    var _default = exports2.default = palette;
  }
});

// node_modules/@mui/system/palette/index.js
var require_palette4 = __commonJS({
  "node_modules/@mui/system/palette/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _palette.default;
      }
    });
    var _palette = _interopRequireWildcard(require_palette3());
    Object.keys(_palette).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _palette[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _palette[key];
        }
      });
    });
  }
});

// node_modules/@mui/system/sizing/sizing.js
var require_sizing3 = __commonJS({
  "node_modules/@mui/system/sizing/sizing.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.sizeWidth = exports2.sizeHeight = exports2.minWidth = exports2.minHeight = exports2.maxWidth = exports2.maxHeight = exports2.height = exports2.default = exports2.boxSizing = void 0;
    exports2.sizingTransform = sizingTransform;
    exports2.width = void 0;
    var _style = _interopRequireDefault(require_style4());
    var _compose = _interopRequireDefault(require_compose4());
    var _breakpoints = require_breakpoints4();
    function sizingTransform(value) {
      return value <= 1 && value !== 0 ? `${value * 100}%` : value;
    }
    var width = exports2.width = (0, _style.default)({
      prop: "width",
      transform: sizingTransform
    });
    var maxWidth = (props) => {
      if (props.maxWidth !== void 0 && props.maxWidth !== null) {
        const styleFromPropValue = (propValue) => {
          const breakpoint = props.theme?.breakpoints?.values?.[propValue] || _breakpoints.values[propValue];
          if (!breakpoint) {
            return {
              maxWidth: sizingTransform(propValue)
            };
          }
          if (props.theme?.breakpoints?.unit !== "px") {
            return {
              maxWidth: `${breakpoint}${props.theme.breakpoints.unit}`
            };
          }
          return {
            maxWidth: breakpoint
          };
        };
        return (0, _breakpoints.handleBreakpoints)(props, props.maxWidth, styleFromPropValue);
      }
      return null;
    };
    exports2.maxWidth = maxWidth;
    maxWidth.filterProps = ["maxWidth"];
    var minWidth = exports2.minWidth = (0, _style.default)({
      prop: "minWidth",
      transform: sizingTransform
    });
    var height = exports2.height = (0, _style.default)({
      prop: "height",
      transform: sizingTransform
    });
    var maxHeight = exports2.maxHeight = (0, _style.default)({
      prop: "maxHeight",
      transform: sizingTransform
    });
    var minHeight = exports2.minHeight = (0, _style.default)({
      prop: "minHeight",
      transform: sizingTransform
    });
    var sizeWidth = exports2.sizeWidth = (0, _style.default)({
      prop: "size",
      cssProperty: "width",
      transform: sizingTransform
    });
    var sizeHeight = exports2.sizeHeight = (0, _style.default)({
      prop: "size",
      cssProperty: "height",
      transform: sizingTransform
    });
    var boxSizing = exports2.boxSizing = (0, _style.default)({
      prop: "boxSizing"
    });
    var sizing = (0, _compose.default)(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
    var _default = exports2.default = sizing;
  }
});

// node_modules/@mui/system/sizing/index.js
var require_sizing4 = __commonJS({
  "node_modules/@mui/system/sizing/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _sizing.default;
      }
    });
    var _sizing = _interopRequireWildcard(require_sizing3());
    Object.keys(_sizing).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _sizing[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _sizing[key];
        }
      });
    });
  }
});

// node_modules/@mui/system/styleFunctionSx/defaultSxConfig.js
var require_defaultSxConfig2 = __commonJS({
  "node_modules/@mui/system/styleFunctionSx/defaultSxConfig.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _spacing = require_spacing4();
    var _borders = require_borders4();
    var _cssGrid = require_cssGrid4();
    var _palette = require_palette4();
    var _sizing = require_sizing4();
    var defaultSxConfig = {
      // borders
      border: {
        themeKey: "borders",
        transform: _borders.borderTransform
      },
      borderTop: {
        themeKey: "borders",
        transform: _borders.borderTransform
      },
      borderRight: {
        themeKey: "borders",
        transform: _borders.borderTransform
      },
      borderBottom: {
        themeKey: "borders",
        transform: _borders.borderTransform
      },
      borderLeft: {
        themeKey: "borders",
        transform: _borders.borderTransform
      },
      borderColor: {
        themeKey: "palette"
      },
      borderTopColor: {
        themeKey: "palette"
      },
      borderRightColor: {
        themeKey: "palette"
      },
      borderBottomColor: {
        themeKey: "palette"
      },
      borderLeftColor: {
        themeKey: "palette"
      },
      outline: {
        themeKey: "borders",
        transform: _borders.borderTransform
      },
      outlineColor: {
        themeKey: "palette"
      },
      borderRadius: {
        themeKey: "shape.borderRadius",
        style: _borders.borderRadius
      },
      // palette
      color: {
        themeKey: "palette",
        transform: _palette.paletteTransform
      },
      bgcolor: {
        themeKey: "palette",
        cssProperty: "backgroundColor",
        transform: _palette.paletteTransform
      },
      backgroundColor: {
        themeKey: "palette",
        transform: _palette.paletteTransform
      },
      // spacing
      p: {
        style: _spacing.padding
      },
      pt: {
        style: _spacing.padding
      },
      pr: {
        style: _spacing.padding
      },
      pb: {
        style: _spacing.padding
      },
      pl: {
        style: _spacing.padding
      },
      px: {
        style: _spacing.padding
      },
      py: {
        style: _spacing.padding
      },
      padding: {
        style: _spacing.padding
      },
      paddingTop: {
        style: _spacing.padding
      },
      paddingRight: {
        style: _spacing.padding
      },
      paddingBottom: {
        style: _spacing.padding
      },
      paddingLeft: {
        style: _spacing.padding
      },
      paddingX: {
        style: _spacing.padding
      },
      paddingY: {
        style: _spacing.padding
      },
      paddingInline: {
        style: _spacing.padding
      },
      paddingInlineStart: {
        style: _spacing.padding
      },
      paddingInlineEnd: {
        style: _spacing.padding
      },
      paddingBlock: {
        style: _spacing.padding
      },
      paddingBlockStart: {
        style: _spacing.padding
      },
      paddingBlockEnd: {
        style: _spacing.padding
      },
      m: {
        style: _spacing.margin
      },
      mt: {
        style: _spacing.margin
      },
      mr: {
        style: _spacing.margin
      },
      mb: {
        style: _spacing.margin
      },
      ml: {
        style: _spacing.margin
      },
      mx: {
        style: _spacing.margin
      },
      my: {
        style: _spacing.margin
      },
      margin: {
        style: _spacing.margin
      },
      marginTop: {
        style: _spacing.margin
      },
      marginRight: {
        style: _spacing.margin
      },
      marginBottom: {
        style: _spacing.margin
      },
      marginLeft: {
        style: _spacing.margin
      },
      marginX: {
        style: _spacing.margin
      },
      marginY: {
        style: _spacing.margin
      },
      marginInline: {
        style: _spacing.margin
      },
      marginInlineStart: {
        style: _spacing.margin
      },
      marginInlineEnd: {
        style: _spacing.margin
      },
      marginBlock: {
        style: _spacing.margin
      },
      marginBlockStart: {
        style: _spacing.margin
      },
      marginBlockEnd: {
        style: _spacing.margin
      },
      // display
      displayPrint: {
        cssProperty: false,
        transform: (value) => ({
          "@media print": {
            display: value
          }
        })
      },
      display: {},
      overflow: {},
      textOverflow: {},
      visibility: {},
      whiteSpace: {},
      // flexbox
      flexBasis: {},
      flexDirection: {},
      flexWrap: {},
      justifyContent: {},
      alignItems: {},
      alignContent: {},
      order: {},
      flex: {},
      flexGrow: {},
      flexShrink: {},
      alignSelf: {},
      justifyItems: {},
      justifySelf: {},
      // grid
      gap: {
        style: _cssGrid.gap
      },
      rowGap: {
        style: _cssGrid.rowGap
      },
      columnGap: {
        style: _cssGrid.columnGap
      },
      gridColumn: {},
      gridRow: {},
      gridAutoFlow: {},
      gridAutoColumns: {},
      gridAutoRows: {},
      gridTemplateColumns: {},
      gridTemplateRows: {},
      gridTemplateAreas: {},
      gridArea: {},
      // positions
      position: {},
      zIndex: {
        themeKey: "zIndex"
      },
      top: {},
      right: {},
      bottom: {},
      left: {},
      // shadows
      boxShadow: {
        themeKey: "shadows"
      },
      // sizing
      width: {
        transform: _sizing.sizingTransform
      },
      maxWidth: {
        style: _sizing.maxWidth
      },
      minWidth: {
        transform: _sizing.sizingTransform
      },
      height: {
        transform: _sizing.sizingTransform
      },
      maxHeight: {
        transform: _sizing.sizingTransform
      },
      minHeight: {
        transform: _sizing.sizingTransform
      },
      boxSizing: {},
      // typography
      font: {
        themeKey: "font"
      },
      fontFamily: {
        themeKey: "typography"
      },
      fontSize: {
        themeKey: "typography"
      },
      fontStyle: {
        themeKey: "typography"
      },
      fontWeight: {
        themeKey: "typography"
      },
      letterSpacing: {},
      textTransform: {},
      lineHeight: {},
      textAlign: {},
      typography: {
        cssProperty: false,
        themeKey: "typography"
      }
    };
    var _default = exports2.default = defaultSxConfig;
  }
});

// node_modules/@mui/system/styleFunctionSx/styleFunctionSx.js
var require_styleFunctionSx3 = __commonJS({
  "node_modules/@mui/system/styleFunctionSx/styleFunctionSx.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.unstable_createStyleFunctionSx = unstable_createStyleFunctionSx;
    var _capitalize = _interopRequireDefault(require_capitalize5());
    var _merge = _interopRequireDefault(require_merge4());
    var _style = require_style4();
    var _breakpoints = require_breakpoints4();
    var _cssContainerQueries = require_cssContainerQueries4();
    var _defaultSxConfig = _interopRequireDefault(require_defaultSxConfig2());
    function objectsHaveSameKeys(...objects) {
      const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);
      const union = new Set(allKeys);
      return objects.every((object) => union.size === Object.keys(object).length);
    }
    function callIfFn(maybeFn, arg) {
      return typeof maybeFn === "function" ? maybeFn(arg) : maybeFn;
    }
    function unstable_createStyleFunctionSx() {
      function getThemeValue(prop, val, theme2, config) {
        const props = {
          [prop]: val,
          theme: theme2
        };
        const options = config[prop];
        if (!options) {
          return {
            [prop]: val
          };
        }
        const {
          cssProperty = prop,
          themeKey,
          transform,
          style
        } = options;
        if (val == null) {
          return null;
        }
        if (themeKey === "typography" && val === "inherit") {
          return {
            [prop]: val
          };
        }
        const themeMapping = (0, _style.getPath)(theme2, themeKey) || {};
        if (style) {
          return style(props);
        }
        const styleFromPropValue = (propValueFinal) => {
          let value = (0, _style.getStyleValue)(themeMapping, transform, propValueFinal);
          if (propValueFinal === value && typeof propValueFinal === "string") {
            value = (0, _style.getStyleValue)(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : (0, _capitalize.default)(propValueFinal)}`, propValueFinal);
          }
          if (cssProperty === false) {
            return value;
          }
          return {
            [cssProperty]: value
          };
        };
        return (0, _breakpoints.handleBreakpoints)(props, val, styleFromPropValue);
      }
      function styleFunctionSx2(props) {
        const {
          sx,
          theme: theme2 = {}
        } = props || {};
        if (!sx) {
          return null;
        }
        const config = theme2.unstable_sxConfig ?? _defaultSxConfig.default;
        function traverse(sxInput) {
          let sxObject = sxInput;
          if (typeof sxInput === "function") {
            sxObject = sxInput(theme2);
          } else if (typeof sxInput !== "object") {
            return sxInput;
          }
          if (!sxObject) {
            return null;
          }
          const emptyBreakpoints = (0, _breakpoints.createEmptyBreakpointObject)(theme2.breakpoints);
          const breakpointsKeys = Object.keys(emptyBreakpoints);
          let css2 = emptyBreakpoints;
          Object.keys(sxObject).forEach((styleKey) => {
            const value = callIfFn(sxObject[styleKey], theme2);
            if (value !== null && value !== void 0) {
              if (typeof value === "object") {
                if (config[styleKey]) {
                  css2 = (0, _merge.default)(css2, getThemeValue(styleKey, value, theme2, config));
                } else {
                  const breakpointsValues = (0, _breakpoints.handleBreakpoints)({
                    theme: theme2
                  }, value, (x) => ({
                    [styleKey]: x
                  }));
                  if (objectsHaveSameKeys(breakpointsValues, value)) {
                    css2[styleKey] = styleFunctionSx2({
                      sx: value,
                      theme: theme2
                    });
                  } else {
                    css2 = (0, _merge.default)(css2, breakpointsValues);
                  }
                }
              } else {
                css2 = (0, _merge.default)(css2, getThemeValue(styleKey, value, theme2, config));
              }
            }
          });
          return (0, _cssContainerQueries.sortContainerQueries)(theme2, (0, _breakpoints.removeUnusedBreakpoints)(breakpointsKeys, css2));
        }
        return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
      }
      return styleFunctionSx2;
    }
    var styleFunctionSx = unstable_createStyleFunctionSx();
    styleFunctionSx.filterProps = ["sx"];
    var _default = exports2.default = styleFunctionSx;
  }
});

// node_modules/@mui/system/createTheme/applyStyles.js
var require_applyStyles2 = __commonJS({
  "node_modules/@mui/system/createTheme/applyStyles.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = applyStyles;
    function applyStyles(key, styles) {
      const theme2 = this;
      if (theme2.vars) {
        if (!theme2.colorSchemes?.[key] || typeof theme2.getColorSchemeSelector !== "function") {
          return {};
        }
        let selector = theme2.getColorSchemeSelector(key);
        if (selector === "&") {
          return styles;
        }
        if (selector.includes("data-") || selector.includes(".")) {
          selector = `*:where(${selector.replace(/\s*&$/, "")}) &`;
        }
        return {
          [selector]: styles
        };
      }
      if (theme2.palette.mode === key) {
        return styles;
      }
      return {};
    }
  }
});

// node_modules/@mui/system/createTheme/createTheme.js
var require_createTheme4 = __commonJS({
  "node_modules/@mui/system/createTheme/createTheme.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _deepmerge = _interopRequireDefault(require_deepmerge4());
    var _createBreakpoints = _interopRequireDefault(require_createBreakpoints3());
    var _cssContainerQueries = _interopRequireDefault(require_cssContainerQueries4());
    var _shape = _interopRequireDefault(require_shape2());
    var _createSpacing = _interopRequireDefault(require_createSpacing2());
    var _styleFunctionSx = _interopRequireDefault(require_styleFunctionSx3());
    var _defaultSxConfig = _interopRequireDefault(require_defaultSxConfig2());
    var _applyStyles = _interopRequireDefault(require_applyStyles2());
    function createTheme2(options = {}, ...args) {
      const {
        breakpoints: breakpointsInput = {},
        palette: paletteInput = {},
        spacing: spacingInput,
        shape: shapeInput = {},
        ...other
      } = options;
      const breakpoints = (0, _createBreakpoints.default)(breakpointsInput);
      const spacing = (0, _createSpacing.default)(spacingInput);
      let muiTheme = (0, _deepmerge.default)({
        breakpoints,
        direction: "ltr",
        components: {},
        // Inject component definitions.
        palette: {
          mode: "light",
          ...paletteInput
        },
        spacing,
        shape: {
          ..._shape.default,
          ...shapeInput
        }
      }, other);
      muiTheme = (0, _cssContainerQueries.default)(muiTheme);
      muiTheme.applyStyles = _applyStyles.default;
      muiTheme = args.reduce((acc, argument) => (0, _deepmerge.default)(acc, argument), muiTheme);
      muiTheme.unstable_sxConfig = {
        ..._defaultSxConfig.default,
        ...other?.unstable_sxConfig
      };
      muiTheme.unstable_sx = function sx(props) {
        return (0, _styleFunctionSx.default)({
          sx: props,
          theme: this
        });
      };
      return muiTheme;
    }
    var _default = exports2.default = createTheme2;
  }
});

// node_modules/@mui/system/createTheme/index.js
var require_createTheme5 = __commonJS({
  "node_modules/@mui/system/createTheme/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _createTheme.default;
      }
    });
    Object.defineProperty(exports2, "private_createBreakpoints", {
      enumerable: true,
      get: function() {
        return _createBreakpoints.default;
      }
    });
    Object.defineProperty(exports2, "unstable_applyStyles", {
      enumerable: true,
      get: function() {
        return _applyStyles.default;
      }
    });
    var _createTheme = _interopRequireDefault(require_createTheme4());
    var _createBreakpoints = _interopRequireDefault(require_createBreakpoints3());
    var _applyStyles = _interopRequireDefault(require_applyStyles2());
  }
});

// node_modules/@mui/system/styleFunctionSx/extendSxProp.js
var require_extendSxProp2 = __commonJS({
  "node_modules/@mui/system/styleFunctionSx/extendSxProp.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = extendSxProp;
    var _deepmerge = require_deepmerge4();
    var _defaultSxConfig = _interopRequireDefault(require_defaultSxConfig2());
    var splitProps = (props) => {
      const result = {
        systemProps: {},
        otherProps: {}
      };
      const config = props?.theme?.unstable_sxConfig ?? _defaultSxConfig.default;
      Object.keys(props).forEach((prop) => {
        if (config[prop]) {
          result.systemProps[prop] = props[prop];
        } else {
          result.otherProps[prop] = props[prop];
        }
      });
      return result;
    };
    function extendSxProp(props) {
      const {
        sx: inSx,
        ...other
      } = props;
      const {
        systemProps,
        otherProps
      } = splitProps(other);
      let finalSx;
      if (Array.isArray(inSx)) {
        finalSx = [systemProps, ...inSx];
      } else if (typeof inSx === "function") {
        finalSx = (...args) => {
          const result = inSx(...args);
          if (!(0, _deepmerge.isPlainObject)(result)) {
            return systemProps;
          }
          return {
            ...systemProps,
            ...result
          };
        };
      } else {
        finalSx = {
          ...systemProps,
          ...inSx
        };
      }
      return {
        ...otherProps,
        sx: finalSx
      };
    }
  }
});

// node_modules/@mui/system/styleFunctionSx/index.js
var require_styleFunctionSx4 = __commonJS({
  "node_modules/@mui/system/styleFunctionSx/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _styleFunctionSx.default;
      }
    });
    Object.defineProperty(exports2, "extendSxProp", {
      enumerable: true,
      get: function() {
        return _extendSxProp.default;
      }
    });
    Object.defineProperty(exports2, "unstable_createStyleFunctionSx", {
      enumerable: true,
      get: function() {
        return _styleFunctionSx.unstable_createStyleFunctionSx;
      }
    });
    Object.defineProperty(exports2, "unstable_defaultSxConfig", {
      enumerable: true,
      get: function() {
        return _defaultSxConfig.default;
      }
    });
    var _styleFunctionSx = _interopRequireWildcard(require_styleFunctionSx3());
    var _extendSxProp = _interopRequireDefault(require_extendSxProp2());
    var _defaultSxConfig = _interopRequireDefault(require_defaultSxConfig2());
  }
});

// node_modules/@mui/system/preprocessStyles.js
var require_preprocessStyles2 = __commonJS({
  "node_modules/@mui/system/preprocessStyles.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = preprocessStyles;
    var _styledEngine = require_styled_engine();
    function preprocessStyles(input) {
      const {
        variants,
        ...style
      } = input;
      const result = {
        variants,
        style: (0, _styledEngine.internal_serializeStyles)(style),
        isProcessed: true
      };
      if (result.style === style) {
        return result;
      }
      if (variants) {
        variants.forEach((variant) => {
          if (typeof variant.style !== "function") {
            variant.style = (0, _styledEngine.internal_serializeStyles)(variant.style);
          }
        });
      }
      return result;
    }
  }
});

// node_modules/@mui/system/createStyled/createStyled.js
var require_createStyled3 = __commonJS({
  "node_modules/@mui/system/createStyled/createStyled.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = createStyled3;
    exports2.shouldForwardProp = shouldForwardProp;
    exports2.systemDefaultTheme = void 0;
    var _styledEngine = _interopRequireWildcard(require_styled_engine());
    var _deepmerge = require_deepmerge4();
    var _capitalize = _interopRequireDefault(require_capitalize5());
    var _getDisplayName = _interopRequireDefault(require_getDisplayName4());
    var _createTheme = _interopRequireDefault(require_createTheme5());
    var _styleFunctionSx = _interopRequireDefault(require_styleFunctionSx4());
    var _preprocessStyles = _interopRequireDefault(require_preprocessStyles2());
    var systemDefaultTheme = exports2.systemDefaultTheme = (0, _createTheme.default)();
    function shouldForwardProp(prop) {
      return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
    }
    function defaultOverridesResolver(slot) {
      if (!slot) {
        return null;
      }
      return (_props, styles) => styles[slot];
    }
    function attachTheme(props, themeId, defaultTheme) {
      props.theme = isObjectEmpty(props.theme) ? defaultTheme : props.theme[themeId] || props.theme;
    }
    function processStyle(props, style) {
      const resolvedStyle = typeof style === "function" ? style(props) : style;
      if (Array.isArray(resolvedStyle)) {
        return resolvedStyle.flatMap((subStyle) => processStyle(props, subStyle));
      }
      if (Array.isArray(resolvedStyle?.variants)) {
        let rootStyle;
        if (resolvedStyle.isProcessed) {
          rootStyle = resolvedStyle.style;
        } else {
          const {
            variants,
            ...otherStyles
          } = resolvedStyle;
          rootStyle = otherStyles;
        }
        return processStyleVariants(props, resolvedStyle.variants, [rootStyle]);
      }
      if (resolvedStyle?.isProcessed) {
        return resolvedStyle.style;
      }
      return resolvedStyle;
    }
    function processStyleVariants(props, variants, results = []) {
      let mergedState;
      variantLoop: for (let i = 0; i < variants.length; i += 1) {
        const variant = variants[i];
        if (typeof variant.props === "function") {
          mergedState ?? (mergedState = {
            ...props,
            ...props.ownerState,
            ownerState: props.ownerState
          });
          if (!variant.props(mergedState)) {
            continue;
          }
        } else {
          for (const key in variant.props) {
            if (props[key] !== variant.props[key] && props.ownerState?.[key] !== variant.props[key]) {
              continue variantLoop;
            }
          }
        }
        if (typeof variant.style === "function") {
          mergedState ?? (mergedState = {
            ...props,
            ...props.ownerState,
            ownerState: props.ownerState
          });
          results.push(variant.style(mergedState));
        } else {
          results.push(variant.style);
        }
      }
      return results;
    }
    function createStyled3(input = {}) {
      const {
        themeId,
        defaultTheme = systemDefaultTheme,
        rootShouldForwardProp = shouldForwardProp,
        slotShouldForwardProp = shouldForwardProp
      } = input;
      function styleAttachTheme(props) {
        attachTheme(props, themeId, defaultTheme);
      }
      const styled = (tag, inputOptions = {}) => {
        (0, _styledEngine.internal_mutateStyles)(tag, (styles) => styles.filter((style) => style !== _styleFunctionSx.default));
        const {
          name: componentName,
          slot: componentSlot,
          skipVariantsResolver: inputSkipVariantsResolver,
          skipSx: inputSkipSx,
          // TODO v6: remove `lowercaseFirstLetter()` in the next major release
          // For more details: https://github.com/mui/material-ui/pull/37908
          overridesResolver = defaultOverridesResolver(lowercaseFirstLetter(componentSlot)),
          ...options
        } = inputOptions;
        const skipVariantsResolver = inputSkipVariantsResolver !== void 0 ? inputSkipVariantsResolver : (
          // TODO v6: remove `Root` in the next major release
          // For more details: https://github.com/mui/material-ui/pull/37908
          componentSlot && componentSlot !== "Root" && componentSlot !== "root" || false
        );
        const skipSx = inputSkipSx || false;
        let shouldForwardPropOption = shouldForwardProp;
        if (componentSlot === "Root" || componentSlot === "root") {
          shouldForwardPropOption = rootShouldForwardProp;
        } else if (componentSlot) {
          shouldForwardPropOption = slotShouldForwardProp;
        } else if (isStringTag(tag)) {
          shouldForwardPropOption = void 0;
        }
        const defaultStyledResolver = (0, _styledEngine.default)(tag, {
          shouldForwardProp: shouldForwardPropOption,
          label: generateStyledLabel(componentName, componentSlot),
          ...options
        });
        const transformStyle = (style) => {
          if (typeof style === "function" && style.__emotion_real !== style) {
            return function styleFunctionProcessor(props) {
              return processStyle(props, style);
            };
          }
          if ((0, _deepmerge.isPlainObject)(style)) {
            const serialized = (0, _preprocessStyles.default)(style);
            if (!serialized.variants) {
              return serialized.style;
            }
            return function styleObjectProcessor(props) {
              return processStyle(props, serialized);
            };
          }
          return style;
        };
        const muiStyledResolver = (...expressionsInput) => {
          const expressionsHead = [];
          const expressionsBody = expressionsInput.map(transformStyle);
          const expressionsTail = [];
          expressionsHead.push(styleAttachTheme);
          if (componentName && overridesResolver) {
            expressionsTail.push(function styleThemeOverrides(props) {
              const theme2 = props.theme;
              const styleOverrides = theme2.components?.[componentName]?.styleOverrides;
              if (!styleOverrides) {
                return null;
              }
              const resolvedStyleOverrides = {};
              for (const slotKey in styleOverrides) {
                resolvedStyleOverrides[slotKey] = processStyle(props, styleOverrides[slotKey]);
              }
              return overridesResolver(props, resolvedStyleOverrides);
            });
          }
          if (componentName && !skipVariantsResolver) {
            expressionsTail.push(function styleThemeVariants(props) {
              const theme2 = props.theme;
              const themeVariants = theme2?.components?.[componentName]?.variants;
              if (!themeVariants) {
                return null;
              }
              return processStyleVariants(props, themeVariants);
            });
          }
          if (!skipSx) {
            expressionsTail.push(_styleFunctionSx.default);
          }
          if (Array.isArray(expressionsBody[0])) {
            const inputStrings = expressionsBody.shift();
            const placeholdersHead = new Array(expressionsHead.length).fill("");
            const placeholdersTail = new Array(expressionsTail.length).fill("");
            let outputStrings;
            {
              outputStrings = [...placeholdersHead, ...inputStrings, ...placeholdersTail];
              outputStrings.raw = [...placeholdersHead, ...inputStrings.raw, ...placeholdersTail];
            }
            expressionsHead.unshift(outputStrings);
          }
          const expressions = [...expressionsHead, ...expressionsBody, ...expressionsTail];
          const Component = defaultStyledResolver(...expressions);
          if (tag.muiName) {
            Component.muiName = tag.muiName;
          }
          if (define_process_env_default.NODE_ENV !== "production") {
            Component.displayName = generateDisplayName(componentName, componentSlot, tag);
          }
          return Component;
        };
        if (defaultStyledResolver.withConfig) {
          muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
        }
        return muiStyledResolver;
      };
      return styled;
    }
    function generateDisplayName(componentName, componentSlot, tag) {
      if (componentName) {
        return `${componentName}${(0, _capitalize.default)(componentSlot || "")}`;
      }
      return `Styled(${(0, _getDisplayName.default)(tag)})`;
    }
    function generateStyledLabel(componentName, componentSlot) {
      let label;
      if (define_process_env_default.NODE_ENV !== "production") {
        if (componentName) {
          label = `${componentName}-${lowercaseFirstLetter(componentSlot || "Root")}`;
        }
      }
      return label;
    }
    function isObjectEmpty(object) {
      for (const _ in object) {
        return false;
      }
      return true;
    }
    function isStringTag(tag) {
      return typeof tag === "string" && // 96 is one less than the char code
      // for "a" so this is checking that
      // it's a lowercase character
      tag.charCodeAt(0) > 96;
    }
    function lowercaseFirstLetter(string) {
      if (!string) {
        return string;
      }
      return string.charAt(0).toLowerCase() + string.slice(1);
    }
  }
});

// node_modules/@mui/system/createStyled/index.js
var require_createStyled4 = __commonJS({
  "node_modules/@mui/system/createStyled/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _createStyled.default;
      }
    });
    var _createStyled = _interopRequireWildcard(require_createStyled3());
    Object.keys(_createStyled).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _createStyled[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _createStyled[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node/FormControl/FormControlContext.js
var require_FormControlContext = __commonJS({
  "node_modules/@mui/material/node/FormControl/FormControlContext.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var FormControlContext = /* @__PURE__ */ React7.createContext(void 0);
    if (define_process_env_default.NODE_ENV !== "production") {
      FormControlContext.displayName = "FormControlContext";
    }
    var _default = exports2.default = FormControlContext;
  }
});

// node_modules/@mui/material/node/FormControl/useFormControl.js
var require_useFormControl = __commonJS({
  "node_modules/@mui/material/node/FormControl/useFormControl.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = useFormControl;
    var React7 = _interopRequireWildcard(require_react());
    var _FormControlContext = _interopRequireDefault(require_FormControlContext());
    function useFormControl() {
      return React7.useContext(_FormControlContext.default);
    }
  }
});

// node_modules/@mui/material/node/useLazyRipple/useLazyRipple.js
var require_useLazyRipple = __commonJS({
  "node_modules/@mui/material/node/useLazyRipple/useLazyRipple.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.LazyRipple = void 0;
    exports2.default = useLazyRipple;
    var React7 = _interopRequireWildcard(require_react());
    var _useLazyRef = _interopRequireDefault(require_useLazyRef2());
    var LazyRipple = class _LazyRipple {
      /** React ref to the ripple instance */
      /** If the ripple component should be mounted */
      /** Promise that resolves when the ripple component is mounted */
      /** If the ripple component has been mounted */
      /** React state hook setter */
      static create() {
        return new _LazyRipple();
      }
      static use() {
        const ripple = (0, _useLazyRef.default)(_LazyRipple.create).current;
        const [shouldMount, setShouldMount] = React7.useState(false);
        ripple.shouldMount = shouldMount;
        ripple.setShouldMount = setShouldMount;
        React7.useEffect(ripple.mountEffect, [shouldMount]);
        return ripple;
      }
      constructor() {
        this.ref = {
          current: null
        };
        this.mounted = null;
        this.didMount = false;
        this.shouldMount = false;
        this.setShouldMount = null;
      }
      mount() {
        if (!this.mounted) {
          this.mounted = createControlledPromise();
          this.shouldMount = true;
          this.setShouldMount(this.shouldMount);
        }
        return this.mounted;
      }
      mountEffect = () => {
        if (this.shouldMount && !this.didMount) {
          if (this.ref.current !== null) {
            this.didMount = true;
            this.mounted.resolve();
          }
        }
      };
      /* Ripple API */
      start(...args) {
        this.mount().then(() => this.ref.current?.start(...args));
      }
      stop(...args) {
        this.mount().then(() => this.ref.current?.stop(...args));
      }
      pulsate(...args) {
        this.mount().then(() => this.ref.current?.pulsate(...args));
      }
    };
    exports2.LazyRipple = LazyRipple;
    function useLazyRipple() {
      return LazyRipple.use();
    }
    function createControlledPromise() {
      let resolve;
      let reject;
      const p = new Promise((resolveFn, rejectFn) => {
        resolve = resolveFn;
        reject = rejectFn;
      });
      p.resolve = resolve;
      p.reject = reject;
      return p;
    }
  }
});

// node_modules/@mui/material/node/useLazyRipple/index.js
var require_useLazyRipple2 = __commonJS({
  "node_modules/@mui/material/node/useLazyRipple/index.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _useLazyRipple.default;
      }
    });
    var _useLazyRipple = _interopRequireDefault(require_useLazyRipple());
  }
});

// node_modules/@mui/material/node/ButtonBase/Ripple.js
var require_Ripple = __commonJS({
  "node_modules/@mui/material/node/ButtonBase/Ripple.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _clsx = _interopRequireDefault(require_clsx());
    var _jsxRuntime = require_jsx_runtime();
    function Ripple(props) {
      const {
        className,
        classes,
        pulsate = false,
        rippleX,
        rippleY,
        rippleSize,
        in: inProp,
        onExited,
        timeout
      } = props;
      const [leaving, setLeaving] = React7.useState(false);
      const rippleClassName = (0, _clsx.default)(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
      const rippleStyles = {
        width: rippleSize,
        height: rippleSize,
        top: -(rippleSize / 2) + rippleY,
        left: -(rippleSize / 2) + rippleX
      };
      const childClassName = (0, _clsx.default)(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
      if (!inProp && !leaving) {
        setLeaving(true);
      }
      React7.useEffect(() => {
        if (!inProp && onExited != null) {
          const timeoutId = setTimeout(onExited, timeout);
          return () => {
            clearTimeout(timeoutId);
          };
        }
        return void 0;
      }, [onExited, inProp, timeout]);
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)("span", {
        className: rippleClassName,
        style: rippleStyles,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)("span", {
          className: childClassName
        })
      });
    }
    define_process_env_default.NODE_ENV !== "production" ? Ripple.propTypes = {
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object.isRequired,
      className: _propTypes.default.string,
      /**
       * @ignore - injected from TransitionGroup
       */
      in: _propTypes.default.bool,
      /**
       * @ignore - injected from TransitionGroup
       */
      onExited: _propTypes.default.func,
      /**
       * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.
       */
      pulsate: _propTypes.default.bool,
      /**
       * Diameter of the ripple.
       */
      rippleSize: _propTypes.default.number,
      /**
       * Horizontal position of the ripple center.
       */
      rippleX: _propTypes.default.number,
      /**
       * Vertical position of the ripple center.
       */
      rippleY: _propTypes.default.number,
      /**
       * exit delay
       */
      timeout: _propTypes.default.number.isRequired
    } : void 0;
    var _default = exports2.default = Ripple;
  }
});

// node_modules/@mui/material/node/ButtonBase/touchRippleClasses.js
var require_touchRippleClasses = __commonJS({
  "node_modules/@mui/material/node/ButtonBase/touchRippleClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getTouchRippleUtilityClass = getTouchRippleUtilityClass;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    function getTouchRippleUtilityClass(slot) {
      return (0, _generateUtilityClass.default)("MuiTouchRipple", slot);
    }
    var touchRippleClasses = (0, _generateUtilityClasses.default)("MuiTouchRipple", ["root", "ripple", "rippleVisible", "ripplePulsate", "child", "childLeaving", "childPulsate"]);
    var _default = exports2.default = touchRippleClasses;
  }
});

// node_modules/@mui/material/node/ButtonBase/TouchRipple.js
var require_TouchRipple = __commonJS({
  "node_modules/@mui/material/node/ButtonBase/TouchRipple.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = exports2.TouchRippleRoot = exports2.TouchRippleRipple = exports2.DELAY_RIPPLE = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _reactTransitionGroup = require_cjs();
    var _clsx = _interopRequireDefault(require_clsx());
    var _useTimeout = _interopRequireDefault(require_useTimeout2());
    var _zeroStyled = require_zero_styled2();
    var _DefaultPropsProvider = require_DefaultPropsProvider4();
    var _Ripple = _interopRequireDefault(require_Ripple());
    var _touchRippleClasses = _interopRequireDefault(require_touchRippleClasses());
    var _jsxRuntime = require_jsx_runtime();
    var DURATION = 550;
    var DELAY_RIPPLE = exports2.DELAY_RIPPLE = 80;
    var enterKeyframe = (0, _zeroStyled.keyframes)`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`;
    var exitKeyframe = (0, _zeroStyled.keyframes)`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`;
    var pulsateKeyframe = (0, _zeroStyled.keyframes)`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`;
    var TouchRippleRoot = exports2.TouchRippleRoot = (0, _zeroStyled.styled)("span", {
      name: "MuiTouchRipple",
      slot: "Root"
    })({
      overflow: "hidden",
      pointerEvents: "none",
      position: "absolute",
      zIndex: 0,
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      borderRadius: "inherit"
    });
    var TouchRippleRipple = exports2.TouchRippleRipple = (0, _zeroStyled.styled)(_Ripple.default, {
      name: "MuiTouchRipple",
      slot: "Ripple"
    })`
  opacity: 0;
  position: absolute;

  &.${_touchRippleClasses.default.rippleVisible} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${enterKeyframe};
    animation-duration: ${DURATION}ms;
    animation-timing-function: ${({
      theme: theme2
    }) => theme2.transitions.easing.easeInOut};
  }

  &.${_touchRippleClasses.default.ripplePulsate} {
    animation-duration: ${({
      theme: theme2
    }) => theme2.transitions.duration.shorter}ms;
  }

  & .${_touchRippleClasses.default.child} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${_touchRippleClasses.default.childLeaving} {
    opacity: 0;
    animation-name: ${exitKeyframe};
    animation-duration: ${DURATION}ms;
    animation-timing-function: ${({
      theme: theme2
    }) => theme2.transitions.easing.easeInOut};
  }

  & .${_touchRippleClasses.default.childPulsate} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${pulsateKeyframe};
    animation-duration: 2500ms;
    animation-timing-function: ${({
      theme: theme2
    }) => theme2.transitions.easing.easeInOut};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`;
    var TouchRipple = /* @__PURE__ */ React7.forwardRef(function TouchRipple2(inProps, ref) {
      const props = (0, _DefaultPropsProvider.useDefaultProps)({
        props: inProps,
        name: "MuiTouchRipple"
      });
      const {
        center: centerProp = false,
        classes = {},
        className,
        ...other
      } = props;
      const [ripples, setRipples] = React7.useState([]);
      const nextKey = React7.useRef(0);
      const rippleCallback = React7.useRef(null);
      React7.useEffect(() => {
        if (rippleCallback.current) {
          rippleCallback.current();
          rippleCallback.current = null;
        }
      }, [ripples]);
      const ignoringMouseDown = React7.useRef(false);
      const startTimer = (0, _useTimeout.default)();
      const startTimerCommit = React7.useRef(null);
      const container = React7.useRef(null);
      const startCommit = React7.useCallback((params) => {
        const {
          pulsate: pulsate2,
          rippleX,
          rippleY,
          rippleSize,
          cb
        } = params;
        setRipples((oldRipples) => [...oldRipples, /* @__PURE__ */ (0, _jsxRuntime.jsx)(TouchRippleRipple, {
          classes: {
            ripple: (0, _clsx.default)(classes.ripple, _touchRippleClasses.default.ripple),
            rippleVisible: (0, _clsx.default)(classes.rippleVisible, _touchRippleClasses.default.rippleVisible),
            ripplePulsate: (0, _clsx.default)(classes.ripplePulsate, _touchRippleClasses.default.ripplePulsate),
            child: (0, _clsx.default)(classes.child, _touchRippleClasses.default.child),
            childLeaving: (0, _clsx.default)(classes.childLeaving, _touchRippleClasses.default.childLeaving),
            childPulsate: (0, _clsx.default)(classes.childPulsate, _touchRippleClasses.default.childPulsate)
          },
          timeout: DURATION,
          pulsate: pulsate2,
          rippleX,
          rippleY,
          rippleSize
        }, nextKey.current)]);
        nextKey.current += 1;
        rippleCallback.current = cb;
      }, [classes]);
      const start = React7.useCallback((event = {}, options = {}, cb = () => {
      }) => {
        const {
          pulsate: pulsate2 = false,
          center = centerProp || options.pulsate,
          fakeElement = false
          // For test purposes
        } = options;
        if (event?.type === "mousedown" && ignoringMouseDown.current) {
          ignoringMouseDown.current = false;
          return;
        }
        if (event?.type === "touchstart") {
          ignoringMouseDown.current = true;
        }
        const element = fakeElement ? null : container.current;
        const rect = element ? element.getBoundingClientRect() : {
          width: 0,
          height: 0,
          left: 0,
          top: 0
        };
        let rippleX;
        let rippleY;
        let rippleSize;
        if (center || event === void 0 || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
          rippleX = Math.round(rect.width / 2);
          rippleY = Math.round(rect.height / 2);
        } else {
          const {
            clientX,
            clientY
          } = event.touches && event.touches.length > 0 ? event.touches[0] : event;
          rippleX = Math.round(clientX - rect.left);
          rippleY = Math.round(clientY - rect.top);
        }
        if (center) {
          rippleSize = Math.sqrt((2 * rect.width ** 2 + rect.height ** 2) / 3);
          if (rippleSize % 2 === 0) {
            rippleSize += 1;
          }
        } else {
          const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
          const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
          rippleSize = Math.sqrt(sizeX ** 2 + sizeY ** 2);
        }
        if (event?.touches) {
          if (startTimerCommit.current === null) {
            startTimerCommit.current = () => {
              startCommit({
                pulsate: pulsate2,
                rippleX,
                rippleY,
                rippleSize,
                cb
              });
            };
            startTimer.start(DELAY_RIPPLE, () => {
              if (startTimerCommit.current) {
                startTimerCommit.current();
                startTimerCommit.current = null;
              }
            });
          }
        } else {
          startCommit({
            pulsate: pulsate2,
            rippleX,
            rippleY,
            rippleSize,
            cb
          });
        }
      }, [centerProp, startCommit, startTimer]);
      const pulsate = React7.useCallback(() => {
        start({}, {
          pulsate: true
        });
      }, [start]);
      const stop = React7.useCallback((event, cb) => {
        startTimer.clear();
        if (event?.type === "touchend" && startTimerCommit.current) {
          startTimerCommit.current();
          startTimerCommit.current = null;
          startTimer.start(0, () => {
            stop(event, cb);
          });
          return;
        }
        startTimerCommit.current = null;
        setRipples((oldRipples) => {
          if (oldRipples.length > 0) {
            return oldRipples.slice(1);
          }
          return oldRipples;
        });
        rippleCallback.current = cb;
      }, [startTimer]);
      React7.useImperativeHandle(ref, () => ({
        pulsate,
        start,
        stop
      }), [pulsate, start, stop]);
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(TouchRippleRoot, {
        className: (0, _clsx.default)(_touchRippleClasses.default.root, classes.root, className),
        ref: container,
        ...other,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(_reactTransitionGroup.TransitionGroup, {
          component: null,
          exit: true,
          children: ripples
        })
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? TouchRipple.propTypes = {
      /**
       * If `true`, the ripple starts at the center of the component
       * rather than at the point of interaction.
       */
      center: _propTypes.default.bool,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      /**
       * @ignore
       */
      className: _propTypes.default.string
    } : void 0;
    var _default = exports2.default = TouchRipple;
  }
});

// node_modules/@mui/material/node/ButtonBase/buttonBaseClasses.js
var require_buttonBaseClasses = __commonJS({
  "node_modules/@mui/material/node/ButtonBase/buttonBaseClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getButtonBaseUtilityClass = getButtonBaseUtilityClass;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    function getButtonBaseUtilityClass(slot) {
      return (0, _generateUtilityClass.default)("MuiButtonBase", slot);
    }
    var buttonBaseClasses = (0, _generateUtilityClasses.default)("MuiButtonBase", ["root", "disabled", "focusVisible"]);
    var _default = exports2.default = buttonBaseClasses;
  }
});

// node_modules/@mui/material/node/ButtonBase/ButtonBase.js
var require_ButtonBase = __commonJS({
  "node_modules/@mui/material/node/ButtonBase/ButtonBase.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = exports2.ButtonBaseRoot = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _clsx = _interopRequireDefault(require_clsx());
    var _refType = _interopRequireDefault(require_refType2());
    var _elementTypeAcceptingRef = _interopRequireDefault(require_elementTypeAcceptingRef2());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _isFocusVisible = _interopRequireDefault(require_isFocusVisible2());
    var _zeroStyled = require_zero_styled2();
    var _DefaultPropsProvider = require_DefaultPropsProvider4();
    var _useForkRef = _interopRequireDefault(require_useForkRef3());
    var _useEventCallback = _interopRequireDefault(require_useEventCallback3());
    var _useLazyRipple = _interopRequireDefault(require_useLazyRipple2());
    var _TouchRipple = _interopRequireDefault(require_TouchRipple());
    var _buttonBaseClasses = _interopRequireWildcard(require_buttonBaseClasses());
    var _jsxRuntime = require_jsx_runtime();
    var useUtilityClasses = (ownerState) => {
      const {
        disabled,
        focusVisible,
        focusVisibleClassName,
        classes
      } = ownerState;
      const slots = {
        root: ["root", disabled && "disabled", focusVisible && "focusVisible"]
      };
      const composedClasses = (0, _composeClasses.default)(slots, _buttonBaseClasses.getButtonBaseUtilityClass, classes);
      if (focusVisible && focusVisibleClassName) {
        composedClasses.root += ` ${focusVisibleClassName}`;
      }
      return composedClasses;
    };
    var ButtonBaseRoot = exports2.ButtonBaseRoot = (0, _zeroStyled.styled)("button", {
      name: "MuiButtonBase",
      slot: "Root",
      overridesResolver: (props, styles) => styles.root
    })({
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      position: "relative",
      boxSizing: "border-box",
      WebkitTapHighlightColor: "transparent",
      backgroundColor: "transparent",
      // Reset default value
      // We disable the focus ring for mouse, touch and keyboard users.
      outline: 0,
      border: 0,
      margin: 0,
      // Remove the margin in Safari
      borderRadius: 0,
      padding: 0,
      // Remove the padding in Firefox
      cursor: "pointer",
      userSelect: "none",
      verticalAlign: "middle",
      MozAppearance: "none",
      // Reset
      WebkitAppearance: "none",
      // Reset
      textDecoration: "none",
      // So we take precedent over the style of a native <a /> element.
      color: "inherit",
      "&::-moz-focus-inner": {
        borderStyle: "none"
        // Remove Firefox dotted outline.
      },
      [`&.${_buttonBaseClasses.default.disabled}`]: {
        pointerEvents: "none",
        // Disable link interactions
        cursor: "default"
      },
      "@media print": {
        colorAdjust: "exact"
      }
    });
    var ButtonBase = /* @__PURE__ */ React7.forwardRef(function ButtonBase2(inProps, ref) {
      const props = (0, _DefaultPropsProvider.useDefaultProps)({
        props: inProps,
        name: "MuiButtonBase"
      });
      const {
        action,
        centerRipple = false,
        children,
        className,
        component = "button",
        disabled = false,
        disableRipple = false,
        disableTouchRipple = false,
        focusRipple = false,
        focusVisibleClassName,
        LinkComponent = "a",
        onBlur,
        onClick,
        onContextMenu,
        onDragLeave,
        onFocus,
        onFocusVisible,
        onKeyDown,
        onKeyUp,
        onMouseDown,
        onMouseLeave,
        onMouseUp,
        onTouchEnd,
        onTouchMove,
        onTouchStart,
        tabIndex = 0,
        TouchRippleProps,
        touchRippleRef,
        type,
        ...other
      } = props;
      const buttonRef = React7.useRef(null);
      const ripple = (0, _useLazyRipple.default)();
      const handleRippleRef = (0, _useForkRef.default)(ripple.ref, touchRippleRef);
      const [focusVisible, setFocusVisible] = React7.useState(false);
      if (disabled && focusVisible) {
        setFocusVisible(false);
      }
      React7.useImperativeHandle(action, () => ({
        focusVisible: () => {
          setFocusVisible(true);
          buttonRef.current.focus();
        }
      }), []);
      const enableTouchRipple = ripple.shouldMount && !disableRipple && !disabled;
      React7.useEffect(() => {
        if (focusVisible && focusRipple && !disableRipple) {
          ripple.pulsate();
        }
      }, [disableRipple, focusRipple, focusVisible, ripple]);
      const handleMouseDown = useRippleHandler(ripple, "start", onMouseDown, disableTouchRipple);
      const handleContextMenu = useRippleHandler(ripple, "stop", onContextMenu, disableTouchRipple);
      const handleDragLeave = useRippleHandler(ripple, "stop", onDragLeave, disableTouchRipple);
      const handleMouseUp = useRippleHandler(ripple, "stop", onMouseUp, disableTouchRipple);
      const handleMouseLeave = useRippleHandler(ripple, "stop", (event) => {
        if (focusVisible) {
          event.preventDefault();
        }
        if (onMouseLeave) {
          onMouseLeave(event);
        }
      }, disableTouchRipple);
      const handleTouchStart = useRippleHandler(ripple, "start", onTouchStart, disableTouchRipple);
      const handleTouchEnd = useRippleHandler(ripple, "stop", onTouchEnd, disableTouchRipple);
      const handleTouchMove = useRippleHandler(ripple, "stop", onTouchMove, disableTouchRipple);
      const handleBlur = useRippleHandler(ripple, "stop", (event) => {
        if (!(0, _isFocusVisible.default)(event.target)) {
          setFocusVisible(false);
        }
        if (onBlur) {
          onBlur(event);
        }
      }, false);
      const handleFocus = (0, _useEventCallback.default)((event) => {
        if (!buttonRef.current) {
          buttonRef.current = event.currentTarget;
        }
        if ((0, _isFocusVisible.default)(event.target)) {
          setFocusVisible(true);
          if (onFocusVisible) {
            onFocusVisible(event);
          }
        }
        if (onFocus) {
          onFocus(event);
        }
      });
      const isNonNativeButton = () => {
        const button = buttonRef.current;
        return component && component !== "button" && !(button.tagName === "A" && button.href);
      };
      const handleKeyDown = (0, _useEventCallback.default)((event) => {
        if (focusRipple && !event.repeat && focusVisible && event.key === " ") {
          ripple.stop(event, () => {
            ripple.start(event);
          });
        }
        if (event.target === event.currentTarget && isNonNativeButton() && event.key === " ") {
          event.preventDefault();
        }
        if (onKeyDown) {
          onKeyDown(event);
        }
        if (event.target === event.currentTarget && isNonNativeButton() && event.key === "Enter" && !disabled) {
          event.preventDefault();
          if (onClick) {
            onClick(event);
          }
        }
      });
      const handleKeyUp = (0, _useEventCallback.default)((event) => {
        if (focusRipple && event.key === " " && focusVisible && !event.defaultPrevented) {
          ripple.stop(event, () => {
            ripple.pulsate(event);
          });
        }
        if (onKeyUp) {
          onKeyUp(event);
        }
        if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === " " && !event.defaultPrevented) {
          onClick(event);
        }
      });
      let ComponentProp = component;
      if (ComponentProp === "button" && (other.href || other.to)) {
        ComponentProp = LinkComponent;
      }
      const buttonProps = {};
      if (ComponentProp === "button") {
        buttonProps.type = type === void 0 ? "button" : type;
        buttonProps.disabled = disabled;
      } else {
        if (!other.href && !other.to) {
          buttonProps.role = "button";
        }
        if (disabled) {
          buttonProps["aria-disabled"] = disabled;
        }
      }
      const handleRef = (0, _useForkRef.default)(ref, buttonRef);
      const ownerState = {
        ...props,
        centerRipple,
        component,
        disabled,
        disableRipple,
        disableTouchRipple,
        focusRipple,
        tabIndex,
        focusVisible
      };
      const classes = useUtilityClasses(ownerState);
      return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(ButtonBaseRoot, {
        as: ComponentProp,
        className: (0, _clsx.default)(classes.root, className),
        ownerState,
        onBlur: handleBlur,
        onClick,
        onContextMenu: handleContextMenu,
        onFocus: handleFocus,
        onKeyDown: handleKeyDown,
        onKeyUp: handleKeyUp,
        onMouseDown: handleMouseDown,
        onMouseLeave: handleMouseLeave,
        onMouseUp: handleMouseUp,
        onDragLeave: handleDragLeave,
        onTouchEnd: handleTouchEnd,
        onTouchMove: handleTouchMove,
        onTouchStart: handleTouchStart,
        ref: handleRef,
        tabIndex: disabled ? -1 : tabIndex,
        type,
        ...buttonProps,
        ...other,
        children: [children, enableTouchRipple ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(_TouchRipple.default, {
          ref: handleRippleRef,
          center: centerRipple,
          ...TouchRippleProps
        }) : null]
      });
    });
    function useRippleHandler(ripple, rippleAction, eventCallback, skipRippleAction = false) {
      return (0, _useEventCallback.default)((event) => {
        if (eventCallback) {
          eventCallback(event);
        }
        if (!skipRippleAction) {
          ripple[rippleAction](event);
        }
        return true;
      });
    }
    define_process_env_default.NODE_ENV !== "production" ? ButtonBase.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * A ref for imperative actions.
       * It currently only supports `focusVisible()` action.
       */
      action: _refType.default,
      /**
       * If `true`, the ripples are centered.
       * They won't start at the cursor interaction position.
       * @default false
       */
      centerRipple: _propTypes.default.bool,
      /**
       * The content of the component.
       */
      children: _propTypes.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      /**
       * @ignore
       */
      className: _propTypes.default.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: _elementTypeAcceptingRef.default,
      /**
       * If `true`, the component is disabled.
       * @default false
       */
      disabled: _propTypes.default.bool,
      /**
       * If `true`, the ripple effect is disabled.
       *
       * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
       * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
       * @default false
       */
      disableRipple: _propTypes.default.bool,
      /**
       * If `true`, the touch ripple effect is disabled.
       * @default false
       */
      disableTouchRipple: _propTypes.default.bool,
      /**
       * If `true`, the base button will have a keyboard focus ripple.
       * @default false
       */
      focusRipple: _propTypes.default.bool,
      /**
       * This prop can help identify which element has keyboard focus.
       * The class name will be applied when the element gains the focus through keyboard interaction.
       * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
       * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
       * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
       * if needed.
       */
      focusVisibleClassName: _propTypes.default.string,
      /**
       * @ignore
       */
      href: _propTypes.default.any,
      /**
       * The component used to render a link when the `href` prop is provided.
       * @default 'a'
       */
      LinkComponent: _propTypes.default.elementType,
      /**
       * @ignore
       */
      onBlur: _propTypes.default.func,
      /**
       * @ignore
       */
      onClick: _propTypes.default.func,
      /**
       * @ignore
       */
      onContextMenu: _propTypes.default.func,
      /**
       * @ignore
       */
      onDragLeave: _propTypes.default.func,
      /**
       * @ignore
       */
      onFocus: _propTypes.default.func,
      /**
       * Callback fired when the component is focused with a keyboard.
       * We trigger a `onFocus` callback too.
       */
      onFocusVisible: _propTypes.default.func,
      /**
       * @ignore
       */
      onKeyDown: _propTypes.default.func,
      /**
       * @ignore
       */
      onKeyUp: _propTypes.default.func,
      /**
       * @ignore
       */
      onMouseDown: _propTypes.default.func,
      /**
       * @ignore
       */
      onMouseLeave: _propTypes.default.func,
      /**
       * @ignore
       */
      onMouseUp: _propTypes.default.func,
      /**
       * @ignore
       */
      onTouchEnd: _propTypes.default.func,
      /**
       * @ignore
       */
      onTouchMove: _propTypes.default.func,
      /**
       * @ignore
       */
      onTouchStart: _propTypes.default.func,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
      /**
       * @default 0
       */
      tabIndex: _propTypes.default.number,
      /**
       * Props applied to the `TouchRipple` element.
       */
      TouchRippleProps: _propTypes.default.object,
      /**
       * A ref that points to the `TouchRipple` element.
       */
      touchRippleRef: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.shape({
        current: _propTypes.default.shape({
          pulsate: _propTypes.default.func.isRequired,
          start: _propTypes.default.func.isRequired,
          stop: _propTypes.default.func.isRequired
        })
      })]),
      /**
       * @ignore
       */
      type: _propTypes.default.oneOfType([_propTypes.default.oneOf(["button", "reset", "submit"]), _propTypes.default.string])
    } : void 0;
    var _default = exports2.default = ButtonBase;
  }
});

// node_modules/@mui/material/node/ButtonBase/index.js
var require_ButtonBase2 = __commonJS({
  "node_modules/@mui/material/node/ButtonBase/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      buttonBaseClasses: true,
      touchRippleClasses: true
    };
    Object.defineProperty(exports2, "buttonBaseClasses", {
      enumerable: true,
      get: function() {
        return _buttonBaseClasses.default;
      }
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _ButtonBase.default;
      }
    });
    Object.defineProperty(exports2, "touchRippleClasses", {
      enumerable: true,
      get: function() {
        return _touchRippleClasses.default;
      }
    });
    var _ButtonBase = _interopRequireDefault(require_ButtonBase());
    var _buttonBaseClasses = _interopRequireWildcard(require_buttonBaseClasses());
    Object.keys(_buttonBaseClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _buttonBaseClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _buttonBaseClasses[key];
        }
      });
    });
    var _touchRippleClasses = _interopRequireWildcard(require_touchRippleClasses());
    Object.keys(_touchRippleClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _touchRippleClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _touchRippleClasses[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node/internal/switchBaseClasses.js
var require_switchBaseClasses = __commonJS({
  "node_modules/@mui/material/node/internal/switchBaseClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getSwitchBaseUtilityClass = getSwitchBaseUtilityClass;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    function getSwitchBaseUtilityClass(slot) {
      return (0, _generateUtilityClass.default)("PrivateSwitchBase", slot);
    }
    var switchBaseClasses = (0, _generateUtilityClasses.default)("PrivateSwitchBase", ["root", "checked", "disabled", "input", "edgeStart", "edgeEnd"]);
    var _default = exports2.default = switchBaseClasses;
  }
});

// node_modules/@mui/material/node/utils/useSlot.js
var require_useSlot = __commonJS({
  "node_modules/@mui/material/node/utils/useSlot.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = useSlot;
    var _useForkRef = _interopRequireDefault(require_useForkRef2());
    var _appendOwnerState = _interopRequireDefault(require_appendOwnerState2());
    var _resolveComponentProps = _interopRequireDefault(require_resolveComponentProps2());
    var _mergeSlotProps = _interopRequireDefault(require_mergeSlotProps2());
    function useSlot(name, parameters) {
      const {
        className,
        elementType: initialElementType,
        ownerState,
        externalForwardedProps,
        internalForwardedProps,
        shouldForwardComponentProp = false,
        ...useSlotPropsParams
      } = parameters;
      const {
        component: rootComponent,
        slots = {
          [name]: void 0
        },
        slotProps = {
          [name]: void 0
        },
        ...other
      } = externalForwardedProps;
      const elementType = slots[name] || initialElementType;
      const resolvedComponentsProps = (0, _resolveComponentProps.default)(slotProps[name], ownerState);
      const {
        props: {
          component: slotComponent,
          ...mergedProps
        },
        internalRef
      } = (0, _mergeSlotProps.default)({
        className,
        ...useSlotPropsParams,
        externalForwardedProps: name === "root" ? other : void 0,
        externalSlotProps: resolvedComponentsProps
      });
      const ref = (0, _useForkRef.default)(internalRef, resolvedComponentsProps?.ref, parameters.ref);
      const LeafComponent = name === "root" ? slotComponent || rootComponent : slotComponent;
      const props = (0, _appendOwnerState.default)(elementType, {
        ...name === "root" && !rootComponent && !slots[name] && internalForwardedProps,
        ...name !== "root" && !slots[name] && internalForwardedProps,
        ...mergedProps,
        ...LeafComponent && !shouldForwardComponentProp && {
          as: LeafComponent
        },
        ...LeafComponent && shouldForwardComponentProp && {
          component: LeafComponent
        },
        ref
      }, ownerState);
      return [elementType, props];
    }
  }
});

// node_modules/@mui/material/node/internal/SwitchBase.js
var require_SwitchBase = __commonJS({
  "node_modules/@mui/material/node/internal/SwitchBase.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _refType = _interopRequireDefault(require_refType2());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _capitalize = _interopRequireDefault(require_capitalize3());
    var _rootShouldForwardProp = _interopRequireDefault(require_rootShouldForwardProp());
    var _zeroStyled = require_zero_styled2();
    var _useControlled = _interopRequireDefault(require_useControlled3());
    var _useFormControl = _interopRequireDefault(require_useFormControl());
    var _ButtonBase = _interopRequireDefault(require_ButtonBase2());
    var _switchBaseClasses = require_switchBaseClasses();
    var _useSlot = _interopRequireDefault(require_useSlot());
    var _jsxRuntime = require_jsx_runtime();
    var useUtilityClasses = (ownerState) => {
      const {
        classes,
        checked,
        disabled,
        edge
      } = ownerState;
      const slots = {
        root: ["root", checked && "checked", disabled && "disabled", edge && `edge${(0, _capitalize.default)(edge)}`],
        input: ["input"]
      };
      return (0, _composeClasses.default)(slots, _switchBaseClasses.getSwitchBaseUtilityClass, classes);
    };
    var SwitchBaseRoot = (0, _zeroStyled.styled)(_ButtonBase.default)({
      padding: 9,
      borderRadius: "50%",
      variants: [{
        props: {
          edge: "start",
          size: "small"
        },
        style: {
          marginLeft: -3
        }
      }, {
        props: ({
          edge,
          ownerState
        }) => edge === "start" && ownerState.size !== "small",
        style: {
          marginLeft: -12
        }
      }, {
        props: {
          edge: "end",
          size: "small"
        },
        style: {
          marginRight: -3
        }
      }, {
        props: ({
          edge,
          ownerState
        }) => edge === "end" && ownerState.size !== "small",
        style: {
          marginRight: -12
        }
      }]
    });
    var SwitchBaseInput = (0, _zeroStyled.styled)("input", {
      shouldForwardProp: _rootShouldForwardProp.default
    })({
      cursor: "inherit",
      position: "absolute",
      opacity: 0,
      width: "100%",
      height: "100%",
      top: 0,
      left: 0,
      margin: 0,
      padding: 0,
      zIndex: 1
    });
    var SwitchBase = /* @__PURE__ */ React7.forwardRef(function SwitchBase2(props, ref) {
      const {
        autoFocus,
        checked: checkedProp,
        checkedIcon,
        defaultChecked,
        disabled: disabledProp,
        disableFocusRipple = false,
        edge = false,
        icon,
        id,
        inputProps,
        inputRef,
        name,
        onBlur,
        onChange,
        onFocus,
        readOnly,
        required = false,
        tabIndex,
        type,
        value,
        slots = {},
        slotProps = {},
        ...other
      } = props;
      const [checked, setCheckedState] = (0, _useControlled.default)({
        controlled: checkedProp,
        default: Boolean(defaultChecked),
        name: "SwitchBase",
        state: "checked"
      });
      const muiFormControl = (0, _useFormControl.default)();
      const handleFocus = (event) => {
        if (onFocus) {
          onFocus(event);
        }
        if (muiFormControl && muiFormControl.onFocus) {
          muiFormControl.onFocus(event);
        }
      };
      const handleBlur = (event) => {
        if (onBlur) {
          onBlur(event);
        }
        if (muiFormControl && muiFormControl.onBlur) {
          muiFormControl.onBlur(event);
        }
      };
      const handleInputChange = (event) => {
        if (event.nativeEvent.defaultPrevented) {
          return;
        }
        const newChecked = event.target.checked;
        setCheckedState(newChecked);
        if (onChange) {
          onChange(event, newChecked);
        }
      };
      let disabled = disabledProp;
      if (muiFormControl) {
        if (typeof disabled === "undefined") {
          disabled = muiFormControl.disabled;
        }
      }
      const hasLabelFor = type === "checkbox" || type === "radio";
      const ownerState = {
        ...props,
        checked,
        disabled,
        disableFocusRipple,
        edge
      };
      const classes = useUtilityClasses(ownerState);
      const externalForwardedProps = {
        slots,
        slotProps: {
          input: inputProps,
          ...slotProps
        }
      };
      const [RootSlot, rootSlotProps] = (0, _useSlot.default)("root", {
        ref,
        elementType: SwitchBaseRoot,
        className: classes.root,
        shouldForwardComponentProp: true,
        externalForwardedProps: {
          ...externalForwardedProps,
          component: "span",
          ...other
        },
        getSlotProps: (handlers) => ({
          ...handlers,
          onFocus: (event) => {
            handlers.onFocus?.(event);
            handleFocus(event);
          },
          onBlur: (event) => {
            handlers.onBlur?.(event);
            handleBlur(event);
          }
        }),
        ownerState,
        additionalProps: {
          centerRipple: true,
          focusRipple: !disableFocusRipple,
          disabled,
          role: void 0,
          tabIndex: null
        }
      });
      const [InputSlot, inputSlotProps] = (0, _useSlot.default)("input", {
        ref: inputRef,
        elementType: SwitchBaseInput,
        className: classes.input,
        externalForwardedProps,
        getSlotProps: (handlers) => ({
          onChange: (event) => {
            handlers.onChange?.(event);
            handleInputChange(event);
          }
        }),
        ownerState,
        additionalProps: {
          autoFocus,
          checked: checkedProp,
          defaultChecked,
          disabled,
          id: hasLabelFor ? id : void 0,
          name,
          readOnly,
          required,
          tabIndex,
          type,
          ...type === "checkbox" && value === void 0 ? {} : {
            value
          }
        }
      });
      return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(RootSlot, {
        ...rootSlotProps,
        children: [/* @__PURE__ */ (0, _jsxRuntime.jsx)(InputSlot, {
          ...inputSlotProps
        }), checked ? checkedIcon : icon]
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? SwitchBase.propTypes = {
      /**
       * If `true`, the `input` element is focused during the first mount.
       */
      autoFocus: _propTypes.default.bool,
      /**
       * If `true`, the component is checked.
       */
      checked: _propTypes.default.bool,
      /**
       * The icon to display when the component is checked.
       */
      checkedIcon: _propTypes.default.node.isRequired,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      /**
       * @ignore
       */
      className: _propTypes.default.string,
      /**
       * @ignore
       */
      defaultChecked: _propTypes.default.bool,
      /**
       * If `true`, the component is disabled.
       */
      disabled: _propTypes.default.bool,
      /**
       * If `true`, the  keyboard focus ripple is disabled.
       * @default false
       */
      disableFocusRipple: _propTypes.default.bool,
      /**
       * If given, uses a negative margin to counteract the padding on one
       * side (this is often helpful for aligning the left or right
       * side of the icon with content above or below, without ruining the border
       * size and shape).
       * @default false
       */
      edge: _propTypes.default.oneOf(["end", "start", false]),
      /**
       * The icon to display when the component is unchecked.
       */
      icon: _propTypes.default.node.isRequired,
      /**
       * The id of the `input` element.
       */
      id: _propTypes.default.string,
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: _propTypes.default.object,
      /**
       * Pass a ref to the `input` element.
       */
      inputRef: _refType.default,
      /*
       * @ignore
       */
      name: _propTypes.default.string,
      /**
       * @ignore
       */
      onBlur: _propTypes.default.func,
      /**
       * Callback fired when the state is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new checked state by accessing `event.target.checked` (boolean).
       */
      onChange: _propTypes.default.func,
      /**
       * @ignore
       */
      onFocus: _propTypes.default.func,
      /**
       * It prevents the user from changing the value of the field
       * (not from interacting with the field).
       */
      readOnly: _propTypes.default.bool,
      /**
       * If `true`, the `input` element is required.
       */
      required: _propTypes.default.bool,
      /**
       * The props used for each slot inside.
       * @default {}
       */
      slotProps: _propTypes.default.shape({
        input: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
        root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
      }),
      /**
       * The components used for each slot inside.
       * @default {}
       */
      slots: _propTypes.default.shape({
        input: _propTypes.default.elementType,
        root: _propTypes.default.elementType
      }),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.object,
      /**
       * @ignore
       */
      tabIndex: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      /**
       * The input component prop `type`.
       */
      type: _propTypes.default.string.isRequired,
      /**
       * The value of the component.
       */
      value: _propTypes.default.any
    } : void 0;
    var _default = exports2.default = SwitchBase;
  }
});

// node_modules/@mui/material/node/internal/svg-icons/CheckBoxOutlineBlank.js
var require_CheckBoxOutlineBlank = __commonJS({
  "node_modules/@mui/material/node/internal/svg-icons/CheckBoxOutlineBlank.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
    var _jsxRuntime = require_jsx_runtime();
    var _default = exports2.default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
      d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
    }), "CheckBoxOutlineBlank");
  }
});

// node_modules/@mui/material/node/internal/svg-icons/CheckBox.js
var require_CheckBox = __commonJS({
  "node_modules/@mui/material/node/internal/svg-icons/CheckBox.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
    var _jsxRuntime = require_jsx_runtime();
    var _default = exports2.default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
      d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
    }), "CheckBox");
  }
});

// node_modules/@mui/material/node/internal/svg-icons/IndeterminateCheckBox.js
var require_IndeterminateCheckBox = __commonJS({
  "node_modules/@mui/material/node/internal/svg-icons/IndeterminateCheckBox.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
    var _jsxRuntime = require_jsx_runtime();
    var _default = exports2.default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
      d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"
    }), "IndeterminateCheckBox");
  }
});

// node_modules/@mui/material/node/Checkbox/checkboxClasses.js
var require_checkboxClasses = __commonJS({
  "node_modules/@mui/material/node/Checkbox/checkboxClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getCheckboxUtilityClass = getCheckboxUtilityClass;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    function getCheckboxUtilityClass(slot) {
      return (0, _generateUtilityClass.default)("MuiCheckbox", slot);
    }
    var checkboxClasses = (0, _generateUtilityClasses.default)("MuiCheckbox", ["root", "checked", "disabled", "indeterminate", "colorPrimary", "colorSecondary", "sizeSmall", "sizeMedium"]);
    var _default = exports2.default = checkboxClasses;
  }
});

// node_modules/@mui/material/node/utils/createSimplePaletteValueFilter.js
var require_createSimplePaletteValueFilter = __commonJS({
  "node_modules/@mui/material/node/utils/createSimplePaletteValueFilter.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = createSimplePaletteValueFilter;
    function hasCorrectMainProperty(obj) {
      return typeof obj.main === "string";
    }
    function checkSimplePaletteColorValues(obj, additionalPropertiesToCheck = []) {
      if (!hasCorrectMainProperty(obj)) {
        return false;
      }
      for (const value of additionalPropertiesToCheck) {
        if (!obj.hasOwnProperty(value) || typeof obj[value] !== "string") {
          return false;
        }
      }
      return true;
    }
    function createSimplePaletteValueFilter(additionalPropertiesToCheck = []) {
      return ([, value]) => value && checkSimplePaletteColorValues(value, additionalPropertiesToCheck);
    }
  }
});

// node_modules/@mui/material/node/Checkbox/Checkbox.js
var require_Checkbox = __commonJS({
  "node_modules/@mui/material/node/Checkbox/Checkbox.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _clsx = _interopRequireDefault(require_clsx());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _colorManipulator = require_colorManipulator2();
    var _SwitchBase = _interopRequireDefault(require_SwitchBase());
    var _CheckBoxOutlineBlank = _interopRequireDefault(require_CheckBoxOutlineBlank());
    var _CheckBox = _interopRequireDefault(require_CheckBox());
    var _IndeterminateCheckBox = _interopRequireDefault(require_IndeterminateCheckBox());
    var _capitalize = _interopRequireDefault(require_capitalize3());
    var _rootShouldForwardProp = _interopRequireDefault(require_rootShouldForwardProp());
    var _checkboxClasses = _interopRequireWildcard(require_checkboxClasses());
    var _zeroStyled = require_zero_styled2();
    var _memoTheme = _interopRequireDefault(require_memoTheme2());
    var _createSimplePaletteValueFilter = _interopRequireDefault(require_createSimplePaletteValueFilter());
    var _DefaultPropsProvider = require_DefaultPropsProvider4();
    var _utils = require_utils4();
    var _useSlot = _interopRequireDefault(require_useSlot());
    var _jsxRuntime = require_jsx_runtime();
    var useUtilityClasses = (ownerState) => {
      const {
        classes,
        indeterminate,
        color,
        size
      } = ownerState;
      const slots = {
        root: ["root", indeterminate && "indeterminate", `color${(0, _capitalize.default)(color)}`, `size${(0, _capitalize.default)(size)}`]
      };
      const composedClasses = (0, _composeClasses.default)(slots, _checkboxClasses.getCheckboxUtilityClass, classes);
      return {
        ...classes,
        // forward the disabled and checked classes to the SwitchBase
        ...composedClasses
      };
    };
    var CheckboxRoot = (0, _zeroStyled.styled)(_SwitchBase.default, {
      shouldForwardProp: (prop) => (0, _rootShouldForwardProp.default)(prop) || prop === "classes",
      name: "MuiCheckbox",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.indeterminate && styles.indeterminate, styles[`size${(0, _capitalize.default)(ownerState.size)}`], ownerState.color !== "default" && styles[`color${(0, _capitalize.default)(ownerState.color)}`]];
      }
    })((0, _memoTheme.default)(({
      theme: theme2
    }) => ({
      color: (theme2.vars || theme2).palette.text.secondary,
      variants: [{
        props: {
          color: "default",
          disableRipple: false
        },
        style: {
          "&:hover": {
            backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.action.activeChannel} / ${theme2.vars.palette.action.hoverOpacity})` : (0, _colorManipulator.alpha)(theme2.palette.action.active, theme2.palette.action.hoverOpacity)
          }
        }
      }, ...Object.entries(theme2.palette).filter((0, _createSimplePaletteValueFilter.default)()).map(([color]) => ({
        props: {
          color,
          disableRipple: false
        },
        style: {
          "&:hover": {
            backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette[color].mainChannel} / ${theme2.vars.palette.action.hoverOpacity})` : (0, _colorManipulator.alpha)(theme2.palette[color].main, theme2.palette.action.hoverOpacity)
          }
        }
      })), ...Object.entries(theme2.palette).filter((0, _createSimplePaletteValueFilter.default)()).map(([color]) => ({
        props: {
          color
        },
        style: {
          [`&.${_checkboxClasses.default.checked}, &.${_checkboxClasses.default.indeterminate}`]: {
            color: (theme2.vars || theme2).palette[color].main
          },
          [`&.${_checkboxClasses.default.disabled}`]: {
            color: (theme2.vars || theme2).palette.action.disabled
          }
        }
      })), {
        // Should be last to override other colors
        props: {
          disableRipple: false
        },
        style: {
          // Reset on touch devices, it doesn't add specificity
          "&:hover": {
            "@media (hover: none)": {
              backgroundColor: "transparent"
            }
          }
        }
      }]
    })));
    var defaultCheckedIcon = /* @__PURE__ */ (0, _jsxRuntime.jsx)(_CheckBox.default, {});
    var defaultIcon = /* @__PURE__ */ (0, _jsxRuntime.jsx)(_CheckBoxOutlineBlank.default, {});
    var defaultIndeterminateIcon = /* @__PURE__ */ (0, _jsxRuntime.jsx)(_IndeterminateCheckBox.default, {});
    var Checkbox = /* @__PURE__ */ React7.forwardRef(function Checkbox2(inProps, ref) {
      const props = (0, _DefaultPropsProvider.useDefaultProps)({
        props: inProps,
        name: "MuiCheckbox"
      });
      const {
        checkedIcon = defaultCheckedIcon,
        color = "primary",
        icon: iconProp = defaultIcon,
        indeterminate = false,
        indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,
        inputProps,
        size = "medium",
        disableRipple = false,
        className,
        slots = {},
        slotProps = {},
        ...other
      } = props;
      const icon = indeterminate ? indeterminateIconProp : iconProp;
      const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;
      const ownerState = {
        ...props,
        disableRipple,
        color,
        indeterminate,
        size
      };
      const classes = useUtilityClasses(ownerState);
      const externalInputProps = slotProps.input ?? inputProps;
      const [RootSlot, rootSlotProps] = (0, _useSlot.default)("root", {
        ref,
        elementType: CheckboxRoot,
        className: (0, _clsx.default)(classes.root, className),
        shouldForwardComponentProp: true,
        externalForwardedProps: {
          slots,
          slotProps,
          ...other
        },
        ownerState,
        additionalProps: {
          type: "checkbox",
          icon: /* @__PURE__ */ React7.cloneElement(icon, {
            fontSize: icon.props.fontSize ?? size
          }),
          checkedIcon: /* @__PURE__ */ React7.cloneElement(indeterminateIcon, {
            fontSize: indeterminateIcon.props.fontSize ?? size
          }),
          disableRipple,
          slots,
          slotProps: {
            input: (0, _utils.mergeSlotProps)(typeof externalInputProps === "function" ? externalInputProps(ownerState) : externalInputProps, {
              "data-indeterminate": indeterminate
            })
          }
        }
      });
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(RootSlot, {
        ...rootSlotProps,
        classes
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? Checkbox.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * If `true`, the component is checked.
       */
      checked: _propTypes.default.bool,
      /**
       * The icon to display when the component is checked.
       * @default <CheckBoxIcon />
       */
      checkedIcon: _propTypes.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      /**
       * @ignore
       */
      className: _propTypes.default.string,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
       * @default 'primary'
       */
      color: _propTypes.default.oneOfType([_propTypes.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), _propTypes.default.string]),
      /**
       * The default checked state. Use when the component is not controlled.
       */
      defaultChecked: _propTypes.default.bool,
      /**
       * If `true`, the component is disabled.
       * @default false
       */
      disabled: _propTypes.default.bool,
      /**
       * If `true`, the ripple effect is disabled.
       * @default false
       */
      disableRipple: _propTypes.default.bool,
      /**
       * The icon to display when the component is unchecked.
       * @default <CheckBoxOutlineBlankIcon />
       */
      icon: _propTypes.default.node,
      /**
       * The id of the `input` element.
       */
      id: _propTypes.default.string,
      /**
       * If `true`, the component appears indeterminate.
       * This does not set the native input element to indeterminate due
       * to inconsistent behavior across browsers.
       * However, we set a `data-indeterminate` attribute on the `input`.
       * @default false
       */
      indeterminate: _propTypes.default.bool,
      /**
       * The icon to display when the component is indeterminate.
       * @default <IndeterminateCheckBoxIcon />
       */
      indeterminateIcon: _propTypes.default.node,
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       * @deprecated Use `slotProps.input` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       */
      inputProps: _propTypes.default.object,
      /**
       * Callback fired when the state is changed.
       *
       * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
       * You can pull out the new checked state by accessing `event.target.checked` (boolean).
       */
      onChange: _propTypes.default.func,
      /**
       * If `true`, the `input` element is required.
       * @default false
       */
      required: _propTypes.default.bool,
      /**
       * The size of the component.
       * `small` is equivalent to the dense checkbox styling.
       * @default 'medium'
       */
      size: _propTypes.default.oneOfType([_propTypes.default.oneOf(["medium", "small"]), _propTypes.default.string]),
      /**
       * The props used for each slot inside.
       * @default {}
       */
      slotProps: _propTypes.default.shape({
        input: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
        root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
      }),
      /**
       * The components used for each slot inside.
       * @default {}
       */
      slots: _propTypes.default.shape({
        input: _propTypes.default.elementType,
        root: _propTypes.default.elementType
      }),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
      /**
       * The value of the component. The DOM API casts this to a string.
       * The browser uses "on" as the default value.
       */
      value: _propTypes.default.any
    } : void 0;
    var _default = exports2.default = Checkbox;
  }
});

// node_modules/@mui/material/node/Checkbox/index.js
var require_Checkbox2 = __commonJS({
  "node_modules/@mui/material/node/Checkbox/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      checkboxClasses: true
    };
    Object.defineProperty(exports2, "checkboxClasses", {
      enumerable: true,
      get: function() {
        return _checkboxClasses.default;
      }
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _Checkbox.default;
      }
    });
    var _Checkbox = _interopRequireDefault(require_Checkbox());
    var _checkboxClasses = _interopRequireWildcard(require_checkboxClasses());
    Object.keys(_checkboxClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _checkboxClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _checkboxClasses[key];
        }
      });
    });
  }
});

// node_modules/@mui/x-tree-view/node/TreeItem/useTreeItemState.js
var require_useTreeItemState = __commonJS({
  "node_modules/@mui/x-tree-view/node/TreeItem/useTreeItemState.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.useTreeItemState = useTreeItemState;
    var _TreeViewProvider = require_TreeViewProvider2();
    var _useTreeViewLabel = require_useTreeViewLabel2();
    var _plugins = require_plugins();
    function useTreeItemState(itemId) {
      const {
        instance,
        items: {
          onItemClick
        },
        selection: {
          multiSelect,
          checkboxSelection,
          disableSelection
        },
        expansion: {
          expansionTrigger
        }
      } = (0, _TreeViewProvider.useTreeViewContext)();
      const expandable = instance.isItemExpandable(itemId);
      const expanded = instance.isItemExpanded(itemId);
      const focused = instance.isItemFocused(itemId);
      const selected = instance.isItemSelected(itemId);
      const disabled = instance.isItemDisabled(itemId);
      const editing = instance?.isItemBeingEdited ? instance?.isItemBeingEdited(itemId) : false;
      const editable = instance.isItemEditable ? instance.isItemEditable(itemId) : false;
      const handleExpansion = (event) => {
        if (!disabled) {
          if (!focused) {
            instance.focusItem(event, itemId);
          }
          const multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey);
          if (expandable && !(multiple && instance.isItemExpanded(itemId))) {
            instance.toggleItemExpansion(event, itemId);
          }
        }
      };
      const handleSelection = (event) => {
        if (!disabled) {
          if (!focused) {
            instance.focusItem(event, itemId);
          }
          const multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey);
          if (multiple) {
            if (event.shiftKey) {
              instance.expandSelectionRange(event, itemId);
            } else {
              instance.selectItem({
                event,
                itemId,
                keepExistingSelection: true
              });
            }
          } else {
            instance.selectItem({
              event,
              itemId,
              shouldBeSelected: true
            });
          }
        }
      };
      const handleCheckboxSelection = (event) => {
        if (disableSelection || disabled) {
          return;
        }
        const hasShift = event.nativeEvent.shiftKey;
        if (multiSelect && hasShift) {
          instance.expandSelectionRange(event, itemId);
        } else {
          instance.selectItem({
            event,
            itemId,
            keepExistingSelection: multiSelect,
            shouldBeSelected: event.target.checked
          });
        }
      };
      const preventSelection = (event) => {
        if (event.shiftKey || event.ctrlKey || event.metaKey || disabled) {
          event.preventDefault();
        }
      };
      const toggleItemEditing = () => {
        if (!(0, _plugins.hasPlugin)(instance, _useTreeViewLabel.useTreeViewLabel)) {
          return;
        }
        if (instance.isItemEditable(itemId)) {
          if (instance.isItemBeingEdited(itemId)) {
            instance.setEditedItemId(null);
          } else {
            instance.setEditedItemId(itemId);
          }
        }
      };
      const handleSaveItemLabel = (event, label) => {
        if (!(0, _plugins.hasPlugin)(instance, _useTreeViewLabel.useTreeViewLabel)) {
          return;
        }
        if (instance.isItemBeingEditedRef(itemId)) {
          instance.updateItemLabel(itemId, label);
          toggleItemEditing();
          instance.focusItem(event, itemId);
        }
      };
      const handleCancelItemLabelEditing = (event) => {
        if (!(0, _plugins.hasPlugin)(instance, _useTreeViewLabel.useTreeViewLabel)) {
          return;
        }
        if (instance.isItemBeingEditedRef(itemId)) {
          toggleItemEditing();
          instance.focusItem(event, itemId);
        }
      };
      return {
        disabled,
        expanded,
        selected,
        focused,
        editable,
        editing,
        disableSelection,
        checkboxSelection,
        handleExpansion,
        handleSelection,
        handleCheckboxSelection,
        handleContentClick: onItemClick,
        preventSelection,
        expansionTrigger,
        toggleItemEditing,
        handleSaveItemLabel,
        handleCancelItemLabelEditing
      };
    }
  }
});

// node_modules/@mui/system/useThemeWithoutDefault/useThemeWithoutDefault.js
var require_useThemeWithoutDefault3 = __commonJS({
  "node_modules/@mui/system/useThemeWithoutDefault/useThemeWithoutDefault.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _styledEngine = require_styled_engine();
    function isObjectEmpty(obj) {
      return Object.keys(obj).length === 0;
    }
    function useTheme3(defaultTheme = null) {
      const contextTheme = React7.useContext(_styledEngine.ThemeContext);
      return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme : contextTheme;
    }
    var _default = exports2.default = useTheme3;
  }
});

// node_modules/@mui/system/useThemeWithoutDefault/index.js
var require_useThemeWithoutDefault4 = __commonJS({
  "node_modules/@mui/system/useThemeWithoutDefault/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _useThemeWithoutDefault.default;
      }
    });
    var _useThemeWithoutDefault = _interopRequireDefault(require_useThemeWithoutDefault3());
  }
});

// node_modules/@mui/system/useTheme/useTheme.js
var require_useTheme6 = __commonJS({
  "node_modules/@mui/system/useTheme/useTheme.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.systemDefaultTheme = exports2.default = void 0;
    var _createTheme = _interopRequireDefault(require_createTheme5());
    var _useThemeWithoutDefault = _interopRequireDefault(require_useThemeWithoutDefault4());
    var systemDefaultTheme = exports2.systemDefaultTheme = (0, _createTheme.default)();
    function useTheme3(defaultTheme = systemDefaultTheme) {
      return (0, _useThemeWithoutDefault.default)(defaultTheme);
    }
    var _default = exports2.default = useTheme3;
  }
});

// node_modules/@mui/system/useTheme/index.js
var require_useTheme7 = __commonJS({
  "node_modules/@mui/system/useTheme/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _useTheme.default;
      }
    });
    var _useTheme = _interopRequireWildcard(require_useTheme6());
    Object.keys(_useTheme).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _useTheme[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _useTheme[key];
        }
      });
    });
  }
});

// node_modules/@mui/system/GlobalStyles/GlobalStyles.js
var require_GlobalStyles9 = __commonJS({
  "node_modules/@mui/system/GlobalStyles/GlobalStyles.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _styledEngine = require_styled_engine();
    var _useTheme = _interopRequireDefault(require_useTheme7());
    var _jsxRuntime = require_jsx_runtime();
    function GlobalStyles({
      styles,
      themeId,
      defaultTheme = {}
    }) {
      const upperTheme = (0, _useTheme.default)(defaultTheme);
      const globalStyles = typeof styles === "function" ? styles(themeId ? upperTheme[themeId] || upperTheme : upperTheme) : styles;
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_styledEngine.GlobalStyles, {
        styles: globalStyles
      });
    }
    define_process_env_default.NODE_ENV !== "production" ? GlobalStyles.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * @ignore
       */
      defaultTheme: _propTypes.default.object,
      /**
       * @ignore
       */
      styles: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.func, _propTypes.default.number, _propTypes.default.object, _propTypes.default.string, _propTypes.default.bool]),
      /**
       * @ignore
       */
      themeId: _propTypes.default.string
    } : void 0;
    var _default = exports2.default = GlobalStyles;
  }
});

// node_modules/@mui/system/GlobalStyles/index.js
var require_GlobalStyles10 = __commonJS({
  "node_modules/@mui/system/GlobalStyles/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _GlobalStyles.default;
      }
    });
    var _GlobalStyles = _interopRequireWildcard(require_GlobalStyles9());
    Object.keys(_GlobalStyles).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _GlobalStyles[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _GlobalStyles[key];
        }
      });
    });
  }
});

// node_modules/@mui/system/display/display.js
var require_display3 = __commonJS({
  "node_modules/@mui/system/display/display.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.whiteSpace = exports2.visibility = exports2.textOverflow = exports2.overflow = exports2.displayRaw = exports2.displayPrint = exports2.default = void 0;
    var _style = _interopRequireDefault(require_style4());
    var _compose = _interopRequireDefault(require_compose4());
    var displayPrint = exports2.displayPrint = (0, _style.default)({
      prop: "displayPrint",
      cssProperty: false,
      transform: (value) => ({
        "@media print": {
          display: value
        }
      })
    });
    var displayRaw = exports2.displayRaw = (0, _style.default)({
      prop: "display"
    });
    var overflow = exports2.overflow = (0, _style.default)({
      prop: "overflow"
    });
    var textOverflow = exports2.textOverflow = (0, _style.default)({
      prop: "textOverflow"
    });
    var visibility = exports2.visibility = (0, _style.default)({
      prop: "visibility"
    });
    var whiteSpace = exports2.whiteSpace = (0, _style.default)({
      prop: "whiteSpace"
    });
    var _default = exports2.default = (0, _compose.default)(displayPrint, displayRaw, overflow, textOverflow, visibility, whiteSpace);
  }
});

// node_modules/@mui/system/display/index.js
var require_display4 = __commonJS({
  "node_modules/@mui/system/display/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _display.default;
      }
    });
    var _display = _interopRequireWildcard(require_display3());
    Object.keys(_display).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _display[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _display[key];
        }
      });
    });
  }
});

// node_modules/@mui/system/flexbox/flexbox.js
var require_flexbox3 = __commonJS({
  "node_modules/@mui/system/flexbox/flexbox.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.order = exports2.justifySelf = exports2.justifyItems = exports2.justifyContent = exports2.flexWrap = exports2.flexShrink = exports2.flexGrow = exports2.flexDirection = exports2.flexBasis = exports2.flex = exports2.default = exports2.alignSelf = exports2.alignItems = exports2.alignContent = void 0;
    var _style = _interopRequireDefault(require_style4());
    var _compose = _interopRequireDefault(require_compose4());
    var flexBasis = exports2.flexBasis = (0, _style.default)({
      prop: "flexBasis"
    });
    var flexDirection = exports2.flexDirection = (0, _style.default)({
      prop: "flexDirection"
    });
    var flexWrap = exports2.flexWrap = (0, _style.default)({
      prop: "flexWrap"
    });
    var justifyContent = exports2.justifyContent = (0, _style.default)({
      prop: "justifyContent"
    });
    var alignItems = exports2.alignItems = (0, _style.default)({
      prop: "alignItems"
    });
    var alignContent = exports2.alignContent = (0, _style.default)({
      prop: "alignContent"
    });
    var order = exports2.order = (0, _style.default)({
      prop: "order"
    });
    var flex = exports2.flex = (0, _style.default)({
      prop: "flex"
    });
    var flexGrow = exports2.flexGrow = (0, _style.default)({
      prop: "flexGrow"
    });
    var flexShrink = exports2.flexShrink = (0, _style.default)({
      prop: "flexShrink"
    });
    var alignSelf = exports2.alignSelf = (0, _style.default)({
      prop: "alignSelf"
    });
    var justifyItems = exports2.justifyItems = (0, _style.default)({
      prop: "justifyItems"
    });
    var justifySelf = exports2.justifySelf = (0, _style.default)({
      prop: "justifySelf"
    });
    var flexbox = (0, _compose.default)(flexBasis, flexDirection, flexWrap, justifyContent, alignItems, alignContent, order, flex, flexGrow, flexShrink, alignSelf, justifyItems, justifySelf);
    var _default = exports2.default = flexbox;
  }
});

// node_modules/@mui/system/flexbox/index.js
var require_flexbox4 = __commonJS({
  "node_modules/@mui/system/flexbox/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _flexbox.default;
      }
    });
    var _flexbox = _interopRequireWildcard(require_flexbox3());
    Object.keys(_flexbox).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _flexbox[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _flexbox[key];
        }
      });
    });
  }
});

// node_modules/@mui/system/positions/positions.js
var require_positions3 = __commonJS({
  "node_modules/@mui/system/positions/positions.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.zIndex = exports2.top = exports2.right = exports2.position = exports2.left = exports2.default = exports2.bottom = void 0;
    var _style = _interopRequireDefault(require_style4());
    var _compose = _interopRequireDefault(require_compose4());
    var position2 = exports2.position = (0, _style.default)({
      prop: "position"
    });
    var zIndex = exports2.zIndex = (0, _style.default)({
      prop: "zIndex",
      themeKey: "zIndex"
    });
    var top = exports2.top = (0, _style.default)({
      prop: "top"
    });
    var right = exports2.right = (0, _style.default)({
      prop: "right"
    });
    var bottom = exports2.bottom = (0, _style.default)({
      prop: "bottom"
    });
    var left = exports2.left = (0, _style.default)({
      prop: "left"
    });
    var _default = exports2.default = (0, _compose.default)(position2, zIndex, top, right, bottom, left);
  }
});

// node_modules/@mui/system/positions/index.js
var require_positions4 = __commonJS({
  "node_modules/@mui/system/positions/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _positions.default;
      }
    });
    var _positions = _interopRequireWildcard(require_positions3());
    Object.keys(_positions).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _positions[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _positions[key];
        }
      });
    });
  }
});

// node_modules/@mui/system/shadows/shadows.js
var require_shadows4 = __commonJS({
  "node_modules/@mui/system/shadows/shadows.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _style = _interopRequireDefault(require_style4());
    var boxShadow = (0, _style.default)({
      prop: "boxShadow",
      themeKey: "shadows"
    });
    var _default = exports2.default = boxShadow;
  }
});

// node_modules/@mui/system/shadows/index.js
var require_shadows5 = __commonJS({
  "node_modules/@mui/system/shadows/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _shadows.default;
      }
    });
    var _shadows = _interopRequireDefault(require_shadows4());
  }
});

// node_modules/@mui/system/typography/typography.js
var require_typography3 = __commonJS({
  "node_modules/@mui/system/typography/typography.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.typographyVariant = exports2.textTransform = exports2.textAlign = exports2.lineHeight = exports2.letterSpacing = exports2.fontWeight = exports2.fontStyle = exports2.fontSize = exports2.fontFamily = exports2.default = void 0;
    var _style = _interopRequireDefault(require_style4());
    var _compose = _interopRequireDefault(require_compose4());
    var fontFamily = exports2.fontFamily = (0, _style.default)({
      prop: "fontFamily",
      themeKey: "typography"
    });
    var fontSize = exports2.fontSize = (0, _style.default)({
      prop: "fontSize",
      themeKey: "typography"
    });
    var fontStyle = exports2.fontStyle = (0, _style.default)({
      prop: "fontStyle",
      themeKey: "typography"
    });
    var fontWeight = exports2.fontWeight = (0, _style.default)({
      prop: "fontWeight",
      themeKey: "typography"
    });
    var letterSpacing = exports2.letterSpacing = (0, _style.default)({
      prop: "letterSpacing"
    });
    var textTransform = exports2.textTransform = (0, _style.default)({
      prop: "textTransform"
    });
    var lineHeight = exports2.lineHeight = (0, _style.default)({
      prop: "lineHeight"
    });
    var textAlign = exports2.textAlign = (0, _style.default)({
      prop: "textAlign"
    });
    var typographyVariant = exports2.typographyVariant = (0, _style.default)({
      prop: "typography",
      cssProperty: false,
      themeKey: "typography"
    });
    var typography = (0, _compose.default)(typographyVariant, fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, lineHeight, textAlign, textTransform);
    var _default = exports2.default = typography;
  }
});

// node_modules/@mui/system/typography/index.js
var require_typography4 = __commonJS({
  "node_modules/@mui/system/typography/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _typography.default;
      }
    });
    var _typography = _interopRequireWildcard(require_typography3());
    Object.keys(_typography).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _typography[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _typography[key];
        }
      });
    });
  }
});

// node_modules/@mui/system/getThemeValue/getThemeValue.js
var require_getThemeValue3 = __commonJS({
  "node_modules/@mui/system/getThemeValue/getThemeValue.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.styleFunctionMapping = exports2.propToStyleFunction = exports2.default = void 0;
    var _borders = _interopRequireDefault(require_borders4());
    var _display = _interopRequireDefault(require_display4());
    var _flexbox = _interopRequireDefault(require_flexbox4());
    var _cssGrid = _interopRequireDefault(require_cssGrid4());
    var _positions = _interopRequireDefault(require_positions4());
    var _palette = _interopRequireDefault(require_palette4());
    var _shadows = _interopRequireDefault(require_shadows5());
    var _sizing = _interopRequireDefault(require_sizing4());
    var _spacing = _interopRequireDefault(require_spacing4());
    var _typography = _interopRequireDefault(require_typography4());
    var filterPropsMapping = {
      borders: _borders.default.filterProps,
      display: _display.default.filterProps,
      flexbox: _flexbox.default.filterProps,
      grid: _cssGrid.default.filterProps,
      positions: _positions.default.filterProps,
      palette: _palette.default.filterProps,
      shadows: _shadows.default.filterProps,
      sizing: _sizing.default.filterProps,
      spacing: _spacing.default.filterProps,
      typography: _typography.default.filterProps
    };
    var styleFunctionMapping = exports2.styleFunctionMapping = {
      borders: _borders.default,
      display: _display.default,
      flexbox: _flexbox.default,
      grid: _cssGrid.default,
      positions: _positions.default,
      palette: _palette.default,
      shadows: _shadows.default,
      sizing: _sizing.default,
      spacing: _spacing.default,
      typography: _typography.default
    };
    var propToStyleFunction = exports2.propToStyleFunction = Object.keys(filterPropsMapping).reduce((acc, styleFnName) => {
      filterPropsMapping[styleFnName].forEach((propName) => {
        acc[propName] = styleFunctionMapping[styleFnName];
      });
      return acc;
    }, {});
    function getThemeValue(prop, value, theme2) {
      const inputProps = {
        [prop]: value,
        theme: theme2
      };
      const styleFunction = propToStyleFunction[prop];
      return styleFunction ? styleFunction(inputProps) : {
        [prop]: value
      };
    }
    var _default = exports2.default = getThemeValue;
  }
});

// node_modules/@mui/system/getThemeValue/index.js
var require_getThemeValue4 = __commonJS({
  "node_modules/@mui/system/getThemeValue/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _getThemeValue.default;
      }
    });
    var _getThemeValue = _interopRequireWildcard(require_getThemeValue3());
    Object.keys(_getThemeValue).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _getThemeValue[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _getThemeValue[key];
        }
      });
    });
  }
});

// node_modules/@mui/system/node_modules/@mui/utils/ClassNameGenerator/ClassNameGenerator.js
var require_ClassNameGenerator3 = __commonJS({
  "node_modules/@mui/system/node_modules/@mui/utils/ClassNameGenerator/ClassNameGenerator.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var defaultGenerator = (componentName) => componentName;
    var createClassNameGenerator = () => {
      let generate = defaultGenerator;
      return {
        configure(generator) {
          generate = generator;
        },
        generate(componentName) {
          return generate(componentName);
        },
        reset() {
          generate = defaultGenerator;
        }
      };
    };
    var ClassNameGenerator = createClassNameGenerator();
    var _default = exports2.default = ClassNameGenerator;
  }
});

// node_modules/@mui/system/node_modules/@mui/utils/ClassNameGenerator/index.js
var require_ClassNameGenerator4 = __commonJS({
  "node_modules/@mui/system/node_modules/@mui/utils/ClassNameGenerator/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _ClassNameGenerator.default;
      }
    });
    var _ClassNameGenerator = _interopRequireDefault(require_ClassNameGenerator3());
  }
});

// node_modules/@mui/system/createBox/createBox.js
var require_createBox3 = __commonJS({
  "node_modules/@mui/system/createBox/createBox.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = createBox;
    var React7 = _interopRequireWildcard(require_react());
    var _clsx = _interopRequireDefault(require_clsx());
    var _styledEngine = _interopRequireDefault(require_styled_engine());
    var _styleFunctionSx = _interopRequireWildcard(require_styleFunctionSx4());
    var _useTheme = _interopRequireDefault(require_useTheme7());
    var _jsxRuntime = require_jsx_runtime();
    function createBox(options = {}) {
      const {
        themeId,
        defaultTheme,
        defaultClassName = "MuiBox-root",
        generateClassName
      } = options;
      const BoxRoot = (0, _styledEngine.default)("div", {
        shouldForwardProp: (prop) => prop !== "theme" && prop !== "sx" && prop !== "as"
      })(_styleFunctionSx.default);
      const Box2 = /* @__PURE__ */ React7.forwardRef(function Box3(inProps, ref) {
        const theme2 = (0, _useTheme.default)(defaultTheme);
        const {
          className,
          component = "div",
          ...other
        } = (0, _styleFunctionSx.extendSxProp)(inProps);
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(BoxRoot, {
          as: component,
          ref,
          className: (0, _clsx.default)(className, generateClassName ? generateClassName(defaultClassName) : defaultClassName),
          theme: themeId ? theme2[themeId] || theme2 : theme2,
          ...other
        });
      });
      return Box2;
    }
  }
});

// node_modules/@mui/system/createBox/index.js
var require_createBox4 = __commonJS({
  "node_modules/@mui/system/createBox/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _createBox.default;
      }
    });
    var _createBox = _interopRequireDefault(require_createBox3());
  }
});

// node_modules/@mui/system/node_modules/@mui/utils/generateUtilityClass/generateUtilityClass.js
var require_generateUtilityClass3 = __commonJS({
  "node_modules/@mui/system/node_modules/@mui/utils/generateUtilityClass/generateUtilityClass.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = generateUtilityClass;
    exports2.globalStateClasses = void 0;
    exports2.isGlobalState = isGlobalState;
    var _ClassNameGenerator = _interopRequireDefault(require_ClassNameGenerator4());
    var globalStateClasses = exports2.globalStateClasses = {
      active: "active",
      checked: "checked",
      completed: "completed",
      disabled: "disabled",
      error: "error",
      expanded: "expanded",
      focused: "focused",
      focusVisible: "focusVisible",
      open: "open",
      readOnly: "readOnly",
      required: "required",
      selected: "selected"
    };
    function generateUtilityClass(componentName, slot, globalStatePrefix = "Mui") {
      const globalStateClass = globalStateClasses[slot];
      return globalStateClass ? `${globalStatePrefix}-${globalStateClass}` : `${_ClassNameGenerator.default.generate(componentName)}-${slot}`;
    }
    function isGlobalState(slot) {
      return globalStateClasses[slot] !== void 0;
    }
  }
});

// node_modules/@mui/system/node_modules/@mui/utils/generateUtilityClass/index.js
var require_generateUtilityClass4 = __commonJS({
  "node_modules/@mui/system/node_modules/@mui/utils/generateUtilityClass/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _generateUtilityClass.default;
      }
    });
    var _generateUtilityClass = _interopRequireWildcard(require_generateUtilityClass3());
    Object.keys(_generateUtilityClass).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _generateUtilityClass[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _generateUtilityClass[key];
        }
      });
    });
  }
});

// node_modules/@mui/system/node_modules/@mui/utils/generateUtilityClasses/generateUtilityClasses.js
var require_generateUtilityClasses3 = __commonJS({
  "node_modules/@mui/system/node_modules/@mui/utils/generateUtilityClasses/generateUtilityClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = generateUtilityClasses;
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass4());
    function generateUtilityClasses(componentName, slots, globalStatePrefix = "Mui") {
      const result = {};
      slots.forEach((slot) => {
        result[slot] = (0, _generateUtilityClass.default)(componentName, slot, globalStatePrefix);
      });
      return result;
    }
  }
});

// node_modules/@mui/system/node_modules/@mui/utils/generateUtilityClasses/index.js
var require_generateUtilityClasses4 = __commonJS({
  "node_modules/@mui/system/node_modules/@mui/utils/generateUtilityClasses/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _generateUtilityClasses.default;
      }
    });
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
  }
});

// node_modules/@mui/system/Box/boxClasses.js
var require_boxClasses3 = __commonJS({
  "node_modules/@mui/system/Box/boxClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses4());
    var boxClasses = (0, _generateUtilityClasses.default)("MuiBox", ["root"]);
    var _default = exports2.default = boxClasses;
  }
});

// node_modules/@mui/system/Box/Box.js
var require_Box5 = __commonJS({
  "node_modules/@mui/system/Box/Box.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _ClassNameGenerator = _interopRequireDefault(require_ClassNameGenerator4());
    var _createBox = _interopRequireDefault(require_createBox4());
    var _boxClasses = _interopRequireDefault(require_boxClasses3());
    var Box2 = (0, _createBox.default)({
      defaultClassName: _boxClasses.default.root,
      generateClassName: _ClassNameGenerator.default.generate
    });
    define_process_env_default.NODE_ENV !== "production" ? Box2.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * @ignore
       */
      children: _propTypes.default.node,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: _propTypes.default.elementType,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
    } : void 0;
    var _default = exports2.default = Box2;
  }
});

// node_modules/@mui/system/Box/index.js
var require_Box6 = __commonJS({
  "node_modules/@mui/system/Box/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      boxClasses: true
    };
    Object.defineProperty(exports2, "boxClasses", {
      enumerable: true,
      get: function() {
        return _boxClasses.default;
      }
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _Box.default;
      }
    });
    var _Box = _interopRequireDefault(require_Box5());
    var _boxClasses = _interopRequireWildcard(require_boxClasses3());
    Object.keys(_boxClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _boxClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _boxClasses[key];
        }
      });
    });
  }
});

// node_modules/@mui/system/styled/styled.js
var require_styled4 = __commonJS({
  "node_modules/@mui/system/styled/styled.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _createStyled = _interopRequireDefault(require_createStyled4());
    var styled = (0, _createStyled.default)();
    var _default = exports2.default = styled;
  }
});

// node_modules/@mui/system/styled/index.js
var require_styled5 = __commonJS({
  "node_modules/@mui/system/styled/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _styled.default;
      }
    });
    var _styled = _interopRequireDefault(require_styled4());
  }
});

// node_modules/@mui/system/node_modules/@mui/utils/resolveProps/resolveProps.js
var require_resolveProps3 = __commonJS({
  "node_modules/@mui/system/node_modules/@mui/utils/resolveProps/resolveProps.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = resolveProps;
    function resolveProps(defaultProps, props) {
      const output = {
        ...props
      };
      for (const key in defaultProps) {
        if (Object.prototype.hasOwnProperty.call(defaultProps, key)) {
          const propName = key;
          if (propName === "components" || propName === "slots") {
            output[propName] = {
              ...defaultProps[propName],
              ...output[propName]
            };
          } else if (propName === "componentsProps" || propName === "slotProps") {
            const defaultSlotProps = defaultProps[propName];
            const slotProps = props[propName];
            if (!slotProps) {
              output[propName] = defaultSlotProps || {};
            } else if (!defaultSlotProps) {
              output[propName] = slotProps;
            } else {
              output[propName] = {
                ...slotProps
              };
              for (const slotKey in defaultSlotProps) {
                if (Object.prototype.hasOwnProperty.call(defaultSlotProps, slotKey)) {
                  const slotPropName = slotKey;
                  output[propName][slotPropName] = resolveProps(defaultSlotProps[slotPropName], slotProps[slotPropName]);
                }
              }
            }
          } else if (output[propName] === void 0) {
            output[propName] = defaultProps[propName];
          }
        }
      }
      return output;
    }
  }
});

// node_modules/@mui/system/node_modules/@mui/utils/resolveProps/index.js
var require_resolveProps4 = __commonJS({
  "node_modules/@mui/system/node_modules/@mui/utils/resolveProps/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _resolveProps.default;
      }
    });
    var _resolveProps = _interopRequireDefault(require_resolveProps3());
  }
});

// node_modules/@mui/system/useThemeProps/getThemeProps.js
var require_getThemeProps2 = __commonJS({
  "node_modules/@mui/system/useThemeProps/getThemeProps.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getThemeProps;
    var _resolveProps = _interopRequireDefault(require_resolveProps4());
    function getThemeProps(params) {
      const {
        theme: theme2,
        name,
        props
      } = params;
      if (!theme2 || !theme2.components || !theme2.components[name] || !theme2.components[name].defaultProps) {
        return props;
      }
      return (0, _resolveProps.default)(theme2.components[name].defaultProps, props);
    }
  }
});

// node_modules/@mui/system/useThemeProps/useThemeProps.js
var require_useThemeProps4 = __commonJS({
  "node_modules/@mui/system/useThemeProps/useThemeProps.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = useThemeProps;
    var _getThemeProps = _interopRequireDefault(require_getThemeProps2());
    var _useTheme = _interopRequireDefault(require_useTheme7());
    function useThemeProps({
      props,
      name,
      defaultTheme,
      themeId
    }) {
      let theme2 = (0, _useTheme.default)(defaultTheme);
      if (themeId) {
        theme2 = theme2[themeId] || theme2;
      }
      return (0, _getThemeProps.default)({
        theme: theme2,
        name,
        props
      });
    }
  }
});

// node_modules/@mui/system/useThemeProps/index.js
var require_useThemeProps5 = __commonJS({
  "node_modules/@mui/system/useThemeProps/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _useThemeProps.default;
      }
    });
    Object.defineProperty(exports2, "getThemeProps", {
      enumerable: true,
      get: function() {
        return _getThemeProps.default;
      }
    });
    var _useThemeProps = _interopRequireDefault(require_useThemeProps4());
    var _getThemeProps = _interopRequireDefault(require_getThemeProps2());
  }
});

// node_modules/@mui/system/node_modules/@mui/utils/useEnhancedEffect/useEnhancedEffect.js
var require_useEnhancedEffect4 = __commonJS({
  "node_modules/@mui/system/node_modules/@mui/utils/useEnhancedEffect/useEnhancedEffect.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var useEnhancedEffect = typeof window !== "undefined" ? React7.useLayoutEffect : React7.useEffect;
    var _default = exports2.default = useEnhancedEffect;
  }
});

// node_modules/@mui/system/node_modules/@mui/utils/useEnhancedEffect/index.js
var require_useEnhancedEffect5 = __commonJS({
  "node_modules/@mui/system/node_modules/@mui/utils/useEnhancedEffect/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _useEnhancedEffect.default;
      }
    });
    var _useEnhancedEffect = _interopRequireDefault(require_useEnhancedEffect4());
  }
});

// node_modules/@mui/system/useMediaQuery/useMediaQuery.js
var require_useMediaQuery3 = __commonJS({
  "node_modules/@mui/system/useMediaQuery/useMediaQuery.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.unstable_createUseMediaQuery = unstable_createUseMediaQuery;
    var React7 = _interopRequireWildcard(require_react());
    var _useEnhancedEffect = _interopRequireDefault(require_useEnhancedEffect5());
    var _useThemeProps = require_useThemeProps5();
    var _useThemeWithoutDefault = _interopRequireDefault(require_useThemeWithoutDefault4());
    function useMediaQueryOld(query, defaultMatches, matchMedia2, ssrMatchMedia, noSsr) {
      const [match2, setMatch] = React7.useState(() => {
        if (noSsr && matchMedia2) {
          return matchMedia2(query).matches;
        }
        if (ssrMatchMedia) {
          return ssrMatchMedia(query).matches;
        }
        return defaultMatches;
      });
      (0, _useEnhancedEffect.default)(() => {
        if (!matchMedia2) {
          return void 0;
        }
        const queryList = matchMedia2(query);
        const updateMatch = () => {
          setMatch(queryList.matches);
        };
        updateMatch();
        queryList.addEventListener("change", updateMatch);
        return () => {
          queryList.removeEventListener("change", updateMatch);
        };
      }, [query, matchMedia2]);
      return match2;
    }
    var safeReact = {
      ...React7
    };
    var maybeReactUseSyncExternalStore = safeReact.useSyncExternalStore;
    function useMediaQueryNew(query, defaultMatches, matchMedia2, ssrMatchMedia, noSsr) {
      const getDefaultSnapshot = React7.useCallback(() => defaultMatches, [defaultMatches]);
      const getServerSnapshot = React7.useMemo(() => {
        if (noSsr && matchMedia2) {
          return () => matchMedia2(query).matches;
        }
        if (ssrMatchMedia !== null) {
          const {
            matches
          } = ssrMatchMedia(query);
          return () => matches;
        }
        return getDefaultSnapshot;
      }, [getDefaultSnapshot, query, ssrMatchMedia, noSsr, matchMedia2]);
      const [getSnapshot, subscribe] = React7.useMemo(() => {
        if (matchMedia2 === null) {
          return [getDefaultSnapshot, () => () => {
          }];
        }
        const mediaQueryList = matchMedia2(query);
        return [() => mediaQueryList.matches, (notify) => {
          mediaQueryList.addEventListener("change", notify);
          return () => {
            mediaQueryList.removeEventListener("change", notify);
          };
        }];
      }, [getDefaultSnapshot, matchMedia2, query]);
      const match2 = maybeReactUseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
      return match2;
    }
    function unstable_createUseMediaQuery(params = {}) {
      const {
        themeId
      } = params;
      return function useMediaQuery2(queryInput, options = {}) {
        let theme2 = (0, _useThemeWithoutDefault.default)();
        if (theme2 && themeId) {
          theme2 = theme2[themeId] || theme2;
        }
        const supportMatchMedia = typeof window !== "undefined" && typeof window.matchMedia !== "undefined";
        const {
          defaultMatches = false,
          matchMedia: matchMedia2 = supportMatchMedia ? window.matchMedia : null,
          ssrMatchMedia = null,
          noSsr = false
        } = (0, _useThemeProps.getThemeProps)({
          name: "MuiUseMediaQuery",
          props: options,
          theme: theme2
        });
        if (define_process_env_default.NODE_ENV !== "production") {
          if (typeof queryInput === "function" && theme2 === null) {
            console.error(["MUI: The `query` argument provided is invalid.", "You are providing a function without a theme in the context.", "One of the parent elements needs to use a ThemeProvider."].join("\n"));
          }
        }
        let query = typeof queryInput === "function" ? queryInput(theme2) : queryInput;
        query = query.replace(/^@media( ?)/m, "");
        const useMediaQueryImplementation = maybeReactUseSyncExternalStore !== void 0 ? useMediaQueryNew : useMediaQueryOld;
        const match2 = useMediaQueryImplementation(query, defaultMatches, matchMedia2, ssrMatchMedia, noSsr);
        if (define_process_env_default.NODE_ENV !== "production") {
          React7.useDebugValue({
            query,
            match: match2
          });
        }
        return match2;
      };
    }
    var useMediaQuery = unstable_createUseMediaQuery();
    var _default = exports2.default = useMediaQuery;
  }
});

// node_modules/@mui/system/useMediaQuery/index.js
var require_useMediaQuery4 = __commonJS({
  "node_modules/@mui/system/useMediaQuery/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _useMediaQuery.default;
      }
    });
    var _useMediaQuery = _interopRequireWildcard(require_useMediaQuery3());
    Object.keys(_useMediaQuery).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _useMediaQuery[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _useMediaQuery[key];
        }
      });
    });
  }
});

// node_modules/@mui/system/node_modules/@mui/utils/clamp/clamp.js
var require_clamp3 = __commonJS({
  "node_modules/@mui/system/node_modules/@mui/utils/clamp/clamp.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    function clamp(val, min = Number.MIN_SAFE_INTEGER, max = Number.MAX_SAFE_INTEGER) {
      return Math.max(min, Math.min(val, max));
    }
    var _default = exports2.default = clamp;
  }
});

// node_modules/@mui/system/node_modules/@mui/utils/clamp/index.js
var require_clamp4 = __commonJS({
  "node_modules/@mui/system/node_modules/@mui/utils/clamp/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _clamp.default;
      }
    });
    var _clamp = _interopRequireDefault(require_clamp3());
  }
});

// node_modules/@mui/system/colorManipulator/colorManipulator.js
var require_colorManipulator3 = __commonJS({
  "node_modules/@mui/system/colorManipulator/colorManipulator.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.alpha = alpha;
    exports2.blend = blend;
    exports2.colorChannel = void 0;
    exports2.darken = darken;
    exports2.decomposeColor = decomposeColor;
    exports2.emphasize = emphasize;
    exports2.getContrastRatio = getContrastRatio;
    exports2.getLuminance = getLuminance;
    exports2.hexToRgb = hexToRgb;
    exports2.hslToRgb = hslToRgb;
    exports2.lighten = lighten;
    exports2.private_safeAlpha = private_safeAlpha;
    exports2.private_safeColorChannel = void 0;
    exports2.private_safeDarken = private_safeDarken;
    exports2.private_safeEmphasize = private_safeEmphasize;
    exports2.private_safeLighten = private_safeLighten;
    exports2.recomposeColor = recomposeColor;
    exports2.rgbToHex = rgbToHex;
    var _formatMuiErrorMessage = _interopRequireDefault(require_formatMuiErrorMessage4());
    var _clamp = _interopRequireDefault(require_clamp4());
    function clampWrapper(value, min = 0, max = 1) {
      if (define_process_env_default.NODE_ENV !== "production") {
        if (value < min || value > max) {
          console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);
        }
      }
      return (0, _clamp.default)(value, min, max);
    }
    function hexToRgb(color) {
      color = color.slice(1);
      const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, "g");
      let colors = color.match(re);
      if (colors && colors[0].length === 1) {
        colors = colors.map((n) => n + n);
      }
      if (define_process_env_default.NODE_ENV !== "production") {
        if (color.length !== color.trim().length) {
          console.error(`MUI: The color: "${color}" is invalid. Make sure the color input doesn't contain leading/trailing space.`);
        }
      }
      return colors ? `rgb${colors.length === 4 ? "a" : ""}(${colors.map((n, index) => {
        return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1e3) / 1e3;
      }).join(", ")})` : "";
    }
    function intToHex(int) {
      const hex = int.toString(16);
      return hex.length === 1 ? `0${hex}` : hex;
    }
    function decomposeColor(color) {
      if (color.type) {
        return color;
      }
      if (color.charAt(0) === "#") {
        return decomposeColor(hexToRgb(color));
      }
      const marker = color.indexOf("(");
      const type = color.substring(0, marker);
      if (!["rgb", "rgba", "hsl", "hsla", "color"].includes(type)) {
        throw new Error(define_process_env_default.NODE_ENV !== "production" ? `MUI: Unsupported \`${color}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : (0, _formatMuiErrorMessage.default)(9, color));
      }
      let values = color.substring(marker + 1, color.length - 1);
      let colorSpace;
      if (type === "color") {
        values = values.split(" ");
        colorSpace = values.shift();
        if (values.length === 4 && values[3].charAt(0) === "/") {
          values[3] = values[3].slice(1);
        }
        if (!["srgb", "display-p3", "a98-rgb", "prophoto-rgb", "rec-2020"].includes(colorSpace)) {
          throw new Error(define_process_env_default.NODE_ENV !== "production" ? `MUI: unsupported \`${colorSpace}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : (0, _formatMuiErrorMessage.default)(10, colorSpace));
        }
      } else {
        values = values.split(",");
      }
      values = values.map((value) => parseFloat(value));
      return {
        type,
        values,
        colorSpace
      };
    }
    var colorChannel = (color) => {
      const decomposedColor = decomposeColor(color);
      return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.includes("hsl") && idx !== 0 ? `${val}%` : val).join(" ");
    };
    exports2.colorChannel = colorChannel;
    var private_safeColorChannel = (color, warning) => {
      try {
        return colorChannel(color);
      } catch (error) {
        if (warning && define_process_env_default.NODE_ENV !== "production") {
          console.warn(warning);
        }
        return color;
      }
    };
    exports2.private_safeColorChannel = private_safeColorChannel;
    function recomposeColor(color) {
      const {
        type,
        colorSpace
      } = color;
      let {
        values
      } = color;
      if (type.includes("rgb")) {
        values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);
      } else if (type.includes("hsl")) {
        values[1] = `${values[1]}%`;
        values[2] = `${values[2]}%`;
      }
      if (type.includes("color")) {
        values = `${colorSpace} ${values.join(" ")}`;
      } else {
        values = `${values.join(", ")}`;
      }
      return `${type}(${values})`;
    }
    function rgbToHex(color) {
      if (color.startsWith("#")) {
        return color;
      }
      const {
        values
      } = decomposeColor(color);
      return `#${values.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join("")}`;
    }
    function hslToRgb(color) {
      color = decomposeColor(color);
      const {
        values
      } = color;
      const h = values[0];
      const s = values[1] / 100;
      const l = values[2] / 100;
      const a = s * Math.min(l, 1 - l);
      const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
      let type = "rgb";
      const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
      if (color.type === "hsla") {
        type += "a";
        rgb.push(values[3]);
      }
      return recomposeColor({
        type,
        values: rgb
      });
    }
    function getLuminance(color) {
      color = decomposeColor(color);
      let rgb = color.type === "hsl" || color.type === "hsla" ? decomposeColor(hslToRgb(color)).values : color.values;
      rgb = rgb.map((val) => {
        if (color.type !== "color") {
          val /= 255;
        }
        return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
      });
      return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
    }
    function getContrastRatio(foreground, background) {
      const lumA = getLuminance(foreground);
      const lumB = getLuminance(background);
      return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
    }
    function alpha(color, value) {
      color = decomposeColor(color);
      value = clampWrapper(value);
      if (color.type === "rgb" || color.type === "hsl") {
        color.type += "a";
      }
      if (color.type === "color") {
        color.values[3] = `/${value}`;
      } else {
        color.values[3] = value;
      }
      return recomposeColor(color);
    }
    function private_safeAlpha(color, value, warning) {
      try {
        return alpha(color, value);
      } catch (error) {
        if (warning && define_process_env_default.NODE_ENV !== "production") {
          console.warn(warning);
        }
        return color;
      }
    }
    function darken(color, coefficient) {
      color = decomposeColor(color);
      coefficient = clampWrapper(coefficient);
      if (color.type.includes("hsl")) {
        color.values[2] *= 1 - coefficient;
      } else if (color.type.includes("rgb") || color.type.includes("color")) {
        for (let i = 0; i < 3; i += 1) {
          color.values[i] *= 1 - coefficient;
        }
      }
      return recomposeColor(color);
    }
    function private_safeDarken(color, coefficient, warning) {
      try {
        return darken(color, coefficient);
      } catch (error) {
        if (warning && define_process_env_default.NODE_ENV !== "production") {
          console.warn(warning);
        }
        return color;
      }
    }
    function lighten(color, coefficient) {
      color = decomposeColor(color);
      coefficient = clampWrapper(coefficient);
      if (color.type.includes("hsl")) {
        color.values[2] += (100 - color.values[2]) * coefficient;
      } else if (color.type.includes("rgb")) {
        for (let i = 0; i < 3; i += 1) {
          color.values[i] += (255 - color.values[i]) * coefficient;
        }
      } else if (color.type.includes("color")) {
        for (let i = 0; i < 3; i += 1) {
          color.values[i] += (1 - color.values[i]) * coefficient;
        }
      }
      return recomposeColor(color);
    }
    function private_safeLighten(color, coefficient, warning) {
      try {
        return lighten(color, coefficient);
      } catch (error) {
        if (warning && define_process_env_default.NODE_ENV !== "production") {
          console.warn(warning);
        }
        return color;
      }
    }
    function emphasize(color, coefficient = 0.15) {
      return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);
    }
    function private_safeEmphasize(color, coefficient, warning) {
      try {
        return emphasize(color, coefficient);
      } catch (error) {
        if (warning && define_process_env_default.NODE_ENV !== "production") {
          console.warn(warning);
        }
        return color;
      }
    }
    function blend(background, overlay, opacity, gamma = 1) {
      const blendChannel = (b, o) => Math.round((b ** (1 / gamma) * (1 - opacity) + o ** (1 / gamma) * opacity) ** gamma);
      const backgroundColor = decomposeColor(background);
      const overlayColor = decomposeColor(overlay);
      const rgb = [blendChannel(backgroundColor.values[0], overlayColor.values[0]), blendChannel(backgroundColor.values[1], overlayColor.values[1]), blendChannel(backgroundColor.values[2], overlayColor.values[2])];
      return recomposeColor({
        type: "rgb",
        values: rgb
      });
    }
  }
});

// node_modules/@mui/system/colorManipulator/index.js
var require_colorManipulator4 = __commonJS({
  "node_modules/@mui/system/colorManipulator/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _colorManipulator = require_colorManipulator3();
    Object.keys(_colorManipulator).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _colorManipulator[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _colorManipulator[key];
        }
      });
    });
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/chainPropTypes/chainPropTypes.js
var require_chainPropTypes3 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/chainPropTypes/chainPropTypes.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = chainPropTypes;
    function chainPropTypes(propType1, propType2) {
      if (define_process_env_default.NODE_ENV === "production") {
        return () => null;
      }
      return function validate(...args) {
        return propType1(...args) || propType2(...args);
      };
    }
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/chainPropTypes/index.js
var require_chainPropTypes4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/chainPropTypes/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _chainPropTypes.default;
      }
    });
    var _chainPropTypes = _interopRequireDefault(require_chainPropTypes3());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/deepmerge/deepmerge.js
var require_deepmerge5 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/deepmerge/deepmerge.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = deepmerge;
    exports2.isPlainObject = isPlainObject;
    var React7 = _interopRequireWildcard(require_react());
    var _reactIs = require_react_is3();
    function isPlainObject(item) {
      if (typeof item !== "object" || item === null) {
        return false;
      }
      const prototype = Object.getPrototypeOf(item);
      return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in item) && !(Symbol.iterator in item);
    }
    function deepClone(source) {
      if (/* @__PURE__ */ React7.isValidElement(source) || (0, _reactIs.isValidElementType)(source) || !isPlainObject(source)) {
        return source;
      }
      const output = {};
      Object.keys(source).forEach((key) => {
        output[key] = deepClone(source[key]);
      });
      return output;
    }
    function deepmerge(target, source, options = {
      clone: true
    }) {
      const output = options.clone ? {
        ...target
      } : target;
      if (isPlainObject(target) && isPlainObject(source)) {
        Object.keys(source).forEach((key) => {
          if (/* @__PURE__ */ React7.isValidElement(source[key]) || (0, _reactIs.isValidElementType)(source[key])) {
            output[key] = source[key];
          } else if (isPlainObject(source[key]) && // Avoid prototype pollution
          Object.prototype.hasOwnProperty.call(target, key) && isPlainObject(target[key])) {
            output[key] = deepmerge(target[key], source[key], options);
          } else if (options.clone) {
            output[key] = isPlainObject(source[key]) ? deepClone(source[key]) : source[key];
          } else {
            output[key] = source[key];
          }
        });
      }
      return output;
    }
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/deepmerge/index.js
var require_deepmerge6 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/deepmerge/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _deepmerge.default;
      }
    });
    var _deepmerge = _interopRequireWildcard(require_deepmerge5());
    Object.keys(_deepmerge).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _deepmerge[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _deepmerge[key];
        }
      });
    });
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/elementAcceptingRef/elementAcceptingRef.js
var require_elementAcceptingRef3 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/elementAcceptingRef/elementAcceptingRef.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _chainPropTypes = _interopRequireDefault(require_chainPropTypes4());
    function isClassComponent(elementType) {
      const {
        prototype = {}
      } = elementType;
      return Boolean(prototype.isReactComponent);
    }
    function acceptingRef(props, propName, componentName, location, propFullName) {
      const element = props[propName];
      const safePropName = propFullName || propName;
      if (element == null || // When server-side rendering React doesn't warn either.
      // This is not an accurate check for SSR.
      // This is only in place for Emotion compat.
      // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
      typeof window === "undefined") {
        return null;
      }
      let warningHint;
      const elementType = element.type;
      if (typeof elementType === "function" && !isClassComponent(elementType)) {
        warningHint = "Did you accidentally use a plain function component for an element instead?";
      }
      if (warningHint !== void 0) {
        return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
      }
      return null;
    }
    var elementAcceptingRef = (0, _chainPropTypes.default)(_propTypes.default.element, acceptingRef);
    elementAcceptingRef.isRequired = (0, _chainPropTypes.default)(_propTypes.default.element.isRequired, acceptingRef);
    var _default = exports2.default = elementAcceptingRef;
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/elementAcceptingRef/index.js
var require_elementAcceptingRef4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/elementAcceptingRef/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _elementAcceptingRef.default;
      }
    });
    var _elementAcceptingRef = _interopRequireDefault(require_elementAcceptingRef3());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/elementTypeAcceptingRef/elementTypeAcceptingRef.js
var require_elementTypeAcceptingRef3 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/elementTypeAcceptingRef/elementTypeAcceptingRef.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _chainPropTypes = _interopRequireDefault(require_chainPropTypes4());
    function isClassComponent(elementType) {
      const {
        prototype = {}
      } = elementType;
      return Boolean(prototype.isReactComponent);
    }
    function elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {
      const propValue = props[propName];
      const safePropName = propFullName || propName;
      if (propValue == null || // When server-side rendering React doesn't warn either.
      // This is not an accurate check for SSR.
      // This is only in place for emotion compat.
      // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
      typeof window === "undefined") {
        return null;
      }
      let warningHint;
      if (typeof propValue === "function" && !isClassComponent(propValue)) {
        warningHint = "Did you accidentally provide a plain function component instead?";
      }
      if (warningHint !== void 0) {
        return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element type that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
      }
      return null;
    }
    var _default = exports2.default = (0, _chainPropTypes.default)(_propTypes.default.elementType, elementTypeAcceptingRef);
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/elementTypeAcceptingRef/index.js
var require_elementTypeAcceptingRef4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/elementTypeAcceptingRef/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _elementTypeAcceptingRef.default;
      }
    });
    var _elementTypeAcceptingRef = _interopRequireDefault(require_elementTypeAcceptingRef3());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/exactProp/exactProp.js
var require_exactProp3 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/exactProp/exactProp.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = exactProp;
    var specialProperty = "exact-prop: \u200B";
    function exactProp(propTypes) {
      if (define_process_env_default.NODE_ENV === "production") {
        return propTypes;
      }
      return {
        ...propTypes,
        [specialProperty]: (props) => {
          const unsupportedProps = Object.keys(props).filter((prop) => !propTypes.hasOwnProperty(prop));
          if (unsupportedProps.length > 0) {
            return new Error(`The following props are not supported: ${unsupportedProps.map((prop) => `\`${prop}\``).join(", ")}. Please remove them.`);
          }
          return null;
        }
      };
    }
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/exactProp/index.js
var require_exactProp4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/exactProp/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _exactProp.default;
      }
    });
    var _exactProp = _interopRequireDefault(require_exactProp3());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/formatMuiErrorMessage/formatMuiErrorMessage.js
var require_formatMuiErrorMessage5 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/formatMuiErrorMessage/formatMuiErrorMessage.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = formatMuiErrorMessage;
    function formatMuiErrorMessage(code, ...args) {
      const url = new URL(`https://mui.com/production-error/?code=${code}`);
      args.forEach((arg) => url.searchParams.append("args[]", arg));
      return `Minified MUI error #${code}; visit ${url} for the full message.`;
    }
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/formatMuiErrorMessage/index.js
var require_formatMuiErrorMessage6 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/formatMuiErrorMessage/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _formatMuiErrorMessage.default;
      }
    });
    var _formatMuiErrorMessage = _interopRequireDefault(require_formatMuiErrorMessage5());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/getDisplayName/getDisplayName.js
var require_getDisplayName5 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/getDisplayName/getDisplayName.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getDisplayName;
    var _reactIs = require_react_is3();
    function getFunctionComponentName(Component, fallback = "") {
      return Component.displayName || Component.name || fallback;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
      const functionName = getFunctionComponentName(innerType);
      return outerType.displayName || (functionName !== "" ? `${wrapperName}(${functionName})` : wrapperName);
    }
    function getDisplayName(Component) {
      if (Component == null) {
        return void 0;
      }
      if (typeof Component === "string") {
        return Component;
      }
      if (typeof Component === "function") {
        return getFunctionComponentName(Component, "Component");
      }
      if (typeof Component === "object") {
        switch (Component.$$typeof) {
          case _reactIs.ForwardRef:
            return getWrappedName(Component, Component.render, "ForwardRef");
          case _reactIs.Memo:
            return getWrappedName(Component, Component.type, "memo");
          default:
            return void 0;
        }
      }
      return void 0;
    }
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/getDisplayName/index.js
var require_getDisplayName6 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/getDisplayName/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _getDisplayName.default;
      }
    });
    var _getDisplayName = _interopRequireDefault(require_getDisplayName5());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/HTMLElementType/HTMLElementType.js
var require_HTMLElementType3 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/HTMLElementType/HTMLElementType.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = HTMLElementType;
    function HTMLElementType(props, propName, componentName, location, propFullName) {
      if (define_process_env_default.NODE_ENV === "production") {
        return null;
      }
      const propValue = props[propName];
      const safePropName = propFullName || propName;
      if (propValue == null) {
        return null;
      }
      if (propValue && propValue.nodeType !== 1) {
        return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an HTMLElement.`);
      }
      return null;
    }
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/HTMLElementType/index.js
var require_HTMLElementType4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/HTMLElementType/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _HTMLElementType.default;
      }
    });
    var _HTMLElementType = _interopRequireDefault(require_HTMLElementType3());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/ponyfillGlobal/ponyfillGlobal.js
var require_ponyfillGlobal3 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/ponyfillGlobal/ponyfillGlobal.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _default = exports2.default = typeof window != "undefined" && window.Math == Math ? window : typeof self != "undefined" && self.Math == Math ? self : Function("return this")();
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/ponyfillGlobal/index.js
var require_ponyfillGlobal4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/ponyfillGlobal/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _ponyfillGlobal.default;
      }
    });
    var _ponyfillGlobal = _interopRequireDefault(require_ponyfillGlobal3());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/refType/refType.js
var require_refType3 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/refType/refType.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    var refType = _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]);
    var _default = exports2.default = refType;
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/refType/index.js
var require_refType4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/refType/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _refType.default;
      }
    });
    var _refType = _interopRequireDefault(require_refType3());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/capitalize/capitalize.js
var require_capitalize6 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/capitalize/capitalize.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = capitalize;
    var _formatMuiErrorMessage = _interopRequireDefault(require_formatMuiErrorMessage6());
    function capitalize(string) {
      if (typeof string !== "string") {
        throw new Error(define_process_env_default.NODE_ENV !== "production" ? "MUI: `capitalize(string)` expects a string argument." : (0, _formatMuiErrorMessage.default)(7));
      }
      return string.charAt(0).toUpperCase() + string.slice(1);
    }
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/capitalize/index.js
var require_capitalize7 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/capitalize/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _capitalize.default;
      }
    });
    var _capitalize = _interopRequireDefault(require_capitalize6());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/createChainedFunction/createChainedFunction.js
var require_createChainedFunction4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/createChainedFunction/createChainedFunction.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = createChainedFunction;
    function createChainedFunction(...funcs) {
      return funcs.reduce((acc, func) => {
        if (func == null) {
          return acc;
        }
        return function chainedFunction(...args) {
          acc.apply(this, args);
          func.apply(this, args);
        };
      }, () => {
      });
    }
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/createChainedFunction/index.js
var require_createChainedFunction5 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/createChainedFunction/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _createChainedFunction.default;
      }
    });
    var _createChainedFunction = _interopRequireDefault(require_createChainedFunction4());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/debounce/debounce.js
var require_debounce4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/debounce/debounce.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = debounce;
    function debounce(func, wait = 166) {
      let timeout;
      function debounced(...args) {
        const later = () => {
          func.apply(this, args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      }
      debounced.clear = () => {
        clearTimeout(timeout);
      };
      return debounced;
    }
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/debounce/index.js
var require_debounce5 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/debounce/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _debounce.default;
      }
    });
    var _debounce = _interopRequireWildcard(require_debounce4());
    Object.keys(_debounce).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _debounce[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _debounce[key];
        }
      });
    });
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/deprecatedPropType/deprecatedPropType.js
var require_deprecatedPropType4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/deprecatedPropType/deprecatedPropType.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = deprecatedPropType;
    function deprecatedPropType(validator, reason) {
      if (define_process_env_default.NODE_ENV === "production") {
        return () => null;
      }
      return (props, propName, componentName, location, propFullName) => {
        const componentNameSafe = componentName || "<<anonymous>>";
        const propFullNameSafe = propFullName || propName;
        if (typeof props[propName] !== "undefined") {
          return new Error(`The ${location} \`${propFullNameSafe}\` of \`${componentNameSafe}\` is deprecated. ${reason}`);
        }
        return null;
      };
    }
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/deprecatedPropType/index.js
var require_deprecatedPropType5 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/deprecatedPropType/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _deprecatedPropType.default;
      }
    });
    var _deprecatedPropType = _interopRequireDefault(require_deprecatedPropType4());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/isMuiElement/isMuiElement.js
var require_isMuiElement4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/isMuiElement/isMuiElement.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isMuiElement;
    var React7 = _interopRequireWildcard(require_react());
    function isMuiElement(element, muiNames) {
      return /* @__PURE__ */ React7.isValidElement(element) && muiNames.indexOf(
        // For server components `muiName` is avaialble in element.type._payload.value.muiName
        // relevant info - https://github.com/facebook/react/blob/2807d781a08db8e9873687fccc25c0f12b4fb3d4/packages/react/src/ReactLazy.js#L45
        // eslint-disable-next-line no-underscore-dangle
        element.type.muiName ?? element.type?._payload?.value?.muiName
      ) !== -1;
    }
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/isMuiElement/index.js
var require_isMuiElement5 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/isMuiElement/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _isMuiElement.default;
      }
    });
    var _isMuiElement = _interopRequireDefault(require_isMuiElement4());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/ownerDocument/ownerDocument.js
var require_ownerDocument4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/ownerDocument/ownerDocument.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = ownerDocument;
    function ownerDocument(node2) {
      return node2 && node2.ownerDocument || document;
    }
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/ownerDocument/index.js
var require_ownerDocument5 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/ownerDocument/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _ownerDocument.default;
      }
    });
    var _ownerDocument = _interopRequireDefault(require_ownerDocument4());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/ownerWindow/ownerWindow.js
var require_ownerWindow4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/ownerWindow/ownerWindow.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = ownerWindow;
    var _ownerDocument = _interopRequireDefault(require_ownerDocument5());
    function ownerWindow(node2) {
      const doc = (0, _ownerDocument.default)(node2);
      return doc.defaultView || window;
    }
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/ownerWindow/index.js
var require_ownerWindow5 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/ownerWindow/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _ownerWindow.default;
      }
    });
    var _ownerWindow = _interopRequireDefault(require_ownerWindow4());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/requirePropFactory/requirePropFactory.js
var require_requirePropFactory4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/requirePropFactory/requirePropFactory.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = requirePropFactory;
    function requirePropFactory(componentNameInError, Component) {
      if (define_process_env_default.NODE_ENV === "production") {
        return () => null;
      }
      const prevPropTypes = Component ? {
        ...Component.propTypes
      } : null;
      const requireProp = (requiredProp) => (props, propName, componentName, location, propFullName, ...args) => {
        const propFullNameSafe = propFullName || propName;
        const defaultTypeChecker = prevPropTypes?.[propFullNameSafe];
        if (defaultTypeChecker) {
          const typeCheckerResult = defaultTypeChecker(props, propName, componentName, location, propFullName, ...args);
          if (typeCheckerResult) {
            return typeCheckerResult;
          }
        }
        if (typeof props[propName] !== "undefined" && !props[requiredProp]) {
          return new Error(`The prop \`${propFullNameSafe}\` of \`${componentNameInError}\` can only be used together with the \`${requiredProp}\` prop.`);
        }
        return null;
      };
      return requireProp;
    }
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/requirePropFactory/index.js
var require_requirePropFactory5 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/requirePropFactory/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _requirePropFactory.default;
      }
    });
    var _requirePropFactory = _interopRequireDefault(require_requirePropFactory4());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/setRef/setRef.js
var require_setRef4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/setRef/setRef.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setRef;
    function setRef(ref, value) {
      if (typeof ref === "function") {
        ref(value);
      } else if (ref) {
        ref.current = value;
      }
    }
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/setRef/index.js
var require_setRef5 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/setRef/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _setRef.default;
      }
    });
    var _setRef = _interopRequireDefault(require_setRef4());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/useEnhancedEffect/useEnhancedEffect.js
var require_useEnhancedEffect6 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/useEnhancedEffect/useEnhancedEffect.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var useEnhancedEffect = typeof window !== "undefined" ? React7.useLayoutEffect : React7.useEffect;
    var _default = exports2.default = useEnhancedEffect;
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/useEnhancedEffect/index.js
var require_useEnhancedEffect7 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/useEnhancedEffect/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _useEnhancedEffect.default;
      }
    });
    var _useEnhancedEffect = _interopRequireDefault(require_useEnhancedEffect6());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/useId/useId.js
var require_useId4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/useId/useId.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = useId;
    var React7 = _interopRequireWildcard(require_react());
    var globalId = 0;
    function useGlobalId(idOverride) {
      const [defaultId, setDefaultId] = React7.useState(idOverride);
      const id = idOverride || defaultId;
      React7.useEffect(() => {
        if (defaultId == null) {
          globalId += 1;
          setDefaultId(`mui-${globalId}`);
        }
      }, [defaultId]);
      return id;
    }
    var safeReact = {
      ...React7
    };
    var maybeReactUseId = safeReact.useId;
    function useId(idOverride) {
      if (maybeReactUseId !== void 0) {
        const reactId = maybeReactUseId();
        return idOverride ?? reactId;
      }
      return useGlobalId(idOverride);
    }
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/useId/index.js
var require_useId5 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/useId/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _useId.default;
      }
    });
    var _useId = _interopRequireDefault(require_useId4());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/unsupportedProp/unsupportedProp.js
var require_unsupportedProp4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/unsupportedProp/unsupportedProp.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = unsupportedProp;
    function unsupportedProp(props, propName, componentName, location, propFullName) {
      if (define_process_env_default.NODE_ENV === "production") {
        return null;
      }
      const propFullNameSafe = propFullName || propName;
      if (typeof props[propName] !== "undefined") {
        return new Error(`The prop \`${propFullNameSafe}\` is not supported. Please remove it.`);
      }
      return null;
    }
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/unsupportedProp/index.js
var require_unsupportedProp5 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/unsupportedProp/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _unsupportedProp.default;
      }
    });
    var _unsupportedProp = _interopRequireDefault(require_unsupportedProp4());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/useControlled/useControlled.js
var require_useControlled4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/useControlled/useControlled.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = useControlled;
    var React7 = _interopRequireWildcard(require_react());
    function useControlled({
      controlled,
      default: defaultProp,
      name,
      state = "value"
    }) {
      const {
        current: isControlled
      } = React7.useRef(controlled !== void 0);
      const [valueState, setValue] = React7.useState(defaultProp);
      const value = isControlled ? controlled : valueState;
      if (define_process_env_default.NODE_ENV !== "production") {
        React7.useEffect(() => {
          if (isControlled !== (controlled !== void 0)) {
            console.error([`MUI: A component is changing the ${isControlled ? "" : "un"}controlled ${state} state of ${name} to be ${isControlled ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", `Decide between using a controlled or uncontrolled ${name} element for the lifetime of the component.`, "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join("\n"));
          }
        }, [state, name, controlled]);
        const {
          current: defaultValue
        } = React7.useRef(defaultProp);
        React7.useEffect(() => {
          if (!isControlled && !Object.is(defaultValue, defaultProp)) {
            console.error([`MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. To suppress this warning opt to use a controlled ${name}.`].join("\n"));
          }
        }, [JSON.stringify(defaultProp)]);
      }
      const setValueIfUncontrolled = React7.useCallback((newValue) => {
        if (!isControlled) {
          setValue(newValue);
        }
      }, []);
      return [value, setValueIfUncontrolled];
    }
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/useControlled/index.js
var require_useControlled5 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/useControlled/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _useControlled.default;
      }
    });
    var _useControlled = _interopRequireDefault(require_useControlled4());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/useEventCallback/useEventCallback.js
var require_useEventCallback4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/useEventCallback/useEventCallback.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _useEnhancedEffect = _interopRequireDefault(require_useEnhancedEffect7());
    function useEventCallback(fn) {
      const ref = React7.useRef(fn);
      (0, _useEnhancedEffect.default)(() => {
        ref.current = fn;
      });
      return React7.useRef((...args) => (
        // @ts-expect-error hide `this`
        (0, ref.current)(...args)
      )).current;
    }
    var _default = exports2.default = useEventCallback;
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/useEventCallback/index.js
var require_useEventCallback5 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/useEventCallback/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _useEventCallback.default;
      }
    });
    var _useEventCallback = _interopRequireDefault(require_useEventCallback4());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/useForkRef/useForkRef.js
var require_useForkRef4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/useForkRef/useForkRef.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = useForkRef;
    var React7 = _interopRequireWildcard(require_react());
    function useForkRef(...refs) {
      const cleanupRef = React7.useRef(void 0);
      const refEffect = React7.useCallback((instance) => {
        const cleanups = refs.map((ref) => {
          if (ref == null) {
            return null;
          }
          if (typeof ref === "function") {
            const refCallback = ref;
            const refCleanup = refCallback(instance);
            return typeof refCleanup === "function" ? refCleanup : () => {
              refCallback(null);
            };
          }
          ref.current = instance;
          return () => {
            ref.current = null;
          };
        });
        return () => {
          cleanups.forEach((refCleanup) => refCleanup?.());
        };
      }, refs);
      return React7.useMemo(() => {
        if (refs.every((ref) => ref == null)) {
          return null;
        }
        return (value) => {
          if (cleanupRef.current) {
            cleanupRef.current();
            cleanupRef.current = void 0;
          }
          if (value != null) {
            cleanupRef.current = refEffect(value);
          }
        };
      }, refs);
    }
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/useForkRef/index.js
var require_useForkRef5 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/useForkRef/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _useForkRef.default;
      }
    });
    var _useForkRef = _interopRequireDefault(require_useForkRef4());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/useLazyRef/useLazyRef.js
var require_useLazyRef3 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/useLazyRef/useLazyRef.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = useLazyRef;
    var React7 = _interopRequireWildcard(require_react());
    var UNINITIALIZED = {};
    function useLazyRef(init, initArg) {
      const ref = React7.useRef(UNINITIALIZED);
      if (ref.current === UNINITIALIZED) {
        ref.current = init(initArg);
      }
      return ref;
    }
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/useLazyRef/index.js
var require_useLazyRef4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/useLazyRef/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _useLazyRef.default;
      }
    });
    var _useLazyRef = _interopRequireDefault(require_useLazyRef3());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/useOnMount/useOnMount.js
var require_useOnMount3 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/useOnMount/useOnMount.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = useOnMount;
    var React7 = _interopRequireWildcard(require_react());
    var EMPTY = [];
    function useOnMount(fn) {
      React7.useEffect(fn, EMPTY);
    }
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/useTimeout/useTimeout.js
var require_useTimeout3 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/useTimeout/useTimeout.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.Timeout = void 0;
    exports2.default = useTimeout;
    var _useLazyRef = _interopRequireDefault(require_useLazyRef3());
    var _useOnMount = _interopRequireDefault(require_useOnMount3());
    var Timeout = class _Timeout {
      static create() {
        return new _Timeout();
      }
      currentId = null;
      /**
       * Executes `fn` after `delay`, clearing any previously scheduled call.
       */
      start(delay, fn) {
        this.clear();
        this.currentId = setTimeout(() => {
          this.currentId = null;
          fn();
        }, delay);
      }
      clear = () => {
        if (this.currentId !== null) {
          clearTimeout(this.currentId);
          this.currentId = null;
        }
      };
      disposeEffect = () => {
        return this.clear;
      };
    };
    exports2.Timeout = Timeout;
    function useTimeout() {
      const timeout = (0, _useLazyRef.default)(Timeout.create).current;
      (0, _useOnMount.default)(timeout.disposeEffect);
      return timeout;
    }
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/useTimeout/index.js
var require_useTimeout4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/useTimeout/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "Timeout", {
      enumerable: true,
      get: function() {
        return _useTimeout.Timeout;
      }
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _useTimeout.default;
      }
    });
    var _useTimeout = _interopRequireWildcard(require_useTimeout3());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/useOnMount/index.js
var require_useOnMount4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/useOnMount/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _useOnMount.default;
      }
    });
    var _useOnMount = _interopRequireDefault(require_useOnMount3());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/useIsFocusVisible/useIsFocusVisible.js
var require_useIsFocusVisible3 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/useIsFocusVisible/useIsFocusVisible.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = useIsFocusVisible;
    exports2.teardown = teardown;
    var React7 = _interopRequireWildcard(require_react());
    var _useTimeout = require_useTimeout3();
    var hadKeyboardEvent = true;
    var hadFocusVisibleRecently = false;
    var hadFocusVisibleRecentlyTimeout = new _useTimeout.Timeout();
    var inputTypesWhitelist = {
      text: true,
      search: true,
      url: true,
      tel: true,
      email: true,
      password: true,
      number: true,
      date: true,
      month: true,
      week: true,
      time: true,
      datetime: true,
      "datetime-local": true
    };
    function focusTriggersKeyboardModality(node2) {
      const {
        type,
        tagName
      } = node2;
      if (tagName === "INPUT" && inputTypesWhitelist[type] && !node2.readOnly) {
        return true;
      }
      if (tagName === "TEXTAREA" && !node2.readOnly) {
        return true;
      }
      if (node2.isContentEditable) {
        return true;
      }
      return false;
    }
    function handleKeyDown(event) {
      if (event.metaKey || event.altKey || event.ctrlKey) {
        return;
      }
      hadKeyboardEvent = true;
    }
    function handlePointerDown() {
      hadKeyboardEvent = false;
    }
    function handleVisibilityChange() {
      if (this.visibilityState === "hidden") {
        if (hadFocusVisibleRecently) {
          hadKeyboardEvent = true;
        }
      }
    }
    function prepare(doc) {
      doc.addEventListener("keydown", handleKeyDown, true);
      doc.addEventListener("mousedown", handlePointerDown, true);
      doc.addEventListener("pointerdown", handlePointerDown, true);
      doc.addEventListener("touchstart", handlePointerDown, true);
      doc.addEventListener("visibilitychange", handleVisibilityChange, true);
    }
    function teardown(doc) {
      doc.removeEventListener("keydown", handleKeyDown, true);
      doc.removeEventListener("mousedown", handlePointerDown, true);
      doc.removeEventListener("pointerdown", handlePointerDown, true);
      doc.removeEventListener("touchstart", handlePointerDown, true);
      doc.removeEventListener("visibilitychange", handleVisibilityChange, true);
    }
    function isFocusVisible(event) {
      const {
        target
      } = event;
      try {
        return target.matches(":focus-visible");
      } catch (error) {
      }
      return hadKeyboardEvent || focusTriggersKeyboardModality(target);
    }
    function useIsFocusVisible() {
      const ref = React7.useCallback((node2) => {
        if (node2 != null) {
          prepare(node2.ownerDocument);
        }
      }, []);
      const isFocusVisibleRef = React7.useRef(false);
      function handleBlurVisible() {
        if (isFocusVisibleRef.current) {
          hadFocusVisibleRecently = true;
          hadFocusVisibleRecentlyTimeout.start(100, () => {
            hadFocusVisibleRecently = false;
          });
          isFocusVisibleRef.current = false;
          return true;
        }
        return false;
      }
      function handleFocusVisible(event) {
        if (isFocusVisible(event)) {
          isFocusVisibleRef.current = true;
          return true;
        }
        return false;
      }
      return {
        isFocusVisibleRef,
        onFocus: handleFocusVisible,
        onBlur: handleBlurVisible,
        ref
      };
    }
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/useIsFocusVisible/index.js
var require_useIsFocusVisible4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/useIsFocusVisible/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _useIsFocusVisible.default;
      }
    });
    var _useIsFocusVisible = _interopRequireWildcard(require_useIsFocusVisible3());
    Object.keys(_useIsFocusVisible).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _useIsFocusVisible[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _useIsFocusVisible[key];
        }
      });
    });
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/isFocusVisible/isFocusVisible.js
var require_isFocusVisible3 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/isFocusVisible/isFocusVisible.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isFocusVisible;
    function isFocusVisible(element) {
      try {
        return element.matches(":focus-visible");
      } catch (error) {
        if (define_process_env_default.NODE_ENV !== "production" && !/jsdom/.test(window.navigator.userAgent)) {
          console.warn(["MUI: The `:focus-visible` pseudo class is not supported in this browser.", "Some components rely on this feature to work properly."].join("\n"));
        }
      }
      return false;
    }
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/isFocusVisible/index.js
var require_isFocusVisible4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/isFocusVisible/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _isFocusVisible.default;
      }
    });
    var _isFocusVisible = _interopRequireDefault(require_isFocusVisible3());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/getScrollbarSize/getScrollbarSize.js
var require_getScrollbarSize3 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/getScrollbarSize/getScrollbarSize.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getScrollbarSize;
    function getScrollbarSize(win = window) {
      const documentWidth = win.document.documentElement.clientWidth;
      return win.innerWidth - documentWidth;
    }
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/getScrollbarSize/index.js
var require_getScrollbarSize4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/getScrollbarSize/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _getScrollbarSize.default;
      }
    });
    var _getScrollbarSize = _interopRequireDefault(require_getScrollbarSize3());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/usePreviousProps/usePreviousProps.js
var require_usePreviousProps3 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/usePreviousProps/usePreviousProps.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var usePreviousProps = (value) => {
      const ref = React7.useRef({});
      React7.useEffect(() => {
        ref.current = value;
      });
      return ref.current;
    };
    var _default = exports2.default = usePreviousProps;
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/usePreviousProps/index.js
var require_usePreviousProps4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/usePreviousProps/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _usePreviousProps.default;
      }
    });
    var _usePreviousProps = _interopRequireDefault(require_usePreviousProps3());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/getValidReactChildren/getValidReactChildren.js
var require_getValidReactChildren3 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/getValidReactChildren/getValidReactChildren.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getValidReactChildren;
    var React7 = _interopRequireWildcard(require_react());
    function getValidReactChildren(children) {
      return React7.Children.toArray(children).filter((child) => /* @__PURE__ */ React7.isValidElement(child));
    }
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/getValidReactChildren/index.js
var require_getValidReactChildren4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/getValidReactChildren/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _getValidReactChildren.default;
      }
    });
    var _getValidReactChildren = _interopRequireDefault(require_getValidReactChildren3());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/visuallyHidden/visuallyHidden.js
var require_visuallyHidden3 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/visuallyHidden/visuallyHidden.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var visuallyHidden = {
      border: 0,
      clip: "rect(0 0 0 0)",
      height: "1px",
      margin: "-1px",
      overflow: "hidden",
      padding: 0,
      position: "absolute",
      whiteSpace: "nowrap",
      width: "1px"
    };
    var _default = exports2.default = visuallyHidden;
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/visuallyHidden/index.js
var require_visuallyHidden4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/visuallyHidden/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _visuallyHidden.default;
      }
    });
    var _visuallyHidden = _interopRequireDefault(require_visuallyHidden3());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/integerPropType/integerPropType.js
var require_integerPropType3 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/integerPropType/integerPropType.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getTypeByValue = getTypeByValue;
    function getTypeByValue(value) {
      const valueType = typeof value;
      switch (valueType) {
        case "number":
          if (Number.isNaN(value)) {
            return "NaN";
          }
          if (!Number.isFinite(value)) {
            return "Infinity";
          }
          if (value !== Math.floor(value)) {
            return "float";
          }
          return "number";
        case "object":
          if (value === null) {
            return "null";
          }
          return value.constructor.name;
        default:
          return valueType;
      }
    }
    function requiredInteger(props, propName, componentName, location) {
      const propValue = props[propName];
      if (propValue == null || !Number.isInteger(propValue)) {
        const propType = getTypeByValue(propValue);
        return new RangeError(`Invalid ${location} \`${propName}\` of type \`${propType}\` supplied to \`${componentName}\`, expected \`integer\`.`);
      }
      return null;
    }
    function validator(props, propName, ...other) {
      const propValue = props[propName];
      if (propValue === void 0) {
        return null;
      }
      return requiredInteger(props, propName, ...other);
    }
    function validatorNoop() {
      return null;
    }
    validator.isRequired = requiredInteger;
    validatorNoop.isRequired = validatorNoop;
    var _default = exports2.default = define_process_env_default.NODE_ENV === "production" ? validatorNoop : validator;
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/integerPropType/index.js
var require_integerPropType4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/integerPropType/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _integerPropType.default;
      }
    });
    var _integerPropType = _interopRequireWildcard(require_integerPropType3());
    Object.keys(_integerPropType).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _integerPropType[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _integerPropType[key];
        }
      });
    });
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/resolveProps/resolveProps.js
var require_resolveProps5 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/resolveProps/resolveProps.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = resolveProps;
    function resolveProps(defaultProps, props) {
      const output = {
        ...props
      };
      for (const key in defaultProps) {
        if (Object.prototype.hasOwnProperty.call(defaultProps, key)) {
          const propName = key;
          if (propName === "components" || propName === "slots") {
            output[propName] = {
              ...defaultProps[propName],
              ...output[propName]
            };
          } else if (propName === "componentsProps" || propName === "slotProps") {
            const defaultSlotProps = defaultProps[propName];
            const slotProps = props[propName];
            if (!slotProps) {
              output[propName] = defaultSlotProps || {};
            } else if (!defaultSlotProps) {
              output[propName] = slotProps;
            } else {
              output[propName] = {
                ...slotProps
              };
              for (const slotKey in defaultSlotProps) {
                if (Object.prototype.hasOwnProperty.call(defaultSlotProps, slotKey)) {
                  const slotPropName = slotKey;
                  output[propName][slotPropName] = resolveProps(defaultSlotProps[slotPropName], slotProps[slotPropName]);
                }
              }
            }
          } else if (output[propName] === void 0) {
            output[propName] = defaultProps[propName];
          }
        }
      }
      return output;
    }
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/resolveProps/index.js
var require_resolveProps6 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/resolveProps/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _resolveProps.default;
      }
    });
    var _resolveProps = _interopRequireDefault(require_resolveProps5());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/composeClasses/composeClasses.js
var require_composeClasses3 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/composeClasses/composeClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = composeClasses;
    function composeClasses(slots, getUtilityClass, classes = void 0) {
      const output = {};
      for (const slotName in slots) {
        const slot = slots[slotName];
        let buffer = "";
        let start = true;
        for (let i = 0; i < slot.length; i += 1) {
          const value = slot[i];
          if (value) {
            buffer += (start === true ? "" : " ") + getUtilityClass(value);
            start = false;
            if (classes && classes[value]) {
              buffer += " " + classes[value];
            }
          }
        }
        output[slotName] = buffer;
      }
      return output;
    }
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/composeClasses/index.js
var require_composeClasses4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/composeClasses/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _composeClasses.default;
      }
    });
    var _composeClasses = _interopRequireDefault(require_composeClasses3());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/ClassNameGenerator/ClassNameGenerator.js
var require_ClassNameGenerator5 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/ClassNameGenerator/ClassNameGenerator.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var defaultGenerator = (componentName) => componentName;
    var createClassNameGenerator = () => {
      let generate = defaultGenerator;
      return {
        configure(generator) {
          generate = generator;
        },
        generate(componentName) {
          return generate(componentName);
        },
        reset() {
          generate = defaultGenerator;
        }
      };
    };
    var ClassNameGenerator = createClassNameGenerator();
    var _default = exports2.default = ClassNameGenerator;
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/ClassNameGenerator/index.js
var require_ClassNameGenerator6 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/ClassNameGenerator/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _ClassNameGenerator.default;
      }
    });
    var _ClassNameGenerator = _interopRequireDefault(require_ClassNameGenerator5());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/generateUtilityClass/generateUtilityClass.js
var require_generateUtilityClass5 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/generateUtilityClass/generateUtilityClass.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = generateUtilityClass;
    exports2.globalStateClasses = void 0;
    exports2.isGlobalState = isGlobalState;
    var _ClassNameGenerator = _interopRequireDefault(require_ClassNameGenerator6());
    var globalStateClasses = exports2.globalStateClasses = {
      active: "active",
      checked: "checked",
      completed: "completed",
      disabled: "disabled",
      error: "error",
      expanded: "expanded",
      focused: "focused",
      focusVisible: "focusVisible",
      open: "open",
      readOnly: "readOnly",
      required: "required",
      selected: "selected"
    };
    function generateUtilityClass(componentName, slot, globalStatePrefix = "Mui") {
      const globalStateClass = globalStateClasses[slot];
      return globalStateClass ? `${globalStatePrefix}-${globalStateClass}` : `${_ClassNameGenerator.default.generate(componentName)}-${slot}`;
    }
    function isGlobalState(slot) {
      return globalStateClasses[slot] !== void 0;
    }
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/generateUtilityClass/index.js
var require_generateUtilityClass6 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/generateUtilityClass/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _generateUtilityClass.default;
      }
    });
    var _generateUtilityClass = _interopRequireWildcard(require_generateUtilityClass5());
    Object.keys(_generateUtilityClass).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _generateUtilityClass[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _generateUtilityClass[key];
        }
      });
    });
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/generateUtilityClasses/generateUtilityClasses.js
var require_generateUtilityClasses5 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/generateUtilityClasses/generateUtilityClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = generateUtilityClasses;
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass6());
    function generateUtilityClasses(componentName, slots, globalStatePrefix = "Mui") {
      const result = {};
      slots.forEach((slot) => {
        result[slot] = (0, _generateUtilityClass.default)(componentName, slot, globalStatePrefix);
      });
      return result;
    }
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/generateUtilityClasses/index.js
var require_generateUtilityClasses6 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/generateUtilityClasses/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _generateUtilityClasses.default;
      }
    });
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses5());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/clamp/clamp.js
var require_clamp5 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/clamp/clamp.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    function clamp(val, min = Number.MIN_SAFE_INTEGER, max = Number.MAX_SAFE_INTEGER) {
      return Math.max(min, Math.min(val, max));
    }
    var _default = exports2.default = clamp;
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/clamp/index.js
var require_clamp6 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/clamp/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _clamp.default;
      }
    });
    var _clamp = _interopRequireDefault(require_clamp5());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/isHostComponent/isHostComponent.js
var require_isHostComponent3 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/isHostComponent/isHostComponent.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    function isHostComponent(element) {
      return typeof element === "string";
    }
    var _default = exports2.default = isHostComponent;
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/isHostComponent/index.js
var require_isHostComponent4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/isHostComponent/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _isHostComponent.default;
      }
    });
    var _isHostComponent = _interopRequireDefault(require_isHostComponent3());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/appendOwnerState/appendOwnerState.js
var require_appendOwnerState3 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/appendOwnerState/appendOwnerState.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _isHostComponent = _interopRequireDefault(require_isHostComponent4());
    function appendOwnerState(elementType, otherProps, ownerState) {
      if (elementType === void 0 || (0, _isHostComponent.default)(elementType)) {
        return otherProps;
      }
      return {
        ...otherProps,
        ownerState: {
          ...otherProps.ownerState,
          ...ownerState
        }
      };
    }
    var _default = exports2.default = appendOwnerState;
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/appendOwnerState/index.js
var require_appendOwnerState4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/appendOwnerState/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _appendOwnerState.default;
      }
    });
    var _appendOwnerState = _interopRequireDefault(require_appendOwnerState3());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/extractEventHandlers/extractEventHandlers.js
var require_extractEventHandlers3 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/extractEventHandlers/extractEventHandlers.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    function extractEventHandlers(object, excludeKeys = []) {
      if (object === void 0) {
        return {};
      }
      const result = {};
      Object.keys(object).filter((prop) => prop.match(/^on[A-Z]/) && typeof object[prop] === "function" && !excludeKeys.includes(prop)).forEach((prop) => {
        result[prop] = object[prop];
      });
      return result;
    }
    var _default = exports2.default = extractEventHandlers;
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/extractEventHandlers/index.js
var require_extractEventHandlers4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/extractEventHandlers/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _extractEventHandlers.default;
      }
    });
    var _extractEventHandlers = _interopRequireDefault(require_extractEventHandlers3());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/omitEventHandlers/omitEventHandlers.js
var require_omitEventHandlers3 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/omitEventHandlers/omitEventHandlers.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    function omitEventHandlers(object) {
      if (object === void 0) {
        return {};
      }
      const result = {};
      Object.keys(object).filter((prop) => !(prop.match(/^on[A-Z]/) && typeof object[prop] === "function")).forEach((prop) => {
        result[prop] = object[prop];
      });
      return result;
    }
    var _default = exports2.default = omitEventHandlers;
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/omitEventHandlers/index.js
var require_omitEventHandlers4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/omitEventHandlers/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _omitEventHandlers.default;
      }
    });
    var _omitEventHandlers = _interopRequireDefault(require_omitEventHandlers3());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/mergeSlotProps/mergeSlotProps.js
var require_mergeSlotProps4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/mergeSlotProps/mergeSlotProps.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _clsx = _interopRequireDefault(require_clsx());
    var _extractEventHandlers = _interopRequireDefault(require_extractEventHandlers4());
    var _omitEventHandlers = _interopRequireDefault(require_omitEventHandlers4());
    function mergeSlotProps(parameters) {
      const {
        getSlotProps,
        additionalProps,
        externalSlotProps,
        externalForwardedProps,
        className
      } = parameters;
      if (!getSlotProps) {
        const joinedClasses2 = (0, _clsx.default)(additionalProps?.className, className, externalForwardedProps?.className, externalSlotProps?.className);
        const mergedStyle2 = {
          ...additionalProps?.style,
          ...externalForwardedProps?.style,
          ...externalSlotProps?.style
        };
        const props2 = {
          ...additionalProps,
          ...externalForwardedProps,
          ...externalSlotProps
        };
        if (joinedClasses2.length > 0) {
          props2.className = joinedClasses2;
        }
        if (Object.keys(mergedStyle2).length > 0) {
          props2.style = mergedStyle2;
        }
        return {
          props: props2,
          internalRef: void 0
        };
      }
      const eventHandlers = (0, _extractEventHandlers.default)({
        ...externalForwardedProps,
        ...externalSlotProps
      });
      const componentsPropsWithoutEventHandlers = (0, _omitEventHandlers.default)(externalSlotProps);
      const otherPropsWithoutEventHandlers = (0, _omitEventHandlers.default)(externalForwardedProps);
      const internalSlotProps = getSlotProps(eventHandlers);
      const joinedClasses = (0, _clsx.default)(internalSlotProps?.className, additionalProps?.className, className, externalForwardedProps?.className, externalSlotProps?.className);
      const mergedStyle = {
        ...internalSlotProps?.style,
        ...additionalProps?.style,
        ...externalForwardedProps?.style,
        ...externalSlotProps?.style
      };
      const props = {
        ...internalSlotProps,
        ...additionalProps,
        ...otherPropsWithoutEventHandlers,
        ...componentsPropsWithoutEventHandlers
      };
      if (joinedClasses.length > 0) {
        props.className = joinedClasses;
      }
      if (Object.keys(mergedStyle).length > 0) {
        props.style = mergedStyle;
      }
      return {
        props,
        internalRef: internalSlotProps.ref
      };
    }
    var _default = exports2.default = mergeSlotProps;
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/mergeSlotProps/index.js
var require_mergeSlotProps5 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/mergeSlotProps/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _mergeSlotProps.default;
      }
    });
    var _mergeSlotProps = _interopRequireDefault(require_mergeSlotProps4());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/resolveComponentProps/resolveComponentProps.js
var require_resolveComponentProps3 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/resolveComponentProps/resolveComponentProps.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    function resolveComponentProps(componentProps, ownerState, slotState) {
      if (typeof componentProps === "function") {
        return componentProps(ownerState, slotState);
      }
      return componentProps;
    }
    var _default = exports2.default = resolveComponentProps;
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/resolveComponentProps/index.js
var require_resolveComponentProps4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/resolveComponentProps/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _resolveComponentProps.default;
      }
    });
    var _resolveComponentProps = _interopRequireDefault(require_resolveComponentProps3());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/useSlotProps/useSlotProps.js
var require_useSlotProps3 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/useSlotProps/useSlotProps.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _useForkRef = _interopRequireDefault(require_useForkRef5());
    var _appendOwnerState = _interopRequireDefault(require_appendOwnerState4());
    var _mergeSlotProps = _interopRequireDefault(require_mergeSlotProps5());
    var _resolveComponentProps = _interopRequireDefault(require_resolveComponentProps4());
    function useSlotProps(parameters) {
      const {
        elementType,
        externalSlotProps,
        ownerState,
        skipResolvingSlotProps = false,
        ...other
      } = parameters;
      const resolvedComponentsProps = skipResolvingSlotProps ? {} : (0, _resolveComponentProps.default)(externalSlotProps, ownerState);
      const {
        props: mergedProps,
        internalRef
      } = (0, _mergeSlotProps.default)({
        ...other,
        externalSlotProps: resolvedComponentsProps
      });
      const ref = (0, _useForkRef.default)(internalRef, resolvedComponentsProps?.ref, parameters.additionalProps?.ref);
      const props = (0, _appendOwnerState.default)(elementType, {
        ...mergedProps,
        ref
      }, ownerState);
      return props;
    }
    var _default = exports2.default = useSlotProps;
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/useSlotProps/index.js
var require_useSlotProps4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/useSlotProps/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _useSlotProps.default;
      }
    });
    var _useSlotProps = _interopRequireDefault(require_useSlotProps3());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/getReactNodeRef/getReactNodeRef.js
var require_getReactNodeRef3 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/getReactNodeRef/getReactNodeRef.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getReactNodeRef;
    var React7 = _interopRequireWildcard(require_react());
    function getReactNodeRef(element) {
      if (!element || !/* @__PURE__ */ React7.isValidElement(element)) {
        return null;
      }
      return element.props.propertyIsEnumerable("ref") ? element.props.ref : (
        // @ts-expect-error element.ref is not included in the ReactElement type
        // We cannot check for it, but isValidElement is true at this point
        // https://github.com/DefinitelyTyped/DefinitelyTyped/discussions/70189
        element.ref
      );
    }
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/getReactNodeRef/index.js
var require_getReactNodeRef4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/getReactNodeRef/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _getReactNodeRef.default;
      }
    });
    var _getReactNodeRef = _interopRequireDefault(require_getReactNodeRef3());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/getReactElementRef/getReactElementRef.js
var require_getReactElementRef3 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/getReactElementRef/getReactElementRef.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getReactElementRef;
    var React7 = _interopRequireWildcard(require_react());
    function getReactElementRef(element) {
      if (parseInt(React7.version, 10) >= 19) {
        return element?.props?.ref || null;
      }
      return element?.ref || null;
    }
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/getReactElementRef/index.js
var require_getReactElementRef4 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/getReactElementRef/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _getReactElementRef.default;
      }
    });
    var _getReactElementRef = _interopRequireDefault(require_getReactElementRef3());
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/types/index.js
var require_types2 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/types/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
  }
});

// node_modules/@mui/private-theming/node_modules/@mui/utils/index.js
var require_utils5 = __commonJS({
  "node_modules/@mui/private-theming/node_modules/@mui/utils/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      chainPropTypes: true,
      deepmerge: true,
      isPlainObject: true,
      elementAcceptingRef: true,
      elementTypeAcceptingRef: true,
      exactProp: true,
      formatMuiErrorMessage: true,
      getDisplayName: true,
      HTMLElementType: true,
      ponyfillGlobal: true,
      refType: true,
      unstable_capitalize: true,
      unstable_createChainedFunction: true,
      unstable_debounce: true,
      unstable_deprecatedPropType: true,
      unstable_isMuiElement: true,
      unstable_ownerDocument: true,
      unstable_ownerWindow: true,
      unstable_requirePropFactory: true,
      unstable_setRef: true,
      unstable_useEnhancedEffect: true,
      unstable_useId: true,
      unstable_unsupportedProp: true,
      unstable_useControlled: true,
      unstable_useEventCallback: true,
      unstable_useForkRef: true,
      unstable_useLazyRef: true,
      unstable_useTimeout: true,
      unstable_Timeout: true,
      unstable_useOnMount: true,
      unstable_useIsFocusVisible: true,
      unstable_isFocusVisible: true,
      unstable_getScrollbarSize: true,
      usePreviousProps: true,
      getValidReactChildren: true,
      visuallyHidden: true,
      integerPropType: true,
      internal_resolveProps: true,
      unstable_composeClasses: true,
      unstable_generateUtilityClass: true,
      unstable_isGlobalState: true,
      unstable_generateUtilityClasses: true,
      unstable_ClassNameGenerator: true,
      clamp: true,
      unstable_useSlotProps: true,
      unstable_resolveComponentProps: true,
      unstable_extractEventHandlers: true,
      unstable_getReactNodeRef: true,
      unstable_getReactElementRef: true
    };
    Object.defineProperty(exports2, "HTMLElementType", {
      enumerable: true,
      get: function() {
        return _HTMLElementType.default;
      }
    });
    Object.defineProperty(exports2, "chainPropTypes", {
      enumerable: true,
      get: function() {
        return _chainPropTypes.default;
      }
    });
    Object.defineProperty(exports2, "clamp", {
      enumerable: true,
      get: function() {
        return _clamp.default;
      }
    });
    Object.defineProperty(exports2, "deepmerge", {
      enumerable: true,
      get: function() {
        return _deepmerge.default;
      }
    });
    Object.defineProperty(exports2, "elementAcceptingRef", {
      enumerable: true,
      get: function() {
        return _elementAcceptingRef.default;
      }
    });
    Object.defineProperty(exports2, "elementTypeAcceptingRef", {
      enumerable: true,
      get: function() {
        return _elementTypeAcceptingRef.default;
      }
    });
    Object.defineProperty(exports2, "exactProp", {
      enumerable: true,
      get: function() {
        return _exactProp.default;
      }
    });
    Object.defineProperty(exports2, "formatMuiErrorMessage", {
      enumerable: true,
      get: function() {
        return _formatMuiErrorMessage.default;
      }
    });
    Object.defineProperty(exports2, "getDisplayName", {
      enumerable: true,
      get: function() {
        return _getDisplayName.default;
      }
    });
    Object.defineProperty(exports2, "getValidReactChildren", {
      enumerable: true,
      get: function() {
        return _getValidReactChildren.default;
      }
    });
    Object.defineProperty(exports2, "integerPropType", {
      enumerable: true,
      get: function() {
        return _integerPropType.default;
      }
    });
    Object.defineProperty(exports2, "internal_resolveProps", {
      enumerable: true,
      get: function() {
        return _resolveProps.default;
      }
    });
    Object.defineProperty(exports2, "isPlainObject", {
      enumerable: true,
      get: function() {
        return _deepmerge.isPlainObject;
      }
    });
    Object.defineProperty(exports2, "ponyfillGlobal", {
      enumerable: true,
      get: function() {
        return _ponyfillGlobal.default;
      }
    });
    Object.defineProperty(exports2, "refType", {
      enumerable: true,
      get: function() {
        return _refType.default;
      }
    });
    Object.defineProperty(exports2, "unstable_ClassNameGenerator", {
      enumerable: true,
      get: function() {
        return _ClassNameGenerator.default;
      }
    });
    Object.defineProperty(exports2, "unstable_Timeout", {
      enumerable: true,
      get: function() {
        return _useTimeout.Timeout;
      }
    });
    Object.defineProperty(exports2, "unstable_capitalize", {
      enumerable: true,
      get: function() {
        return _capitalize.default;
      }
    });
    Object.defineProperty(exports2, "unstable_composeClasses", {
      enumerable: true,
      get: function() {
        return _composeClasses.default;
      }
    });
    Object.defineProperty(exports2, "unstable_createChainedFunction", {
      enumerable: true,
      get: function() {
        return _createChainedFunction.default;
      }
    });
    Object.defineProperty(exports2, "unstable_debounce", {
      enumerable: true,
      get: function() {
        return _debounce.default;
      }
    });
    Object.defineProperty(exports2, "unstable_deprecatedPropType", {
      enumerable: true,
      get: function() {
        return _deprecatedPropType.default;
      }
    });
    Object.defineProperty(exports2, "unstable_extractEventHandlers", {
      enumerable: true,
      get: function() {
        return _extractEventHandlers.default;
      }
    });
    Object.defineProperty(exports2, "unstable_generateUtilityClass", {
      enumerable: true,
      get: function() {
        return _generateUtilityClass.default;
      }
    });
    Object.defineProperty(exports2, "unstable_generateUtilityClasses", {
      enumerable: true,
      get: function() {
        return _generateUtilityClasses.default;
      }
    });
    Object.defineProperty(exports2, "unstable_getReactElementRef", {
      enumerable: true,
      get: function() {
        return _getReactElementRef.default;
      }
    });
    Object.defineProperty(exports2, "unstable_getReactNodeRef", {
      enumerable: true,
      get: function() {
        return _getReactNodeRef.default;
      }
    });
    Object.defineProperty(exports2, "unstable_getScrollbarSize", {
      enumerable: true,
      get: function() {
        return _getScrollbarSize.default;
      }
    });
    Object.defineProperty(exports2, "unstable_isFocusVisible", {
      enumerable: true,
      get: function() {
        return _isFocusVisible.default;
      }
    });
    Object.defineProperty(exports2, "unstable_isGlobalState", {
      enumerable: true,
      get: function() {
        return _generateUtilityClass.isGlobalState;
      }
    });
    Object.defineProperty(exports2, "unstable_isMuiElement", {
      enumerable: true,
      get: function() {
        return _isMuiElement.default;
      }
    });
    Object.defineProperty(exports2, "unstable_ownerDocument", {
      enumerable: true,
      get: function() {
        return _ownerDocument.default;
      }
    });
    Object.defineProperty(exports2, "unstable_ownerWindow", {
      enumerable: true,
      get: function() {
        return _ownerWindow.default;
      }
    });
    Object.defineProperty(exports2, "unstable_requirePropFactory", {
      enumerable: true,
      get: function() {
        return _requirePropFactory.default;
      }
    });
    Object.defineProperty(exports2, "unstable_resolveComponentProps", {
      enumerable: true,
      get: function() {
        return _resolveComponentProps.default;
      }
    });
    Object.defineProperty(exports2, "unstable_setRef", {
      enumerable: true,
      get: function() {
        return _setRef.default;
      }
    });
    Object.defineProperty(exports2, "unstable_unsupportedProp", {
      enumerable: true,
      get: function() {
        return _unsupportedProp.default;
      }
    });
    Object.defineProperty(exports2, "unstable_useControlled", {
      enumerable: true,
      get: function() {
        return _useControlled.default;
      }
    });
    Object.defineProperty(exports2, "unstable_useEnhancedEffect", {
      enumerable: true,
      get: function() {
        return _useEnhancedEffect.default;
      }
    });
    Object.defineProperty(exports2, "unstable_useEventCallback", {
      enumerable: true,
      get: function() {
        return _useEventCallback.default;
      }
    });
    Object.defineProperty(exports2, "unstable_useForkRef", {
      enumerable: true,
      get: function() {
        return _useForkRef.default;
      }
    });
    Object.defineProperty(exports2, "unstable_useId", {
      enumerable: true,
      get: function() {
        return _useId.default;
      }
    });
    Object.defineProperty(exports2, "unstable_useIsFocusVisible", {
      enumerable: true,
      get: function() {
        return _useIsFocusVisible.default;
      }
    });
    Object.defineProperty(exports2, "unstable_useLazyRef", {
      enumerable: true,
      get: function() {
        return _useLazyRef.default;
      }
    });
    Object.defineProperty(exports2, "unstable_useOnMount", {
      enumerable: true,
      get: function() {
        return _useOnMount.default;
      }
    });
    Object.defineProperty(exports2, "unstable_useSlotProps", {
      enumerable: true,
      get: function() {
        return _useSlotProps.default;
      }
    });
    Object.defineProperty(exports2, "unstable_useTimeout", {
      enumerable: true,
      get: function() {
        return _useTimeout.default;
      }
    });
    Object.defineProperty(exports2, "usePreviousProps", {
      enumerable: true,
      get: function() {
        return _usePreviousProps.default;
      }
    });
    Object.defineProperty(exports2, "visuallyHidden", {
      enumerable: true,
      get: function() {
        return _visuallyHidden.default;
      }
    });
    var _chainPropTypes = _interopRequireDefault(require_chainPropTypes4());
    var _deepmerge = _interopRequireWildcard(require_deepmerge6());
    var _elementAcceptingRef = _interopRequireDefault(require_elementAcceptingRef4());
    var _elementTypeAcceptingRef = _interopRequireDefault(require_elementTypeAcceptingRef4());
    var _exactProp = _interopRequireDefault(require_exactProp4());
    var _formatMuiErrorMessage = _interopRequireDefault(require_formatMuiErrorMessage6());
    var _getDisplayName = _interopRequireDefault(require_getDisplayName6());
    var _HTMLElementType = _interopRequireDefault(require_HTMLElementType4());
    var _ponyfillGlobal = _interopRequireDefault(require_ponyfillGlobal4());
    var _refType = _interopRequireDefault(require_refType4());
    var _capitalize = _interopRequireDefault(require_capitalize7());
    var _createChainedFunction = _interopRequireDefault(require_createChainedFunction5());
    var _debounce = _interopRequireDefault(require_debounce5());
    var _deprecatedPropType = _interopRequireDefault(require_deprecatedPropType5());
    var _isMuiElement = _interopRequireDefault(require_isMuiElement5());
    var _ownerDocument = _interopRequireDefault(require_ownerDocument5());
    var _ownerWindow = _interopRequireDefault(require_ownerWindow5());
    var _requirePropFactory = _interopRequireDefault(require_requirePropFactory5());
    var _setRef = _interopRequireDefault(require_setRef5());
    var _useEnhancedEffect = _interopRequireDefault(require_useEnhancedEffect7());
    var _useId = _interopRequireDefault(require_useId5());
    var _unsupportedProp = _interopRequireDefault(require_unsupportedProp5());
    var _useControlled = _interopRequireDefault(require_useControlled5());
    var _useEventCallback = _interopRequireDefault(require_useEventCallback5());
    var _useForkRef = _interopRequireDefault(require_useForkRef5());
    var _useLazyRef = _interopRequireDefault(require_useLazyRef4());
    var _useTimeout = _interopRequireWildcard(require_useTimeout4());
    var _useOnMount = _interopRequireDefault(require_useOnMount4());
    var _useIsFocusVisible = _interopRequireDefault(require_useIsFocusVisible4());
    var _isFocusVisible = _interopRequireDefault(require_isFocusVisible4());
    var _getScrollbarSize = _interopRequireDefault(require_getScrollbarSize4());
    var _usePreviousProps = _interopRequireDefault(require_usePreviousProps4());
    var _getValidReactChildren = _interopRequireDefault(require_getValidReactChildren4());
    var _visuallyHidden = _interopRequireDefault(require_visuallyHidden4());
    var _integerPropType = _interopRequireDefault(require_integerPropType4());
    var _resolveProps = _interopRequireDefault(require_resolveProps6());
    var _composeClasses = _interopRequireDefault(require_composeClasses4());
    var _generateUtilityClass = _interopRequireWildcard(require_generateUtilityClass6());
    Object.keys(_generateUtilityClass).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _generateUtilityClass[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _generateUtilityClass[key];
        }
      });
    });
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses6());
    var _ClassNameGenerator = _interopRequireDefault(require_ClassNameGenerator6());
    var _clamp = _interopRequireDefault(require_clamp6());
    var _useSlotProps = _interopRequireDefault(require_useSlotProps4());
    var _resolveComponentProps = _interopRequireDefault(require_resolveComponentProps4());
    var _extractEventHandlers = _interopRequireDefault(require_extractEventHandlers4());
    var _getReactNodeRef = _interopRequireDefault(require_getReactNodeRef4());
    var _getReactElementRef = _interopRequireDefault(require_getReactElementRef4());
    var _types = require_types2();
    Object.keys(_types).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _types[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _types[key];
        }
      });
    });
  }
});

// node_modules/@mui/private-theming/useTheme/ThemeContext.js
var require_ThemeContext2 = __commonJS({
  "node_modules/@mui/private-theming/useTheme/ThemeContext.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var ThemeContext2 = /* @__PURE__ */ React7.createContext(null);
    if (define_process_env_default.NODE_ENV !== "production") {
      ThemeContext2.displayName = "ThemeContext";
    }
    var _default = exports2.default = ThemeContext2;
  }
});

// node_modules/@mui/private-theming/useTheme/useTheme.js
var require_useTheme8 = __commonJS({
  "node_modules/@mui/private-theming/useTheme/useTheme.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = useTheme3;
    var React7 = _interopRequireWildcard(require_react());
    var _ThemeContext = _interopRequireDefault(require_ThemeContext2());
    function useTheme3() {
      const theme2 = React7.useContext(_ThemeContext.default);
      if (define_process_env_default.NODE_ENV !== "production") {
        React7.useDebugValue(theme2);
      }
      return theme2;
    }
  }
});

// node_modules/@mui/private-theming/useTheme/index.js
var require_useTheme9 = __commonJS({
  "node_modules/@mui/private-theming/useTheme/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _useTheme.default;
      }
    });
    var _useTheme = _interopRequireDefault(require_useTheme8());
  }
});

// node_modules/@mui/private-theming/ThemeProvider/nested.js
var require_nested2 = __commonJS({
  "node_modules/@mui/private-theming/ThemeProvider/nested.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var hasSymbol = typeof Symbol === "function" && Symbol.for;
    var _default = exports2.default = hasSymbol ? Symbol.for("mui.nested") : "__THEME_NESTED__";
  }
});

// node_modules/@mui/private-theming/ThemeProvider/ThemeProvider.js
var require_ThemeProvider6 = __commonJS({
  "node_modules/@mui/private-theming/ThemeProvider/ThemeProvider.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _utils = require_utils5();
    var _ThemeContext = _interopRequireDefault(require_ThemeContext2());
    var _useTheme = _interopRequireDefault(require_useTheme9());
    var _nested = _interopRequireDefault(require_nested2());
    var _jsxRuntime = require_jsx_runtime();
    function mergeOuterLocalTheme(outerTheme, localTheme) {
      if (typeof localTheme === "function") {
        const mergedTheme = localTheme(outerTheme);
        if (define_process_env_default.NODE_ENV !== "production") {
          if (!mergedTheme) {
            console.error(["MUI: You should return an object from your theme function, i.e.", "<ThemeProvider theme={() => ({})} />"].join("\n"));
          }
        }
        return mergedTheme;
      }
      return {
        ...outerTheme,
        ...localTheme
      };
    }
    function ThemeProvider4(props) {
      const {
        children,
        theme: localTheme
      } = props;
      const outerTheme = (0, _useTheme.default)();
      if (define_process_env_default.NODE_ENV !== "production") {
        if (outerTheme === null && typeof localTheme === "function") {
          console.error(["MUI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join("\n"));
        }
      }
      const theme2 = React7.useMemo(() => {
        const output = outerTheme === null ? {
          ...localTheme
        } : mergeOuterLocalTheme(outerTheme, localTheme);
        if (output != null) {
          output[_nested.default] = outerTheme !== null;
        }
        return output;
      }, [localTheme, outerTheme]);
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_ThemeContext.default.Provider, {
        value: theme2,
        children
      });
    }
    define_process_env_default.NODE_ENV !== "production" ? ThemeProvider4.propTypes = {
      /**
       * Your component tree.
       */
      children: _propTypes.default.node,
      /**
       * A theme object. You can provide a function to extend the outer theme.
       */
      theme: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func]).isRequired
    } : void 0;
    if (define_process_env_default.NODE_ENV !== "production") {
      define_process_env_default.NODE_ENV !== "production" ? ThemeProvider4.propTypes = (0, _utils.exactProp)(ThemeProvider4.propTypes) : void 0;
    }
    var _default = exports2.default = ThemeProvider4;
  }
});

// node_modules/@mui/private-theming/ThemeProvider/index.js
var require_ThemeProvider7 = __commonJS({
  "node_modules/@mui/private-theming/ThemeProvider/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _ThemeProvider.default;
      }
    });
    Object.defineProperty(exports2, "unstable_nested", {
      enumerable: true,
      get: function() {
        return _nested.default;
      }
    });
    var _ThemeProvider = _interopRequireDefault(require_ThemeProvider6());
    var _nested = _interopRequireDefault(require_nested2());
  }
});

// node_modules/@mui/private-theming/index.js
var require_private_theming = __commonJS({
  "node_modules/@mui/private-theming/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      ThemeProvider: true,
      useTheme: true
    };
    Object.defineProperty(exports2, "ThemeProvider", {
      enumerable: true,
      get: function() {
        return _ThemeProvider.default;
      }
    });
    Object.defineProperty(exports2, "useTheme", {
      enumerable: true,
      get: function() {
        return _useTheme.default;
      }
    });
    var _ThemeProvider = _interopRequireWildcard(require_ThemeProvider7());
    Object.keys(_ThemeProvider).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _ThemeProvider[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _ThemeProvider[key];
        }
      });
    });
    var _useTheme = _interopRequireDefault(require_useTheme9());
  }
});

// node_modules/@mui/system/node_modules/@mui/utils/exactProp/exactProp.js
var require_exactProp5 = __commonJS({
  "node_modules/@mui/system/node_modules/@mui/utils/exactProp/exactProp.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = exactProp;
    var specialProperty = "exact-prop: \u200B";
    function exactProp(propTypes) {
      if (define_process_env_default.NODE_ENV === "production") {
        return propTypes;
      }
      return {
        ...propTypes,
        [specialProperty]: (props) => {
          const unsupportedProps = Object.keys(props).filter((prop) => !propTypes.hasOwnProperty(prop));
          if (unsupportedProps.length > 0) {
            return new Error(`The following props are not supported: ${unsupportedProps.map((prop) => `\`${prop}\``).join(", ")}. Please remove them.`);
          }
          return null;
        }
      };
    }
  }
});

// node_modules/@mui/system/node_modules/@mui/utils/exactProp/index.js
var require_exactProp6 = __commonJS({
  "node_modules/@mui/system/node_modules/@mui/utils/exactProp/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _exactProp.default;
      }
    });
    var _exactProp = _interopRequireDefault(require_exactProp5());
  }
});

// node_modules/@mui/system/DefaultPropsProvider/DefaultPropsProvider.js
var require_DefaultPropsProvider5 = __commonJS({
  "node_modules/@mui/system/DefaultPropsProvider/DefaultPropsProvider.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.useDefaultProps = useDefaultProps;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _resolveProps = _interopRequireDefault(require_resolveProps4());
    var _jsxRuntime = require_jsx_runtime();
    var PropsContext = /* @__PURE__ */ React7.createContext(void 0);
    function DefaultPropsProvider({
      value,
      children
    }) {
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(PropsContext.Provider, {
        value,
        children
      });
    }
    define_process_env_default.NODE_ENV !== "production" ? DefaultPropsProvider.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * @ignore
       */
      children: _propTypes.default.node,
      /**
       * @ignore
       */
      value: _propTypes.default.object
    } : void 0;
    function getThemeProps(params) {
      const {
        theme: theme2,
        name,
        props
      } = params;
      if (!theme2 || !theme2.components || !theme2.components[name]) {
        return props;
      }
      const config = theme2.components[name];
      if (config.defaultProps) {
        return (0, _resolveProps.default)(config.defaultProps, props);
      }
      if (!config.styleOverrides && !config.variants) {
        return (0, _resolveProps.default)(config, props);
      }
      return props;
    }
    function useDefaultProps({
      props,
      name
    }) {
      const ctx = React7.useContext(PropsContext);
      return getThemeProps({
        props,
        name,
        theme: {
          components: ctx
        }
      });
    }
    var _default = exports2.default = DefaultPropsProvider;
  }
});

// node_modules/@mui/system/DefaultPropsProvider/index.js
var require_DefaultPropsProvider6 = __commonJS({
  "node_modules/@mui/system/DefaultPropsProvider/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _DefaultPropsProvider.default;
      }
    });
    Object.defineProperty(exports2, "useDefaultProps", {
      enumerable: true,
      get: function() {
        return _DefaultPropsProvider.useDefaultProps;
      }
    });
    var _DefaultPropsProvider = _interopRequireWildcard(require_DefaultPropsProvider5());
  }
});

// node_modules/@mui/system/ThemeProvider/ThemeProvider.js
var require_ThemeProvider8 = __commonJS({
  "node_modules/@mui/system/ThemeProvider/ThemeProvider.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _privateTheming = require_private_theming();
    var _exactProp = _interopRequireDefault(require_exactProp6());
    var _styledEngine = require_styled_engine();
    var _useThemeWithoutDefault = _interopRequireDefault(require_useThemeWithoutDefault4());
    var _RtlProvider = _interopRequireDefault(require_RtlProvider2());
    var _DefaultPropsProvider = _interopRequireDefault(require_DefaultPropsProvider6());
    var _jsxRuntime = require_jsx_runtime();
    var EMPTY_THEME = {};
    function useThemeScoping(themeId, upperTheme, localTheme, isPrivate = false) {
      return React7.useMemo(() => {
        const resolvedTheme = themeId ? upperTheme[themeId] || upperTheme : upperTheme;
        if (typeof localTheme === "function") {
          const mergedTheme = localTheme(resolvedTheme);
          const result = themeId ? {
            ...upperTheme,
            [themeId]: mergedTheme
          } : mergedTheme;
          if (isPrivate) {
            return () => result;
          }
          return result;
        }
        return themeId ? {
          ...upperTheme,
          [themeId]: localTheme
        } : {
          ...upperTheme,
          ...localTheme
        };
      }, [themeId, upperTheme, localTheme, isPrivate]);
    }
    function ThemeProvider4(props) {
      const {
        children,
        theme: localTheme,
        themeId
      } = props;
      const upperTheme = (0, _useThemeWithoutDefault.default)(EMPTY_THEME);
      const upperPrivateTheme = (0, _privateTheming.useTheme)() || EMPTY_THEME;
      if (define_process_env_default.NODE_ENV !== "production") {
        if (upperTheme === null && typeof localTheme === "function" || themeId && upperTheme && !upperTheme[themeId] && typeof localTheme === "function") {
          console.error(["MUI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join("\n"));
        }
      }
      const engineTheme = useThemeScoping(themeId, upperTheme, localTheme);
      const privateTheme = useThemeScoping(themeId, upperPrivateTheme, localTheme, true);
      const rtlValue = (themeId ? engineTheme[themeId] : engineTheme).direction === "rtl";
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_privateTheming.ThemeProvider, {
        theme: privateTheme,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(_styledEngine.ThemeContext.Provider, {
          value: engineTheme,
          children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(_RtlProvider.default, {
            value: rtlValue,
            children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(_DefaultPropsProvider.default, {
              value: themeId ? engineTheme[themeId].components : engineTheme.components,
              children
            })
          })
        })
      });
    }
    define_process_env_default.NODE_ENV !== "production" ? ThemeProvider4.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * Your component tree.
       */
      children: _propTypes.default.node,
      /**
       * A theme object. You can provide a function to extend the outer theme.
       */
      theme: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]).isRequired,
      /**
       * The design system's unique id for getting the corresponded theme when there are multiple design systems.
       */
      themeId: _propTypes.default.string
    } : void 0;
    if (define_process_env_default.NODE_ENV !== "production") {
      define_process_env_default.NODE_ENV !== "production" ? ThemeProvider4.propTypes = (0, _exactProp.default)(ThemeProvider4.propTypes) : void 0;
    }
    var _default = exports2.default = ThemeProvider4;
  }
});

// node_modules/@mui/system/ThemeProvider/index.js
var require_ThemeProvider9 = __commonJS({
  "node_modules/@mui/system/ThemeProvider/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _ThemeProvider.default;
      }
    });
    var _ThemeProvider = _interopRequireDefault(require_ThemeProvider8());
  }
});

// node_modules/@mui/system/memoTheme.js
var require_memoTheme3 = __commonJS({
  "node_modules/@mui/system/memoTheme.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = unstable_memoTheme;
    var _preprocessStyles = _interopRequireDefault(require_preprocessStyles2());
    var arg = {
      theme: void 0
    };
    function unstable_memoTheme(styleFn) {
      let lastValue;
      let lastTheme;
      return function styleMemoized(props) {
        let value = lastValue;
        if (value === void 0 || props.theme !== lastTheme) {
          arg.theme = props.theme;
          value = (0, _preprocessStyles.default)(styleFn(arg));
          lastValue = value;
          lastTheme = props.theme;
        }
        return value;
      };
    }
  }
});

// node_modules/@mui/system/InitColorSchemeScript/InitColorSchemeScript.js
var require_InitColorSchemeScript4 = __commonJS({
  "node_modules/@mui/system/InitColorSchemeScript/InitColorSchemeScript.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.DEFAULT_MODE_STORAGE_KEY = exports2.DEFAULT_COLOR_SCHEME_STORAGE_KEY = exports2.DEFAULT_ATTRIBUTE = void 0;
    exports2.default = InitColorSchemeScript;
    var React7 = _interopRequireWildcard(require_react());
    var _jsxRuntime = require_jsx_runtime();
    var DEFAULT_MODE_STORAGE_KEY = exports2.DEFAULT_MODE_STORAGE_KEY = "mode";
    var DEFAULT_COLOR_SCHEME_STORAGE_KEY = exports2.DEFAULT_COLOR_SCHEME_STORAGE_KEY = "color-scheme";
    var DEFAULT_ATTRIBUTE = exports2.DEFAULT_ATTRIBUTE = "data-color-scheme";
    function InitColorSchemeScript(options) {
      const {
        defaultMode = "system",
        defaultLightColorScheme = "light",
        defaultDarkColorScheme = "dark",
        modeStorageKey = DEFAULT_MODE_STORAGE_KEY,
        colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,
        attribute: initialAttribute = DEFAULT_ATTRIBUTE,
        colorSchemeNode = "document.documentElement",
        nonce
      } = options || {};
      let setter = "";
      let attribute = initialAttribute;
      if (initialAttribute === "class") {
        attribute = ".%s";
      }
      if (initialAttribute === "data") {
        attribute = "[data-%s]";
      }
      if (attribute.startsWith(".")) {
        const selector = attribute.substring(1);
        setter += `${colorSchemeNode}.classList.remove('${selector}'.replace('%s', light), '${selector}'.replace('%s', dark));
      ${colorSchemeNode}.classList.add('${selector}'.replace('%s', colorScheme));`;
      }
      const matches = attribute.match(/\[([^\]]+)\]/);
      if (matches) {
        const [attr, value] = matches[1].split("=");
        if (!value) {
          setter += `${colorSchemeNode}.removeAttribute('${attr}'.replace('%s', light));
      ${colorSchemeNode}.removeAttribute('${attr}'.replace('%s', dark));`;
        }
        setter += `
      ${colorSchemeNode}.setAttribute('${attr}'.replace('%s', colorScheme), ${value ? `${value}.replace('%s', colorScheme)` : '""'});`;
      } else {
        setter += `${colorSchemeNode}.setAttribute('${attribute}', colorScheme);`;
      }
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)("script", {
        suppressHydrationWarning: true,
        nonce: typeof window === "undefined" ? nonce : "",
        dangerouslySetInnerHTML: {
          __html: `(function() {
try {
  let colorScheme = '';
  const mode = localStorage.getItem('${modeStorageKey}') || '${defaultMode}';
  const dark = localStorage.getItem('${colorSchemeStorageKey}-dark') || '${defaultDarkColorScheme}';
  const light = localStorage.getItem('${colorSchemeStorageKey}-light') || '${defaultLightColorScheme}';
  if (mode === 'system') {
    // handle system mode
    const mql = window.matchMedia('(prefers-color-scheme: dark)');
    if (mql.matches) {
      colorScheme = dark
    } else {
      colorScheme = light
    }
  }
  if (mode === 'light') {
    colorScheme = light;
  }
  if (mode === 'dark') {
    colorScheme = dark;
  }
  if (colorScheme) {
    ${setter}
  }
} catch(e){}})();`
        }
      }, "mui-color-scheme-init");
    }
  }
});

// node_modules/@mui/system/cssVars/localStorageManager.js
var require_localStorageManager2 = __commonJS({
  "node_modules/@mui/system/cssVars/localStorageManager.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    function noop() {
    }
    var localStorageManager = ({
      key,
      storageWindow
    }) => {
      if (!storageWindow && typeof window !== "undefined") {
        storageWindow = window;
      }
      return {
        get(defaultValue) {
          if (typeof window === "undefined") {
            return void 0;
          }
          if (!storageWindow) {
            return defaultValue;
          }
          let value;
          try {
            value = storageWindow.localStorage.getItem(key);
          } catch {
          }
          return value || defaultValue;
        },
        set: (value) => {
          if (storageWindow) {
            try {
              storageWindow.localStorage.setItem(key, value);
            } catch {
            }
          }
        },
        subscribe: (handler) => {
          if (!storageWindow) {
            return noop;
          }
          const listener = (event) => {
            const value = event.newValue;
            if (event.key === key) {
              handler(value);
            }
          };
          storageWindow.addEventListener("storage", listener);
          return () => {
            storageWindow.removeEventListener("storage", listener);
          };
        }
      };
    };
    var _default = exports2.default = localStorageManager;
  }
});

// node_modules/@mui/system/cssVars/useCurrentColorScheme.js
var require_useCurrentColorScheme2 = __commonJS({
  "node_modules/@mui/system/cssVars/useCurrentColorScheme.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = useCurrentColorScheme;
    exports2.getColorScheme = getColorScheme;
    exports2.getSystemMode = getSystemMode;
    var React7 = _interopRequireWildcard(require_react());
    var _InitColorSchemeScript = require_InitColorSchemeScript4();
    var _localStorageManager = _interopRequireDefault(require_localStorageManager2());
    function noop() {
    }
    function getSystemMode(mode) {
      if (typeof window !== "undefined" && typeof window.matchMedia === "function" && mode === "system") {
        const mql = window.matchMedia("(prefers-color-scheme: dark)");
        if (mql.matches) {
          return "dark";
        }
        return "light";
      }
      return void 0;
    }
    function processState(state, callback) {
      if (state.mode === "light" || state.mode === "system" && state.systemMode === "light") {
        return callback("light");
      }
      if (state.mode === "dark" || state.mode === "system" && state.systemMode === "dark") {
        return callback("dark");
      }
      return void 0;
    }
    function getColorScheme(state) {
      return processState(state, (mode) => {
        if (mode === "light") {
          return state.lightColorScheme;
        }
        if (mode === "dark") {
          return state.darkColorScheme;
        }
        return void 0;
      });
    }
    function useCurrentColorScheme(options) {
      const {
        defaultMode = "light",
        defaultLightColorScheme,
        defaultDarkColorScheme,
        supportedColorSchemes = [],
        modeStorageKey = _InitColorSchemeScript.DEFAULT_MODE_STORAGE_KEY,
        colorSchemeStorageKey = _InitColorSchemeScript.DEFAULT_COLOR_SCHEME_STORAGE_KEY,
        storageWindow = typeof window === "undefined" ? void 0 : window,
        storageManager = _localStorageManager.default,
        noSsr = false
      } = options;
      const joinedColorSchemes = supportedColorSchemes.join(",");
      const isMultiSchemes = supportedColorSchemes.length > 1;
      const modeStorage = React7.useMemo(() => storageManager?.({
        key: modeStorageKey,
        storageWindow
      }), [storageManager, modeStorageKey, storageWindow]);
      const lightStorage = React7.useMemo(() => storageManager?.({
        key: `${colorSchemeStorageKey}-light`,
        storageWindow
      }), [storageManager, colorSchemeStorageKey, storageWindow]);
      const darkStorage = React7.useMemo(() => storageManager?.({
        key: `${colorSchemeStorageKey}-dark`,
        storageWindow
      }), [storageManager, colorSchemeStorageKey, storageWindow]);
      const [state, setState] = React7.useState(() => {
        const initialMode = modeStorage?.get(defaultMode) || defaultMode;
        const lightColorScheme = lightStorage?.get(defaultLightColorScheme) || defaultLightColorScheme;
        const darkColorScheme = darkStorage?.get(defaultDarkColorScheme) || defaultDarkColorScheme;
        return {
          mode: initialMode,
          systemMode: getSystemMode(initialMode),
          lightColorScheme,
          darkColorScheme
        };
      });
      const [isClient, setIsClient] = React7.useState(noSsr || !isMultiSchemes);
      React7.useEffect(() => {
        setIsClient(true);
      }, []);
      const colorScheme = getColorScheme(state);
      const setMode = React7.useCallback((mode) => {
        setState((currentState) => {
          if (mode === currentState.mode) {
            return currentState;
          }
          const newMode = mode ?? defaultMode;
          modeStorage?.set(newMode);
          return {
            ...currentState,
            mode: newMode,
            systemMode: getSystemMode(newMode)
          };
        });
      }, [modeStorage, defaultMode]);
      const setColorScheme = React7.useCallback((value) => {
        if (!value) {
          setState((currentState) => {
            lightStorage?.set(defaultLightColorScheme);
            darkStorage?.set(defaultDarkColorScheme);
            return {
              ...currentState,
              lightColorScheme: defaultLightColorScheme,
              darkColorScheme: defaultDarkColorScheme
            };
          });
        } else if (typeof value === "string") {
          if (value && !joinedColorSchemes.includes(value)) {
            console.error(`\`${value}\` does not exist in \`theme.colorSchemes\`.`);
          } else {
            setState((currentState) => {
              const newState = {
                ...currentState
              };
              processState(currentState, (mode) => {
                if (mode === "light") {
                  lightStorage?.set(value);
                  newState.lightColorScheme = value;
                }
                if (mode === "dark") {
                  darkStorage?.set(value);
                  newState.darkColorScheme = value;
                }
              });
              return newState;
            });
          }
        } else {
          setState((currentState) => {
            const newState = {
              ...currentState
            };
            const newLightColorScheme = value.light === null ? defaultLightColorScheme : value.light;
            const newDarkColorScheme = value.dark === null ? defaultDarkColorScheme : value.dark;
            if (newLightColorScheme) {
              if (!joinedColorSchemes.includes(newLightColorScheme)) {
                console.error(`\`${newLightColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
              } else {
                newState.lightColorScheme = newLightColorScheme;
                lightStorage?.set(newLightColorScheme);
              }
            }
            if (newDarkColorScheme) {
              if (!joinedColorSchemes.includes(newDarkColorScheme)) {
                console.error(`\`${newDarkColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
              } else {
                newState.darkColorScheme = newDarkColorScheme;
                darkStorage?.set(newDarkColorScheme);
              }
            }
            return newState;
          });
        }
      }, [joinedColorSchemes, lightStorage, darkStorage, defaultLightColorScheme, defaultDarkColorScheme]);
      const handleMediaQuery = React7.useCallback((event) => {
        if (state.mode === "system") {
          setState((currentState) => {
            const systemMode = event?.matches ? "dark" : "light";
            if (currentState.systemMode === systemMode) {
              return currentState;
            }
            return {
              ...currentState,
              systemMode
            };
          });
        }
      }, [state.mode]);
      const mediaListener = React7.useRef(handleMediaQuery);
      mediaListener.current = handleMediaQuery;
      React7.useEffect(() => {
        if (typeof window.matchMedia !== "function" || !isMultiSchemes) {
          return void 0;
        }
        const handler = (...args) => mediaListener.current(...args);
        const media = window.matchMedia("(prefers-color-scheme: dark)");
        media.addListener(handler);
        handler(media);
        return () => {
          media.removeListener(handler);
        };
      }, [isMultiSchemes]);
      React7.useEffect(() => {
        if (isMultiSchemes) {
          const unsubscribeMode = modeStorage?.subscribe((value) => {
            if (!value || ["light", "dark", "system"].includes(value)) {
              setMode(value || defaultMode);
            }
          }) || noop;
          const unsubscribeLight = lightStorage?.subscribe((value) => {
            if (!value || joinedColorSchemes.match(value)) {
              setColorScheme({
                light: value
              });
            }
          }) || noop;
          const unsubscribeDark = darkStorage?.subscribe((value) => {
            if (!value || joinedColorSchemes.match(value)) {
              setColorScheme({
                dark: value
              });
            }
          }) || noop;
          return () => {
            unsubscribeMode();
            unsubscribeLight();
            unsubscribeDark();
          };
        }
        return void 0;
      }, [setColorScheme, setMode, joinedColorSchemes, defaultMode, storageWindow, isMultiSchemes, modeStorage, lightStorage, darkStorage]);
      return {
        ...state,
        mode: isClient ? state.mode : void 0,
        systemMode: isClient ? state.systemMode : void 0,
        colorScheme: isClient ? colorScheme : void 0,
        setMode,
        setColorScheme
      };
    }
  }
});

// node_modules/@mui/system/cssVars/createCssVarsProvider.js
var require_createCssVarsProvider2 = __commonJS({
  "node_modules/@mui/system/cssVars/createCssVarsProvider.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.DISABLE_CSS_TRANSITION = void 0;
    exports2.default = createCssVarsProvider;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _styledEngine = require_styled_engine();
    var _privateTheming = require_private_theming();
    var _useEnhancedEffect = _interopRequireDefault(require_useEnhancedEffect5());
    var _ThemeProvider = _interopRequireDefault(require_ThemeProvider9());
    var _InitColorSchemeScript = _interopRequireWildcard(require_InitColorSchemeScript4());
    var _useCurrentColorScheme = _interopRequireDefault(require_useCurrentColorScheme2());
    var _jsxRuntime = require_jsx_runtime();
    var DISABLE_CSS_TRANSITION = exports2.DISABLE_CSS_TRANSITION = "*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}";
    function createCssVarsProvider(options) {
      const {
        themeId,
        /**
         * This `theme` object needs to follow a certain structure to
         * be used correctly by the finel `CssVarsProvider`. It should have a
         * `colorSchemes` key with the light and dark (and any other) palette.
         * It should also ideally have a vars object created using `prepareCssVars`.
         */
        theme: defaultTheme = {},
        modeStorageKey: defaultModeStorageKey = _InitColorSchemeScript.DEFAULT_MODE_STORAGE_KEY,
        colorSchemeStorageKey: defaultColorSchemeStorageKey = _InitColorSchemeScript.DEFAULT_COLOR_SCHEME_STORAGE_KEY,
        disableTransitionOnChange: designSystemTransitionOnChange = false,
        defaultColorScheme,
        resolveTheme
      } = options;
      const defaultContext = {
        allColorSchemes: [],
        colorScheme: void 0,
        darkColorScheme: void 0,
        lightColorScheme: void 0,
        mode: void 0,
        setColorScheme: () => {
        },
        setMode: () => {
        },
        systemMode: void 0
      };
      const ColorSchemeContext = /* @__PURE__ */ React7.createContext(void 0);
      if (define_process_env_default.NODE_ENV !== "production") {
        ColorSchemeContext.displayName = "ColorSchemeContext";
      }
      const useColorScheme = () => React7.useContext(ColorSchemeContext) || defaultContext;
      const defaultColorSchemes = {};
      const defaultComponents = {};
      function CssVarsProvider(props) {
        const {
          children,
          theme: themeProp,
          modeStorageKey = defaultModeStorageKey,
          colorSchemeStorageKey = defaultColorSchemeStorageKey,
          disableTransitionOnChange = designSystemTransitionOnChange,
          storageManager,
          storageWindow = typeof window === "undefined" ? void 0 : window,
          documentNode = typeof document === "undefined" ? void 0 : document,
          colorSchemeNode = typeof document === "undefined" ? void 0 : document.documentElement,
          disableNestedContext = false,
          disableStyleSheetGeneration = false,
          defaultMode: initialMode = "system",
          forceThemeRerender = false,
          noSsr
        } = props;
        const hasMounted = React7.useRef(false);
        const upperTheme = (0, _privateTheming.useTheme)();
        const ctx = React7.useContext(ColorSchemeContext);
        const nested = !!ctx && !disableNestedContext;
        const initialTheme = React7.useMemo(() => {
          if (themeProp) {
            return themeProp;
          }
          return typeof defaultTheme === "function" ? defaultTheme() : defaultTheme;
        }, [themeProp]);
        const scopedTheme = initialTheme[themeId];
        const restThemeProp = scopedTheme || initialTheme;
        const {
          colorSchemes = defaultColorSchemes,
          components = defaultComponents,
          cssVarPrefix
        } = restThemeProp;
        const joinedColorSchemes = Object.keys(colorSchemes).filter((k) => !!colorSchemes[k]).join(",");
        const allColorSchemes = React7.useMemo(() => joinedColorSchemes.split(","), [joinedColorSchemes]);
        const defaultLightColorScheme2 = typeof defaultColorScheme === "string" ? defaultColorScheme : defaultColorScheme.light;
        const defaultDarkColorScheme2 = typeof defaultColorScheme === "string" ? defaultColorScheme : defaultColorScheme.dark;
        const defaultMode = colorSchemes[defaultLightColorScheme2] && colorSchemes[defaultDarkColorScheme2] ? initialMode : colorSchemes[restThemeProp.defaultColorScheme]?.palette?.mode || restThemeProp.palette?.mode;
        const {
          mode: stateMode,
          setMode,
          systemMode,
          lightColorScheme,
          darkColorScheme,
          colorScheme: stateColorScheme,
          setColorScheme
        } = (0, _useCurrentColorScheme.default)({
          supportedColorSchemes: allColorSchemes,
          defaultLightColorScheme: defaultLightColorScheme2,
          defaultDarkColorScheme: defaultDarkColorScheme2,
          modeStorageKey,
          colorSchemeStorageKey,
          defaultMode,
          storageManager,
          storageWindow,
          noSsr
        });
        let mode = stateMode;
        let colorScheme = stateColorScheme;
        if (nested) {
          mode = ctx.mode;
          colorScheme = ctx.colorScheme;
        }
        if (define_process_env_default.NODE_ENV !== "production") {
          if (forceThemeRerender && !restThemeProp.vars) {
            console.warn(["MUI: The `forceThemeRerender` prop should only be used with CSS theme variables.", "Note that it will slow down the app when changing between modes, so only do this when you cannot find a better solution."].join("\n"));
          }
        }
        let calculatedColorScheme = colorScheme || restThemeProp.defaultColorScheme;
        if (restThemeProp.vars && !forceThemeRerender) {
          calculatedColorScheme = restThemeProp.defaultColorScheme;
        }
        const memoTheme = React7.useMemo(() => {
          const themeVars = restThemeProp.generateThemeVars?.() || restThemeProp.vars;
          const theme2 = {
            ...restThemeProp,
            components,
            colorSchemes,
            cssVarPrefix,
            vars: themeVars
          };
          if (typeof theme2.generateSpacing === "function") {
            theme2.spacing = theme2.generateSpacing();
          }
          if (calculatedColorScheme) {
            const scheme = colorSchemes[calculatedColorScheme];
            if (scheme && typeof scheme === "object") {
              Object.keys(scheme).forEach((schemeKey) => {
                if (scheme[schemeKey] && typeof scheme[schemeKey] === "object") {
                  theme2[schemeKey] = {
                    ...theme2[schemeKey],
                    ...scheme[schemeKey]
                  };
                } else {
                  theme2[schemeKey] = scheme[schemeKey];
                }
              });
            }
          }
          return resolveTheme ? resolveTheme(theme2) : theme2;
        }, [restThemeProp, calculatedColorScheme, components, colorSchemes, cssVarPrefix]);
        const colorSchemeSelector = restThemeProp.colorSchemeSelector;
        (0, _useEnhancedEffect.default)(() => {
          if (colorScheme && colorSchemeNode && colorSchemeSelector && colorSchemeSelector !== "media") {
            const selector = colorSchemeSelector;
            let rule = colorSchemeSelector;
            if (selector === "class") {
              rule = `.%s`;
            }
            if (selector === "data") {
              rule = `[data-%s]`;
            }
            if (selector?.startsWith("data-") && !selector.includes("%s")) {
              rule = `[${selector}="%s"]`;
            }
            if (rule.startsWith(".")) {
              colorSchemeNode.classList.remove(...allColorSchemes.map((scheme) => rule.substring(1).replace("%s", scheme)));
              colorSchemeNode.classList.add(rule.substring(1).replace("%s", colorScheme));
            } else {
              const matches = rule.replace("%s", colorScheme).match(/\[([^\]]+)\]/);
              if (matches) {
                const [attr, value] = matches[1].split("=");
                if (!value) {
                  allColorSchemes.forEach((scheme) => {
                    colorSchemeNode.removeAttribute(attr.replace(colorScheme, scheme));
                  });
                }
                colorSchemeNode.setAttribute(attr, value ? value.replace(/"|'/g, "") : "");
              } else {
                colorSchemeNode.setAttribute(rule, colorScheme);
              }
            }
          }
        }, [colorScheme, colorSchemeSelector, colorSchemeNode, allColorSchemes]);
        React7.useEffect(() => {
          let timer;
          if (disableTransitionOnChange && hasMounted.current && documentNode) {
            const css2 = documentNode.createElement("style");
            css2.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));
            documentNode.head.appendChild(css2);
            (() => window.getComputedStyle(documentNode.body))();
            timer = setTimeout(() => {
              documentNode.head.removeChild(css2);
            }, 1);
          }
          return () => {
            clearTimeout(timer);
          };
        }, [colorScheme, disableTransitionOnChange, documentNode]);
        React7.useEffect(() => {
          hasMounted.current = true;
          return () => {
            hasMounted.current = false;
          };
        }, []);
        const contextValue = React7.useMemo(() => ({
          allColorSchemes,
          colorScheme,
          darkColorScheme,
          lightColorScheme,
          mode,
          setColorScheme,
          setMode: define_process_env_default.NODE_ENV === "production" ? setMode : (newMode) => {
            if (memoTheme.colorSchemeSelector === "media") {
              console.error(["MUI: The `setMode` function has no effect if `colorSchemeSelector` is `media` (`media` is the default value).", "To toggle the mode manually, please configure `colorSchemeSelector` to use a class or data attribute.", "To learn more, visit https://mui.com/material-ui/customization/css-theme-variables/configuration/#toggling-dark-mode-manually"].join("\n"));
            }
            setMode(newMode);
          },
          systemMode
        }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode, memoTheme.colorSchemeSelector]);
        let shouldGenerateStyleSheet = true;
        if (disableStyleSheetGeneration || restThemeProp.cssVariables === false || nested && upperTheme?.cssVarPrefix === cssVarPrefix) {
          shouldGenerateStyleSheet = false;
        }
        const element = /* @__PURE__ */ (0, _jsxRuntime.jsxs)(React7.Fragment, {
          children: [/* @__PURE__ */ (0, _jsxRuntime.jsx)(_ThemeProvider.default, {
            themeId: scopedTheme ? themeId : void 0,
            theme: memoTheme,
            children
          }), shouldGenerateStyleSheet && /* @__PURE__ */ (0, _jsxRuntime.jsx)(_styledEngine.GlobalStyles, {
            styles: memoTheme.generateStyleSheets?.() || []
          })]
        });
        if (nested) {
          return element;
        }
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(ColorSchemeContext.Provider, {
          value: contextValue,
          children: element
        });
      }
      define_process_env_default.NODE_ENV !== "production" ? CssVarsProvider.propTypes = {
        /**
         * The component tree.
         */
        children: _propTypes.default.node,
        /**
         * The node used to attach the color-scheme attribute
         */
        colorSchemeNode: _propTypes.default.any,
        /**
         * localStorage key used to store `colorScheme`
         */
        colorSchemeStorageKey: _propTypes.default.string,
        /**
         * The default mode when the storage is empty,
         * require the theme to have `colorSchemes` with light and dark.
         */
        defaultMode: _propTypes.default.string,
        /**
         * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.
         */
        disableNestedContext: _propTypes.default.bool,
        /**
         * If `true`, the style sheet won't be generated.
         *
         * This is useful for controlling nested CssVarsProvider behavior.
         */
        disableStyleSheetGeneration: _propTypes.default.bool,
        /**
         * Disable CSS transitions when switching between modes or color schemes.
         */
        disableTransitionOnChange: _propTypes.default.bool,
        /**
         * The document to attach the attribute to.
         */
        documentNode: _propTypes.default.any,
        /**
         * If `true`, theme values are recalculated when the mode changes.
         */
        forceThemeRerender: _propTypes.default.bool,
        /**
         * The key in the local storage used to store current color scheme.
         */
        modeStorageKey: _propTypes.default.string,
        /**
         * If `true`, the mode will be the same value as the storage without an extra rerendering after the hydration.
         * You should use this option in conjuction with `InitColorSchemeScript` component.
         */
        noSsr: _propTypes.default.bool,
        /**
         * The storage manager to be used for storing the mode and color scheme
         * @default using `window.localStorage`
         */
        storageManager: _propTypes.default.func,
        /**
         * The window that attaches the 'storage' event listener.
         * @default window
         */
        storageWindow: _propTypes.default.any,
        /**
         * The calculated theme object that will be passed through context.
         */
        theme: _propTypes.default.object
      } : void 0;
      const defaultLightColorScheme = typeof defaultColorScheme === "string" ? defaultColorScheme : defaultColorScheme.light;
      const defaultDarkColorScheme = typeof defaultColorScheme === "string" ? defaultColorScheme : defaultColorScheme.dark;
      const getInitColorSchemeScript = (params) => (0, _InitColorSchemeScript.default)({
        colorSchemeStorageKey: defaultColorSchemeStorageKey,
        defaultLightColorScheme,
        defaultDarkColorScheme,
        modeStorageKey: defaultModeStorageKey,
        ...params
      });
      return {
        CssVarsProvider,
        useColorScheme,
        getInitColorSchemeScript
      };
    }
  }
});

// node_modules/@mui/system/cssVars/createGetCssVar.js
var require_createGetCssVar2 = __commonJS({
  "node_modules/@mui/system/cssVars/createGetCssVar.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = createGetCssVar;
    function createGetCssVar(prefix2 = "") {
      function appendVar(...vars) {
        if (!vars.length) {
          return "";
        }
        const value = vars[0];
        if (typeof value === "string" && !value.match(/(#|\(|\)|(-?(\d*\.)?\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\d*\.)?\d+)$|(\d+ \d+ \d+)/)) {
          return `, var(--${prefix2 ? `${prefix2}-` : ""}${value}${appendVar(...vars.slice(1))})`;
        }
        return `, ${value}`;
      }
      const getCssVar = (field, ...fallbacks) => {
        return `var(--${prefix2 ? `${prefix2}-` : ""}${field}${appendVar(...fallbacks)})`;
      };
      return getCssVar;
    }
  }
});

// node_modules/@mui/system/cssVars/cssVarsParser.js
var require_cssVarsParser2 = __commonJS({
  "node_modules/@mui/system/cssVars/cssVarsParser.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.assignNestedKeys = void 0;
    exports2.default = cssVarsParser;
    exports2.walkObjectDeep = void 0;
    var assignNestedKeys = (obj, keys, value, arrayKeys = []) => {
      let temp = obj;
      keys.forEach((k, index) => {
        if (index === keys.length - 1) {
          if (Array.isArray(temp)) {
            temp[Number(k)] = value;
          } else if (temp && typeof temp === "object") {
            temp[k] = value;
          }
        } else if (temp && typeof temp === "object") {
          if (!temp[k]) {
            temp[k] = arrayKeys.includes(k) ? [] : {};
          }
          temp = temp[k];
        }
      });
    };
    exports2.assignNestedKeys = assignNestedKeys;
    var walkObjectDeep = (obj, callback, shouldSkipPaths) => {
      function recurse(object, parentKeys = [], arrayKeys = []) {
        Object.entries(object).forEach(([key, value]) => {
          if (!shouldSkipPaths || shouldSkipPaths && !shouldSkipPaths([...parentKeys, key])) {
            if (value !== void 0 && value !== null) {
              if (typeof value === "object" && Object.keys(value).length > 0) {
                recurse(value, [...parentKeys, key], Array.isArray(value) ? [...arrayKeys, key] : arrayKeys);
              } else {
                callback([...parentKeys, key], value, arrayKeys);
              }
            }
          }
        });
      }
      recurse(obj);
    };
    exports2.walkObjectDeep = walkObjectDeep;
    var getCssValue = (keys, value) => {
      if (typeof value === "number") {
        if (["lineHeight", "fontWeight", "opacity", "zIndex"].some((prop) => keys.includes(prop))) {
          return value;
        }
        const lastKey = keys[keys.length - 1];
        if (lastKey.toLowerCase().includes("opacity")) {
          return value;
        }
        return `${value}px`;
      }
      return value;
    };
    function cssVarsParser(theme2, options) {
      const {
        prefix: prefix2,
        shouldSkipGeneratingVar
      } = options || {};
      const css2 = {};
      const vars = {};
      const varsWithDefaults = {};
      walkObjectDeep(
        theme2,
        (keys, value, arrayKeys) => {
          if (typeof value === "string" || typeof value === "number") {
            if (!shouldSkipGeneratingVar || !shouldSkipGeneratingVar(keys, value)) {
              const cssVar = `--${prefix2 ? `${prefix2}-` : ""}${keys.join("-")}`;
              const resolvedValue = getCssValue(keys, value);
              Object.assign(css2, {
                [cssVar]: resolvedValue
              });
              assignNestedKeys(vars, keys, `var(${cssVar})`, arrayKeys);
              assignNestedKeys(varsWithDefaults, keys, `var(${cssVar}, ${resolvedValue})`, arrayKeys);
            }
          }
        },
        (keys) => keys[0] === "vars"
        // skip 'vars/*' paths
      );
      return {
        css: css2,
        vars,
        varsWithDefaults
      };
    }
  }
});

// node_modules/@mui/system/cssVars/prepareCssVars.js
var require_prepareCssVars2 = __commonJS({
  "node_modules/@mui/system/cssVars/prepareCssVars.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _deepmerge = _interopRequireDefault(require_deepmerge4());
    var _cssVarsParser = _interopRequireDefault(require_cssVarsParser2());
    function prepareCssVars(theme2, parserConfig = {}) {
      const {
        getSelector = defaultGetSelector,
        disableCssColorScheme,
        colorSchemeSelector: selector
      } = parserConfig;
      const {
        colorSchemes = {},
        components,
        defaultColorScheme = "light",
        ...otherTheme
      } = theme2;
      const {
        vars: rootVars,
        css: rootCss,
        varsWithDefaults: rootVarsWithDefaults
      } = (0, _cssVarsParser.default)(otherTheme, parserConfig);
      let themeVars = rootVarsWithDefaults;
      const colorSchemesMap = {};
      const {
        [defaultColorScheme]: defaultScheme,
        ...otherColorSchemes
      } = colorSchemes;
      Object.entries(otherColorSchemes || {}).forEach(([key, scheme]) => {
        const {
          vars,
          css: css2,
          varsWithDefaults
        } = (0, _cssVarsParser.default)(scheme, parserConfig);
        themeVars = (0, _deepmerge.default)(themeVars, varsWithDefaults);
        colorSchemesMap[key] = {
          css: css2,
          vars
        };
      });
      if (defaultScheme) {
        const {
          css: css2,
          vars,
          varsWithDefaults
        } = (0, _cssVarsParser.default)(defaultScheme, parserConfig);
        themeVars = (0, _deepmerge.default)(themeVars, varsWithDefaults);
        colorSchemesMap[defaultColorScheme] = {
          css: css2,
          vars
        };
      }
      function defaultGetSelector(colorScheme, cssObject) {
        let rule = selector;
        if (selector === "class") {
          rule = ".%s";
        }
        if (selector === "data") {
          rule = "[data-%s]";
        }
        if (selector?.startsWith("data-") && !selector.includes("%s")) {
          rule = `[${selector}="%s"]`;
        }
        if (colorScheme) {
          if (rule === "media") {
            if (theme2.defaultColorScheme === colorScheme) {
              return ":root";
            }
            const mode = colorSchemes[colorScheme]?.palette?.mode || colorScheme;
            return {
              [`@media (prefers-color-scheme: ${mode})`]: {
                ":root": cssObject
              }
            };
          }
          if (rule) {
            if (theme2.defaultColorScheme === colorScheme) {
              return `:root, ${rule.replace("%s", String(colorScheme))}`;
            }
            return rule.replace("%s", String(colorScheme));
          }
        }
        return ":root";
      }
      const generateThemeVars = () => {
        let vars = {
          ...rootVars
        };
        Object.entries(colorSchemesMap).forEach(([, {
          vars: schemeVars
        }]) => {
          vars = (0, _deepmerge.default)(vars, schemeVars);
        });
        return vars;
      };
      const generateStyleSheets = () => {
        const stylesheets = [];
        const colorScheme = theme2.defaultColorScheme || "light";
        function insertStyleSheet(key, css2) {
          if (Object.keys(css2).length) {
            stylesheets.push(typeof key === "string" ? {
              [key]: {
                ...css2
              }
            } : key);
          }
        }
        insertStyleSheet(getSelector(void 0, {
          ...rootCss
        }), rootCss);
        const {
          [colorScheme]: defaultSchemeVal,
          ...other
        } = colorSchemesMap;
        if (defaultSchemeVal) {
          const {
            css: css2
          } = defaultSchemeVal;
          const cssColorSheme = colorSchemes[colorScheme]?.palette?.mode;
          const finalCss = !disableCssColorScheme && cssColorSheme ? {
            colorScheme: cssColorSheme,
            ...css2
          } : {
            ...css2
          };
          insertStyleSheet(getSelector(colorScheme, {
            ...finalCss
          }), finalCss);
        }
        Object.entries(other).forEach(([key, {
          css: css2
        }]) => {
          const cssColorSheme = colorSchemes[key]?.palette?.mode;
          const finalCss = !disableCssColorScheme && cssColorSheme ? {
            colorScheme: cssColorSheme,
            ...css2
          } : {
            ...css2
          };
          insertStyleSheet(getSelector(key, {
            ...finalCss
          }), finalCss);
        });
        return stylesheets;
      };
      return {
        vars: themeVars,
        generateThemeVars,
        generateStyleSheets
      };
    }
    var _default = exports2.default = prepareCssVars;
  }
});

// node_modules/@mui/system/cssVars/getColorSchemeSelector.js
var require_getColorSchemeSelector2 = __commonJS({
  "node_modules/@mui/system/cssVars/getColorSchemeSelector.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.createGetColorSchemeSelector = createGetColorSchemeSelector;
    function createGetColorSchemeSelector(selector) {
      return function getColorSchemeSelector(colorScheme) {
        if (selector === "media") {
          if (define_process_env_default.NODE_ENV !== "production") {
            if (colorScheme !== "light" && colorScheme !== "dark") {
              console.error(`MUI: @media (prefers-color-scheme) supports only 'light' or 'dark', but receive '${colorScheme}'.`);
            }
          }
          return `@media (prefers-color-scheme: ${colorScheme})`;
        }
        if (selector) {
          if (selector.startsWith("data-") && !selector.includes("%s")) {
            return `[${selector}="${colorScheme}"] &`;
          }
          if (selector === "class") {
            return `.${colorScheme} &`;
          }
          if (selector === "data") {
            return `[data-${colorScheme}] &`;
          }
          return `${selector.replace("%s", colorScheme)} &`;
        }
        return "&";
      };
    }
  }
});

// node_modules/@mui/system/cssVars/createCssVarsTheme.js
var require_createCssVarsTheme2 = __commonJS({
  "node_modules/@mui/system/cssVars/createCssVarsTheme.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _prepareCssVars = _interopRequireDefault(require_prepareCssVars2());
    var _getColorSchemeSelector = require_getColorSchemeSelector2();
    var _InitColorSchemeScript = require_InitColorSchemeScript4();
    function createCssVarsTheme({
      colorSchemeSelector = `[${_InitColorSchemeScript.DEFAULT_ATTRIBUTE}="%s"]`,
      ...theme2
    }) {
      const output = theme2;
      const result = (0, _prepareCssVars.default)(output, {
        ...theme2,
        prefix: theme2.cssVarPrefix,
        colorSchemeSelector
      });
      output.vars = result.vars;
      output.generateThemeVars = result.generateThemeVars;
      output.generateStyleSheets = result.generateStyleSheets;
      output.colorSchemeSelector = colorSchemeSelector;
      output.getColorSchemeSelector = (0, _getColorSchemeSelector.createGetColorSchemeSelector)(colorSchemeSelector);
      return output;
    }
    var _default = exports2.default = createCssVarsTheme;
  }
});

// node_modules/@mui/system/version/index.js
var require_version2 = __commonJS({
  "node_modules/@mui/system/version/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.version = exports2.prerelease = exports2.patch = exports2.minor = exports2.major = exports2.default = void 0;
    var version = exports2.version = "7.0.2";
    var major = exports2.major = Number("7");
    var minor = exports2.minor = Number("0");
    var patch = exports2.patch = Number("2");
    var prerelease = exports2.prerelease = void 0;
    var _default = exports2.default = version;
  }
});

// node_modules/@mui/system/node_modules/@mui/utils/composeClasses/composeClasses.js
var require_composeClasses5 = __commonJS({
  "node_modules/@mui/system/node_modules/@mui/utils/composeClasses/composeClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = composeClasses;
    function composeClasses(slots, getUtilityClass, classes = void 0) {
      const output = {};
      for (const slotName in slots) {
        const slot = slots[slotName];
        let buffer = "";
        let start = true;
        for (let i = 0; i < slot.length; i += 1) {
          const value = slot[i];
          if (value) {
            buffer += (start === true ? "" : " ") + getUtilityClass(value);
            start = false;
            if (classes && classes[value]) {
              buffer += " " + classes[value];
            }
          }
        }
        output[slotName] = buffer;
      }
      return output;
    }
  }
});

// node_modules/@mui/system/node_modules/@mui/utils/composeClasses/index.js
var require_composeClasses6 = __commonJS({
  "node_modules/@mui/system/node_modules/@mui/utils/composeClasses/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _composeClasses.default;
      }
    });
    var _composeClasses = _interopRequireDefault(require_composeClasses5());
  }
});

// node_modules/@mui/system/Container/createContainer.js
var require_createContainer2 = __commonJS({
  "node_modules/@mui/system/Container/createContainer.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = createContainer;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _clsx = _interopRequireDefault(require_clsx());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass4());
    var _composeClasses = _interopRequireDefault(require_composeClasses6());
    var _capitalize = _interopRequireDefault(require_capitalize5());
    var _useThemeProps = _interopRequireDefault(require_useThemeProps5());
    var _styled = _interopRequireDefault(require_styled5());
    var _createTheme = _interopRequireDefault(require_createTheme5());
    var _jsxRuntime = require_jsx_runtime();
    var defaultTheme = (0, _createTheme.default)();
    var defaultCreateStyledComponent = (0, _styled.default)("div", {
      name: "MuiContainer",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, styles[`maxWidth${(0, _capitalize.default)(String(ownerState.maxWidth))}`], ownerState.fixed && styles.fixed, ownerState.disableGutters && styles.disableGutters];
      }
    });
    var useThemePropsDefault = (inProps) => (0, _useThemeProps.default)({
      props: inProps,
      name: "MuiContainer",
      defaultTheme
    });
    var useUtilityClasses = (ownerState, componentName) => {
      const getContainerUtilityClass = (slot) => {
        return (0, _generateUtilityClass.default)(componentName, slot);
      };
      const {
        classes,
        fixed,
        disableGutters,
        maxWidth
      } = ownerState;
      const slots = {
        root: ["root", maxWidth && `maxWidth${(0, _capitalize.default)(String(maxWidth))}`, fixed && "fixed", disableGutters && "disableGutters"]
      };
      return (0, _composeClasses.default)(slots, getContainerUtilityClass, classes);
    };
    function createContainer(options = {}) {
      const {
        // This will allow adding custom styled fn (for example for custom sx style function)
        createStyledComponent = defaultCreateStyledComponent,
        useThemeProps = useThemePropsDefault,
        componentName = "MuiContainer"
      } = options;
      const ContainerRoot = createStyledComponent(({
        theme: theme2,
        ownerState
      }) => ({
        width: "100%",
        marginLeft: "auto",
        boxSizing: "border-box",
        marginRight: "auto",
        ...!ownerState.disableGutters && {
          paddingLeft: theme2.spacing(2),
          paddingRight: theme2.spacing(2),
          // @ts-ignore module augmentation fails if custom breakpoints are used
          [theme2.breakpoints.up("sm")]: {
            paddingLeft: theme2.spacing(3),
            paddingRight: theme2.spacing(3)
          }
        }
      }), ({
        theme: theme2,
        ownerState
      }) => ownerState.fixed && Object.keys(theme2.breakpoints.values).reduce((acc, breakpointValueKey) => {
        const breakpoint = breakpointValueKey;
        const value = theme2.breakpoints.values[breakpoint];
        if (value !== 0) {
          acc[theme2.breakpoints.up(breakpoint)] = {
            maxWidth: `${value}${theme2.breakpoints.unit}`
          };
        }
        return acc;
      }, {}), ({
        theme: theme2,
        ownerState
      }) => ({
        // @ts-ignore module augmentation fails if custom breakpoints are used
        ...ownerState.maxWidth === "xs" && {
          // @ts-ignore module augmentation fails if custom breakpoints are used
          [theme2.breakpoints.up("xs")]: {
            // @ts-ignore module augmentation fails if custom breakpoints are used
            maxWidth: Math.max(theme2.breakpoints.values.xs, 444)
          }
        },
        ...ownerState.maxWidth && // @ts-ignore module augmentation fails if custom breakpoints are used
        ownerState.maxWidth !== "xs" && {
          // @ts-ignore module augmentation fails if custom breakpoints are used
          [theme2.breakpoints.up(ownerState.maxWidth)]: {
            // @ts-ignore module augmentation fails if custom breakpoints are used
            maxWidth: `${theme2.breakpoints.values[ownerState.maxWidth]}${theme2.breakpoints.unit}`
          }
        }
      }));
      const Container = /* @__PURE__ */ React7.forwardRef(function Container2(inProps, ref) {
        const props = useThemeProps(inProps);
        const {
          className,
          component = "div",
          disableGutters = false,
          fixed = false,
          maxWidth = "lg",
          classes: classesProp,
          ...other
        } = props;
        const ownerState = {
          ...props,
          component,
          disableGutters,
          fixed,
          maxWidth
        };
        const classes = useUtilityClasses(ownerState, componentName);
        return (
          // @ts-ignore theme is injected by the styled util
          /* @__PURE__ */ (0, _jsxRuntime.jsx)(ContainerRoot, {
            as: component,
            ownerState,
            className: (0, _clsx.default)(classes.root, className),
            ref,
            ...other
          })
        );
      });
      define_process_env_default.NODE_ENV !== "production" ? Container.propTypes = {
        children: _propTypes.default.node,
        classes: _propTypes.default.object,
        className: _propTypes.default.string,
        component: _propTypes.default.elementType,
        disableGutters: _propTypes.default.bool,
        fixed: _propTypes.default.bool,
        maxWidth: _propTypes.default.oneOfType([_propTypes.default.oneOf(["xs", "sm", "md", "lg", "xl", false]), _propTypes.default.string]),
        sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
      } : void 0;
      return Container;
    }
  }
});

// node_modules/@mui/system/Container/Container.js
var require_Container3 = __commonJS({
  "node_modules/@mui/system/Container/Container.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _createContainer = _interopRequireDefault(require_createContainer2());
    var Container = (0, _createContainer.default)();
    define_process_env_default.NODE_ENV !== "production" ? Container.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * @ignore
       */
      children: _propTypes.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: _propTypes.default.elementType,
      /**
       * If `true`, the left and right padding is removed.
       * @default false
       */
      disableGutters: _propTypes.default.bool,
      /**
       * Set the max-width to match the min-width of the current breakpoint.
       * This is useful if you'd prefer to design for a fixed set of sizes
       * instead of trying to accommodate a fully fluid viewport.
       * It's fluid by default.
       * @default false
       */
      fixed: _propTypes.default.bool,
      /**
       * Determine the max-width of the container.
       * The container width grows with the size of the screen.
       * Set to `false` to disable `maxWidth`.
       * @default 'lg'
       */
      maxWidth: _propTypes.default.oneOfType([_propTypes.default.oneOf(["xs", "sm", "md", "lg", "xl", false]), _propTypes.default.string]),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
    } : void 0;
    var _default = exports2.default = Container;
  }
});

// node_modules/@mui/system/Container/containerClasses.js
var require_containerClasses2 = __commonJS({
  "node_modules/@mui/system/Container/containerClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getContainerUtilityClass = getContainerUtilityClass;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses4());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass4());
    function getContainerUtilityClass(slot) {
      return (0, _generateUtilityClass.default)("MuiContainer", slot);
    }
    var containerClasses = (0, _generateUtilityClasses.default)("MuiContainer", ["root", "disableGutters", "fixed", "maxWidthXs", "maxWidthSm", "maxWidthMd", "maxWidthLg", "maxWidthXl"]);
    var _default = exports2.default = containerClasses;
  }
});

// node_modules/@mui/system/Container/index.js
var require_Container4 = __commonJS({
  "node_modules/@mui/system/Container/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      containerClasses: true
    };
    Object.defineProperty(exports2, "containerClasses", {
      enumerable: true,
      get: function() {
        return _containerClasses.default;
      }
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _Container.default;
      }
    });
    var _Container = _interopRequireDefault(require_Container3());
    var _containerClasses = _interopRequireWildcard(require_containerClasses2());
    Object.keys(_containerClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _containerClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _containerClasses[key];
        }
      });
    });
  }
});

// node_modules/@mui/system/node_modules/@mui/utils/isMuiElement/isMuiElement.js
var require_isMuiElement6 = __commonJS({
  "node_modules/@mui/system/node_modules/@mui/utils/isMuiElement/isMuiElement.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isMuiElement;
    var React7 = _interopRequireWildcard(require_react());
    function isMuiElement(element, muiNames) {
      return /* @__PURE__ */ React7.isValidElement(element) && muiNames.indexOf(
        // For server components `muiName` is avaialble in element.type._payload.value.muiName
        // relevant info - https://github.com/facebook/react/blob/2807d781a08db8e9873687fccc25c0f12b4fb3d4/packages/react/src/ReactLazy.js#L45
        // eslint-disable-next-line no-underscore-dangle
        element.type.muiName ?? element.type?._payload?.value?.muiName
      ) !== -1;
    }
  }
});

// node_modules/@mui/system/node_modules/@mui/utils/isMuiElement/index.js
var require_isMuiElement7 = __commonJS({
  "node_modules/@mui/system/node_modules/@mui/utils/isMuiElement/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _isMuiElement.default;
      }
    });
    var _isMuiElement = _interopRequireDefault(require_isMuiElement6());
  }
});

// node_modules/@mui/system/Grid/traverseBreakpoints.js
var require_traverseBreakpoints2 = __commonJS({
  "node_modules/@mui/system/Grid/traverseBreakpoints.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.traverseBreakpoints = exports2.filterBreakpointKeys = void 0;
    var filterBreakpointKeys = (breakpointsKeys, responsiveKeys) => breakpointsKeys.filter((key) => responsiveKeys.includes(key));
    exports2.filterBreakpointKeys = filterBreakpointKeys;
    var traverseBreakpoints = (breakpoints, responsive, iterator) => {
      const smallestBreakpoint = breakpoints.keys[0];
      if (Array.isArray(responsive)) {
        responsive.forEach((breakpointValue, index) => {
          iterator((responsiveStyles, style) => {
            if (index <= breakpoints.keys.length - 1) {
              if (index === 0) {
                Object.assign(responsiveStyles, style);
              } else {
                responsiveStyles[breakpoints.up(breakpoints.keys[index])] = style;
              }
            }
          }, breakpointValue);
        });
      } else if (responsive && typeof responsive === "object") {
        const keys = Object.keys(responsive).length > breakpoints.keys.length ? breakpoints.keys : filterBreakpointKeys(breakpoints.keys, Object.keys(responsive));
        keys.forEach((key) => {
          if (breakpoints.keys.includes(key)) {
            const breakpointValue = responsive[key];
            if (breakpointValue !== void 0) {
              iterator((responsiveStyles, style) => {
                if (smallestBreakpoint === key) {
                  Object.assign(responsiveStyles, style);
                } else {
                  responsiveStyles[breakpoints.up(key)] = style;
                }
              }, breakpointValue);
            }
          }
        });
      } else if (typeof responsive === "number" || typeof responsive === "string") {
        iterator((responsiveStyles, style) => {
          Object.assign(responsiveStyles, style);
        }, responsive);
      }
    };
    exports2.traverseBreakpoints = traverseBreakpoints;
  }
});

// node_modules/@mui/system/Grid/gridGenerator.js
var require_gridGenerator2 = __commonJS({
  "node_modules/@mui/system/Grid/gridGenerator.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.generateSpacingClassNames = exports2.generateSizeClassNames = exports2.generateGridStyles = exports2.generateGridSizeStyles = exports2.generateGridRowSpacingStyles = exports2.generateGridOffsetStyles = exports2.generateGridDirectionStyles = exports2.generateGridColumnsStyles = exports2.generateGridColumnSpacingStyles = exports2.generateDirectionClasses = void 0;
    var _traverseBreakpoints = require_traverseBreakpoints2();
    function getSelfSpacingVar(axis) {
      return `--Grid-${axis}Spacing`;
    }
    function getParentSpacingVar(axis) {
      return `--Grid-parent-${axis}Spacing`;
    }
    var selfColumnsVar = "--Grid-columns";
    var parentColumnsVar = "--Grid-parent-columns";
    var generateGridSizeStyles = ({
      theme: theme2,
      ownerState
    }) => {
      const styles = {};
      (0, _traverseBreakpoints.traverseBreakpoints)(theme2.breakpoints, ownerState.size, (appendStyle, value) => {
        let style = {};
        if (value === "grow") {
          style = {
            flexBasis: 0,
            flexGrow: 1,
            maxWidth: "100%"
          };
        }
        if (value === "auto") {
          style = {
            flexBasis: "auto",
            flexGrow: 0,
            flexShrink: 0,
            maxWidth: "none",
            width: "auto"
          };
        }
        if (typeof value === "number") {
          style = {
            flexGrow: 0,
            flexBasis: "auto",
            width: `calc(100% * ${value} / var(${parentColumnsVar}) - (var(${parentColumnsVar}) - ${value}) * (var(${getParentSpacingVar("column")}) / var(${parentColumnsVar})))`
          };
        }
        appendStyle(styles, style);
      });
      return styles;
    };
    exports2.generateGridSizeStyles = generateGridSizeStyles;
    var generateGridOffsetStyles = ({
      theme: theme2,
      ownerState
    }) => {
      const styles = {};
      (0, _traverseBreakpoints.traverseBreakpoints)(theme2.breakpoints, ownerState.offset, (appendStyle, value) => {
        let style = {};
        if (value === "auto") {
          style = {
            marginLeft: "auto"
          };
        }
        if (typeof value === "number") {
          style = {
            marginLeft: value === 0 ? "0px" : `calc(100% * ${value} / var(${parentColumnsVar}) + var(${getParentSpacingVar("column")}) * ${value} / var(${parentColumnsVar}))`
          };
        }
        appendStyle(styles, style);
      });
      return styles;
    };
    exports2.generateGridOffsetStyles = generateGridOffsetStyles;
    var generateGridColumnsStyles = ({
      theme: theme2,
      ownerState
    }) => {
      if (!ownerState.container) {
        return {};
      }
      const styles = {
        [selfColumnsVar]: 12
      };
      (0, _traverseBreakpoints.traverseBreakpoints)(theme2.breakpoints, ownerState.columns, (appendStyle, value) => {
        const columns = value ?? 12;
        appendStyle(styles, {
          [selfColumnsVar]: columns,
          "> *": {
            [parentColumnsVar]: columns
          }
        });
      });
      return styles;
    };
    exports2.generateGridColumnsStyles = generateGridColumnsStyles;
    var generateGridRowSpacingStyles = ({
      theme: theme2,
      ownerState
    }) => {
      if (!ownerState.container) {
        return {};
      }
      const styles = {};
      (0, _traverseBreakpoints.traverseBreakpoints)(theme2.breakpoints, ownerState.rowSpacing, (appendStyle, value) => {
        const spacing = typeof value === "string" ? value : theme2.spacing?.(value);
        appendStyle(styles, {
          [getSelfSpacingVar("row")]: spacing,
          "> *": {
            [getParentSpacingVar("row")]: spacing
          }
        });
      });
      return styles;
    };
    exports2.generateGridRowSpacingStyles = generateGridRowSpacingStyles;
    var generateGridColumnSpacingStyles = ({
      theme: theme2,
      ownerState
    }) => {
      if (!ownerState.container) {
        return {};
      }
      const styles = {};
      (0, _traverseBreakpoints.traverseBreakpoints)(theme2.breakpoints, ownerState.columnSpacing, (appendStyle, value) => {
        const spacing = typeof value === "string" ? value : theme2.spacing?.(value);
        appendStyle(styles, {
          [getSelfSpacingVar("column")]: spacing,
          "> *": {
            [getParentSpacingVar("column")]: spacing
          }
        });
      });
      return styles;
    };
    exports2.generateGridColumnSpacingStyles = generateGridColumnSpacingStyles;
    var generateGridDirectionStyles = ({
      theme: theme2,
      ownerState
    }) => {
      if (!ownerState.container) {
        return {};
      }
      const styles = {};
      (0, _traverseBreakpoints.traverseBreakpoints)(theme2.breakpoints, ownerState.direction, (appendStyle, value) => {
        appendStyle(styles, {
          flexDirection: value
        });
      });
      return styles;
    };
    exports2.generateGridDirectionStyles = generateGridDirectionStyles;
    var generateGridStyles = ({
      ownerState
    }) => {
      return {
        minWidth: 0,
        boxSizing: "border-box",
        ...ownerState.container && {
          display: "flex",
          flexWrap: "wrap",
          ...ownerState.wrap && ownerState.wrap !== "wrap" && {
            flexWrap: ownerState.wrap
          },
          gap: `var(${getSelfSpacingVar("row")}) var(${getSelfSpacingVar("column")})`
        }
      };
    };
    exports2.generateGridStyles = generateGridStyles;
    var generateSizeClassNames = (size) => {
      const classNames = [];
      Object.entries(size).forEach(([key, value]) => {
        if (value !== false && value !== void 0) {
          classNames.push(`grid-${key}-${String(value)}`);
        }
      });
      return classNames;
    };
    exports2.generateSizeClassNames = generateSizeClassNames;
    var generateSpacingClassNames = (spacing, smallestBreakpoint = "xs") => {
      function isValidSpacing(val) {
        if (val === void 0) {
          return false;
        }
        return typeof val === "string" && !Number.isNaN(Number(val)) || typeof val === "number" && val > 0;
      }
      if (isValidSpacing(spacing)) {
        return [`spacing-${smallestBreakpoint}-${String(spacing)}`];
      }
      if (typeof spacing === "object" && !Array.isArray(spacing)) {
        const classNames = [];
        Object.entries(spacing).forEach(([key, value]) => {
          if (isValidSpacing(value)) {
            classNames.push(`spacing-${key}-${String(value)}`);
          }
        });
        return classNames;
      }
      return [];
    };
    exports2.generateSpacingClassNames = generateSpacingClassNames;
    var generateDirectionClasses = (direction) => {
      if (direction === void 0) {
        return [];
      }
      if (typeof direction === "object") {
        return Object.entries(direction).map(([key, value]) => `direction-${key}-${value}`);
      }
      return [`direction-xs-${String(direction)}`];
    };
    exports2.generateDirectionClasses = generateDirectionClasses;
  }
});

// node_modules/@mui/system/Grid/deleteLegacyGridProps.js
var require_deleteLegacyGridProps2 = __commonJS({
  "node_modules/@mui/system/Grid/deleteLegacyGridProps.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = deleteLegacyGridProps;
    var getLegacyGridWarning = (propName) => {
      if (["item", "zeroMinWidth"].includes(propName)) {
        return `The \`${propName}\` prop has been removed and is no longer necessary. You can safely remove it.`;
      }
      return `The \`${propName}\` prop has been removed. See https://mui.com/material-ui/migration/upgrade-to-grid-v2/ for migration instructions.`;
    };
    var warnedAboutProps = [];
    function deleteLegacyGridProps(props, breakpoints) {
      const propsToWarn = [];
      if (props.item !== void 0) {
        delete props.item;
        propsToWarn.push("item");
      }
      if (props.zeroMinWidth !== void 0) {
        delete props.zeroMinWidth;
        propsToWarn.push("zeroMinWidth");
      }
      breakpoints.keys.forEach((breakpoint) => {
        if (props[breakpoint] !== void 0) {
          propsToWarn.push(breakpoint);
          delete props[breakpoint];
        }
      });
      if (define_process_env_default.NODE_ENV !== "production") {
        propsToWarn.forEach((prop) => {
          if (!warnedAboutProps.includes(prop)) {
            warnedAboutProps.push(prop);
            console.warn(`MUI Grid: ${getLegacyGridWarning(prop)}
`);
          }
        });
      }
    }
  }
});

// node_modules/@mui/system/Grid/createGrid.js
var require_createGrid2 = __commonJS({
  "node_modules/@mui/system/Grid/createGrid.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = createGrid;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _clsx = _interopRequireDefault(require_clsx());
    var _isMuiElement = _interopRequireDefault(require_isMuiElement7());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass4());
    var _composeClasses = _interopRequireDefault(require_composeClasses6());
    var _styled = _interopRequireDefault(require_styled5());
    var _useThemeProps = _interopRequireDefault(require_useThemeProps5());
    var _useTheme = _interopRequireDefault(require_useTheme7());
    var _styleFunctionSx = require_styleFunctionSx4();
    var _createTheme = _interopRequireDefault(require_createTheme5());
    var _gridGenerator = require_gridGenerator2();
    var _deleteLegacyGridProps = _interopRequireDefault(require_deleteLegacyGridProps2());
    var _jsxRuntime = require_jsx_runtime();
    var defaultTheme = (0, _createTheme.default)();
    var defaultCreateStyledComponent = (0, _styled.default)("div", {
      name: "MuiGrid",
      slot: "Root",
      overridesResolver: (props, styles) => styles.root
    });
    function useThemePropsDefault(props) {
      return (0, _useThemeProps.default)({
        props,
        name: "MuiGrid",
        defaultTheme
      });
    }
    function createGrid(options = {}) {
      const {
        // This will allow adding custom styled fn (for example for custom sx style function)
        createStyledComponent = defaultCreateStyledComponent,
        useThemeProps = useThemePropsDefault,
        useTheme: useTheme3 = _useTheme.default,
        componentName = "MuiGrid"
      } = options;
      const useUtilityClasses = (ownerState, theme2) => {
        const {
          container,
          direction,
          spacing,
          wrap,
          size
        } = ownerState;
        const slots = {
          root: ["root", container && "container", wrap !== "wrap" && `wrap-xs-${String(wrap)}`, ...(0, _gridGenerator.generateDirectionClasses)(direction), ...(0, _gridGenerator.generateSizeClassNames)(size), ...container ? (0, _gridGenerator.generateSpacingClassNames)(spacing, theme2.breakpoints.keys[0]) : []]
        };
        return (0, _composeClasses.default)(slots, (slot) => (0, _generateUtilityClass.default)(componentName, slot), {});
      };
      function parseResponsiveProp(propValue, breakpoints, shouldUseValue = () => true) {
        const parsedProp = {};
        if (propValue === null) {
          return parsedProp;
        }
        if (Array.isArray(propValue)) {
          propValue.forEach((value, index) => {
            if (value !== null && shouldUseValue(value) && breakpoints.keys[index]) {
              parsedProp[breakpoints.keys[index]] = value;
            }
          });
        } else if (typeof propValue === "object") {
          Object.keys(propValue).forEach((key) => {
            const value = propValue[key];
            if (value !== null && value !== void 0 && shouldUseValue(value)) {
              parsedProp[key] = value;
            }
          });
        } else {
          parsedProp[breakpoints.keys[0]] = propValue;
        }
        return parsedProp;
      }
      const GridRoot = createStyledComponent(_gridGenerator.generateGridColumnsStyles, _gridGenerator.generateGridColumnSpacingStyles, _gridGenerator.generateGridRowSpacingStyles, _gridGenerator.generateGridSizeStyles, _gridGenerator.generateGridDirectionStyles, _gridGenerator.generateGridStyles, _gridGenerator.generateGridOffsetStyles);
      const Grid = /* @__PURE__ */ React7.forwardRef(function Grid2(inProps, ref) {
        const theme2 = useTheme3();
        const themeProps = useThemeProps(inProps);
        const props = (0, _styleFunctionSx.extendSxProp)(themeProps);
        (0, _deleteLegacyGridProps.default)(props, theme2.breakpoints);
        const {
          className,
          children,
          columns: columnsProp = 12,
          container = false,
          component = "div",
          direction = "row",
          wrap = "wrap",
          size: sizeProp = {},
          offset: offsetProp = {},
          spacing: spacingProp = 0,
          rowSpacing: rowSpacingProp = spacingProp,
          columnSpacing: columnSpacingProp = spacingProp,
          unstable_level: level = 0,
          ...other
        } = props;
        const size = parseResponsiveProp(sizeProp, theme2.breakpoints, (val) => val !== false);
        const offset = parseResponsiveProp(offsetProp, theme2.breakpoints);
        const columns = inProps.columns ?? (level ? void 0 : columnsProp);
        const spacing = inProps.spacing ?? (level ? void 0 : spacingProp);
        const rowSpacing = inProps.rowSpacing ?? inProps.spacing ?? (level ? void 0 : rowSpacingProp);
        const columnSpacing = inProps.columnSpacing ?? inProps.spacing ?? (level ? void 0 : columnSpacingProp);
        const ownerState = {
          ...props,
          level,
          columns,
          container,
          direction,
          wrap,
          spacing,
          rowSpacing,
          columnSpacing,
          size,
          offset
        };
        const classes = useUtilityClasses(ownerState, theme2);
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(GridRoot, {
          ref,
          as: component,
          ownerState,
          className: (0, _clsx.default)(classes.root, className),
          ...other,
          children: React7.Children.map(children, (child) => {
            if (/* @__PURE__ */ React7.isValidElement(child) && (0, _isMuiElement.default)(child, ["Grid"]) && container && child.props.container) {
              return /* @__PURE__ */ React7.cloneElement(child, {
                unstable_level: child.props?.unstable_level ?? level + 1
              });
            }
            return child;
          })
        });
      });
      define_process_env_default.NODE_ENV !== "production" ? Grid.propTypes = {
        children: _propTypes.default.node,
        className: _propTypes.default.string,
        columns: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.number), _propTypes.default.number, _propTypes.default.object]),
        columnSpacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
        component: _propTypes.default.elementType,
        container: _propTypes.default.bool,
        direction: _propTypes.default.oneOfType([_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), _propTypes.default.arrayOf(_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), _propTypes.default.object]),
        offset: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])), _propTypes.default.object]),
        rowSpacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
        size: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.bool, _propTypes.default.number, _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.bool, _propTypes.default.number])), _propTypes.default.object]),
        spacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
        sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
        wrap: _propTypes.default.oneOf(["nowrap", "wrap-reverse", "wrap"])
      } : void 0;
      Grid.muiName = "Grid";
      return Grid;
    }
  }
});

// node_modules/@mui/system/Grid/Grid.js
var require_Grid3 = __commonJS({
  "node_modules/@mui/system/Grid/Grid.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _createGrid = _interopRequireDefault(require_createGrid2());
    var Grid = (0, _createGrid.default)();
    define_process_env_default.NODE_ENV !== "production" ? Grid.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * The content of the component.
       */
      children: _propTypes.default.node,
      /**
       * The number of columns.
       * @default 12
       */
      columns: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.number), _propTypes.default.number, _propTypes.default.object]),
      /**
       * Defines the horizontal space between the type `item` components.
       * It overrides the value of the `spacing` prop.
       */
      columnSpacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
      /**
       * If `true`, the component will have the flex *container* behavior.
       * You should be wrapping *items* with a *container*.
       * @default false
       */
      container: _propTypes.default.bool,
      /**
       * Defines the `flex-direction` style property.
       * It is applied for all screen sizes.
       * @default 'row'
       */
      direction: _propTypes.default.oneOfType([_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), _propTypes.default.arrayOf(_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), _propTypes.default.object]),
      /**
       * Defines the offset value for the type `item` components.
       */
      offset: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])), _propTypes.default.object]),
      /**
       * Defines the vertical space between the type `item` components.
       * It overrides the value of the `spacing` prop.
       */
      rowSpacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
      /**
       * Defines the size of the the type `item` components.
       */
      size: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.bool, _propTypes.default.number, _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.bool, _propTypes.default.number])), _propTypes.default.object]),
      /**
       * Defines the space between the type `item` components.
       * It can only be used on a type `container` component.
       * @default 0
       */
      spacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
      /**
       * @ignore
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
      /**
       * @internal
       * The level of the grid starts from `0` and increases when the grid nests
       * inside another grid. Nesting is defined as a container Grid being a direct
       * child of a container Grid.
       *
       * ```js
       * <Grid container> // level 0
       *   <Grid container> // level 1
       *     <Grid container> // level 2
       * ```
       *
       * Only consecutive grid is considered nesting. A grid container will start at
       * `0` if there are non-Grid container element above it.
       *
       * ```js
       * <Grid container> // level 0
       *   <div>
       *     <Grid container> // level 0
       * ```
       *
       * ```js
       * <Grid container> // level 0
       *   <Grid>
       *     <Grid container> // level 0
       * ```
       */
      unstable_level: _propTypes.default.number,
      /**
       * Defines the `flex-wrap` style property.
       * It's applied for all screen sizes.
       * @default 'wrap'
       */
      wrap: _propTypes.default.oneOf(["nowrap", "wrap-reverse", "wrap"])
    } : void 0;
    var _default = exports2.default = Grid;
  }
});

// node_modules/@mui/system/Grid/GridProps.js
var require_GridProps2 = __commonJS({
  "node_modules/@mui/system/Grid/GridProps.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
  }
});

// node_modules/@mui/system/Grid/gridClasses.js
var require_gridClasses2 = __commonJS({
  "node_modules/@mui/system/Grid/gridClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getGridUtilityClass = getGridUtilityClass;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses4());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass4());
    function getGridUtilityClass(slot) {
      return (0, _generateUtilityClass.default)("MuiGrid", slot);
    }
    var SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    var DIRECTIONS = ["column-reverse", "column", "row-reverse", "row"];
    var WRAPS = ["nowrap", "wrap-reverse", "wrap"];
    var GRID_SIZES = ["auto", "grow", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
    var gridClasses = (0, _generateUtilityClasses.default)("MuiGrid", [
      "root",
      "container",
      "item",
      // spacings
      ...SPACINGS.map((spacing) => `spacing-xs-${spacing}`),
      // direction values
      ...DIRECTIONS.map((direction) => `direction-xs-${direction}`),
      // wrap values
      ...WRAPS.map((wrap) => `wrap-xs-${wrap}`),
      // grid sizes for all breakpoints
      ...GRID_SIZES.map((size) => `grid-xs-${size}`),
      ...GRID_SIZES.map((size) => `grid-sm-${size}`),
      ...GRID_SIZES.map((size) => `grid-md-${size}`),
      ...GRID_SIZES.map((size) => `grid-lg-${size}`),
      ...GRID_SIZES.map((size) => `grid-xl-${size}`)
    ]);
    var _default = exports2.default = gridClasses;
  }
});

// node_modules/@mui/system/Grid/index.js
var require_Grid4 = __commonJS({
  "node_modules/@mui/system/Grid/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      createGrid: true,
      gridClasses: true,
      unstable_traverseBreakpoints: true,
      unstable_generateDirectionClasses: true,
      unstable_generateSizeClassNames: true,
      unstable_generateSpacingClassNames: true
    };
    Object.defineProperty(exports2, "createGrid", {
      enumerable: true,
      get: function() {
        return _createGrid.default;
      }
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _Grid.default;
      }
    });
    Object.defineProperty(exports2, "gridClasses", {
      enumerable: true,
      get: function() {
        return _gridClasses.default;
      }
    });
    Object.defineProperty(exports2, "unstable_generateDirectionClasses", {
      enumerable: true,
      get: function() {
        return _gridGenerator.generateDirectionClasses;
      }
    });
    Object.defineProperty(exports2, "unstable_generateSizeClassNames", {
      enumerable: true,
      get: function() {
        return _gridGenerator.generateSizeClassNames;
      }
    });
    Object.defineProperty(exports2, "unstable_generateSpacingClassNames", {
      enumerable: true,
      get: function() {
        return _gridGenerator.generateSpacingClassNames;
      }
    });
    Object.defineProperty(exports2, "unstable_traverseBreakpoints", {
      enumerable: true,
      get: function() {
        return _traverseBreakpoints.traverseBreakpoints;
      }
    });
    var _Grid = _interopRequireDefault(require_Grid3());
    var _createGrid = _interopRequireDefault(require_createGrid2());
    var _GridProps = require_GridProps2();
    Object.keys(_GridProps).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _GridProps[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _GridProps[key];
        }
      });
    });
    var _gridClasses = _interopRequireWildcard(require_gridClasses2());
    Object.keys(_gridClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _gridClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _gridClasses[key];
        }
      });
    });
    var _traverseBreakpoints = require_traverseBreakpoints2();
    var _gridGenerator = require_gridGenerator2();
  }
});

// node_modules/@mui/system/Stack/createStack.js
var require_createStack2 = __commonJS({
  "node_modules/@mui/system/Stack/createStack.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = createStack;
    exports2.style = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _clsx = _interopRequireDefault(require_clsx());
    var _deepmerge = _interopRequireDefault(require_deepmerge4());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass4());
    var _composeClasses = _interopRequireDefault(require_composeClasses6());
    var _styled = _interopRequireDefault(require_styled5());
    var _useThemeProps = _interopRequireDefault(require_useThemeProps5());
    var _styleFunctionSx = require_styleFunctionSx4();
    var _createTheme = _interopRequireDefault(require_createTheme5());
    var _breakpoints = require_breakpoints4();
    var _spacing = require_spacing4();
    var _jsxRuntime = require_jsx_runtime();
    var defaultTheme = (0, _createTheme.default)();
    var defaultCreateStyledComponent = (0, _styled.default)("div", {
      name: "MuiStack",
      slot: "Root",
      overridesResolver: (props, styles) => styles.root
    });
    function useThemePropsDefault(props) {
      return (0, _useThemeProps.default)({
        props,
        name: "MuiStack",
        defaultTheme
      });
    }
    function joinChildren(children, separator) {
      const childrenArray = React7.Children.toArray(children).filter(Boolean);
      return childrenArray.reduce((output, child, index) => {
        output.push(child);
        if (index < childrenArray.length - 1) {
          output.push(/* @__PURE__ */ React7.cloneElement(separator, {
            key: `separator-${index}`
          }));
        }
        return output;
      }, []);
    }
    var getSideFromDirection = (direction) => {
      return {
        row: "Left",
        "row-reverse": "Right",
        column: "Top",
        "column-reverse": "Bottom"
      }[direction];
    };
    var style = ({
      ownerState,
      theme: theme2
    }) => {
      let styles = {
        display: "flex",
        flexDirection: "column",
        ...(0, _breakpoints.handleBreakpoints)({
          theme: theme2
        }, (0, _breakpoints.resolveBreakpointValues)({
          values: ownerState.direction,
          breakpoints: theme2.breakpoints.values
        }), (propValue) => ({
          flexDirection: propValue
        }))
      };
      if (ownerState.spacing) {
        const transformer = (0, _spacing.createUnarySpacing)(theme2);
        const base = Object.keys(theme2.breakpoints.values).reduce((acc, breakpoint) => {
          if (typeof ownerState.spacing === "object" && ownerState.spacing[breakpoint] != null || typeof ownerState.direction === "object" && ownerState.direction[breakpoint] != null) {
            acc[breakpoint] = true;
          }
          return acc;
        }, {});
        const directionValues = (0, _breakpoints.resolveBreakpointValues)({
          values: ownerState.direction,
          base
        });
        const spacingValues = (0, _breakpoints.resolveBreakpointValues)({
          values: ownerState.spacing,
          base
        });
        if (typeof directionValues === "object") {
          Object.keys(directionValues).forEach((breakpoint, index, breakpoints) => {
            const directionValue = directionValues[breakpoint];
            if (!directionValue) {
              const previousDirectionValue = index > 0 ? directionValues[breakpoints[index - 1]] : "column";
              directionValues[breakpoint] = previousDirectionValue;
            }
          });
        }
        const styleFromPropValue = (propValue, breakpoint) => {
          if (ownerState.useFlexGap) {
            return {
              gap: (0, _spacing.getValue)(transformer, propValue)
            };
          }
          return {
            // The useFlexGap={false} implement relies on each child to give up control of the margin.
            // We need to reset the margin to avoid double spacing.
            "& > :not(style):not(style)": {
              margin: 0
            },
            "& > :not(style) ~ :not(style)": {
              [`margin${getSideFromDirection(breakpoint ? directionValues[breakpoint] : ownerState.direction)}`]: (0, _spacing.getValue)(transformer, propValue)
            }
          };
        };
        styles = (0, _deepmerge.default)(styles, (0, _breakpoints.handleBreakpoints)({
          theme: theme2
        }, spacingValues, styleFromPropValue));
      }
      styles = (0, _breakpoints.mergeBreakpointsInOrder)(theme2.breakpoints, styles);
      return styles;
    };
    exports2.style = style;
    function createStack(options = {}) {
      const {
        // This will allow adding custom styled fn (for example for custom sx style function)
        createStyledComponent = defaultCreateStyledComponent,
        useThemeProps = useThemePropsDefault,
        componentName = "MuiStack"
      } = options;
      const useUtilityClasses = () => {
        const slots = {
          root: ["root"]
        };
        return (0, _composeClasses.default)(slots, (slot) => (0, _generateUtilityClass.default)(componentName, slot), {});
      };
      const StackRoot = createStyledComponent(style);
      const Stack = /* @__PURE__ */ React7.forwardRef(function Grid(inProps, ref) {
        const themeProps = useThemeProps(inProps);
        const props = (0, _styleFunctionSx.extendSxProp)(themeProps);
        const {
          component = "div",
          direction = "column",
          spacing = 0,
          divider,
          children,
          className,
          useFlexGap = false,
          ...other
        } = props;
        const ownerState = {
          direction,
          spacing,
          useFlexGap
        };
        const classes = useUtilityClasses();
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(StackRoot, {
          as: component,
          ownerState,
          ref,
          className: (0, _clsx.default)(classes.root, className),
          ...other,
          children: divider ? joinChildren(children, divider) : children
        });
      });
      define_process_env_default.NODE_ENV !== "production" ? Stack.propTypes = {
        children: _propTypes.default.node,
        direction: _propTypes.default.oneOfType([_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), _propTypes.default.arrayOf(_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), _propTypes.default.object]),
        divider: _propTypes.default.node,
        spacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
        sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
      } : void 0;
      return Stack;
    }
  }
});

// node_modules/@mui/system/Stack/Stack.js
var require_Stack3 = __commonJS({
  "node_modules/@mui/system/Stack/Stack.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _createStack = _interopRequireDefault(require_createStack2());
    var Stack = (0, _createStack.default)();
    define_process_env_default.NODE_ENV !== "production" ? Stack.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * The content of the component.
       */
      children: _propTypes.default.node,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: _propTypes.default.elementType,
      /**
       * Defines the `flex-direction` style property.
       * It is applied for all screen sizes.
       * @default 'column'
       */
      direction: _propTypes.default.oneOfType([_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), _propTypes.default.arrayOf(_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), _propTypes.default.object]),
      /**
       * Add an element between each child.
       */
      divider: _propTypes.default.node,
      /**
       * Defines the space between immediate children.
       * @default 0
       */
      spacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
      /**
       * The system prop, which allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
      /**
       * If `true`, the CSS flexbox `gap` is used instead of applying `margin` to children.
       *
       * While CSS `gap` removes the [known limitations](https://mui.com/joy-ui/react-stack/#limitations),
       * it is not fully supported in some browsers. We recommend checking https://caniuse.com/?search=flex%20gap before using this flag.
       *
       * To enable this flag globally, follow the theme's default props configuration.
       * @default false
       */
      useFlexGap: _propTypes.default.bool
    } : void 0;
    var _default = exports2.default = Stack;
  }
});

// node_modules/@mui/system/Stack/StackProps.js
var require_StackProps2 = __commonJS({
  "node_modules/@mui/system/Stack/StackProps.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
  }
});

// node_modules/@mui/system/Stack/stackClasses.js
var require_stackClasses2 = __commonJS({
  "node_modules/@mui/system/Stack/stackClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getStackUtilityClass = getStackUtilityClass;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses4());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass4());
    function getStackUtilityClass(slot) {
      return (0, _generateUtilityClass.default)("MuiStack", slot);
    }
    var stackClasses = (0, _generateUtilityClasses.default)("MuiStack", ["root"]);
    var _default = exports2.default = stackClasses;
  }
});

// node_modules/@mui/system/Stack/index.js
var require_Stack4 = __commonJS({
  "node_modules/@mui/system/Stack/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      createStack: true,
      stackClasses: true
    };
    Object.defineProperty(exports2, "createStack", {
      enumerable: true,
      get: function() {
        return _createStack.default;
      }
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _Stack.default;
      }
    });
    Object.defineProperty(exports2, "stackClasses", {
      enumerable: true,
      get: function() {
        return _stackClasses.default;
      }
    });
    var _Stack = _interopRequireDefault(require_Stack3());
    var _createStack = _interopRequireDefault(require_createStack2());
    var _StackProps = require_StackProps2();
    Object.keys(_StackProps).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _StackProps[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _StackProps[key];
        }
      });
    });
    var _stackClasses = _interopRequireWildcard(require_stackClasses2());
    Object.keys(_stackClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _stackClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _stackClasses[key];
        }
      });
    });
  }
});

// node_modules/@mui/system/index.js
var require_system2 = __commonJS({
  "node_modules/@mui/system/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      experimental_sx: true,
      css: true,
      keyframes: true,
      StyledEngineProvider: true,
      GlobalStyles: true,
      borders: true,
      breakpoints: true,
      handleBreakpoints: true,
      mergeBreakpointsInOrder: true,
      unstable_resolveBreakpointValues: true,
      cssContainerQueries: true,
      compose: true,
      display: true,
      flexbox: true,
      grid: true,
      palette: true,
      positions: true,
      shadows: true,
      sizing: true,
      spacing: true,
      style: true,
      getPath: true,
      getStyleValue: true,
      typography: true,
      unstable_styleFunctionSx: true,
      unstable_createStyleFunctionSx: true,
      unstable_extendSxProp: true,
      unstable_defaultSxConfig: true,
      unstable_getThemeValue: true,
      Box: true,
      createBox: true,
      createStyled: true,
      styled: true,
      createTheme: true,
      createBreakpoints: true,
      createSpacing: true,
      shape: true,
      useThemeProps: true,
      getThemeProps: true,
      useTheme: true,
      useThemeWithoutDefault: true,
      useMediaQuery: true,
      ThemeProvider: true,
      unstable_memoTheme: true,
      unstable_createCssVarsProvider: true,
      unstable_createGetCssVar: true,
      unstable_cssVarsParser: true,
      unstable_prepareCssVars: true,
      unstable_createCssVarsTheme: true,
      responsivePropType: true,
      RtlProvider: true,
      createContainer: true,
      Container: true,
      Grid: true,
      Stack: true
    };
    Object.defineProperty(exports2, "Box", {
      enumerable: true,
      get: function() {
        return _Box.default;
      }
    });
    Object.defineProperty(exports2, "Container", {
      enumerable: true,
      get: function() {
        return _Container.default;
      }
    });
    Object.defineProperty(exports2, "GlobalStyles", {
      enumerable: true,
      get: function() {
        return _GlobalStyles.default;
      }
    });
    Object.defineProperty(exports2, "Grid", {
      enumerable: true,
      get: function() {
        return _Grid.default;
      }
    });
    Object.defineProperty(exports2, "RtlProvider", {
      enumerable: true,
      get: function() {
        return _RtlProvider.default;
      }
    });
    Object.defineProperty(exports2, "Stack", {
      enumerable: true,
      get: function() {
        return _Stack.default;
      }
    });
    Object.defineProperty(exports2, "StyledEngineProvider", {
      enumerable: true,
      get: function() {
        return _styledEngine.StyledEngineProvider;
      }
    });
    Object.defineProperty(exports2, "ThemeProvider", {
      enumerable: true,
      get: function() {
        return _ThemeProvider.default;
      }
    });
    Object.defineProperty(exports2, "borders", {
      enumerable: true,
      get: function() {
        return _borders.default;
      }
    });
    Object.defineProperty(exports2, "breakpoints", {
      enumerable: true,
      get: function() {
        return _breakpoints.default;
      }
    });
    Object.defineProperty(exports2, "compose", {
      enumerable: true,
      get: function() {
        return _compose.default;
      }
    });
    Object.defineProperty(exports2, "createBox", {
      enumerable: true,
      get: function() {
        return _createBox.default;
      }
    });
    Object.defineProperty(exports2, "createBreakpoints", {
      enumerable: true,
      get: function() {
        return _createBreakpoints.default;
      }
    });
    Object.defineProperty(exports2, "createContainer", {
      enumerable: true,
      get: function() {
        return _createContainer.default;
      }
    });
    Object.defineProperty(exports2, "createSpacing", {
      enumerable: true,
      get: function() {
        return _createSpacing.default;
      }
    });
    Object.defineProperty(exports2, "createStyled", {
      enumerable: true,
      get: function() {
        return _createStyled.default;
      }
    });
    Object.defineProperty(exports2, "createTheme", {
      enumerable: true,
      get: function() {
        return _createTheme.default;
      }
    });
    Object.defineProperty(exports2, "css", {
      enumerable: true,
      get: function() {
        return _styledEngine.css;
      }
    });
    Object.defineProperty(exports2, "cssContainerQueries", {
      enumerable: true,
      get: function() {
        return _cssContainerQueries.default;
      }
    });
    Object.defineProperty(exports2, "display", {
      enumerable: true,
      get: function() {
        return _display.default;
      }
    });
    exports2.experimental_sx = experimental_sx;
    Object.defineProperty(exports2, "flexbox", {
      enumerable: true,
      get: function() {
        return _flexbox.default;
      }
    });
    Object.defineProperty(exports2, "getPath", {
      enumerable: true,
      get: function() {
        return _style.getPath;
      }
    });
    Object.defineProperty(exports2, "getStyleValue", {
      enumerable: true,
      get: function() {
        return _style.getStyleValue;
      }
    });
    Object.defineProperty(exports2, "getThemeProps", {
      enumerable: true,
      get: function() {
        return _useThemeProps.getThemeProps;
      }
    });
    Object.defineProperty(exports2, "grid", {
      enumerable: true,
      get: function() {
        return _cssGrid.default;
      }
    });
    Object.defineProperty(exports2, "handleBreakpoints", {
      enumerable: true,
      get: function() {
        return _breakpoints.handleBreakpoints;
      }
    });
    Object.defineProperty(exports2, "keyframes", {
      enumerable: true,
      get: function() {
        return _styledEngine.keyframes;
      }
    });
    Object.defineProperty(exports2, "mergeBreakpointsInOrder", {
      enumerable: true,
      get: function() {
        return _breakpoints.mergeBreakpointsInOrder;
      }
    });
    Object.defineProperty(exports2, "palette", {
      enumerable: true,
      get: function() {
        return _palette.default;
      }
    });
    Object.defineProperty(exports2, "positions", {
      enumerable: true,
      get: function() {
        return _positions.default;
      }
    });
    Object.defineProperty(exports2, "responsivePropType", {
      enumerable: true,
      get: function() {
        return _responsivePropType.default;
      }
    });
    Object.defineProperty(exports2, "shadows", {
      enumerable: true,
      get: function() {
        return _shadows.default;
      }
    });
    Object.defineProperty(exports2, "shape", {
      enumerable: true,
      get: function() {
        return _shape.default;
      }
    });
    Object.defineProperty(exports2, "sizing", {
      enumerable: true,
      get: function() {
        return _sizing.default;
      }
    });
    Object.defineProperty(exports2, "spacing", {
      enumerable: true,
      get: function() {
        return _spacing.default;
      }
    });
    Object.defineProperty(exports2, "style", {
      enumerable: true,
      get: function() {
        return _style.default;
      }
    });
    Object.defineProperty(exports2, "styled", {
      enumerable: true,
      get: function() {
        return _styled.default;
      }
    });
    Object.defineProperty(exports2, "typography", {
      enumerable: true,
      get: function() {
        return _typography.default;
      }
    });
    Object.defineProperty(exports2, "unstable_createCssVarsProvider", {
      enumerable: true,
      get: function() {
        return _createCssVarsProvider.default;
      }
    });
    Object.defineProperty(exports2, "unstable_createCssVarsTheme", {
      enumerable: true,
      get: function() {
        return _createCssVarsTheme.default;
      }
    });
    Object.defineProperty(exports2, "unstable_createGetCssVar", {
      enumerable: true,
      get: function() {
        return _createGetCssVar.default;
      }
    });
    Object.defineProperty(exports2, "unstable_createStyleFunctionSx", {
      enumerable: true,
      get: function() {
        return _styleFunctionSx.unstable_createStyleFunctionSx;
      }
    });
    Object.defineProperty(exports2, "unstable_cssVarsParser", {
      enumerable: true,
      get: function() {
        return _cssVarsParser.default;
      }
    });
    Object.defineProperty(exports2, "unstable_defaultSxConfig", {
      enumerable: true,
      get: function() {
        return _styleFunctionSx.unstable_defaultSxConfig;
      }
    });
    Object.defineProperty(exports2, "unstable_extendSxProp", {
      enumerable: true,
      get: function() {
        return _styleFunctionSx.extendSxProp;
      }
    });
    Object.defineProperty(exports2, "unstable_getThemeValue", {
      enumerable: true,
      get: function() {
        return _getThemeValue.default;
      }
    });
    Object.defineProperty(exports2, "unstable_memoTheme", {
      enumerable: true,
      get: function() {
        return _memoTheme.default;
      }
    });
    Object.defineProperty(exports2, "unstable_prepareCssVars", {
      enumerable: true,
      get: function() {
        return _prepareCssVars.default;
      }
    });
    Object.defineProperty(exports2, "unstable_resolveBreakpointValues", {
      enumerable: true,
      get: function() {
        return _breakpoints.resolveBreakpointValues;
      }
    });
    Object.defineProperty(exports2, "unstable_styleFunctionSx", {
      enumerable: true,
      get: function() {
        return _styleFunctionSx.default;
      }
    });
    Object.defineProperty(exports2, "useMediaQuery", {
      enumerable: true,
      get: function() {
        return _useMediaQuery.default;
      }
    });
    Object.defineProperty(exports2, "useTheme", {
      enumerable: true,
      get: function() {
        return _useTheme.default;
      }
    });
    Object.defineProperty(exports2, "useThemeProps", {
      enumerable: true,
      get: function() {
        return _useThemeProps.default;
      }
    });
    Object.defineProperty(exports2, "useThemeWithoutDefault", {
      enumerable: true,
      get: function() {
        return _useThemeWithoutDefault.default;
      }
    });
    var _formatMuiErrorMessage = _interopRequireDefault(require_formatMuiErrorMessage4());
    var _styledEngine = require_styled_engine();
    var _GlobalStyles = _interopRequireDefault(require_GlobalStyles10());
    var _borders = _interopRequireWildcard(require_borders4());
    Object.keys(_borders).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _borders[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _borders[key];
        }
      });
    });
    var _breakpoints = _interopRequireWildcard(require_breakpoints4());
    var _cssContainerQueries = _interopRequireDefault(require_cssContainerQueries4());
    var _compose = _interopRequireDefault(require_compose4());
    var _display = _interopRequireDefault(require_display4());
    var _flexbox = _interopRequireWildcard(require_flexbox4());
    Object.keys(_flexbox).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _flexbox[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _flexbox[key];
        }
      });
    });
    var _cssGrid = _interopRequireWildcard(require_cssGrid4());
    Object.keys(_cssGrid).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _cssGrid[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _cssGrid[key];
        }
      });
    });
    var _palette = _interopRequireWildcard(require_palette4());
    Object.keys(_palette).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _palette[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _palette[key];
        }
      });
    });
    var _positions = _interopRequireWildcard(require_positions4());
    Object.keys(_positions).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _positions[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _positions[key];
        }
      });
    });
    var _shadows = _interopRequireDefault(require_shadows5());
    var _sizing = _interopRequireWildcard(require_sizing4());
    Object.keys(_sizing).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _sizing[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _sizing[key];
        }
      });
    });
    var _spacing = _interopRequireWildcard(require_spacing4());
    Object.keys(_spacing).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _spacing[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _spacing[key];
        }
      });
    });
    var _style = _interopRequireWildcard(require_style4());
    var _typography = _interopRequireWildcard(require_typography4());
    Object.keys(_typography).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _typography[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _typography[key];
        }
      });
    });
    var _styleFunctionSx = _interopRequireWildcard(require_styleFunctionSx4());
    var _getThemeValue = _interopRequireDefault(require_getThemeValue4());
    var _Box = _interopRequireDefault(require_Box6());
    var _createBox = _interopRequireDefault(require_createBox4());
    var _createStyled = _interopRequireWildcard(require_createStyled4());
    Object.keys(_createStyled).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _createStyled[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _createStyled[key];
        }
      });
    });
    var _styled = _interopRequireDefault(require_styled5());
    var _createTheme = _interopRequireDefault(require_createTheme5());
    var _createBreakpoints = _interopRequireDefault(require_createBreakpoints3());
    var _createSpacing = _interopRequireDefault(require_createSpacing2());
    var _shape = _interopRequireDefault(require_shape2());
    var _useThemeProps = _interopRequireWildcard(require_useThemeProps5());
    var _useTheme = _interopRequireDefault(require_useTheme7());
    var _useThemeWithoutDefault = _interopRequireDefault(require_useThemeWithoutDefault4());
    var _useMediaQuery = _interopRequireDefault(require_useMediaQuery4());
    var _colorManipulator = require_colorManipulator4();
    Object.keys(_colorManipulator).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _colorManipulator[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _colorManipulator[key];
        }
      });
    });
    var _ThemeProvider = _interopRequireDefault(require_ThemeProvider9());
    var _memoTheme = _interopRequireDefault(require_memoTheme3());
    var _createCssVarsProvider = _interopRequireDefault(require_createCssVarsProvider2());
    var _createGetCssVar = _interopRequireDefault(require_createGetCssVar2());
    var _cssVarsParser = _interopRequireDefault(require_cssVarsParser2());
    var _prepareCssVars = _interopRequireDefault(require_prepareCssVars2());
    var _createCssVarsTheme = _interopRequireDefault(require_createCssVarsTheme2());
    var _responsivePropType = _interopRequireDefault(require_responsivePropType4());
    var _RtlProvider = _interopRequireWildcard(require_RtlProvider2());
    Object.keys(_RtlProvider).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _RtlProvider[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _RtlProvider[key];
        }
      });
    });
    var _version = require_version2();
    Object.keys(_version).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _version[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _version[key];
        }
      });
    });
    var _createContainer = _interopRequireDefault(require_createContainer2());
    var _Container = _interopRequireWildcard(require_Container4());
    Object.keys(_Container).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _Container[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _Container[key];
        }
      });
    });
    var _Grid = _interopRequireDefault(require_Grid3());
    var _Grid2 = require_Grid4();
    Object.keys(_Grid2).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _Grid2[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _Grid2[key];
        }
      });
    });
    var _Stack = _interopRequireDefault(require_Stack3());
    var _Stack2 = require_Stack4();
    Object.keys(_Stack2).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _Stack2[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _Stack2[key];
        }
      });
    });
    function experimental_sx() {
      throw new Error(define_process_env_default.NODE_ENV !== "production" ? "MUI: The `experimental_sx` has been moved to `theme.unstable_sx`.For more details, see https://github.com/mui/material-ui/pull/35150." : (0, _formatMuiErrorMessage.default)(19));
    }
  }
});

// node_modules/@mui/x-tree-view/node/TreeItem2DragAndDropOverlay/TreeItem2DragAndDropOverlay.js
var require_TreeItem2DragAndDropOverlay = __commonJS({
  "node_modules/@mui/x-tree-view/node/TreeItem2DragAndDropOverlay/TreeItem2DragAndDropOverlay.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.TreeItem2DragAndDropOverlay = TreeItem2DragAndDropOverlay;
    var _extends2 = _interopRequireDefault(require_extends());
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _styles = require_styles();
    var _system = require_system2();
    var _zeroStyled = require_zero_styled();
    var _jsxRuntime = require_jsx_runtime();
    var TreeItem2DragAndDropOverlayRoot = (0, _zeroStyled.styled)("div", {
      name: "MuiTreeItem2DragAndDropOverlay",
      slot: "Root",
      overridesResolver: (props, styles) => styles.root,
      shouldForwardProp: (prop) => (0, _system.shouldForwardProp)(prop) && prop !== "action"
    })(({
      theme: theme2
    }) => ({
      position: "absolute",
      left: 0,
      display: "flex",
      top: 0,
      bottom: 0,
      right: 0,
      pointerEvents: "none",
      variants: [{
        props: {
          action: "make-child"
        },
        style: {
          marginLeft: "calc(var(--TreeView-indentMultiplier) * var(--TreeView-itemDepth))",
          borderRadius: theme2.shape.borderRadius,
          backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.darkChannel} / ${theme2.vars.palette.action.focusOpacity})` : (0, _styles.alpha)(theme2.palette.primary.dark, theme2.palette.action.focusOpacity)
        }
      }, {
        props: {
          action: "reorder-above"
        },
        style: {
          marginLeft: "calc(var(--TreeView-indentMultiplier) * var(--TreeView-itemDepth))",
          borderTop: `1px solid ${(theme2.vars || theme2).palette.action.active}`
        }
      }, {
        props: {
          action: "reorder-below"
        },
        style: {
          marginLeft: "calc(var(--TreeView-indentMultiplier) * var(--TreeView-itemDepth))",
          borderBottom: `1px solid ${(theme2.vars || theme2).palette.action.active}`
        }
      }, {
        props: {
          action: "move-to-parent"
        },
        style: {
          marginLeft: "calc(var(--TreeView-indentMultiplier) * calc(var(--TreeView-itemDepth) - 1))",
          borderBottom: `1px solid ${(theme2.vars || theme2).palette.action.active}`
        }
      }]
    }));
    function TreeItem2DragAndDropOverlay(props) {
      if (props.action == null) {
        return null;
      }
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(TreeItem2DragAndDropOverlayRoot, (0, _extends2.default)({}, props));
    }
    define_process_env_default.NODE_ENV !== "production" ? TreeItem2DragAndDropOverlay.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "pnpm proptypes"  |
      // ----------------------------------------------------------------------
      action: _propTypes.default.oneOf(["make-child", "move-to-parent", "reorder-above", "reorder-below"]),
      style: _propTypes.default.object
    } : void 0;
  }
});

// node_modules/@mui/x-tree-view/node/TreeItem2DragAndDropOverlay/index.js
var require_TreeItem2DragAndDropOverlay2 = __commonJS({
  "node_modules/@mui/x-tree-view/node/TreeItem2DragAndDropOverlay/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "TreeItem2DragAndDropOverlay", {
      enumerable: true,
      get: function() {
        return _TreeItem2DragAndDropOverlay.TreeItem2DragAndDropOverlay;
      }
    });
    var _TreeItem2DragAndDropOverlay = require_TreeItem2DragAndDropOverlay();
  }
});

// node_modules/@mui/x-tree-view/node/TreeItem2LabelInput/TreeItem2LabelInput.js
var require_TreeItem2LabelInput = __commonJS({
  "node_modules/@mui/x-tree-view/node/TreeItem2LabelInput/TreeItem2LabelInput.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.TreeItem2LabelInput = void 0;
    var _extends2 = _interopRequireDefault(require_extends());
    var _zeroStyled = require_zero_styled();
    var TreeItem2LabelInput = exports2.TreeItem2LabelInput = (0, _zeroStyled.styled)("input", {
      name: "MuiTreeItem2",
      slot: "LabelInput",
      overridesResolver: (props, styles) => styles.labelInput
    })(({
      theme: theme2
    }) => (0, _extends2.default)({}, theme2.typography.body1, {
      width: "100%",
      backgroundColor: theme2.palette.background.paper,
      borderRadius: theme2.shape.borderRadius,
      border: "none",
      padding: "0 2px",
      boxSizing: "border-box",
      "&:focus": {
        outline: `1px solid ${theme2.palette.primary.main}`
      }
    }));
  }
});

// node_modules/@mui/x-tree-view/node/TreeItem2LabelInput/index.js
var require_TreeItem2LabelInput2 = __commonJS({
  "node_modules/@mui/x-tree-view/node/TreeItem2LabelInput/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "TreeItem2LabelInput", {
      enumerable: true,
      get: function() {
        return _TreeItem2LabelInput.TreeItem2LabelInput;
      }
    });
    var _TreeItem2LabelInput = require_TreeItem2LabelInput();
  }
});

// node_modules/@mui/x-tree-view/node/TreeItem/TreeItemContent.js
var require_TreeItemContent = __commonJS({
  "node_modules/@mui/x-tree-view/node/TreeItem/TreeItemContent.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.TreeItemContent = void 0;
    var _extends2 = _interopRequireDefault(require_extends());
    var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _clsx = _interopRequireDefault(require_clsx());
    var _Checkbox = _interopRequireDefault(require_Checkbox2());
    var _useTreeItemState = require_useTreeItemState();
    var _TreeItem2DragAndDropOverlay = require_TreeItem2DragAndDropOverlay2();
    var _TreeItem2LabelInput = require_TreeItem2LabelInput2();
    var _jsxRuntime = require_jsx_runtime();
    var _excluded = ["classes", "className", "displayIcon", "expansionIcon", "icon", "label", "itemId", "onClick", "onMouseDown", "dragAndDropOverlayProps", "labelInputProps"];
    var TreeItemContent = exports2.TreeItemContent = /* @__PURE__ */ React7.forwardRef(function TreeItemContent2(props, ref) {
      const {
        classes,
        className,
        displayIcon,
        expansionIcon,
        icon: iconProp,
        label,
        itemId,
        onClick,
        onMouseDown,
        dragAndDropOverlayProps,
        labelInputProps
      } = props, other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
      const {
        disabled,
        expanded,
        selected,
        focused,
        editing,
        editable,
        disableSelection,
        checkboxSelection,
        handleExpansion,
        handleSelection,
        handleCheckboxSelection,
        handleContentClick,
        preventSelection,
        expansionTrigger,
        toggleItemEditing
      } = (0, _useTreeItemState.useTreeItemState)(itemId);
      const icon = iconProp || expansionIcon || displayIcon;
      const checkboxRef = React7.useRef(null);
      const handleMouseDown = (event) => {
        preventSelection(event);
        if (onMouseDown) {
          onMouseDown(event);
        }
      };
      const handleClick = (event) => {
        handleContentClick?.(event, itemId);
        if (checkboxRef.current?.contains(event.target)) {
          return;
        }
        if (expansionTrigger === "content") {
          handleExpansion(event);
        }
        if (!checkboxSelection) {
          handleSelection(event);
        }
        if (onClick) {
          onClick(event);
        }
      };
      const handleLabelDoubleClick = (event) => {
        if (event.defaultMuiPrevented) {
          return;
        }
        toggleItemEditing();
      };
      return (
        /* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions -- Key event is handled by the TreeView */
        /* @__PURE__ */ (0, _jsxRuntime.jsxs)("div", (0, _extends2.default)({}, other, {
          className: (0, _clsx.default)(classes.root, className, expanded && classes.expanded, selected && classes.selected, focused && classes.focused, disabled && classes.disabled, editing && classes.editing, editable && classes.editable),
          onClick: handleClick,
          onMouseDown: handleMouseDown,
          ref,
          children: [/* @__PURE__ */ (0, _jsxRuntime.jsx)("div", {
            className: classes.iconContainer,
            children: icon
          }), checkboxSelection && /* @__PURE__ */ (0, _jsxRuntime.jsx)(_Checkbox.default, {
            className: classes.checkbox,
            checked: selected,
            onChange: handleCheckboxSelection,
            disabled: disabled || disableSelection,
            ref: checkboxRef,
            tabIndex: -1
          }), editing ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(_TreeItem2LabelInput.TreeItem2LabelInput, (0, _extends2.default)({}, labelInputProps, {
            className: classes.labelInput
          })) : /* @__PURE__ */ (0, _jsxRuntime.jsx)("div", (0, _extends2.default)({
            className: classes.label
          }, editable && {
            onDoubleClick: handleLabelDoubleClick
          }, {
            children: label
          })), dragAndDropOverlayProps && /* @__PURE__ */ (0, _jsxRuntime.jsx)(_TreeItem2DragAndDropOverlay.TreeItem2DragAndDropOverlay, (0, _extends2.default)({}, dragAndDropOverlayProps))]
        }))
      );
    });
    define_process_env_default.NODE_ENV !== "production" ? TreeItemContent.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "pnpm proptypes"  |
      // ----------------------------------------------------------------------
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object.isRequired,
      className: _propTypes.default.string,
      /**
       * The icon to display next to the Tree Item's label. Either a parent or end icon.
       */
      displayIcon: _propTypes.default.node,
      dragAndDropOverlayProps: _propTypes.default.shape({
        action: _propTypes.default.oneOf(["make-child", "move-to-parent", "reorder-above", "reorder-below"]),
        style: _propTypes.default.object
      }),
      /**
       * The icon to display next to the Tree Item's label. Either an expansion or collapse icon.
       */
      expansionIcon: _propTypes.default.node,
      /**
       * The icon to display next to the Tree Item's label.
       */
      icon: _propTypes.default.node,
      /**
       * The id of the item.
       */
      itemId: _propTypes.default.string.isRequired,
      /**
       * The Tree Item label.
       */
      label: _propTypes.default.node,
      labelInputProps: _propTypes.default.shape({
        autoFocus: _propTypes.default.oneOf([true]),
        "data-element": _propTypes.default.oneOf(["labelInput"]),
        onBlur: _propTypes.default.func,
        onChange: _propTypes.default.func,
        onKeyDown: _propTypes.default.func,
        type: _propTypes.default.oneOf(["text"]),
        value: _propTypes.default.string
      })
    } : void 0;
  }
});

// node_modules/@mui/x-tree-view/node/TreeItem/treeItemClasses.js
var require_treeItemClasses = __commonJS({
  "node_modules/@mui/x-tree-view/node/TreeItem/treeItemClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.getTreeItemUtilityClass = getTreeItemUtilityClass;
    exports2.treeItemClasses = void 0;
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    function getTreeItemUtilityClass(slot) {
      return (0, _generateUtilityClass.default)("MuiTreeItem", slot);
    }
    var treeItemClasses = exports2.treeItemClasses = (0, _generateUtilityClasses.default)("MuiTreeItem", ["root", "groupTransition", "content", "expanded", "selected", "focused", "disabled", "iconContainer", "label", "checkbox", "labelInput", "editable", "editing", "dragAndDropOverlay"]);
  }
});

// node_modules/@mui/x-tree-view/node/icons/icons.js
var require_icons = __commonJS({
  "node_modules/@mui/x-tree-view/node/icons/icons.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.TreeViewExpandIcon = exports2.TreeViewCollapseIcon = void 0;
    var _utils = require_utils4();
    var React7 = _interopRequireWildcard(require_react());
    var _jsxRuntime = require_jsx_runtime();
    var TreeViewExpandIcon = exports2.TreeViewExpandIcon = (0, _utils.createSvgIcon)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
      d: "M10 6 8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
    }), "TreeViewExpandIcon");
    var TreeViewCollapseIcon = exports2.TreeViewCollapseIcon = (0, _utils.createSvgIcon)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
      d: "M16.59 8.59 12 13.17 7.41 8.59 6 10l6 6 6-6z"
    }), "TreeViewCollapseIcon");
  }
});

// node_modules/@mui/x-tree-view/node/icons/index.js
var require_icons2 = __commonJS({
  "node_modules/@mui/x-tree-view/node/icons/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _icons = require_icons();
    Object.keys(_icons).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _icons[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _icons[key];
        }
      });
    });
  }
});

// node_modules/@mui/x-tree-view/node/TreeItem2Provider/TreeItem2Provider.js
var require_TreeItem2Provider = __commonJS({
  "node_modules/@mui/x-tree-view/node/TreeItem2Provider/TreeItem2Provider.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.TreeItem2Provider = TreeItem2Provider;
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _TreeViewProvider = require_TreeViewProvider2();
    function TreeItem2Provider(props) {
      const {
        children,
        itemId
      } = props;
      const {
        wrapItem,
        instance
      } = (0, _TreeViewProvider.useTreeViewContext)();
      return wrapItem({
        children,
        itemId,
        instance
      });
    }
    TreeItem2Provider.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "pnpm proptypes"  |
      // ----------------------------------------------------------------------
      children: _propTypes.default.node,
      itemId: _propTypes.default.string.isRequired
    };
  }
});

// node_modules/@mui/x-tree-view/node/TreeItem2Provider/index.js
var require_TreeItem2Provider2 = __commonJS({
  "node_modules/@mui/x-tree-view/node/TreeItem2Provider/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "TreeItem2Provider", {
      enumerable: true,
      get: function() {
        return _TreeItem2Provider.TreeItem2Provider;
      }
    });
    var _TreeItem2Provider = require_TreeItem2Provider();
  }
});

// node_modules/@mui/x-tree-view/node/TreeItem/TreeItem.js
var require_TreeItem = __commonJS({
  "node_modules/@mui/x-tree-view/node/TreeItem/TreeItem.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.TreeItem = void 0;
    var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
    var _extends2 = _interopRequireDefault(require_extends());
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _clsx = _interopRequireDefault(require_clsx());
    var _Collapse = _interopRequireDefault(require_Collapse2());
    var _useForkRef = _interopRequireDefault(require_useForkRef2());
    var _createStyled = require_createStyled4();
    var _styles = require_styles();
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _extractEventHandlers = _interopRequireDefault(require_extractEventHandlers2());
    var _resolveComponentProps = _interopRequireDefault(require_resolveComponentProps2());
    var _useSlotProps4 = _interopRequireDefault(require_useSlotProps2());
    var _unsupportedProp = _interopRequireDefault(require_unsupportedProp2());
    var _elementTypeAcceptingRef = _interopRequireDefault(require_elementTypeAcceptingRef2());
    var _warning = require_warning2();
    var _zeroStyled = require_zero_styled();
    var _TreeItemContent = require_TreeItemContent();
    var _treeItemClasses = require_treeItemClasses();
    var _TreeViewProvider = require_TreeViewProvider2();
    var _icons = require_icons2();
    var _TreeItem2Provider = require_TreeItem2Provider2();
    var _TreeViewItemDepthContext = require_TreeViewItemDepthContext2();
    var _useTreeItemState = require_useTreeItemState();
    var _tree = require_tree();
    var _useTreeViewId = require_useTreeViewId_utils();
    var _jsxRuntime = require_jsx_runtime();
    var _excluded = ["children", "className", "slots", "slotProps", "ContentComponent", "ContentProps", "itemId", "id", "label", "onClick", "onMouseDown", "onFocus", "onBlur", "onKeyDown"];
    var _excluded2 = ["ownerState"];
    var _excluded3 = ["ownerState"];
    var _excluded4 = ["ownerState"];
    var useThemeProps = (0, _zeroStyled.createUseThemeProps)("MuiTreeItem");
    var useUtilityClasses = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        content: ["content"],
        expanded: ["expanded"],
        selected: ["selected"],
        focused: ["focused"],
        disabled: ["disabled"],
        iconContainer: ["iconContainer"],
        checkbox: ["checkbox"],
        label: ["label"],
        labelInput: ["labelInput"],
        editing: ["editing"],
        editable: ["editable"],
        groupTransition: ["groupTransition"]
      };
      return (0, _composeClasses.default)(slots, _treeItemClasses.getTreeItemUtilityClass, classes);
    };
    var TreeItemRoot = (0, _zeroStyled.styled)("li", {
      name: "MuiTreeItem",
      slot: "Root",
      overridesResolver: (props, styles) => styles.root
    })({
      listStyle: "none",
      margin: 0,
      padding: 0,
      outline: 0
    });
    var StyledTreeItemContent = (0, _zeroStyled.styled)(_TreeItemContent.TreeItemContent, {
      name: "MuiTreeItem",
      slot: "Content",
      overridesResolver: (props, styles) => {
        return [styles.content, styles.iconContainer && {
          [`& .${_treeItemClasses.treeItemClasses.iconContainer}`]: styles.iconContainer
        }, styles.label && {
          [`& .${_treeItemClasses.treeItemClasses.label}`]: styles.label
        }];
      },
      shouldForwardProp: (prop) => (0, _createStyled.shouldForwardProp)(prop) && prop !== "indentationAtItemLevel"
    })(({
      theme: theme2
    }) => ({
      padding: theme2.spacing(0.5, 1),
      borderRadius: theme2.shape.borderRadius,
      width: "100%",
      boxSizing: "border-box",
      // prevent width + padding to overflow
      position: "relative",
      display: "flex",
      alignItems: "center",
      gap: theme2.spacing(1),
      cursor: "pointer",
      WebkitTapHighlightColor: "transparent",
      "&:hover": {
        backgroundColor: (theme2.vars || theme2).palette.action.hover,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      },
      [`&.${_treeItemClasses.treeItemClasses.disabled}`]: {
        opacity: (theme2.vars || theme2).palette.action.disabledOpacity,
        backgroundColor: "transparent"
      },
      [`&.${_treeItemClasses.treeItemClasses.focused}`]: {
        backgroundColor: (theme2.vars || theme2).palette.action.focus
      },
      [`&.${_treeItemClasses.treeItemClasses.selected}`]: {
        backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / ${theme2.vars.palette.action.selectedOpacity})` : (0, _styles.alpha)(theme2.palette.primary.main, theme2.palette.action.selectedOpacity),
        "&:hover": {
          backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / calc(${theme2.vars.palette.action.selectedOpacity} + ${theme2.vars.palette.action.hoverOpacity}))` : (0, _styles.alpha)(theme2.palette.primary.main, theme2.palette.action.selectedOpacity + theme2.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / ${theme2.vars.palette.action.selectedOpacity})` : (0, _styles.alpha)(theme2.palette.primary.main, theme2.palette.action.selectedOpacity)
          }
        },
        [`&.${_treeItemClasses.treeItemClasses.focused}`]: {
          backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / calc(${theme2.vars.palette.action.selectedOpacity} + ${theme2.vars.palette.action.focusOpacity}))` : (0, _styles.alpha)(theme2.palette.primary.main, theme2.palette.action.selectedOpacity + theme2.palette.action.focusOpacity)
        }
      },
      [`& .${_treeItemClasses.treeItemClasses.iconContainer}`]: {
        width: 16,
        display: "flex",
        flexShrink: 0,
        justifyContent: "center",
        "& svg": {
          fontSize: 18
        }
      },
      [`& .${_treeItemClasses.treeItemClasses.label}`]: (0, _extends2.default)({
        width: "100%",
        boxSizing: "border-box",
        // prevent width + padding to overflow
        // fixes overflow - see https://github.com/mui/material-ui/issues/27372
        minWidth: 0,
        position: "relative"
      }, theme2.typography.body1),
      [`& .${_treeItemClasses.treeItemClasses.checkbox}`]: {
        padding: 0
      },
      variants: [{
        props: {
          indentationAtItemLevel: true
        },
        style: {
          paddingLeft: `calc(${theme2.spacing(1)} + var(--TreeView-itemChildrenIndentation) * var(--TreeView-itemDepth))`
        }
      }]
    }));
    var TreeItemGroup = (0, _zeroStyled.styled)(_Collapse.default, {
      name: "MuiTreeItem",
      slot: "GroupTransition",
      overridesResolver: (props, styles) => styles.groupTransition,
      shouldForwardProp: (prop) => (0, _createStyled.shouldForwardProp)(prop) && prop !== "indentationAtItemLevel"
    })({
      margin: 0,
      padding: 0,
      paddingLeft: "var(--TreeView-itemChildrenIndentation)",
      variants: [{
        props: {
          indentationAtItemLevel: true
        },
        style: {
          paddingLeft: 0
        }
      }]
    });
    var TreeItem = exports2.TreeItem = /* @__PURE__ */ React7.forwardRef(function TreeItem3(inProps, inRef) {
      const {
        icons: contextIcons,
        runItemPlugins,
        items: {
          disabledItemsFocusable,
          indentationAtItemLevel
        },
        selection: {
          disableSelection
        },
        expansion: {
          expansionTrigger
        },
        treeId,
        instance
      } = (0, _TreeViewProvider.useTreeViewContext)();
      const depthContext = React7.useContext(_TreeViewItemDepthContext.TreeViewItemDepthContext);
      const props = useThemeProps({
        props: inProps,
        name: "MuiTreeItem"
      });
      const {
        children,
        className,
        slots: inSlots,
        slotProps: inSlotProps,
        ContentComponent = _TreeItemContent.TreeItemContent,
        ContentProps,
        itemId,
        id,
        label,
        onClick,
        onMouseDown,
        onBlur,
        onKeyDown
      } = props, other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
      const {
        expanded,
        focused,
        selected,
        disabled,
        editing,
        handleExpansion,
        handleCancelItemLabelEditing,
        handleSaveItemLabel
      } = (0, _useTreeItemState.useTreeItemState)(itemId);
      if (define_process_env_default.NODE_ENV !== "production") {
        if (props.ContentComponent) {
          (0, _warning.warnOnce)(["MUI X: The ContentComponent prop of the TreeItem component is deprecated and will be removed in the next major release.", "You can use the new TreeItem2 component or the new useTreeItem2 hook to customize the rendering of the content.", "For more detail, see https://mui.com/x/react-tree-view/tree-item-customization/."]);
        }
        if (props.ContentProps) {
          (0, _warning.warnOnce)(["MUI X: The ContentProps prop of the TreeItem component is deprecated and will be removed in the next major release.", "You can use the new TreeItem2 component or the new useTreeItem2 hook to customize the rendering of the content.", "For more detail, see https://mui.com/x/react-tree-view/tree-item-customization/."]);
        }
      }
      const {
        contentRef,
        rootRef,
        propsEnhancers
      } = runItemPlugins(props);
      const rootRefObject = React7.useRef(null);
      const contentRefObject = React7.useRef(null);
      const handleRootRef = (0, _useForkRef.default)(inRef, rootRef, rootRefObject);
      const handleContentRef = (0, _useForkRef.default)(ContentProps?.ref, contentRef, contentRefObject);
      const slots = {
        expandIcon: inSlots?.expandIcon ?? contextIcons.slots.expandIcon ?? _icons.TreeViewExpandIcon,
        collapseIcon: inSlots?.collapseIcon ?? contextIcons.slots.collapseIcon ?? _icons.TreeViewCollapseIcon,
        endIcon: inSlots?.endIcon ?? contextIcons.slots.endIcon,
        icon: inSlots?.icon,
        groupTransition: inSlots?.groupTransition
      };
      const isExpandable = (reactChildren) => {
        if (Array.isArray(reactChildren)) {
          return reactChildren.length > 0 && reactChildren.some(isExpandable);
        }
        return Boolean(reactChildren);
      };
      const expandable = isExpandable(children);
      const ownerState = (0, _extends2.default)({}, props, {
        expanded,
        focused,
        selected,
        disabled,
        indentationAtItemLevel
      });
      const classes = useUtilityClasses(ownerState);
      const GroupTransition = slots.groupTransition ?? void 0;
      const groupTransitionProps = (0, _useSlotProps4.default)({
        elementType: GroupTransition,
        ownerState: {},
        externalSlotProps: inSlotProps?.groupTransition,
        additionalProps: (0, _extends2.default)({
          unmountOnExit: true,
          in: expanded,
          component: "ul",
          role: "group"
        }, indentationAtItemLevel ? {
          indentationAtItemLevel: true
        } : {}),
        className: classes.groupTransition
      });
      const handleIconContainerClick = (event) => {
        if (expansionTrigger === "iconContainer") {
          handleExpansion(event);
        }
      };
      const ExpansionIcon = expanded ? slots.collapseIcon : slots.expandIcon;
      const _useSlotProps = (0, _useSlotProps4.default)({
        elementType: ExpansionIcon,
        ownerState: {},
        externalSlotProps: (tempOwnerState) => {
          if (expanded) {
            return (0, _extends2.default)({}, (0, _resolveComponentProps.default)(contextIcons.slotProps.collapseIcon, tempOwnerState), (0, _resolveComponentProps.default)(inSlotProps?.collapseIcon, tempOwnerState));
          }
          return (0, _extends2.default)({}, (0, _resolveComponentProps.default)(contextIcons.slotProps.expandIcon, tempOwnerState), (0, _resolveComponentProps.default)(inSlotProps?.expandIcon, tempOwnerState));
        },
        additionalProps: {
          onClick: handleIconContainerClick
        }
      }), expansionIconProps = (0, _objectWithoutPropertiesLoose2.default)(_useSlotProps, _excluded2);
      const expansionIcon = expandable && !!ExpansionIcon ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(ExpansionIcon, (0, _extends2.default)({}, expansionIconProps)) : null;
      const DisplayIcon = expandable ? void 0 : slots.endIcon;
      const _useSlotProps2 = (0, _useSlotProps4.default)({
        elementType: DisplayIcon,
        ownerState: {},
        externalSlotProps: (tempOwnerState) => {
          if (expandable) {
            return {};
          }
          return (0, _extends2.default)({}, (0, _resolveComponentProps.default)(contextIcons.slotProps.endIcon, tempOwnerState), (0, _resolveComponentProps.default)(inSlotProps?.endIcon, tempOwnerState));
        }
      }), displayIconProps = (0, _objectWithoutPropertiesLoose2.default)(_useSlotProps2, _excluded3);
      const displayIcon = DisplayIcon ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(DisplayIcon, (0, _extends2.default)({}, displayIconProps)) : null;
      const Icon = slots.icon;
      const _useSlotProps3 = (0, _useSlotProps4.default)({
        elementType: Icon,
        ownerState: {},
        externalSlotProps: inSlotProps?.icon
      }), iconProps = (0, _objectWithoutPropertiesLoose2.default)(_useSlotProps3, _excluded4);
      const icon = Icon ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(Icon, (0, _extends2.default)({}, iconProps)) : null;
      let ariaSelected;
      if (selected) {
        ariaSelected = true;
      } else if (disableSelection || disabled) {
        ariaSelected = void 0;
      } else {
        ariaSelected = false;
      }
      function handleFocus(event) {
        const canBeFocused = !disabled || disabledItemsFocusable;
        if (!focused && canBeFocused && event.currentTarget === event.target) {
          instance.focusItem(event, itemId);
        }
      }
      function handleBlur(event) {
        onBlur?.(event);
        if (editing || // we can exit the editing state by clicking outside the input (within the Tree Item) or by pressing Enter or Escape -> we don't want to remove the focused item from the state in these cases
        // we can also exit the editing state by clicking on the root itself -> want to remove the focused item from the state in this case
        event.relatedTarget && (0, _tree.isTargetInDescendants)(event.relatedTarget, rootRefObject.current) && (event.target && event.target?.dataset?.element === "labelInput" && (0, _tree.isTargetInDescendants)(event.target, rootRefObject.current) || event.relatedTarget?.dataset?.element === "labelInput")) {
          return;
        }
        instance.removeFocusedItem();
      }
      const handleKeyDown = (event) => {
        onKeyDown?.(event);
        if (event.target?.dataset?.element === "labelInput") {
          return;
        }
        instance.handleItemKeyDown(event, itemId);
      };
      const idAttribute = (0, _useTreeViewId.generateTreeItemIdAttribute)({
        itemId,
        treeId,
        id
      });
      const tabIndex = instance.canItemBeTabbed(itemId) ? 0 : -1;
      const sharedPropsEnhancerParams = {
        rootRefObject,
        contentRefObject,
        interactions: {
          handleSaveItemLabel,
          handleCancelItemLabelEditing
        }
      };
      const enhancedRootProps = propsEnhancers.root?.((0, _extends2.default)({}, sharedPropsEnhancerParams, {
        externalEventHandlers: (0, _extractEventHandlers.default)(other)
      })) ?? {};
      const enhancedContentProps = propsEnhancers.content?.((0, _extends2.default)({}, sharedPropsEnhancerParams, {
        externalEventHandlers: (0, _extractEventHandlers.default)(ContentProps)
      })) ?? {};
      const enhancedDragAndDropOverlayProps = propsEnhancers.dragAndDropOverlay?.((0, _extends2.default)({}, sharedPropsEnhancerParams, {
        externalEventHandlers: {}
      })) ?? {};
      const enhancedLabelInputProps = propsEnhancers.labelInput?.((0, _extends2.default)({}, sharedPropsEnhancerParams, {
        externalEventHandlers: {}
      })) ?? {};
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_TreeItem2Provider.TreeItem2Provider, {
        itemId,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsxs)(TreeItemRoot, (0, _extends2.default)({
          className: (0, _clsx.default)(classes.root, className),
          role: "treeitem",
          "aria-expanded": expandable ? expanded : void 0,
          "aria-selected": ariaSelected,
          "aria-disabled": disabled || void 0,
          id: idAttribute,
          tabIndex
        }, other, {
          ownerState,
          onFocus: handleFocus,
          onBlur: handleBlur,
          onKeyDown: handleKeyDown,
          ref: handleRootRef,
          style: indentationAtItemLevel ? (0, _extends2.default)({}, other.style, {
            "--TreeView-itemDepth": typeof depthContext === "function" ? depthContext(itemId) : depthContext
          }) : other.style
        }, enhancedRootProps, {
          children: [/* @__PURE__ */ (0, _jsxRuntime.jsx)(StyledTreeItemContent, (0, _extends2.default)({
            as: ContentComponent,
            classes: {
              root: classes.content,
              expanded: classes.expanded,
              selected: classes.selected,
              focused: classes.focused,
              disabled: classes.disabled,
              editable: classes.editable,
              editing: classes.editing,
              iconContainer: classes.iconContainer,
              label: classes.label,
              labelInput: classes.labelInput,
              checkbox: classes.checkbox
            },
            label,
            itemId,
            onClick,
            onMouseDown,
            icon,
            expansionIcon,
            displayIcon,
            ownerState
          }, ContentProps, enhancedContentProps, enhancedDragAndDropOverlayProps.action == null ? {} : {
            dragAndDropOverlayProps: enhancedDragAndDropOverlayProps
          }, enhancedLabelInputProps.value == null ? {} : {
            labelInputProps: enhancedLabelInputProps
          }, {
            ref: handleContentRef
          })), children && /* @__PURE__ */ (0, _jsxRuntime.jsx)(TreeItemGroup, (0, _extends2.default)({
            as: GroupTransition
          }, groupTransitionProps, {
            children
          }))]
        }))
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? TreeItem.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "pnpm proptypes"  |
      // ----------------------------------------------------------------------
      /**
       * The content of the component.
       */
      children: _propTypes.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      className: _propTypes.default.string,
      /**
       * The component used to render the content of the item.
       * @deprecated Consider using the `<TreeItem2 />` component or the `useTreeItem2` hook instead. For more details, see https://mui.com/x/react-tree-view/tree-item-customization/.
       * @default TreeItemContent
       */
      ContentComponent: _elementTypeAcceptingRef.default,
      /**
       * Props applied to ContentComponent.
       * @deprecated Consider using the `<TreeItem2 />` component or the `useTreeItem2` hook instead. For more details, see https://mui.com/x/react-tree-view/tree-item-customization/.
       */
      ContentProps: _propTypes.default.object,
      /**
       * If `true`, the item is disabled.
       * @default false
       */
      disabled: _propTypes.default.bool,
      /**
       * The id of the item.
       */
      itemId: _propTypes.default.string.isRequired,
      /**
       * The Tree Item label.
       */
      label: _propTypes.default.node,
      /**
       * This prop isn't supported.
       * Use the `onItemFocus` callback on the tree if you need to monitor a item's focus.
       */
      onFocus: _unsupportedProp.default,
      /**
       * Callback fired when a key of the keyboard is pressed on the item.
       */
      onKeyDown: _propTypes.default.func,
      /**
       * The props used for each component slot.
       * @default {}
       */
      slotProps: _propTypes.default.object,
      /**
       * Overridable component slots.
       * @default {}
       */
      slots: _propTypes.default.object,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
    } : void 0;
  }
});

// node_modules/@mui/x-tree-view/node/TreeItem/index.js
var require_TreeItem2 = __commonJS({
  "node_modules/@mui/x-tree-view/node/TreeItem/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      TreeItem: true,
      TreeItemContent: true
    };
    Object.defineProperty(exports2, "TreeItem", {
      enumerable: true,
      get: function() {
        return _TreeItem.TreeItem;
      }
    });
    Object.defineProperty(exports2, "TreeItemContent", {
      enumerable: true,
      get: function() {
        return _TreeItemContent.TreeItemContent;
      }
    });
    var _TreeItem = require_TreeItem();
    var _treeItemClasses = require_treeItemClasses();
    Object.keys(_treeItemClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _treeItemClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _treeItemClasses[key];
        }
      });
    });
    var _useTreeItemState = require_useTreeItemState();
    Object.keys(_useTreeItemState).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _useTreeItemState[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _useTreeItemState[key];
        }
      });
    });
    var _TreeItemContent = require_TreeItemContent();
  }
});

// node_modules/@mui/x-tree-view/node/internals/components/RichTreeViewItems.js
var require_RichTreeViewItems = __commonJS({
  "node_modules/@mui/x-tree-view/node/internals/components/RichTreeViewItems.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.RichTreeViewItems = RichTreeViewItems;
    var _extends2 = _interopRequireDefault(require_extends());
    var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
    var React7 = _interopRequireWildcard(require_react());
    var _useSlotProps2 = _interopRequireDefault(require_useSlotProps2());
    var _TreeItem = require_TreeItem2();
    var _jsxRuntime = require_jsx_runtime();
    var _excluded = ["ownerState"];
    function WrappedTreeItem({
      slots,
      slotProps,
      label,
      id,
      itemId,
      itemsToRender
    }) {
      const Item = slots?.item ?? _TreeItem.TreeItem;
      const _useSlotProps = (0, _useSlotProps2.default)({
        elementType: Item,
        externalSlotProps: slotProps?.item,
        additionalProps: {
          itemId,
          id,
          label
        },
        ownerState: {
          itemId,
          label
        }
      }), itemProps = (0, _objectWithoutPropertiesLoose2.default)(_useSlotProps, _excluded);
      const children = React7.useMemo(() => itemsToRender ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(RichTreeViewItems, {
        itemsToRender,
        slots,
        slotProps
      }) : null, [itemsToRender, slots, slotProps]);
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(Item, (0, _extends2.default)({}, itemProps, {
        children
      }));
    }
    function RichTreeViewItems(props) {
      const {
        itemsToRender,
        slots,
        slotProps
      } = props;
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(React7.Fragment, {
        children: itemsToRender.map((item) => /* @__PURE__ */ (0, _jsxRuntime.jsx)(WrappedTreeItem, {
          slots,
          slotProps,
          label: item.label,
          id: item.id,
          itemId: item.itemId,
          itemsToRender: item.children
        }, item.itemId))
      });
    }
  }
});

// node_modules/@mui/x-tree-view/node/RichTreeView/RichTreeView.js
var require_RichTreeView = __commonJS({
  "node_modules/@mui/x-tree-view/node/RichTreeView/RichTreeView.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.RichTreeViewRoot = exports2.RichTreeView = void 0;
    var _extends2 = _interopRequireDefault(require_extends());
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _useSlotProps = _interopRequireDefault(require_useSlotProps2());
    var _warning = require_warning2();
    var _richTreeViewClasses = require_richTreeViewClasses();
    var _zeroStyled = require_zero_styled();
    var _useTreeView = require_useTreeView2();
    var _TreeViewProvider = require_TreeViewProvider2();
    var _RichTreeView = require_RichTreeView_plugins();
    var _RichTreeViewItems = require_RichTreeViewItems();
    var _jsxRuntime = require_jsx_runtime();
    var useThemeProps = (0, _zeroStyled.createUseThemeProps)("MuiRichTreeView");
    var useUtilityClasses = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"]
      };
      return (0, _composeClasses.default)(slots, _richTreeViewClasses.getRichTreeViewUtilityClass, classes);
    };
    var RichTreeViewRoot = exports2.RichTreeViewRoot = (0, _zeroStyled.styled)("ul", {
      name: "MuiRichTreeView",
      slot: "Root",
      overridesResolver: (props, styles) => styles.root
    })({
      padding: 0,
      margin: 0,
      listStyle: "none",
      outline: 0,
      position: "relative"
    });
    var RichTreeView2 = exports2.RichTreeView = /* @__PURE__ */ React7.forwardRef(function RichTreeView3(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiRichTreeView"
      });
      if (define_process_env_default.NODE_ENV !== "production") {
        if (props.children != null) {
          (0, _warning.warnOnce)(["MUI X: The Rich Tree View component does not support JSX children.", "If you want to add items, you need to use the `items` prop.", "Check the documentation for more details: https://mui.com/x/react-tree-view/rich-tree-view/items/."]);
        }
      }
      const {
        getRootProps,
        contextValue,
        instance
      } = (0, _useTreeView.useTreeView)({
        plugins: _RichTreeView.RICH_TREE_VIEW_PLUGINS,
        rootRef: ref,
        props
      });
      const {
        slots,
        slotProps
      } = props;
      const classes = useUtilityClasses(props);
      const Root = slots?.root ?? RichTreeViewRoot;
      const rootProps = (0, _useSlotProps.default)({
        elementType: Root,
        externalSlotProps: slotProps?.root,
        className: classes.root,
        getSlotProps: getRootProps,
        ownerState: props
      });
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_TreeViewProvider.TreeViewProvider, {
        value: contextValue,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(Root, (0, _extends2.default)({}, rootProps, {
          children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(_RichTreeViewItems.RichTreeViewItems, {
            slots,
            slotProps,
            itemsToRender: instance.getItemsToRender()
          })
        }))
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? RichTreeView2.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "pnpm proptypes"  |
      // ----------------------------------------------------------------------
      /**
       * The ref object that allows Tree View manipulation. Can be instantiated with `useTreeViewApiRef()`.
       */
      apiRef: _propTypes.default.shape({
        current: _propTypes.default.shape({
          focusItem: _propTypes.default.func.isRequired,
          getItem: _propTypes.default.func.isRequired,
          getItemDOMElement: _propTypes.default.func.isRequired,
          getItemOrderedChildrenIds: _propTypes.default.func.isRequired,
          getItemTree: _propTypes.default.func.isRequired,
          selectItem: _propTypes.default.func.isRequired,
          setItemExpansion: _propTypes.default.func.isRequired,
          updateItemLabel: _propTypes.default.func.isRequired
        })
      }),
      /**
       * If `true`, the Tree View renders a checkbox at the left of its label that allows selecting it.
       * @default false
       */
      checkboxSelection: _propTypes.default.bool,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      className: _propTypes.default.string,
      /**
       * Expanded item ids.
       * Used when the item's expansion is not controlled.
       * @default []
       */
      defaultExpandedItems: _propTypes.default.arrayOf(_propTypes.default.string),
      /**
       * Selected item ids. (Uncontrolled)
       * When `multiSelect` is true this takes an array of strings; when false (default) a string.
       * @default []
       */
      defaultSelectedItems: _propTypes.default.any,
      /**
       * If `true`, will allow focus on disabled items.
       * @default false
       */
      disabledItemsFocusable: _propTypes.default.bool,
      /**
       * If `true` selection is disabled.
       * @default false
       */
      disableSelection: _propTypes.default.bool,
      /**
       * Expanded item ids.
       * Used when the item's expansion is controlled.
       */
      expandedItems: _propTypes.default.arrayOf(_propTypes.default.string),
      /**
       * The slot that triggers the item's expansion when clicked.
       * @default 'content'
       */
      expansionTrigger: _propTypes.default.oneOf(["content", "iconContainer"]),
      /**
       * Unstable features, breaking changes might be introduced.
       * For each feature, if the flag is not explicitly set to `true`,
       * the feature will be fully disabled and any property / method call will not have any effect.
       */
      experimentalFeatures: _propTypes.default.shape({
        indentationAtItemLevel: _propTypes.default.bool,
        labelEditing: _propTypes.default.bool
      }),
      /**
       * Used to determine the id of a given item.
       *
       * @template R
       * @param {R} item The item to check.
       * @returns {string} The id of the item.
       * @default (item) => item.id
       */
      getItemId: _propTypes.default.func,
      /**
       * Used to determine the string label for a given item.
       *
       * @template R
       * @param {R} item The item to check.
       * @returns {string} The label of the item.
       * @default (item) => item.label
       */
      getItemLabel: _propTypes.default.func,
      /**
       * This prop is used to help implement the accessibility logic.
       * If you don't provide this prop. It falls back to a randomly generated id.
       */
      id: _propTypes.default.string,
      /**
       * Used to determine if a given item should be disabled.
       * @template R
       * @param {R} item The item to check.
       * @returns {boolean} `true` if the item should be disabled.
       */
      isItemDisabled: _propTypes.default.func,
      /**
       * Determines if a given item is editable or not.
       * Make sure to also enable the `labelEditing` experimental feature:
       * `<RichTreeViewPro experimentalFeatures={{ labelEditing: true }}  />`.
       * By default, the items are not editable.
       * @template R
       * @param {R} item The item to check.
       * @returns {boolean} `true` if the item is editable.
       */
      isItemEditable: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.bool]),
      /**
       * Horizontal indentation between an item and its children.
       * Examples: 24, "24px", "2rem", "2em".
       * @default 12px
       */
      itemChildrenIndentation: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      items: _propTypes.default.array.isRequired,
      /**
       * If `true`, `ctrl` and `shift` will trigger multiselect.
       * @default false
       */
      multiSelect: _propTypes.default.bool,
      /**
       * Callback fired when Tree Items are expanded/collapsed.
       * @param {React.SyntheticEvent} event The DOM event that triggered the change.
       * @param {array} itemIds The ids of the expanded items.
       */
      onExpandedItemsChange: _propTypes.default.func,
      /**
       * Callback fired when the `content` slot of a given Tree Item is clicked.
       * @param {React.MouseEvent} event The DOM event that triggered the change.
       * @param {string} itemId The id of the focused item.
       */
      onItemClick: _propTypes.default.func,
      /**
       * Callback fired when a Tree Item is expanded or collapsed.
       * @param {React.SyntheticEvent} event The DOM event that triggered the change.
       * @param {array} itemId The itemId of the modified item.
       * @param {array} isExpanded `true` if the item has just been expanded, `false` if it has just been collapsed.
       */
      onItemExpansionToggle: _propTypes.default.func,
      /**
       * Callback fired when a given Tree Item is focused.
       * @param {React.SyntheticEvent | null} event The DOM event that triggered the change. **Warning**: This is a generic event not a focus event.
       * @param {string} itemId The id of the focused item.
       */
      onItemFocus: _propTypes.default.func,
      /**
       * Callback fired when the label of an item changes.
       * @param {TreeViewItemId} itemId The id of the item that was edited.
       * @param {string} newLabel The new label of the items.
       */
      onItemLabelChange: _propTypes.default.func,
      /**
       * Callback fired when a Tree Item is selected or deselected.
       * @param {React.SyntheticEvent} event The DOM event that triggered the change.
       * @param {array} itemId The itemId of the modified item.
       * @param {array} isSelected `true` if the item has just been selected, `false` if it has just been deselected.
       */
      onItemSelectionToggle: _propTypes.default.func,
      /**
       * Callback fired when Tree Items are selected/deselected.
       * @param {React.SyntheticEvent} event The DOM event that triggered the change.
       * @param {string[] | string} itemIds The ids of the selected items.
       * When `multiSelect` is `true`, this is an array of strings; when false (default) a string.
       */
      onSelectedItemsChange: _propTypes.default.func,
      /**
       * Selected item ids. (Controlled)
       * When `multiSelect` is true this takes an array of strings; when false (default) a string.
       */
      selectedItems: _propTypes.default.any,
      /**
       * The props used for each component slot.
       * @default {}
       */
      slotProps: _propTypes.default.object,
      /**
       * Overridable component slots.
       * @default {}
       */
      slots: _propTypes.default.object,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
    } : void 0;
  }
});

// node_modules/@mui/x-tree-view/node/RichTreeView/index.js
var require_RichTreeView2 = __commonJS({
  "node_modules/@mui/x-tree-view/node/RichTreeView/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      RICH_TREE_VIEW_PLUGINS: true
    };
    Object.defineProperty(exports2, "RICH_TREE_VIEW_PLUGINS", {
      enumerable: true,
      get: function() {
        return _RichTreeView2.RICH_TREE_VIEW_PLUGINS;
      }
    });
    var _RichTreeView = require_RichTreeView();
    Object.keys(_RichTreeView).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _RichTreeView[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _RichTreeView[key];
        }
      });
    });
    var _richTreeViewClasses = require_richTreeViewClasses();
    Object.keys(_richTreeViewClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _richTreeViewClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _richTreeViewClasses[key];
        }
      });
    });
    var _RichTreeView2 = require_RichTreeView_plugins();
  }
});

// node_modules/@mui/x-tree-view/node/hooks/useTreeItem2Utils/useTreeItem2Utils.js
var require_useTreeItem2Utils = __commonJS({
  "node_modules/@mui/x-tree-view/node/hooks/useTreeItem2Utils/useTreeItem2Utils.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.useTreeItem2Utils = void 0;
    var _TreeViewProvider = require_TreeViewProvider2();
    var _useTreeViewLabel = require_useTreeViewLabel2();
    var _plugins = require_plugins();
    var isItemExpandable = (reactChildren) => {
      if (Array.isArray(reactChildren)) {
        return reactChildren.length > 0 && reactChildren.some(isItemExpandable);
      }
      return Boolean(reactChildren);
    };
    var useTreeItem2Utils2 = ({
      itemId,
      children
    }) => {
      const {
        instance,
        selection: {
          multiSelect
        },
        publicAPI
      } = (0, _TreeViewProvider.useTreeViewContext)();
      const status = {
        expandable: isItemExpandable(children),
        expanded: instance.isItemExpanded(itemId),
        focused: instance.isItemFocused(itemId),
        selected: instance.isItemSelected(itemId),
        disabled: instance.isItemDisabled(itemId),
        editing: instance?.isItemBeingEdited ? instance?.isItemBeingEdited(itemId) : false,
        editable: instance.isItemEditable ? instance.isItemEditable(itemId) : false
      };
      const handleExpansion = (event) => {
        if (status.disabled) {
          return;
        }
        if (!status.focused) {
          instance.focusItem(event, itemId);
        }
        const multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey);
        if (status.expandable && !(multiple && instance.isItemExpanded(itemId))) {
          instance.toggleItemExpansion(event, itemId);
        }
      };
      const handleSelection = (event) => {
        if (status.disabled) {
          return;
        }
        if (!status.focused) {
          instance.focusItem(event, itemId);
        }
        const multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey);
        if (multiple) {
          if (event.shiftKey) {
            instance.expandSelectionRange(event, itemId);
          } else {
            instance.selectItem({
              event,
              itemId,
              keepExistingSelection: true
            });
          }
        } else {
          instance.selectItem({
            event,
            itemId,
            shouldBeSelected: true
          });
        }
      };
      const handleCheckboxSelection = (event) => {
        const hasShift = event.nativeEvent.shiftKey;
        if (multiSelect && hasShift) {
          instance.expandSelectionRange(event, itemId);
        } else {
          instance.selectItem({
            event,
            itemId,
            keepExistingSelection: multiSelect,
            shouldBeSelected: event.target.checked
          });
        }
      };
      const toggleItemEditing = () => {
        if (!(0, _plugins.hasPlugin)(instance, _useTreeViewLabel.useTreeViewLabel)) {
          return;
        }
        if (instance.isItemEditable(itemId)) {
          if (instance.isItemBeingEdited(itemId)) {
            instance.setEditedItemId(null);
          } else {
            instance.setEditedItemId(itemId);
          }
        }
      };
      const handleSaveItemLabel = (event, label) => {
        if (!(0, _plugins.hasPlugin)(instance, _useTreeViewLabel.useTreeViewLabel)) {
          return;
        }
        if (instance.isItemBeingEditedRef(itemId)) {
          instance.updateItemLabel(itemId, label);
          toggleItemEditing();
          instance.focusItem(event, itemId);
        }
      };
      const handleCancelItemLabelEditing = (event) => {
        if (!(0, _plugins.hasPlugin)(instance, _useTreeViewLabel.useTreeViewLabel)) {
          return;
        }
        if (instance.isItemBeingEditedRef(itemId)) {
          toggleItemEditing();
          instance.focusItem(event, itemId);
        }
      };
      const interactions = {
        handleExpansion,
        handleSelection,
        handleCheckboxSelection,
        toggleItemEditing,
        handleSaveItemLabel,
        handleCancelItemLabelEditing
      };
      return {
        interactions,
        status,
        publicAPI
      };
    };
    exports2.useTreeItem2Utils = useTreeItem2Utils2;
  }
});

// node_modules/@mui/x-tree-view/node/hooks/useTreeItem2Utils/index.js
var require_useTreeItem2Utils2 = __commonJS({
  "node_modules/@mui/x-tree-view/node/hooks/useTreeItem2Utils/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "useTreeItem2Utils", {
      enumerable: true,
      get: function() {
        return _useTreeItem2Utils.useTreeItem2Utils;
      }
    });
    var _useTreeItem2Utils = require_useTreeItem2Utils();
  }
});

// node_modules/@mui/x-tree-view/node/useTreeItem2/useTreeItem2.js
var require_useTreeItem2 = __commonJS({
  "node_modules/@mui/x-tree-view/node/useTreeItem2/useTreeItem2.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.useTreeItem2 = void 0;
    var _extends2 = _interopRequireDefault(require_extends());
    var React7 = _interopRequireWildcard(require_react());
    var _extractEventHandlers = _interopRequireDefault(require_extractEventHandlers2());
    var _useForkRef = _interopRequireDefault(require_useForkRef2());
    var _TreeViewProvider = require_TreeViewProvider2();
    var _useTreeItem2Utils = require_useTreeItem2Utils2();
    var _TreeViewItemDepthContext = require_TreeViewItemDepthContext2();
    var _tree = require_tree();
    var _useTreeViewId = require_useTreeViewId_utils();
    var useTreeItem2 = (parameters) => {
      const {
        runItemPlugins,
        items: {
          onItemClick,
          disabledItemsFocusable,
          indentationAtItemLevel
        },
        selection: {
          disableSelection,
          checkboxSelection
        },
        expansion: {
          expansionTrigger
        },
        treeId,
        instance,
        publicAPI
      } = (0, _TreeViewProvider.useTreeViewContext)();
      const depthContext = React7.useContext(_TreeViewItemDepthContext.TreeViewItemDepthContext);
      const {
        id,
        itemId,
        label,
        children,
        rootRef
      } = parameters;
      const {
        rootRef: pluginRootRef,
        contentRef,
        propsEnhancers
      } = runItemPlugins(parameters);
      const {
        interactions,
        status
      } = (0, _useTreeItem2Utils.useTreeItem2Utils)({
        itemId,
        children
      });
      const rootRefObject = React7.useRef(null);
      const contentRefObject = React7.useRef(null);
      const handleRootRef = (0, _useForkRef.default)(rootRef, pluginRootRef, rootRefObject);
      const handleContentRef = (0, _useForkRef.default)(contentRef, contentRefObject);
      const checkboxRef = React7.useRef(null);
      const idAttribute = (0, _useTreeViewId.generateTreeItemIdAttribute)({
        itemId,
        treeId,
        id
      });
      const rootTabIndex = instance.canItemBeTabbed(itemId) ? 0 : -1;
      const sharedPropsEnhancerParams = {
        rootRefObject,
        contentRefObject,
        interactions
      };
      const createRootHandleFocus = (otherHandlers) => (event) => {
        otherHandlers.onFocus?.(event);
        if (event.defaultMuiPrevented) {
          return;
        }
        const canBeFocused = !status.disabled || disabledItemsFocusable;
        if (!status.focused && canBeFocused && event.currentTarget === event.target) {
          instance.focusItem(event, itemId);
        }
      };
      const createRootHandleBlur = (otherHandlers) => (event) => {
        otherHandlers.onBlur?.(event);
        if (event.defaultMuiPrevented) {
          return;
        }
        const rootElement = instance.getItemDOMElement(itemId);
        if (status.editing || // we can exit the editing state by clicking outside the input (within the Tree Item) or by pressing Enter or Escape -> we don't want to remove the focused item from the state in these cases
        // we can also exit the editing state by clicking on the root itself -> want to remove the focused item from the state in this case
        event.relatedTarget && (0, _tree.isTargetInDescendants)(event.relatedTarget, rootElement) && (event.target && event.target?.dataset?.element === "labelInput" && (0, _tree.isTargetInDescendants)(event.target, rootElement) || event.relatedTarget?.dataset?.element === "labelInput")) {
          return;
        }
        instance.removeFocusedItem();
      };
      const createRootHandleKeyDown = (otherHandlers) => (event) => {
        otherHandlers.onKeyDown?.(event);
        if (event.defaultMuiPrevented || event.target?.dataset?.element === "labelInput") {
          return;
        }
        instance.handleItemKeyDown(event, itemId);
      };
      const createLabelHandleDoubleClick = (otherHandlers) => (event) => {
        otherHandlers.onDoubleClick?.(event);
        if (event.defaultMuiPrevented) {
          return;
        }
        interactions.toggleItemEditing();
      };
      const createContentHandleClick = (otherHandlers) => (event) => {
        otherHandlers.onClick?.(event);
        onItemClick?.(event, itemId);
        if (event.defaultMuiPrevented || checkboxRef.current?.contains(event.target)) {
          return;
        }
        if (expansionTrigger === "content") {
          interactions.handleExpansion(event);
        }
        if (!checkboxSelection) {
          interactions.handleSelection(event);
        }
      };
      const createContentHandleMouseDown = (otherHandlers) => (event) => {
        otherHandlers.onMouseDown?.(event);
        if (event.defaultMuiPrevented) {
          return;
        }
        if (event.shiftKey || event.ctrlKey || event.metaKey || status.disabled) {
          event.preventDefault();
        }
      };
      const createCheckboxHandleChange = (otherHandlers) => (event) => {
        otherHandlers.onChange?.(event);
        if (event.defaultMuiPrevented) {
          return;
        }
        if (disableSelection || status.disabled) {
          return;
        }
        interactions.handleCheckboxSelection(event);
      };
      const createIconContainerHandleClick = (otherHandlers) => (event) => {
        otherHandlers.onClick?.(event);
        if (event.defaultMuiPrevented) {
          return;
        }
        if (expansionTrigger === "iconContainer") {
          interactions.handleExpansion(event);
        }
      };
      const getRootProps = (externalProps = {}) => {
        const externalEventHandlers = (0, _extends2.default)({}, (0, _extractEventHandlers.default)(parameters), (0, _extractEventHandlers.default)(externalProps));
        let ariaSelected;
        if (status.selected) {
          ariaSelected = true;
        } else if (disableSelection || status.disabled) {
          ariaSelected = void 0;
        } else {
          ariaSelected = false;
        }
        const props = (0, _extends2.default)({}, externalEventHandlers, {
          ref: handleRootRef,
          role: "treeitem",
          tabIndex: rootTabIndex,
          id: idAttribute,
          "aria-expanded": status.expandable ? status.expanded : void 0,
          "aria-selected": ariaSelected,
          "aria-disabled": status.disabled || void 0
        }, externalProps, {
          onFocus: createRootHandleFocus(externalEventHandlers),
          onBlur: createRootHandleBlur(externalEventHandlers),
          onKeyDown: createRootHandleKeyDown(externalEventHandlers)
        });
        if (indentationAtItemLevel) {
          props.style = {
            "--TreeView-itemDepth": typeof depthContext === "function" ? depthContext(itemId) : depthContext
          };
        }
        const enhancedRootProps = propsEnhancers.root?.((0, _extends2.default)({}, sharedPropsEnhancerParams, {
          externalEventHandlers
        })) ?? {};
        return (0, _extends2.default)({}, props, enhancedRootProps);
      };
      const getContentProps = (externalProps = {}) => {
        const externalEventHandlers = (0, _extractEventHandlers.default)(externalProps);
        const props = (0, _extends2.default)({}, externalEventHandlers, externalProps, {
          ref: handleContentRef,
          onClick: createContentHandleClick(externalEventHandlers),
          onMouseDown: createContentHandleMouseDown(externalEventHandlers),
          status
        });
        if (indentationAtItemLevel) {
          props.indentationAtItemLevel = true;
        }
        const enhancedContentProps = propsEnhancers.content?.((0, _extends2.default)({}, sharedPropsEnhancerParams, {
          externalEventHandlers
        })) ?? {};
        return (0, _extends2.default)({}, props, enhancedContentProps);
      };
      const getCheckboxProps = (externalProps = {}) => {
        const externalEventHandlers = (0, _extractEventHandlers.default)(externalProps);
        return (0, _extends2.default)({}, externalEventHandlers, {
          visible: checkboxSelection,
          ref: checkboxRef,
          checked: status.selected,
          disabled: disableSelection || status.disabled,
          tabIndex: -1
        }, externalProps, {
          onChange: createCheckboxHandleChange(externalEventHandlers)
        });
      };
      const getLabelProps = (externalProps = {}) => {
        const externalEventHandlers = (0, _extends2.default)({}, (0, _extractEventHandlers.default)(externalProps));
        const props = (0, _extends2.default)({}, externalEventHandlers, {
          children: label
        }, externalProps, {
          onDoubleClick: createLabelHandleDoubleClick(externalEventHandlers)
        });
        if (instance.isTreeViewEditable) {
          props.editable = status.editable;
        }
        return props;
      };
      const getLabelInputProps = (externalProps = {}) => {
        const externalEventHandlers = (0, _extractEventHandlers.default)(externalProps);
        const enhancedLabelInputProps = propsEnhancers.labelInput?.({
          rootRefObject,
          contentRefObject,
          externalEventHandlers,
          interactions
        }) ?? {};
        return (0, _extends2.default)({}, externalProps, enhancedLabelInputProps);
      };
      const getIconContainerProps = (externalProps = {}) => {
        const externalEventHandlers = (0, _extractEventHandlers.default)(externalProps);
        return (0, _extends2.default)({}, externalEventHandlers, externalProps, {
          onClick: createIconContainerHandleClick(externalEventHandlers)
        });
      };
      const getGroupTransitionProps = (externalProps = {}) => {
        const externalEventHandlers = (0, _extractEventHandlers.default)(externalProps);
        const response = (0, _extends2.default)({}, externalEventHandlers, {
          unmountOnExit: true,
          component: "ul",
          role: "group",
          in: status.expanded,
          children
        }, externalProps);
        if (indentationAtItemLevel) {
          response.indentationAtItemLevel = true;
        }
        return response;
      };
      const getDragAndDropOverlayProps = (externalProps = {}) => {
        const externalEventHandlers = (0, _extractEventHandlers.default)(externalProps);
        const enhancedDragAndDropOverlayProps = propsEnhancers.dragAndDropOverlay?.((0, _extends2.default)({}, sharedPropsEnhancerParams, {
          externalEventHandlers
        })) ?? {};
        return (0, _extends2.default)({}, externalProps, enhancedDragAndDropOverlayProps);
      };
      return {
        getRootProps,
        getContentProps,
        getGroupTransitionProps,
        getIconContainerProps,
        getCheckboxProps,
        getLabelProps,
        getLabelInputProps,
        getDragAndDropOverlayProps,
        rootRef: handleRootRef,
        status,
        publicAPI
      };
    };
    exports2.useTreeItem2 = useTreeItem2;
  }
});

// node_modules/@mui/x-tree-view/node/useTreeItem2/index.js
var require_useTreeItem22 = __commonJS({
  "node_modules/@mui/x-tree-view/node/useTreeItem2/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.useTreeItem2 = exports2.unstable_useTreeItem2 = void 0;
    var _useTreeItem = require_useTreeItem2();
    var useTreeItem2 = exports2.useTreeItem2 = _useTreeItem.useTreeItem2;
    var unstable_useTreeItem2 = exports2.unstable_useTreeItem2 = _useTreeItem.useTreeItem2;
  }
});

// node_modules/@mui/x-tree-view/node/TreeItem2Icon/TreeItem2Icon.js
var require_TreeItem2Icon = __commonJS({
  "node_modules/@mui/x-tree-view/node/TreeItem2Icon/TreeItem2Icon.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.TreeItem2Icon = TreeItem2Icon;
    var _extends2 = _interopRequireDefault(require_extends());
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _resolveComponentProps = _interopRequireDefault(require_resolveComponentProps2());
    var _useSlotProps = _interopRequireDefault(require_useSlotProps2());
    var _TreeViewProvider = require_TreeViewProvider2();
    var _icons = require_icons2();
    var _jsxRuntime = require_jsx_runtime();
    function TreeItem2Icon(props) {
      const {
        slots,
        slotProps,
        status
      } = props;
      const context = (0, _TreeViewProvider.useTreeViewContext)();
      const contextIcons = (0, _extends2.default)({}, context.icons.slots, {
        expandIcon: context.icons.slots.expandIcon ?? _icons.TreeViewExpandIcon,
        collapseIcon: context.icons.slots.collapseIcon ?? _icons.TreeViewCollapseIcon
      });
      const contextIconProps = context.icons.slotProps;
      let iconName;
      if (slots?.icon) {
        iconName = "icon";
      } else if (status.expandable) {
        if (status.expanded) {
          iconName = "collapseIcon";
        } else {
          iconName = "expandIcon";
        }
      } else {
        iconName = "endIcon";
      }
      const Icon = slots?.[iconName] ?? contextIcons[iconName];
      const iconProps = (0, _useSlotProps.default)({
        elementType: Icon,
        externalSlotProps: (tempOwnerState) => (0, _extends2.default)({}, (0, _resolveComponentProps.default)(contextIconProps[iconName], tempOwnerState), (0, _resolveComponentProps.default)(slotProps?.[iconName], tempOwnerState)),
        // TODO: Add proper ownerState
        ownerState: {}
      });
      if (!Icon) {
        return null;
      }
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(Icon, (0, _extends2.default)({}, iconProps));
    }
    define_process_env_default.NODE_ENV !== "production" ? TreeItem2Icon.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "pnpm proptypes"  |
      // ----------------------------------------------------------------------
      /**
       * The props used for each component slot.
       * @default {}
       */
      slotProps: _propTypes.default.object,
      /**
       * Overridable component slots.
       * @default {}
       */
      slots: _propTypes.default.object,
      status: _propTypes.default.shape({
        disabled: _propTypes.default.bool.isRequired,
        editable: _propTypes.default.bool.isRequired,
        editing: _propTypes.default.bool.isRequired,
        expandable: _propTypes.default.bool.isRequired,
        expanded: _propTypes.default.bool.isRequired,
        focused: _propTypes.default.bool.isRequired,
        selected: _propTypes.default.bool.isRequired
      }).isRequired
    } : void 0;
  }
});

// node_modules/@mui/x-tree-view/node/TreeItem2Icon/index.js
var require_TreeItem2Icon2 = __commonJS({
  "node_modules/@mui/x-tree-view/node/TreeItem2Icon/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "TreeItem2Icon", {
      enumerable: true,
      get: function() {
        return _TreeItem2Icon.TreeItem2Icon;
      }
    });
    var _TreeItem2Icon = require_TreeItem2Icon();
  }
});

// node_modules/@mui/x-tree-view/node/TreeItem2/TreeItem2.js
var require_TreeItem22 = __commonJS({
  "node_modules/@mui/x-tree-view/node/TreeItem2/TreeItem2.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.TreeItem2Root = exports2.TreeItem2Label = exports2.TreeItem2IconContainer = exports2.TreeItem2GroupTransition = exports2.TreeItem2Content = exports2.TreeItem2Checkbox = exports2.TreeItem2 = void 0;
    var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
    var _extends2 = _interopRequireDefault(require_extends());
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _clsx = _interopRequireDefault(require_clsx());
    var _unsupportedProp = _interopRequireDefault(require_unsupportedProp2());
    var _styles = require_styles();
    var _Collapse = _interopRequireDefault(require_Collapse2());
    var _Checkbox = _interopRequireDefault(require_Checkbox2());
    var _useSlotProps = _interopRequireDefault(require_useSlotProps2());
    var _createStyled = require_createStyled4();
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _zeroStyled = require_zero_styled();
    var _useTreeItem = require_useTreeItem22();
    var _TreeItem = require_TreeItem2();
    var _TreeItem2Icon = require_TreeItem2Icon2();
    var _TreeItem2DragAndDropOverlay = require_TreeItem2DragAndDropOverlay2();
    var _TreeItem2Provider = require_TreeItem2Provider2();
    var _TreeItem2LabelInput = require_TreeItem2LabelInput2();
    var _jsxRuntime = require_jsx_runtime();
    var _excluded = ["visible"];
    var _excluded2 = ["id", "itemId", "label", "disabled", "children", "slots", "slotProps"];
    var useThemeProps = (0, _zeroStyled.createUseThemeProps)("MuiTreeItem2");
    var TreeItem2Root = exports2.TreeItem2Root = (0, _zeroStyled.styled)("li", {
      name: "MuiTreeItem2",
      slot: "Root",
      overridesResolver: (props, styles) => styles.root
    })({
      listStyle: "none",
      margin: 0,
      padding: 0,
      outline: 0
    });
    var TreeItem2Content = exports2.TreeItem2Content = (0, _zeroStyled.styled)("div", {
      name: "MuiTreeItem2",
      slot: "Content",
      overridesResolver: (props, styles) => styles.content,
      shouldForwardProp: (prop) => (0, _createStyled.shouldForwardProp)(prop) && prop !== "status" && prop !== "indentationAtItemLevel"
    })(({
      theme: theme2
    }) => ({
      padding: theme2.spacing(0.5, 1),
      borderRadius: theme2.shape.borderRadius,
      width: "100%",
      boxSizing: "border-box",
      // prevent width + padding to overflow
      position: "relative",
      display: "flex",
      alignItems: "center",
      gap: theme2.spacing(1),
      cursor: "pointer",
      WebkitTapHighlightColor: "transparent",
      "&:hover": {
        backgroundColor: (theme2.vars || theme2).palette.action.hover,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      },
      variants: [{
        props: {
          indentationAtItemLevel: true
        },
        style: {
          paddingLeft: `calc(${theme2.spacing(1)} + var(--TreeView-itemChildrenIndentation) * var(--TreeView-itemDepth))`
        }
      }, {
        props: ({
          status
        }) => status.disabled,
        style: {
          opacity: (theme2.vars || theme2).palette.action.disabledOpacity,
          backgroundColor: "transparent"
        }
      }, {
        props: ({
          status
        }) => status.focused,
        style: {
          backgroundColor: (theme2.vars || theme2).palette.action.focus
        }
      }, {
        props: ({
          status
        }) => status.selected,
        style: {
          backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / ${theme2.vars.palette.action.selectedOpacity})` : (0, _styles.alpha)(theme2.palette.primary.main, theme2.palette.action.selectedOpacity),
          "&:hover": {
            backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / calc(${theme2.vars.palette.action.selectedOpacity} + ${theme2.vars.palette.action.hoverOpacity}))` : (0, _styles.alpha)(theme2.palette.primary.main, theme2.palette.action.selectedOpacity + theme2.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            "@media (hover: none)": {
              backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / ${theme2.vars.palette.action.selectedOpacity})` : (0, _styles.alpha)(theme2.palette.primary.main, theme2.palette.action.selectedOpacity)
            }
          }
        }
      }, {
        props: ({
          status
        }) => status.selected && status.focused,
        style: {
          backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / calc(${theme2.vars.palette.action.selectedOpacity} + ${theme2.vars.palette.action.focusOpacity}))` : (0, _styles.alpha)(theme2.palette.primary.main, theme2.palette.action.selectedOpacity + theme2.palette.action.focusOpacity)
        }
      }]
    }));
    var TreeItem2Label = exports2.TreeItem2Label = (0, _zeroStyled.styled)("div", {
      name: "MuiTreeItem2",
      slot: "Label",
      overridesResolver: (props, styles) => styles.label,
      shouldForwardProp: (prop) => (0, _createStyled.shouldForwardProp)(prop) && prop !== "editable"
    })(({
      theme: theme2
    }) => (0, _extends2.default)({
      width: "100%",
      boxSizing: "border-box",
      // prevent width + padding to overflow
      // fixes overflow - see https://github.com/mui/material-ui/issues/27372
      minWidth: 0,
      position: "relative",
      overflow: "hidden"
    }, theme2.typography.body1, {
      variants: [{
        props: ({
          editable
        }) => editable,
        style: {
          paddingLeft: "2px"
        }
      }]
    }));
    var TreeItem2IconContainer = exports2.TreeItem2IconContainer = (0, _zeroStyled.styled)("div", {
      name: "MuiTreeItem2",
      slot: "IconContainer",
      overridesResolver: (props, styles) => styles.iconContainer
    })({
      width: 16,
      display: "flex",
      flexShrink: 0,
      justifyContent: "center",
      "& svg": {
        fontSize: 18
      }
    });
    var TreeItem2GroupTransition = exports2.TreeItem2GroupTransition = (0, _zeroStyled.styled)(_Collapse.default, {
      name: "MuiTreeItem2",
      slot: "GroupTransition",
      overridesResolver: (props, styles) => styles.groupTransition,
      shouldForwardProp: (prop) => (0, _createStyled.shouldForwardProp)(prop) && prop !== "indentationAtItemLevel"
    })({
      margin: 0,
      padding: 0,
      paddingLeft: "var(--TreeView-itemChildrenIndentation)",
      variants: [{
        props: {
          indentationAtItemLevel: true
        },
        style: {
          paddingLeft: 0
        }
      }]
    });
    var TreeItem2Checkbox = exports2.TreeItem2Checkbox = (0, _zeroStyled.styled)(/* @__PURE__ */ React7.forwardRef((props, ref) => {
      const {
        visible
      } = props, other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
      if (!visible) {
        return null;
      }
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_Checkbox.default, (0, _extends2.default)({}, other, {
        ref
      }));
    }), {
      name: "MuiTreeItem2",
      slot: "Checkbox",
      overridesResolver: (props, styles) => styles.checkbox
    })({
      padding: 0
    });
    var useUtilityClasses = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        content: ["content"],
        expanded: ["expanded"],
        editing: ["editing"],
        editable: ["editable"],
        selected: ["selected"],
        focused: ["focused"],
        disabled: ["disabled"],
        iconContainer: ["iconContainer"],
        checkbox: ["checkbox"],
        label: ["label"],
        groupTransition: ["groupTransition"],
        labelInput: ["labelInput"],
        dragAndDropOverlay: ["dragAndDropOverlay"]
      };
      return (0, _composeClasses.default)(slots, _TreeItem.getTreeItemUtilityClass, classes);
    };
    var TreeItem22 = exports2.TreeItem2 = /* @__PURE__ */ React7.forwardRef(function TreeItem23(inProps, forwardedRef) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiTreeItem2"
      });
      const {
        id,
        itemId,
        label,
        disabled,
        children,
        slots = {},
        slotProps = {}
      } = props, other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded2);
      const {
        getRootProps,
        getContentProps,
        getIconContainerProps,
        getCheckboxProps,
        getLabelProps,
        getGroupTransitionProps,
        getLabelInputProps,
        getDragAndDropOverlayProps,
        status
      } = (0, _useTreeItem.useTreeItem2)({
        id,
        itemId,
        children,
        label,
        disabled
      });
      const ownerState = (0, _extends2.default)({}, props, status);
      const classes = useUtilityClasses(ownerState);
      const Root = slots.root ?? TreeItem2Root;
      const rootProps = (0, _useSlotProps.default)({
        elementType: Root,
        getSlotProps: getRootProps,
        externalForwardedProps: other,
        externalSlotProps: slotProps.root,
        additionalProps: {
          ref: forwardedRef
        },
        ownerState: {},
        className: classes.root
      });
      const Content = slots.content ?? TreeItem2Content;
      const contentProps = (0, _useSlotProps.default)({
        elementType: Content,
        getSlotProps: getContentProps,
        externalSlotProps: slotProps.content,
        ownerState: {},
        className: (0, _clsx.default)(classes.content, status.expanded && classes.expanded, status.selected && classes.selected, status.focused && classes.focused, status.disabled && classes.disabled, status.editing && classes.editing, status.editable && classes.editable)
      });
      const IconContainer = slots.iconContainer ?? TreeItem2IconContainer;
      const iconContainerProps = (0, _useSlotProps.default)({
        elementType: IconContainer,
        getSlotProps: getIconContainerProps,
        externalSlotProps: slotProps.iconContainer,
        ownerState: {},
        className: classes.iconContainer
      });
      const Label = slots.label ?? TreeItem2Label;
      const labelProps = (0, _useSlotProps.default)({
        elementType: Label,
        getSlotProps: getLabelProps,
        externalSlotProps: slotProps.label,
        ownerState: {},
        className: classes.label
      });
      const Checkbox = slots.checkbox ?? TreeItem2Checkbox;
      const checkboxProps = (0, _useSlotProps.default)({
        elementType: Checkbox,
        getSlotProps: getCheckboxProps,
        externalSlotProps: slotProps.checkbox,
        ownerState: {},
        className: classes.checkbox
      });
      const GroupTransition = slots.groupTransition ?? void 0;
      const groupTransitionProps = (0, _useSlotProps.default)({
        elementType: GroupTransition,
        getSlotProps: getGroupTransitionProps,
        externalSlotProps: slotProps.groupTransition,
        ownerState: {},
        className: classes.groupTransition
      });
      const LabelInput = slots.labelInput ?? _TreeItem2LabelInput.TreeItem2LabelInput;
      const labelInputProps = (0, _useSlotProps.default)({
        elementType: LabelInput,
        getSlotProps: getLabelInputProps,
        externalSlotProps: slotProps.labelInput,
        ownerState: {},
        className: classes.labelInput
      });
      const DragAndDropOverlay = slots.dragAndDropOverlay ?? _TreeItem2DragAndDropOverlay.TreeItem2DragAndDropOverlay;
      const dragAndDropOverlayProps = (0, _useSlotProps.default)({
        elementType: DragAndDropOverlay,
        getSlotProps: getDragAndDropOverlayProps,
        externalSlotProps: slotProps.dragAndDropOverlay,
        ownerState: {},
        className: classes.dragAndDropOverlay
      });
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_TreeItem2Provider.TreeItem2Provider, {
        itemId,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsxs)(Root, (0, _extends2.default)({}, rootProps, {
          children: [/* @__PURE__ */ (0, _jsxRuntime.jsxs)(Content, (0, _extends2.default)({}, contentProps, {
            children: [/* @__PURE__ */ (0, _jsxRuntime.jsx)(IconContainer, (0, _extends2.default)({}, iconContainerProps, {
              children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(_TreeItem2Icon.TreeItem2Icon, {
                status,
                slots,
                slotProps
              })
            })), /* @__PURE__ */ (0, _jsxRuntime.jsx)(Checkbox, (0, _extends2.default)({}, checkboxProps)), status.editing ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(LabelInput, (0, _extends2.default)({}, labelInputProps)) : /* @__PURE__ */ (0, _jsxRuntime.jsx)(Label, (0, _extends2.default)({}, labelProps)), /* @__PURE__ */ (0, _jsxRuntime.jsx)(DragAndDropOverlay, (0, _extends2.default)({}, dragAndDropOverlayProps))]
          })), children && /* @__PURE__ */ (0, _jsxRuntime.jsx)(TreeItem2GroupTransition, (0, _extends2.default)({
            as: GroupTransition
          }, groupTransitionProps))]
        }))
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? TreeItem22.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "pnpm proptypes"  |
      // ----------------------------------------------------------------------
      /**
       * The content of the component.
       */
      children: _propTypes.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      className: _propTypes.default.string,
      /**
       * If `true`, the item is disabled.
       * @default false
       */
      disabled: _propTypes.default.bool,
      /**
       * The id attribute of the item. If not provided, it will be generated.
       */
      id: _propTypes.default.string,
      /**
       * The id of the item.
       * Must be unique.
       */
      itemId: _propTypes.default.string.isRequired,
      /**
       * The label of the item.
       */
      label: _propTypes.default.node,
      /**
       * Callback fired when the item root is blurred.
       */
      onBlur: _propTypes.default.func,
      /**
       * This prop isn't supported.
       * Use the `onItemFocus` callback on the tree if you need to monitor an item's focus.
       */
      onFocus: _unsupportedProp.default,
      /**
       * Callback fired when a key is pressed on the keyboard and the tree is in focus.
       */
      onKeyDown: _propTypes.default.func,
      /**
       * The props used for each component slot.
       * @default {}
       */
      slotProps: _propTypes.default.object,
      /**
       * Overridable component slots.
       * @default {}
       */
      slots: _propTypes.default.object
    } : void 0;
  }
});

// node_modules/@mui/x-tree-view/node/TreeItem2/index.js
var require_TreeItem23 = __commonJS({
  "node_modules/@mui/x-tree-view/node/TreeItem2/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "TreeItem2", {
      enumerable: true,
      get: function() {
        return _TreeItem.TreeItem2;
      }
    });
    Object.defineProperty(exports2, "TreeItem2Checkbox", {
      enumerable: true,
      get: function() {
        return _TreeItem.TreeItem2Checkbox;
      }
    });
    Object.defineProperty(exports2, "TreeItem2Content", {
      enumerable: true,
      get: function() {
        return _TreeItem.TreeItem2Content;
      }
    });
    Object.defineProperty(exports2, "TreeItem2GroupTransition", {
      enumerable: true,
      get: function() {
        return _TreeItem.TreeItem2GroupTransition;
      }
    });
    Object.defineProperty(exports2, "TreeItem2IconContainer", {
      enumerable: true,
      get: function() {
        return _TreeItem.TreeItem2IconContainer;
      }
    });
    Object.defineProperty(exports2, "TreeItem2Label", {
      enumerable: true,
      get: function() {
        return _TreeItem.TreeItem2Label;
      }
    });
    Object.defineProperty(exports2, "TreeItem2Root", {
      enumerable: true,
      get: function() {
        return _TreeItem.TreeItem2Root;
      }
    });
    var _TreeItem = require_TreeItem22();
  }
});

// node_modules/@mui/material/node/Typography/typographyClasses.js
var require_typographyClasses = __commonJS({
  "node_modules/@mui/material/node/Typography/typographyClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getTypographyUtilityClass = getTypographyUtilityClass;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    function getTypographyUtilityClass(slot) {
      return (0, _generateUtilityClass.default)("MuiTypography", slot);
    }
    var typographyClasses = (0, _generateUtilityClasses.default)("MuiTypography", ["root", "h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "inherit", "button", "caption", "overline", "alignLeft", "alignRight", "alignCenter", "alignJustify", "noWrap", "gutterBottom", "paragraph"]);
    var _default = exports2.default = typographyClasses;
  }
});

// node_modules/@mui/material/node/Typography/Typography.js
var require_Typography = __commonJS({
  "node_modules/@mui/material/node/Typography/Typography.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = exports2.TypographyRoot = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _clsx = _interopRequireDefault(require_clsx());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _zeroStyled = require_zero_styled2();
    var _memoTheme = _interopRequireDefault(require_memoTheme2());
    var _DefaultPropsProvider = require_DefaultPropsProvider4();
    var _capitalize = _interopRequireDefault(require_capitalize3());
    var _createSimplePaletteValueFilter = _interopRequireDefault(require_createSimplePaletteValueFilter());
    var _typographyClasses = require_typographyClasses();
    var _jsxRuntime = require_jsx_runtime();
    var v6Colors = {
      primary: true,
      secondary: true,
      error: true,
      info: true,
      success: true,
      warning: true,
      textPrimary: true,
      textSecondary: true,
      textDisabled: true
    };
    var extendSxProp = (0, _zeroStyled.internal_createExtendSxProp)();
    var useUtilityClasses = (ownerState) => {
      const {
        align,
        gutterBottom,
        noWrap,
        paragraph,
        variant,
        classes
      } = ownerState;
      const slots = {
        root: ["root", variant, ownerState.align !== "inherit" && `align${(0, _capitalize.default)(align)}`, gutterBottom && "gutterBottom", noWrap && "noWrap", paragraph && "paragraph"]
      };
      return (0, _composeClasses.default)(slots, _typographyClasses.getTypographyUtilityClass, classes);
    };
    var TypographyRoot = exports2.TypographyRoot = (0, _zeroStyled.styled)("span", {
      name: "MuiTypography",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.variant && styles[ownerState.variant], ownerState.align !== "inherit" && styles[`align${(0, _capitalize.default)(ownerState.align)}`], ownerState.noWrap && styles.noWrap, ownerState.gutterBottom && styles.gutterBottom, ownerState.paragraph && styles.paragraph];
      }
    })((0, _memoTheme.default)(({
      theme: theme2
    }) => ({
      margin: 0,
      variants: [{
        props: {
          variant: "inherit"
        },
        style: {
          // Some elements, like <button> on Chrome have default font that doesn't inherit, reset this.
          font: "inherit",
          lineHeight: "inherit",
          letterSpacing: "inherit"
        }
      }, ...Object.entries(theme2.typography).filter(([variant, value]) => variant !== "inherit" && value && typeof value === "object").map(([variant, value]) => ({
        props: {
          variant
        },
        style: value
      })), ...Object.entries(theme2.palette).filter((0, _createSimplePaletteValueFilter.default)()).map(([color]) => ({
        props: {
          color
        },
        style: {
          color: (theme2.vars || theme2).palette[color].main
        }
      })), ...Object.entries(theme2.palette?.text || {}).filter(([, value]) => typeof value === "string").map(([color]) => ({
        props: {
          color: `text${(0, _capitalize.default)(color)}`
        },
        style: {
          color: (theme2.vars || theme2).palette.text[color]
        }
      })), {
        props: ({
          ownerState
        }) => ownerState.align !== "inherit",
        style: {
          textAlign: "var(--Typography-textAlign)"
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.noWrap,
        style: {
          overflow: "hidden",
          textOverflow: "ellipsis",
          whiteSpace: "nowrap"
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.gutterBottom,
        style: {
          marginBottom: "0.35em"
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.paragraph,
        style: {
          marginBottom: 16
        }
      }]
    })));
    var defaultVariantMapping = {
      h1: "h1",
      h2: "h2",
      h3: "h3",
      h4: "h4",
      h5: "h5",
      h6: "h6",
      subtitle1: "h6",
      subtitle2: "h6",
      body1: "p",
      body2: "p",
      inherit: "p"
    };
    var Typography2 = /* @__PURE__ */ React7.forwardRef(function Typography3(inProps, ref) {
      const {
        color,
        ...themeProps
      } = (0, _DefaultPropsProvider.useDefaultProps)({
        props: inProps,
        name: "MuiTypography"
      });
      const isSxColor = !v6Colors[color];
      const props = extendSxProp({
        ...themeProps,
        ...isSxColor && {
          color
        }
      });
      const {
        align = "inherit",
        className,
        component,
        gutterBottom = false,
        noWrap = false,
        paragraph = false,
        variant = "body1",
        variantMapping = defaultVariantMapping,
        ...other
      } = props;
      const ownerState = {
        ...props,
        align,
        color,
        className,
        component,
        gutterBottom,
        noWrap,
        paragraph,
        variant,
        variantMapping
      };
      const Component = component || (paragraph ? "p" : variantMapping[variant] || defaultVariantMapping[variant]) || "span";
      const classes = useUtilityClasses(ownerState);
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(TypographyRoot, {
        as: Component,
        ref,
        className: (0, _clsx.default)(classes.root, className),
        ...other,
        ownerState,
        style: {
          ...align !== "inherit" && {
            "--Typography-textAlign": align
          },
          ...other.style
        }
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? Typography2.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * Set the text-align on the component.
       * @default 'inherit'
       */
      align: _propTypes.default.oneOf(["center", "inherit", "justify", "left", "right"]),
      /**
       * The content of the component.
       */
      children: _propTypes.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      /**
       * @ignore
       */
      className: _propTypes.default.string,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
       */
      color: _propTypes.default.oneOfType([_propTypes.default.oneOf(["primary", "secondary", "success", "error", "info", "warning", "textPrimary", "textSecondary", "textDisabled"]), _propTypes.default.string]),
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: _propTypes.default.elementType,
      /**
       * If `true`, the text will have a bottom margin.
       * @default false
       */
      gutterBottom: _propTypes.default.bool,
      /**
       * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
       *
       * Note that text overflow can only happen with block or inline-block level elements
       * (the element needs to have a width in order to overflow).
       * @default false
       */
      noWrap: _propTypes.default.bool,
      /**
       * If `true`, the element will be a paragraph element.
       * @default false
       * @deprecated Use the `component` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       */
      paragraph: _propTypes.default.bool,
      /**
       * @ignore
       */
      style: _propTypes.default.object,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
      /**
       * Applies the theme typography styles.
       * @default 'body1'
       */
      variant: _propTypes.default.oneOfType([_propTypes.default.oneOf(["body1", "body2", "button", "caption", "h1", "h2", "h3", "h4", "h5", "h6", "inherit", "overline", "subtitle1", "subtitle2"]), _propTypes.default.string]),
      /**
       * The component maps the variant prop to a range of different HTML element types.
       * For instance, subtitle1 to `<h6>`.
       * If you wish to change that mapping, you can provide your own.
       * Alternatively, you can use the `component` prop.
       * @default {
       *   h1: 'h1',
       *   h2: 'h2',
       *   h3: 'h3',
       *   h4: 'h4',
       *   h5: 'h5',
       *   h6: 'h6',
       *   subtitle1: 'h6',
       *   subtitle2: 'h6',
       *   body1: 'p',
       *   body2: 'p',
       *   inherit: 'p',
       * }
       */
      variantMapping: _propTypes.default.object
    } : void 0;
    var _default = exports2.default = Typography2;
  }
});

// node_modules/@mui/material/node/Typography/index.js
var require_Typography2 = __commonJS({
  "node_modules/@mui/material/node/Typography/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      typographyClasses: true
    };
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _Typography.default;
      }
    });
    Object.defineProperty(exports2, "typographyClasses", {
      enumerable: true,
      get: function() {
        return _typographyClasses.default;
      }
    });
    var _Typography = _interopRequireDefault(require_Typography());
    var _typographyClasses = _interopRequireWildcard(require_typographyClasses());
    Object.keys(_typographyClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _typographyClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _typographyClasses[key];
        }
      });
    });
  }
});

// node_modules/@mui/x-tree-view/node/hooks/useTreeViewApiRef.js
var require_useTreeViewApiRef = __commonJS({
  "node_modules/@mui/x-tree-view/node/hooks/useTreeViewApiRef.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.useTreeViewApiRef = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var useTreeViewApiRef = () => React7.useRef(void 0);
    exports2.useTreeViewApiRef = useTreeViewApiRef;
  }
});

// node_modules/@mui/x-tree-view/node/hooks/index.js
var require_hooks = __commonJS({
  "node_modules/@mui/x-tree-view/node/hooks/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "useTreeItem2Utils", {
      enumerable: true,
      get: function() {
        return _useTreeItem2Utils.useTreeItem2Utils;
      }
    });
    Object.defineProperty(exports2, "useTreeViewApiRef", {
      enumerable: true,
      get: function() {
        return _useTreeViewApiRef.useTreeViewApiRef;
      }
    });
    var _useTreeViewApiRef = require_useTreeViewApiRef();
    var _useTreeItem2Utils = require_useTreeItem2Utils2();
  }
});

// node_modules/@mui/material/node/useAutocomplete/useAutocomplete.js
var require_useAutocomplete = __commonJS({
  "node_modules/@mui/material/node/useAutocomplete/useAutocomplete.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.createFilterOptions = createFilterOptions;
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    function stripDiacritics(string) {
      return string.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
    }
    function createFilterOptions(config = {}) {
      const {
        ignoreAccents = true,
        ignoreCase = true,
        limit,
        matchFrom = "any",
        stringify: stringify2,
        trim: trim2 = false
      } = config;
      return (options, {
        inputValue,
        getOptionLabel
      }) => {
        let input = trim2 ? inputValue.trim() : inputValue;
        if (ignoreCase) {
          input = input.toLowerCase();
        }
        if (ignoreAccents) {
          input = stripDiacritics(input);
        }
        const filteredOptions = !input ? options : options.filter((option) => {
          let candidate = (stringify2 || getOptionLabel)(option);
          if (ignoreCase) {
            candidate = candidate.toLowerCase();
          }
          if (ignoreAccents) {
            candidate = stripDiacritics(candidate);
          }
          return matchFrom === "start" ? candidate.startsWith(input) : candidate.includes(input);
        });
        return typeof limit === "number" ? filteredOptions.slice(0, limit) : filteredOptions;
      };
    }
    var defaultFilterOptions = createFilterOptions();
    var pageSize = 5;
    var defaultIsActiveElementInListbox = (listboxRef) => listboxRef.current !== null && listboxRef.current.parentElement?.contains(document.activeElement);
    var MULTIPLE_DEFAULT_VALUE = [];
    function getInputValue(value, multiple, getOptionLabel) {
      if (multiple || value == null) {
        return "";
      }
      const optionLabel = getOptionLabel(value);
      return typeof optionLabel === "string" ? optionLabel : "";
    }
    function useAutocomplete(props) {
      const {
        // eslint-disable-next-line @typescript-eslint/naming-convention
        unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,
        // eslint-disable-next-line @typescript-eslint/naming-convention
        unstable_classNamePrefix = "Mui",
        autoComplete = false,
        autoHighlight = false,
        autoSelect = false,
        blurOnSelect = false,
        clearOnBlur = !props.freeSolo,
        clearOnEscape = false,
        componentName = "useAutocomplete",
        defaultValue = props.multiple ? MULTIPLE_DEFAULT_VALUE : null,
        disableClearable = false,
        disableCloseOnSelect = false,
        disabled: disabledProp,
        disabledItemsFocusable = false,
        disableListWrap = false,
        filterOptions = defaultFilterOptions,
        filterSelectedOptions = false,
        freeSolo = false,
        getOptionDisabled,
        getOptionKey,
        getOptionLabel: getOptionLabelProp = (option) => option.label ?? option,
        groupBy,
        handleHomeEndKeys = !props.freeSolo,
        id: idProp,
        includeInputInList = false,
        inputValue: inputValueProp,
        isOptionEqualToValue = (option, value2) => option === value2,
        multiple = false,
        onChange,
        onClose,
        onHighlightChange,
        onInputChange,
        onOpen,
        open: openProp,
        openOnFocus = false,
        options,
        readOnly = false,
        selectOnFocus = !props.freeSolo,
        value: valueProp
      } = props;
      const id = (0, _utils.unstable_useId)(idProp);
      let getOptionLabel = getOptionLabelProp;
      getOptionLabel = (option) => {
        const optionLabel = getOptionLabelProp(option);
        if (typeof optionLabel !== "string") {
          if (define_process_env_default.NODE_ENV !== "production") {
            const erroneousReturn = optionLabel === void 0 ? "undefined" : `${typeof optionLabel} (${optionLabel})`;
            console.error(`MUI: The \`getOptionLabel\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);
          }
          return String(optionLabel);
        }
        return optionLabel;
      };
      const ignoreFocus = React7.useRef(false);
      const firstFocus = React7.useRef(true);
      const inputRef = React7.useRef(null);
      const listboxRef = React7.useRef(null);
      const [anchorEl, setAnchorEl] = React7.useState(null);
      const [focusedTag, setFocusedTag] = React7.useState(-1);
      const defaultHighlighted = autoHighlight ? 0 : -1;
      const highlightedIndexRef = React7.useRef(defaultHighlighted);
      const initialInputValue = React7.useRef(getInputValue(defaultValue ?? valueProp, multiple, getOptionLabel)).current;
      const [value, setValueState] = (0, _utils.unstable_useControlled)({
        controlled: valueProp,
        default: defaultValue,
        name: componentName
      });
      const [inputValue, setInputValueState] = (0, _utils.unstable_useControlled)({
        controlled: inputValueProp,
        default: initialInputValue,
        name: componentName,
        state: "inputValue"
      });
      const [focused, setFocused] = React7.useState(false);
      const resetInputValue = React7.useCallback((event, newValue, reason) => {
        const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;
        if (!isOptionSelected && !clearOnBlur) {
          return;
        }
        const newInputValue = getInputValue(newValue, multiple, getOptionLabel);
        if (inputValue === newInputValue) {
          return;
        }
        setInputValueState(newInputValue);
        if (onInputChange) {
          onInputChange(event, newInputValue, reason);
        }
      }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);
      const [open, setOpenState] = (0, _utils.unstable_useControlled)({
        controlled: openProp,
        default: false,
        name: componentName,
        state: "open"
      });
      const [inputPristine, setInputPristine] = React7.useState(true);
      const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);
      const popupOpen = open && !readOnly;
      const filteredOptions = popupOpen ? filterOptions(
        options.filter((option) => {
          if (filterSelectedOptions && (multiple ? value : [value]).some((value2) => value2 !== null && isOptionEqualToValue(option, value2))) {
            return false;
          }
          return true;
        }),
        // we use the empty string to manipulate `filterOptions` to not filter any options
        // i.e. the filter predicate always returns true
        {
          inputValue: inputValueIsSelectedValue && inputPristine ? "" : inputValue,
          getOptionLabel
        }
      ) : [];
      const previousProps = (0, _utils.usePreviousProps)({
        filteredOptions,
        value,
        inputValue
      });
      React7.useEffect(() => {
        const valueChange = value !== previousProps.value;
        if (focused && !valueChange) {
          return;
        }
        if (freeSolo && !valueChange) {
          return;
        }
        resetInputValue(null, value, "reset");
      }, [value, resetInputValue, focused, previousProps.value, freeSolo]);
      const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;
      const focusTag = (0, _utils.unstable_useEventCallback)((tagToFocus) => {
        if (tagToFocus === -1) {
          inputRef.current.focus();
        } else {
          anchorEl.querySelector(`[data-tag-index="${tagToFocus}"]`).focus();
        }
      });
      React7.useEffect(() => {
        if (multiple && focusedTag > value.length - 1) {
          setFocusedTag(-1);
          focusTag(-1);
        }
      }, [value, multiple, focusedTag, focusTag]);
      function validOptionIndex(index, direction) {
        if (!listboxRef.current || index < 0 || index >= filteredOptions.length) {
          return -1;
        }
        let nextFocus = index;
        while (true) {
          const option = listboxRef.current.querySelector(`[data-option-index="${nextFocus}"]`);
          const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute("aria-disabled") === "true";
          if (option && option.hasAttribute("tabindex") && !nextFocusDisabled) {
            return nextFocus;
          }
          if (direction === "next") {
            nextFocus = (nextFocus + 1) % filteredOptions.length;
          } else {
            nextFocus = (nextFocus - 1 + filteredOptions.length) % filteredOptions.length;
          }
          if (nextFocus === index) {
            return -1;
          }
        }
      }
      const setHighlightedIndex = (0, _utils.unstable_useEventCallback)(({
        event,
        index,
        reason
      }) => {
        highlightedIndexRef.current = index;
        if (index === -1) {
          inputRef.current.removeAttribute("aria-activedescendant");
        } else {
          inputRef.current.setAttribute("aria-activedescendant", `${id}-option-${index}`);
        }
        if (onHighlightChange && ["mouse", "keyboard", "touch"].includes(reason)) {
          onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);
        }
        if (!listboxRef.current) {
          return;
        }
        const prev2 = listboxRef.current.querySelector(`[role="option"].${unstable_classNamePrefix}-focused`);
        if (prev2) {
          prev2.classList.remove(`${unstable_classNamePrefix}-focused`);
          prev2.classList.remove(`${unstable_classNamePrefix}-focusVisible`);
        }
        let listboxNode = listboxRef.current;
        if (listboxRef.current.getAttribute("role") !== "listbox") {
          listboxNode = listboxRef.current.parentElement.querySelector('[role="listbox"]');
        }
        if (!listboxNode) {
          return;
        }
        if (index === -1) {
          listboxNode.scrollTop = 0;
          return;
        }
        const option = listboxRef.current.querySelector(`[data-option-index="${index}"]`);
        if (!option) {
          return;
        }
        option.classList.add(`${unstable_classNamePrefix}-focused`);
        if (reason === "keyboard") {
          option.classList.add(`${unstable_classNamePrefix}-focusVisible`);
        }
        if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== "mouse" && reason !== "touch") {
          const element = option;
          const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;
          const elementBottom = element.offsetTop + element.offsetHeight;
          if (elementBottom > scrollBottom) {
            listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;
          } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {
            listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);
          }
        }
      });
      const changeHighlightedIndex = (0, _utils.unstable_useEventCallback)(({
        event,
        diff,
        direction = "next",
        reason
      }) => {
        if (!popupOpen) {
          return;
        }
        const getNextIndex = () => {
          const maxIndex = filteredOptions.length - 1;
          if (diff === "reset") {
            return defaultHighlighted;
          }
          if (diff === "start") {
            return 0;
          }
          if (diff === "end") {
            return maxIndex;
          }
          const newIndex = highlightedIndexRef.current + diff;
          if (newIndex < 0) {
            if (newIndex === -1 && includeInputInList) {
              return -1;
            }
            if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {
              return 0;
            }
            return maxIndex;
          }
          if (newIndex > maxIndex) {
            if (newIndex === maxIndex + 1 && includeInputInList) {
              return -1;
            }
            if (disableListWrap || Math.abs(diff) > 1) {
              return maxIndex;
            }
            return 0;
          }
          return newIndex;
        };
        const nextIndex = validOptionIndex(getNextIndex(), direction);
        setHighlightedIndex({
          index: nextIndex,
          reason,
          event
        });
        if (autoComplete && diff !== "reset") {
          if (nextIndex === -1) {
            inputRef.current.value = inputValue;
          } else {
            const option = getOptionLabel(filteredOptions[nextIndex]);
            inputRef.current.value = option;
            const index = option.toLowerCase().indexOf(inputValue.toLowerCase());
            if (index === 0 && inputValue.length > 0) {
              inputRef.current.setSelectionRange(inputValue.length, option.length);
            }
          }
        }
      });
      const getPreviousHighlightedOptionIndex = () => {
        const isSameValue = (value1, value2) => {
          const label1 = value1 ? getOptionLabel(value1) : "";
          const label2 = value2 ? getOptionLabel(value2) : "";
          return label1 === label2;
        };
        if (highlightedIndexRef.current !== -1 && previousProps.filteredOptions && previousProps.filteredOptions.length !== filteredOptions.length && previousProps.inputValue === inputValue && (multiple ? value.length === previousProps.value.length && previousProps.value.every((val, i) => getOptionLabel(value[i]) === getOptionLabel(val)) : isSameValue(previousProps.value, value))) {
          const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];
          if (previousHighlightedOption) {
            return filteredOptions.findIndex((option) => {
              return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);
            });
          }
        }
        return -1;
      };
      const syncHighlightedIndex = React7.useCallback(() => {
        if (!popupOpen) {
          return;
        }
        const previousHighlightedOptionIndex = getPreviousHighlightedOptionIndex();
        if (previousHighlightedOptionIndex !== -1) {
          highlightedIndexRef.current = previousHighlightedOptionIndex;
          return;
        }
        const valueItem = multiple ? value[0] : value;
        if (filteredOptions.length === 0 || valueItem == null) {
          changeHighlightedIndex({
            diff: "reset"
          });
          return;
        }
        if (!listboxRef.current) {
          return;
        }
        if (valueItem != null) {
          const currentOption = filteredOptions[highlightedIndexRef.current];
          if (multiple && currentOption && value.findIndex((val) => isOptionEqualToValue(currentOption, val)) !== -1) {
            return;
          }
          const itemIndex = filteredOptions.findIndex((optionItem) => isOptionEqualToValue(optionItem, valueItem));
          if (itemIndex === -1) {
            changeHighlightedIndex({
              diff: "reset"
            });
          } else {
            setHighlightedIndex({
              index: itemIndex
            });
          }
          return;
        }
        if (highlightedIndexRef.current >= filteredOptions.length - 1) {
          setHighlightedIndex({
            index: filteredOptions.length - 1
          });
          return;
        }
        setHighlightedIndex({
          index: highlightedIndexRef.current
        });
      }, [
        // Only sync the highlighted index when the option switch between empty and not
        filteredOptions.length,
        // Don't sync the highlighted index with the value when multiple
        // eslint-disable-next-line react-hooks/exhaustive-deps
        multiple ? false : value,
        filterSelectedOptions,
        changeHighlightedIndex,
        setHighlightedIndex,
        popupOpen,
        inputValue,
        multiple
      ]);
      const handleListboxRef = (0, _utils.unstable_useEventCallback)((node2) => {
        (0, _utils.unstable_setRef)(listboxRef, node2);
        if (!node2) {
          return;
        }
        syncHighlightedIndex();
      });
      if (define_process_env_default.NODE_ENV !== "production") {
        React7.useEffect(() => {
          if (!inputRef.current || inputRef.current.nodeName !== "INPUT") {
            if (inputRef.current && inputRef.current.nodeName === "TEXTAREA") {
              console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (for example enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join("\n"));
            } else {
              console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, "", componentName === "useAutocomplete" ? "Make sure you have bound getInputProps correctly and that the normal ref/effect resolutions order is guaranteed." : "Make sure you have customized the input component correctly."].join("\n"));
            }
          }
        }, [componentName]);
      }
      React7.useEffect(() => {
        syncHighlightedIndex();
      }, [syncHighlightedIndex]);
      const handleOpen = (event) => {
        if (open) {
          return;
        }
        setOpenState(true);
        setInputPristine(true);
        if (onOpen) {
          onOpen(event);
        }
      };
      const handleClose = (event, reason) => {
        if (!open) {
          return;
        }
        setOpenState(false);
        if (onClose) {
          onClose(event, reason);
        }
      };
      const handleValue = (event, newValue, reason, details) => {
        if (multiple) {
          if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {
            return;
          }
        } else if (value === newValue) {
          return;
        }
        if (onChange) {
          onChange(event, newValue, reason, details);
        }
        setValueState(newValue);
      };
      const isTouch = React7.useRef(false);
      const selectNewValue = (event, option, reasonProp = "selectOption", origin = "options") => {
        let reason = reasonProp;
        let newValue = option;
        if (multiple) {
          newValue = Array.isArray(value) ? value.slice() : [];
          if (define_process_env_default.NODE_ENV !== "production") {
            const matches = newValue.filter((val) => isOptionEqualToValue(option, val));
            if (matches.length > 1) {
              console.error([`MUI: The \`isOptionEqualToValue\` method of ${componentName} does not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join("\n"));
            }
          }
          const itemIndex = newValue.findIndex((valueItem) => isOptionEqualToValue(option, valueItem));
          if (itemIndex === -1) {
            newValue.push(option);
          } else if (origin !== "freeSolo") {
            newValue.splice(itemIndex, 1);
            reason = "removeOption";
          }
        }
        resetInputValue(event, newValue, reason);
        handleValue(event, newValue, reason, {
          option
        });
        if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {
          handleClose(event, reason);
        }
        if (blurOnSelect === true || blurOnSelect === "touch" && isTouch.current || blurOnSelect === "mouse" && !isTouch.current) {
          inputRef.current.blur();
        }
      };
      function validTagIndex(index, direction) {
        if (index === -1) {
          return -1;
        }
        let nextFocus = index;
        while (true) {
          if (direction === "next" && nextFocus === value.length || direction === "previous" && nextFocus === -1) {
            return -1;
          }
          const option = anchorEl.querySelector(`[data-tag-index="${nextFocus}"]`);
          if (!option || !option.hasAttribute("tabindex") || option.disabled || option.getAttribute("aria-disabled") === "true") {
            nextFocus += direction === "next" ? 1 : -1;
          } else {
            return nextFocus;
          }
        }
      }
      const handleFocusTag = (event, direction) => {
        if (!multiple) {
          return;
        }
        if (inputValue === "") {
          handleClose(event, "toggleInput");
        }
        let nextTag = focusedTag;
        if (focusedTag === -1) {
          if (inputValue === "" && direction === "previous") {
            nextTag = value.length - 1;
          }
        } else {
          nextTag += direction === "next" ? 1 : -1;
          if (nextTag < 0) {
            nextTag = 0;
          }
          if (nextTag === value.length) {
            nextTag = -1;
          }
        }
        nextTag = validTagIndex(nextTag, direction);
        setFocusedTag(nextTag);
        focusTag(nextTag);
      };
      const handleClear = (event) => {
        ignoreFocus.current = true;
        setInputValueState("");
        if (onInputChange) {
          onInputChange(event, "", "clear");
        }
        handleValue(event, multiple ? [] : null, "clear");
      };
      const handleKeyDown = (other) => (event) => {
        if (other.onKeyDown) {
          other.onKeyDown(event);
        }
        if (event.defaultMuiPrevented) {
          return;
        }
        if (focusedTag !== -1 && !["ArrowLeft", "ArrowRight"].includes(event.key)) {
          setFocusedTag(-1);
          focusTag(-1);
        }
        if (event.which !== 229) {
          switch (event.key) {
            case "Home":
              if (popupOpen && handleHomeEndKeys) {
                event.preventDefault();
                changeHighlightedIndex({
                  diff: "start",
                  direction: "next",
                  reason: "keyboard",
                  event
                });
              }
              break;
            case "End":
              if (popupOpen && handleHomeEndKeys) {
                event.preventDefault();
                changeHighlightedIndex({
                  diff: "end",
                  direction: "previous",
                  reason: "keyboard",
                  event
                });
              }
              break;
            case "PageUp":
              event.preventDefault();
              changeHighlightedIndex({
                diff: -pageSize,
                direction: "previous",
                reason: "keyboard",
                event
              });
              handleOpen(event);
              break;
            case "PageDown":
              event.preventDefault();
              changeHighlightedIndex({
                diff: pageSize,
                direction: "next",
                reason: "keyboard",
                event
              });
              handleOpen(event);
              break;
            case "ArrowDown":
              event.preventDefault();
              changeHighlightedIndex({
                diff: 1,
                direction: "next",
                reason: "keyboard",
                event
              });
              handleOpen(event);
              break;
            case "ArrowUp":
              event.preventDefault();
              changeHighlightedIndex({
                diff: -1,
                direction: "previous",
                reason: "keyboard",
                event
              });
              handleOpen(event);
              break;
            case "ArrowLeft":
              handleFocusTag(event, "previous");
              break;
            case "ArrowRight":
              handleFocusTag(event, "next");
              break;
            case "Enter":
              if (highlightedIndexRef.current !== -1 && popupOpen) {
                const option = filteredOptions[highlightedIndexRef.current];
                const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
                event.preventDefault();
                if (disabled) {
                  return;
                }
                selectNewValue(event, option, "selectOption");
                if (autoComplete) {
                  inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);
                }
              } else if (freeSolo && inputValue !== "" && inputValueIsSelectedValue === false) {
                if (multiple) {
                  event.preventDefault();
                }
                selectNewValue(event, inputValue, "createOption", "freeSolo");
              }
              break;
            case "Escape":
              if (popupOpen) {
                event.preventDefault();
                event.stopPropagation();
                handleClose(event, "escape");
              } else if (clearOnEscape && (inputValue !== "" || multiple && value.length > 0)) {
                event.preventDefault();
                event.stopPropagation();
                handleClear(event);
              }
              break;
            case "Backspace":
              if (multiple && !readOnly && inputValue === "" && value.length > 0) {
                const index = focusedTag === -1 ? value.length - 1 : focusedTag;
                const newValue = value.slice();
                newValue.splice(index, 1);
                handleValue(event, newValue, "removeOption", {
                  option: value[index]
                });
              }
              break;
            case "Delete":
              if (multiple && !readOnly && inputValue === "" && value.length > 0 && focusedTag !== -1) {
                const index = focusedTag;
                const newValue = value.slice();
                newValue.splice(index, 1);
                handleValue(event, newValue, "removeOption", {
                  option: value[index]
                });
              }
              break;
            default:
          }
        }
      };
      const handleFocus = (event) => {
        setFocused(true);
        if (openOnFocus && !ignoreFocus.current) {
          handleOpen(event);
        }
      };
      const handleBlur = (event) => {
        if (unstable_isActiveElementInListbox(listboxRef)) {
          inputRef.current.focus();
          return;
        }
        setFocused(false);
        firstFocus.current = true;
        ignoreFocus.current = false;
        if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {
          selectNewValue(event, filteredOptions[highlightedIndexRef.current], "blur");
        } else if (autoSelect && freeSolo && inputValue !== "") {
          selectNewValue(event, inputValue, "blur", "freeSolo");
        } else if (clearOnBlur) {
          resetInputValue(event, value, "blur");
        }
        handleClose(event, "blur");
      };
      const handleInputChange = (event) => {
        const newValue = event.target.value;
        if (inputValue !== newValue) {
          setInputValueState(newValue);
          setInputPristine(false);
          if (onInputChange) {
            onInputChange(event, newValue, "input");
          }
        }
        if (newValue === "") {
          if (!disableClearable && !multiple) {
            handleValue(event, null, "clear");
          }
        } else {
          handleOpen(event);
        }
      };
      const handleOptionMouseMove = (event) => {
        const index = Number(event.currentTarget.getAttribute("data-option-index"));
        if (highlightedIndexRef.current !== index) {
          setHighlightedIndex({
            event,
            index,
            reason: "mouse"
          });
        }
      };
      const handleOptionTouchStart = (event) => {
        setHighlightedIndex({
          event,
          index: Number(event.currentTarget.getAttribute("data-option-index")),
          reason: "touch"
        });
        isTouch.current = true;
      };
      const handleOptionClick = (event) => {
        const index = Number(event.currentTarget.getAttribute("data-option-index"));
        selectNewValue(event, filteredOptions[index], "selectOption");
        isTouch.current = false;
      };
      const handleTagDelete = (index) => (event) => {
        const newValue = value.slice();
        newValue.splice(index, 1);
        handleValue(event, newValue, "removeOption", {
          option: value[index]
        });
      };
      const handlePopupIndicator = (event) => {
        if (open) {
          handleClose(event, "toggleInput");
        } else {
          handleOpen(event);
        }
      };
      const handleMouseDown = (event) => {
        if (!event.currentTarget.contains(event.target)) {
          return;
        }
        if (event.target.getAttribute("id") !== id) {
          event.preventDefault();
        }
      };
      const handleClick = (event) => {
        if (!event.currentTarget.contains(event.target)) {
          return;
        }
        inputRef.current.focus();
        if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {
          inputRef.current.select();
        }
        firstFocus.current = false;
      };
      const handleInputMouseDown = (event) => {
        if (!disabledProp && (inputValue === "" || !open)) {
          handlePopupIndicator(event);
        }
      };
      let dirty = freeSolo && inputValue.length > 0;
      dirty = dirty || (multiple ? value.length > 0 : value !== null);
      let groupedOptions = filteredOptions;
      if (groupBy) {
        const indexBy = /* @__PURE__ */ new Map();
        let warn = false;
        groupedOptions = filteredOptions.reduce((acc, option, index) => {
          const group = groupBy(option);
          if (acc.length > 0 && acc[acc.length - 1].group === group) {
            acc[acc.length - 1].options.push(option);
          } else {
            if (define_process_env_default.NODE_ENV !== "production") {
              if (indexBy.get(group) && !warn) {
                console.warn(`MUI: The options provided combined with the \`groupBy\` method of ${componentName} returns duplicated headers.`, "You can solve the issue by sorting the options with the output of `groupBy`.");
                warn = true;
              }
              indexBy.set(group, true);
            }
            acc.push({
              key: index,
              index,
              group,
              options: [option]
            });
          }
          return acc;
        }, []);
      }
      if (disabledProp && focused) {
        handleBlur();
      }
      return {
        getRootProps: (other = {}) => ({
          ...other,
          onKeyDown: handleKeyDown(other),
          onMouseDown: handleMouseDown,
          onClick: handleClick
        }),
        getInputLabelProps: () => ({
          id: `${id}-label`,
          htmlFor: id
        }),
        getInputProps: () => ({
          id,
          value: inputValue,
          onBlur: handleBlur,
          onFocus: handleFocus,
          onChange: handleInputChange,
          onMouseDown: handleInputMouseDown,
          // if open then this is handled imperatively so don't let react override
          // only have an opinion about this when closed
          "aria-activedescendant": popupOpen ? "" : null,
          "aria-autocomplete": autoComplete ? "both" : "list",
          "aria-controls": listboxAvailable ? `${id}-listbox` : void 0,
          "aria-expanded": listboxAvailable,
          // Disable browser's suggestion that might overlap with the popup.
          // Handle autocomplete but not autofill.
          autoComplete: "off",
          ref: inputRef,
          autoCapitalize: "none",
          spellCheck: "false",
          role: "combobox",
          disabled: disabledProp
        }),
        getClearProps: () => ({
          tabIndex: -1,
          type: "button",
          onClick: handleClear
        }),
        getPopupIndicatorProps: () => ({
          tabIndex: -1,
          type: "button",
          onClick: handlePopupIndicator
        }),
        getTagProps: ({
          index
        }) => ({
          key: index,
          "data-tag-index": index,
          tabIndex: -1,
          ...!readOnly && {
            onDelete: handleTagDelete(index)
          }
        }),
        getListboxProps: () => ({
          role: "listbox",
          id: `${id}-listbox`,
          "aria-labelledby": `${id}-label`,
          ref: handleListboxRef,
          onMouseDown: (event) => {
            event.preventDefault();
          }
        }),
        getOptionProps: ({
          index,
          option
        }) => {
          const selected = (multiple ? value : [value]).some((value2) => value2 != null && isOptionEqualToValue(option, value2));
          const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
          return {
            key: getOptionKey?.(option) ?? getOptionLabel(option),
            tabIndex: -1,
            role: "option",
            id: `${id}-option-${index}`,
            onMouseMove: handleOptionMouseMove,
            onClick: handleOptionClick,
            onTouchStart: handleOptionTouchStart,
            "data-option-index": index,
            "aria-disabled": disabled,
            "aria-selected": selected
          };
        },
        id,
        inputValue,
        value,
        dirty,
        expanded: popupOpen && anchorEl,
        popupOpen,
        focused: focused || focusedTag !== -1,
        anchorEl,
        setAnchorEl,
        focusedTag,
        groupedOptions
      };
    }
    var _default = exports2.default = useAutocomplete;
  }
});

// node_modules/@mui/material/node/useAutocomplete/index.js
var require_useAutocomplete2 = __commonJS({
  "node_modules/@mui/material/node/useAutocomplete/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "createFilterOptions", {
      enumerable: true,
      get: function() {
        return _useAutocomplete.createFilterOptions;
      }
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _useAutocomplete.default;
      }
    });
    var _useAutocomplete = _interopRequireWildcard(require_useAutocomplete());
  }
});

// node_modules/@popperjs/core/dist/cjs/popper.js
var require_popper = __commonJS({
  "node_modules/@popperjs/core/dist/cjs/popper.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    function getWindow(node2) {
      if (node2 == null) {
        return window;
      }
      if (node2.toString() !== "[object Window]") {
        var ownerDocument = node2.ownerDocument;
        return ownerDocument ? ownerDocument.defaultView || window : window;
      }
      return node2;
    }
    function isElement(node2) {
      var OwnElement = getWindow(node2).Element;
      return node2 instanceof OwnElement || node2 instanceof Element;
    }
    function isHTMLElement(node2) {
      var OwnElement = getWindow(node2).HTMLElement;
      return node2 instanceof OwnElement || node2 instanceof HTMLElement;
    }
    function isShadowRoot(node2) {
      if (typeof ShadowRoot === "undefined") {
        return false;
      }
      var OwnElement = getWindow(node2).ShadowRoot;
      return node2 instanceof OwnElement || node2 instanceof ShadowRoot;
    }
    var max = Math.max;
    var min = Math.min;
    var round = Math.round;
    function getUAString() {
      var uaData = navigator.userAgentData;
      if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
        return uaData.brands.map(function(item) {
          return item.brand + "/" + item.version;
        }).join(" ");
      }
      return navigator.userAgent;
    }
    function isLayoutViewport() {
      return !/^((?!chrome|android).)*safari/i.test(getUAString());
    }
    function getBoundingClientRect(element, includeScale, isFixedStrategy) {
      if (includeScale === void 0) {
        includeScale = false;
      }
      if (isFixedStrategy === void 0) {
        isFixedStrategy = false;
      }
      var clientRect = element.getBoundingClientRect();
      var scaleX = 1;
      var scaleY = 1;
      if (includeScale && isHTMLElement(element)) {
        scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
        scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
      }
      var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
      var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
      var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
      var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
      var width = clientRect.width / scaleX;
      var height = clientRect.height / scaleY;
      return {
        width,
        height,
        top: y,
        right: x + width,
        bottom: y + height,
        left: x,
        x,
        y
      };
    }
    function getWindowScroll(node2) {
      var win = getWindow(node2);
      var scrollLeft = win.pageXOffset;
      var scrollTop = win.pageYOffset;
      return {
        scrollLeft,
        scrollTop
      };
    }
    function getHTMLElementScroll(element) {
      return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
      };
    }
    function getNodeScroll(node2) {
      if (node2 === getWindow(node2) || !isHTMLElement(node2)) {
        return getWindowScroll(node2);
      } else {
        return getHTMLElementScroll(node2);
      }
    }
    function getNodeName(element) {
      return element ? (element.nodeName || "").toLowerCase() : null;
    }
    function getDocumentElement(element) {
      return ((isElement(element) ? element.ownerDocument : (
        // $FlowFixMe[prop-missing]
        element.document
      )) || window.document).documentElement;
    }
    function getWindowScrollBarX(element) {
      return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
    }
    function getComputedStyle(element) {
      return getWindow(element).getComputedStyle(element);
    }
    function isScrollParent(element) {
      var _getComputedStyle = getComputedStyle(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
      return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
    }
    function isElementScaled(element) {
      var rect = element.getBoundingClientRect();
      var scaleX = round(rect.width) / element.offsetWidth || 1;
      var scaleY = round(rect.height) / element.offsetHeight || 1;
      return scaleX !== 1 || scaleY !== 1;
    }
    function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
      if (isFixed === void 0) {
        isFixed = false;
      }
      var isOffsetParentAnElement = isHTMLElement(offsetParent);
      var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
      var documentElement = getDocumentElement(offsetParent);
      var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
      var scroll = {
        scrollLeft: 0,
        scrollTop: 0
      };
      var offsets = {
        x: 0,
        y: 0
      };
      if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
        if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
        isScrollParent(documentElement)) {
          scroll = getNodeScroll(offsetParent);
        }
        if (isHTMLElement(offsetParent)) {
          offsets = getBoundingClientRect(offsetParent, true);
          offsets.x += offsetParent.clientLeft;
          offsets.y += offsetParent.clientTop;
        } else if (documentElement) {
          offsets.x = getWindowScrollBarX(documentElement);
        }
      }
      return {
        x: rect.left + scroll.scrollLeft - offsets.x,
        y: rect.top + scroll.scrollTop - offsets.y,
        width: rect.width,
        height: rect.height
      };
    }
    function getLayoutRect(element) {
      var clientRect = getBoundingClientRect(element);
      var width = element.offsetWidth;
      var height = element.offsetHeight;
      if (Math.abs(clientRect.width - width) <= 1) {
        width = clientRect.width;
      }
      if (Math.abs(clientRect.height - height) <= 1) {
        height = clientRect.height;
      }
      return {
        x: element.offsetLeft,
        y: element.offsetTop,
        width,
        height
      };
    }
    function getParentNode(element) {
      if (getNodeName(element) === "html") {
        return element;
      }
      return (
        // this is a quicker (but less type safe) way to save quite some bytes from the bundle
        // $FlowFixMe[incompatible-return]
        // $FlowFixMe[prop-missing]
        element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
        element.parentNode || // DOM Element detected
        (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
        // $FlowFixMe[incompatible-call]: HTMLElement is a Node
        getDocumentElement(element)
      );
    }
    function getScrollParent(node2) {
      if (["html", "body", "#document"].indexOf(getNodeName(node2)) >= 0) {
        return node2.ownerDocument.body;
      }
      if (isHTMLElement(node2) && isScrollParent(node2)) {
        return node2;
      }
      return getScrollParent(getParentNode(node2));
    }
    function listScrollParents(element, list) {
      var _element$ownerDocumen;
      if (list === void 0) {
        list = [];
      }
      var scrollParent = getScrollParent(element);
      var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
      var win = getWindow(scrollParent);
      var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
      var updatedList = list.concat(target);
      return isBody ? updatedList : (
        // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
        updatedList.concat(listScrollParents(getParentNode(target)))
      );
    }
    function isTableElement(element) {
      return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
    }
    function getTrueOffsetParent(element) {
      if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
      getComputedStyle(element).position === "fixed") {
        return null;
      }
      return element.offsetParent;
    }
    function getContainingBlock(element) {
      var isFirefox = /firefox/i.test(getUAString());
      var isIE = /Trident/i.test(getUAString());
      if (isIE && isHTMLElement(element)) {
        var elementCss = getComputedStyle(element);
        if (elementCss.position === "fixed") {
          return null;
        }
      }
      var currentNode = getParentNode(element);
      if (isShadowRoot(currentNode)) {
        currentNode = currentNode.host;
      }
      while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
        var css2 = getComputedStyle(currentNode);
        if (css2.transform !== "none" || css2.perspective !== "none" || css2.contain === "paint" || ["transform", "perspective"].indexOf(css2.willChange) !== -1 || isFirefox && css2.willChange === "filter" || isFirefox && css2.filter && css2.filter !== "none") {
          return currentNode;
        } else {
          currentNode = currentNode.parentNode;
        }
      }
      return null;
    }
    function getOffsetParent(element) {
      var window2 = getWindow(element);
      var offsetParent = getTrueOffsetParent(element);
      while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static") {
        offsetParent = getTrueOffsetParent(offsetParent);
      }
      if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static")) {
        return window2;
      }
      return offsetParent || getContainingBlock(element) || window2;
    }
    var top = "top";
    var bottom = "bottom";
    var right = "right";
    var left = "left";
    var auto = "auto";
    var basePlacements = [top, bottom, right, left];
    var start = "start";
    var end = "end";
    var clippingParents = "clippingParents";
    var viewport = "viewport";
    var popper = "popper";
    var reference = "reference";
    var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
      return acc.concat([placement + "-" + start, placement + "-" + end]);
    }, []);
    var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
      return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
    }, []);
    var beforeRead = "beforeRead";
    var read = "read";
    var afterRead = "afterRead";
    var beforeMain = "beforeMain";
    var main = "main";
    var afterMain = "afterMain";
    var beforeWrite = "beforeWrite";
    var write = "write";
    var afterWrite = "afterWrite";
    var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];
    function order(modifiers) {
      var map = /* @__PURE__ */ new Map();
      var visited = /* @__PURE__ */ new Set();
      var result = [];
      modifiers.forEach(function(modifier) {
        map.set(modifier.name, modifier);
      });
      function sort(modifier) {
        visited.add(modifier.name);
        var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
        requires.forEach(function(dep) {
          if (!visited.has(dep)) {
            var depModifier = map.get(dep);
            if (depModifier) {
              sort(depModifier);
            }
          }
        });
        result.push(modifier);
      }
      modifiers.forEach(function(modifier) {
        if (!visited.has(modifier.name)) {
          sort(modifier);
        }
      });
      return result;
    }
    function orderModifiers(modifiers) {
      var orderedModifiers = order(modifiers);
      return modifierPhases.reduce(function(acc, phase) {
        return acc.concat(orderedModifiers.filter(function(modifier) {
          return modifier.phase === phase;
        }));
      }, []);
    }
    function debounce(fn) {
      var pending;
      return function() {
        if (!pending) {
          pending = new Promise(function(resolve) {
            Promise.resolve().then(function() {
              pending = void 0;
              resolve(fn());
            });
          });
        }
        return pending;
      };
    }
    function mergeByName(modifiers) {
      var merged = modifiers.reduce(function(merged2, current) {
        var existing = merged2[current.name];
        merged2[current.name] = existing ? Object.assign({}, existing, current, {
          options: Object.assign({}, existing.options, current.options),
          data: Object.assign({}, existing.data, current.data)
        }) : current;
        return merged2;
      }, {});
      return Object.keys(merged).map(function(key) {
        return merged[key];
      });
    }
    function getViewportRect(element, strategy) {
      var win = getWindow(element);
      var html = getDocumentElement(element);
      var visualViewport = win.visualViewport;
      var width = html.clientWidth;
      var height = html.clientHeight;
      var x = 0;
      var y = 0;
      if (visualViewport) {
        width = visualViewport.width;
        height = visualViewport.height;
        var layoutViewport = isLayoutViewport();
        if (layoutViewport || !layoutViewport && strategy === "fixed") {
          x = visualViewport.offsetLeft;
          y = visualViewport.offsetTop;
        }
      }
      return {
        width,
        height,
        x: x + getWindowScrollBarX(element),
        y
      };
    }
    function getDocumentRect(element) {
      var _element$ownerDocumen;
      var html = getDocumentElement(element);
      var winScroll = getWindowScroll(element);
      var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
      var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
      var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
      var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
      var y = -winScroll.scrollTop;
      if (getComputedStyle(body || html).direction === "rtl") {
        x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
      }
      return {
        width,
        height,
        x,
        y
      };
    }
    function contains(parent, child) {
      var rootNode = child.getRootNode && child.getRootNode();
      if (parent.contains(child)) {
        return true;
      } else if (rootNode && isShadowRoot(rootNode)) {
        var next2 = child;
        do {
          if (next2 && parent.isSameNode(next2)) {
            return true;
          }
          next2 = next2.parentNode || next2.host;
        } while (next2);
      }
      return false;
    }
    function rectToClientRect(rect) {
      return Object.assign({}, rect, {
        left: rect.x,
        top: rect.y,
        right: rect.x + rect.width,
        bottom: rect.y + rect.height
      });
    }
    function getInnerBoundingClientRect(element, strategy) {
      var rect = getBoundingClientRect(element, false, strategy === "fixed");
      rect.top = rect.top + element.clientTop;
      rect.left = rect.left + element.clientLeft;
      rect.bottom = rect.top + element.clientHeight;
      rect.right = rect.left + element.clientWidth;
      rect.width = element.clientWidth;
      rect.height = element.clientHeight;
      rect.x = rect.left;
      rect.y = rect.top;
      return rect;
    }
    function getClientRectFromMixedType(element, clippingParent, strategy) {
      return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
    }
    function getClippingParents(element) {
      var clippingParents2 = listScrollParents(getParentNode(element));
      var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle(element).position) >= 0;
      var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
      if (!isElement(clipperElement)) {
        return [];
      }
      return clippingParents2.filter(function(clippingParent) {
        return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
      });
    }
    function getClippingRect(element, boundary, rootBoundary, strategy) {
      var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
      var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
      var firstClippingParent = clippingParents2[0];
      var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
        var rect = getClientRectFromMixedType(element, clippingParent, strategy);
        accRect.top = max(rect.top, accRect.top);
        accRect.right = min(rect.right, accRect.right);
        accRect.bottom = min(rect.bottom, accRect.bottom);
        accRect.left = max(rect.left, accRect.left);
        return accRect;
      }, getClientRectFromMixedType(element, firstClippingParent, strategy));
      clippingRect.width = clippingRect.right - clippingRect.left;
      clippingRect.height = clippingRect.bottom - clippingRect.top;
      clippingRect.x = clippingRect.left;
      clippingRect.y = clippingRect.top;
      return clippingRect;
    }
    function getBasePlacement(placement) {
      return placement.split("-")[0];
    }
    function getVariation(placement) {
      return placement.split("-")[1];
    }
    function getMainAxisFromPlacement(placement) {
      return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
    }
    function computeOffsets(_ref) {
      var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
      var basePlacement = placement ? getBasePlacement(placement) : null;
      var variation = placement ? getVariation(placement) : null;
      var commonX = reference2.x + reference2.width / 2 - element.width / 2;
      var commonY = reference2.y + reference2.height / 2 - element.height / 2;
      var offsets;
      switch (basePlacement) {
        case top:
          offsets = {
            x: commonX,
            y: reference2.y - element.height
          };
          break;
        case bottom:
          offsets = {
            x: commonX,
            y: reference2.y + reference2.height
          };
          break;
        case right:
          offsets = {
            x: reference2.x + reference2.width,
            y: commonY
          };
          break;
        case left:
          offsets = {
            x: reference2.x - element.width,
            y: commonY
          };
          break;
        default:
          offsets = {
            x: reference2.x,
            y: reference2.y
          };
      }
      var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
      if (mainAxis != null) {
        var len = mainAxis === "y" ? "height" : "width";
        switch (variation) {
          case start:
            offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
            break;
          case end:
            offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
            break;
        }
      }
      return offsets;
    }
    function getFreshSideObject() {
      return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }
    function mergePaddingObject(paddingObject) {
      return Object.assign({}, getFreshSideObject(), paddingObject);
    }
    function expandToHashMap(value, keys) {
      return keys.reduce(function(hashMap, key) {
        hashMap[key] = value;
        return hashMap;
      }, {});
    }
    function detectOverflow(state, options) {
      if (options === void 0) {
        options = {};
      }
      var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
      var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
      var altContext = elementContext === popper ? reference : popper;
      var popperRect = state.rects.popper;
      var element = state.elements[altBoundary ? altContext : elementContext];
      var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
      var referenceClientRect = getBoundingClientRect(state.elements.reference);
      var popperOffsets2 = computeOffsets({
        reference: referenceClientRect,
        element: popperRect,
        strategy: "absolute",
        placement
      });
      var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
      var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
      var overflowOffsets = {
        top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
        bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
        left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
        right: elementClientRect.right - clippingClientRect.right + paddingObject.right
      };
      var offsetData = state.modifiersData.offset;
      if (elementContext === popper && offsetData) {
        var offset2 = offsetData[placement];
        Object.keys(overflowOffsets).forEach(function(key) {
          var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
          var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
          overflowOffsets[key] += offset2[axis] * multiply;
        });
      }
      return overflowOffsets;
    }
    var DEFAULT_OPTIONS = {
      placement: "bottom",
      modifiers: [],
      strategy: "absolute"
    };
    function areValidElements() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return !args.some(function(element) {
        return !(element && typeof element.getBoundingClientRect === "function");
      });
    }
    function popperGenerator(generatorOptions) {
      if (generatorOptions === void 0) {
        generatorOptions = {};
      }
      var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
      return function createPopper2(reference2, popper2, options) {
        if (options === void 0) {
          options = defaultOptions;
        }
        var state = {
          placement: "bottom",
          orderedModifiers: [],
          options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
          modifiersData: {},
          elements: {
            reference: reference2,
            popper: popper2
          },
          attributes: {},
          styles: {}
        };
        var effectCleanupFns = [];
        var isDestroyed = false;
        var instance = {
          state,
          setOptions: function setOptions(setOptionsAction) {
            var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
            cleanupModifierEffects();
            state.options = Object.assign({}, defaultOptions, state.options, options2);
            state.scrollParents = {
              reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
              popper: listScrollParents(popper2)
            };
            var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
            state.orderedModifiers = orderedModifiers.filter(function(m) {
              return m.enabled;
            });
            runModifierEffects();
            return instance.update();
          },
          // Sync update – it will always be executed, even if not necessary. This
          // is useful for low frequency updates where sync behavior simplifies the
          // logic.
          // For high frequency updates (e.g. `resize` and `scroll` events), always
          // prefer the async Popper#update method
          forceUpdate: function forceUpdate() {
            if (isDestroyed) {
              return;
            }
            var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
            if (!areValidElements(reference3, popper3)) {
              return;
            }
            state.rects = {
              reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
              popper: getLayoutRect(popper3)
            };
            state.reset = false;
            state.placement = state.options.placement;
            state.orderedModifiers.forEach(function(modifier) {
              return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
            });
            for (var index = 0; index < state.orderedModifiers.length; index++) {
              if (state.reset === true) {
                state.reset = false;
                index = -1;
                continue;
              }
              var _state$orderedModifie = state.orderedModifiers[index], fn = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
              if (typeof fn === "function") {
                state = fn({
                  state,
                  options: _options,
                  name,
                  instance
                }) || state;
              }
            }
          },
          // Async and optimistically optimized update – it will not be executed if
          // not necessary (debounced to run at most once-per-tick)
          update: debounce(function() {
            return new Promise(function(resolve) {
              instance.forceUpdate();
              resolve(state);
            });
          }),
          destroy: function destroy() {
            cleanupModifierEffects();
            isDestroyed = true;
          }
        };
        if (!areValidElements(reference2, popper2)) {
          return instance;
        }
        instance.setOptions(options).then(function(state2) {
          if (!isDestroyed && options.onFirstUpdate) {
            options.onFirstUpdate(state2);
          }
        });
        function runModifierEffects() {
          state.orderedModifiers.forEach(function(_ref) {
            var name = _ref.name, _ref$options = _ref.options, options2 = _ref$options === void 0 ? {} : _ref$options, effect2 = _ref.effect;
            if (typeof effect2 === "function") {
              var cleanupFn = effect2({
                state,
                name,
                instance,
                options: options2
              });
              var noopFn = function noopFn2() {
              };
              effectCleanupFns.push(cleanupFn || noopFn);
            }
          });
        }
        function cleanupModifierEffects() {
          effectCleanupFns.forEach(function(fn) {
            return fn();
          });
          effectCleanupFns = [];
        }
        return instance;
      };
    }
    var passive = {
      passive: true
    };
    function effect$2(_ref) {
      var state = _ref.state, instance = _ref.instance, options = _ref.options;
      var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
      var window2 = getWindow(state.elements.popper);
      var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
      if (scroll) {
        scrollParents.forEach(function(scrollParent) {
          scrollParent.addEventListener("scroll", instance.update, passive);
        });
      }
      if (resize) {
        window2.addEventListener("resize", instance.update, passive);
      }
      return function() {
        if (scroll) {
          scrollParents.forEach(function(scrollParent) {
            scrollParent.removeEventListener("scroll", instance.update, passive);
          });
        }
        if (resize) {
          window2.removeEventListener("resize", instance.update, passive);
        }
      };
    }
    var eventListeners = {
      name: "eventListeners",
      enabled: true,
      phase: "write",
      fn: function fn() {
      },
      effect: effect$2,
      data: {}
    };
    function popperOffsets(_ref) {
      var state = _ref.state, name = _ref.name;
      state.modifiersData[name] = computeOffsets({
        reference: state.rects.reference,
        element: state.rects.popper,
        strategy: "absolute",
        placement: state.placement
      });
    }
    var popperOffsets$1 = {
      name: "popperOffsets",
      enabled: true,
      phase: "read",
      fn: popperOffsets,
      data: {}
    };
    var unsetSides = {
      top: "auto",
      right: "auto",
      bottom: "auto",
      left: "auto"
    };
    function roundOffsetsByDPR(_ref, win) {
      var x = _ref.x, y = _ref.y;
      var dpr = win.devicePixelRatio || 1;
      return {
        x: round(x * dpr) / dpr || 0,
        y: round(y * dpr) / dpr || 0
      };
    }
    function mapToStyles(_ref2) {
      var _Object$assign2;
      var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position2 = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
      var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
      var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
        x,
        y
      }) : {
        x,
        y
      };
      x = _ref3.x;
      y = _ref3.y;
      var hasX = offsets.hasOwnProperty("x");
      var hasY = offsets.hasOwnProperty("y");
      var sideX = left;
      var sideY = top;
      var win = window;
      if (adaptive) {
        var offsetParent = getOffsetParent(popper2);
        var heightProp = "clientHeight";
        var widthProp = "clientWidth";
        if (offsetParent === getWindow(popper2)) {
          offsetParent = getDocumentElement(popper2);
          if (getComputedStyle(offsetParent).position !== "static" && position2 === "absolute") {
            heightProp = "scrollHeight";
            widthProp = "scrollWidth";
          }
        }
        offsetParent = offsetParent;
        if (placement === top || (placement === left || placement === right) && variation === end) {
          sideY = bottom;
          var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : (
            // $FlowFixMe[prop-missing]
            offsetParent[heightProp]
          );
          y -= offsetY - popperRect.height;
          y *= gpuAcceleration ? 1 : -1;
        }
        if (placement === left || (placement === top || placement === bottom) && variation === end) {
          sideX = right;
          var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : (
            // $FlowFixMe[prop-missing]
            offsetParent[widthProp]
          );
          x -= offsetX - popperRect.width;
          x *= gpuAcceleration ? 1 : -1;
        }
      }
      var commonStyles = Object.assign({
        position: position2
      }, adaptive && unsetSides);
      var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
        x,
        y
      }, getWindow(popper2)) : {
        x,
        y
      };
      x = _ref4.x;
      y = _ref4.y;
      if (gpuAcceleration) {
        var _Object$assign;
        return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
      }
      return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
    }
    function computeStyles(_ref5) {
      var state = _ref5.state, options = _ref5.options;
      var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
      var commonStyles = {
        placement: getBasePlacement(state.placement),
        variation: getVariation(state.placement),
        popper: state.elements.popper,
        popperRect: state.rects.popper,
        gpuAcceleration,
        isFixed: state.options.strategy === "fixed"
      };
      if (state.modifiersData.popperOffsets != null) {
        state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
          offsets: state.modifiersData.popperOffsets,
          position: state.options.strategy,
          adaptive,
          roundOffsets
        })));
      }
      if (state.modifiersData.arrow != null) {
        state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
          offsets: state.modifiersData.arrow,
          position: "absolute",
          adaptive: false,
          roundOffsets
        })));
      }
      state.attributes.popper = Object.assign({}, state.attributes.popper, {
        "data-popper-placement": state.placement
      });
    }
    var computeStyles$1 = {
      name: "computeStyles",
      enabled: true,
      phase: "beforeWrite",
      fn: computeStyles,
      data: {}
    };
    function applyStyles(_ref) {
      var state = _ref.state;
      Object.keys(state.elements).forEach(function(name) {
        var style = state.styles[name] || {};
        var attributes = state.attributes[name] || {};
        var element = state.elements[name];
        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }
        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function(name2) {
          var value = attributes[name2];
          if (value === false) {
            element.removeAttribute(name2);
          } else {
            element.setAttribute(name2, value === true ? "" : value);
          }
        });
      });
    }
    function effect$1(_ref2) {
      var state = _ref2.state;
      var initialStyles = {
        popper: {
          position: state.options.strategy,
          left: "0",
          top: "0",
          margin: "0"
        },
        arrow: {
          position: "absolute"
        },
        reference: {}
      };
      Object.assign(state.elements.popper.style, initialStyles.popper);
      state.styles = initialStyles;
      if (state.elements.arrow) {
        Object.assign(state.elements.arrow.style, initialStyles.arrow);
      }
      return function() {
        Object.keys(state.elements).forEach(function(name) {
          var element = state.elements[name];
          var attributes = state.attributes[name] || {};
          var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
          var style = styleProperties.reduce(function(style2, property) {
            style2[property] = "";
            return style2;
          }, {});
          if (!isHTMLElement(element) || !getNodeName(element)) {
            return;
          }
          Object.assign(element.style, style);
          Object.keys(attributes).forEach(function(attribute) {
            element.removeAttribute(attribute);
          });
        });
      };
    }
    var applyStyles$1 = {
      name: "applyStyles",
      enabled: true,
      phase: "write",
      fn: applyStyles,
      effect: effect$1,
      requires: ["computeStyles"]
    };
    function distanceAndSkiddingToXY(placement, rects, offset2) {
      var basePlacement = getBasePlacement(placement);
      var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
      var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
        placement
      })) : offset2, skidding = _ref[0], distance = _ref[1];
      skidding = skidding || 0;
      distance = (distance || 0) * invertDistance;
      return [left, right].indexOf(basePlacement) >= 0 ? {
        x: distance,
        y: skidding
      } : {
        x: skidding,
        y: distance
      };
    }
    function offset(_ref2) {
      var state = _ref2.state, options = _ref2.options, name = _ref2.name;
      var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
      var data = placements.reduce(function(acc, placement) {
        acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
        return acc;
      }, {});
      var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
      if (state.modifiersData.popperOffsets != null) {
        state.modifiersData.popperOffsets.x += x;
        state.modifiersData.popperOffsets.y += y;
      }
      state.modifiersData[name] = data;
    }
    var offset$1 = {
      name: "offset",
      enabled: true,
      phase: "main",
      requires: ["popperOffsets"],
      fn: offset
    };
    var hash$1 = {
      left: "right",
      right: "left",
      bottom: "top",
      top: "bottom"
    };
    function getOppositePlacement(placement) {
      return placement.replace(/left|right|bottom|top/g, function(matched) {
        return hash$1[matched];
      });
    }
    var hash2 = {
      start: "end",
      end: "start"
    };
    function getOppositeVariationPlacement(placement) {
      return placement.replace(/start|end/g, function(matched) {
        return hash2[matched];
      });
    }
    function computeAutoPlacement(state, options) {
      if (options === void 0) {
        options = {};
      }
      var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
      var variation = getVariation(placement);
      var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
        return getVariation(placement2) === variation;
      }) : basePlacements;
      var allowedPlacements = placements$1.filter(function(placement2) {
        return allowedAutoPlacements.indexOf(placement2) >= 0;
      });
      if (allowedPlacements.length === 0) {
        allowedPlacements = placements$1;
      }
      var overflows = allowedPlacements.reduce(function(acc, placement2) {
        acc[placement2] = detectOverflow(state, {
          placement: placement2,
          boundary,
          rootBoundary,
          padding
        })[getBasePlacement(placement2)];
        return acc;
      }, {});
      return Object.keys(overflows).sort(function(a, b) {
        return overflows[a] - overflows[b];
      });
    }
    function getExpandedFallbackPlacements(placement) {
      if (getBasePlacement(placement) === auto) {
        return [];
      }
      var oppositePlacement = getOppositePlacement(placement);
      return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
    }
    function flip(_ref) {
      var state = _ref.state, options = _ref.options, name = _ref.name;
      if (state.modifiersData[name]._skip) {
        return;
      }
      var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
      var preferredPlacement = state.options.placement;
      var basePlacement = getBasePlacement(preferredPlacement);
      var isBasePlacement = basePlacement === preferredPlacement;
      var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
      var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
        return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
          placement: placement2,
          boundary,
          rootBoundary,
          padding,
          flipVariations,
          allowedAutoPlacements
        }) : placement2);
      }, []);
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var checksMap = /* @__PURE__ */ new Map();
      var makeFallbackChecks = true;
      var firstFittingPlacement = placements2[0];
      for (var i = 0; i < placements2.length; i++) {
        var placement = placements2[i];
        var _basePlacement = getBasePlacement(placement);
        var isStartVariation = getVariation(placement) === start;
        var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
        var len = isVertical ? "width" : "height";
        var overflow = detectOverflow(state, {
          placement,
          boundary,
          rootBoundary,
          altBoundary,
          padding
        });
        var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
        if (referenceRect[len] > popperRect[len]) {
          mainVariationSide = getOppositePlacement(mainVariationSide);
        }
        var altVariationSide = getOppositePlacement(mainVariationSide);
        var checks = [];
        if (checkMainAxis) {
          checks.push(overflow[_basePlacement] <= 0);
        }
        if (checkAltAxis) {
          checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
        }
        if (checks.every(function(check) {
          return check;
        })) {
          firstFittingPlacement = placement;
          makeFallbackChecks = false;
          break;
        }
        checksMap.set(placement, checks);
      }
      if (makeFallbackChecks) {
        var numberOfChecks = flipVariations ? 3 : 1;
        var _loop = function _loop2(_i2) {
          var fittingPlacement = placements2.find(function(placement2) {
            var checks2 = checksMap.get(placement2);
            if (checks2) {
              return checks2.slice(0, _i2).every(function(check) {
                return check;
              });
            }
          });
          if (fittingPlacement) {
            firstFittingPlacement = fittingPlacement;
            return "break";
          }
        };
        for (var _i = numberOfChecks; _i > 0; _i--) {
          var _ret = _loop(_i);
          if (_ret === "break") break;
        }
      }
      if (state.placement !== firstFittingPlacement) {
        state.modifiersData[name]._skip = true;
        state.placement = firstFittingPlacement;
        state.reset = true;
      }
    }
    var flip$1 = {
      name: "flip",
      enabled: true,
      phase: "main",
      fn: flip,
      requiresIfExists: ["offset"],
      data: {
        _skip: false
      }
    };
    function getAltAxis(axis) {
      return axis === "x" ? "y" : "x";
    }
    function within(min$1, value, max$1) {
      return max(min$1, min(value, max$1));
    }
    function withinMaxClamp(min2, value, max2) {
      var v = within(min2, value, max2);
      return v > max2 ? max2 : v;
    }
    function preventOverflow(_ref) {
      var state = _ref.state, options = _ref.options, name = _ref.name;
      var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
      var overflow = detectOverflow(state, {
        boundary,
        rootBoundary,
        padding,
        altBoundary
      });
      var basePlacement = getBasePlacement(state.placement);
      var variation = getVariation(state.placement);
      var isBasePlacement = !variation;
      var mainAxis = getMainAxisFromPlacement(basePlacement);
      var altAxis = getAltAxis(mainAxis);
      var popperOffsets2 = state.modifiersData.popperOffsets;
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
        placement: state.placement
      })) : tetherOffset;
      var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
        mainAxis: tetherOffsetValue,
        altAxis: tetherOffsetValue
      } : Object.assign({
        mainAxis: 0,
        altAxis: 0
      }, tetherOffsetValue);
      var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
      var data = {
        x: 0,
        y: 0
      };
      if (!popperOffsets2) {
        return;
      }
      if (checkMainAxis) {
        var _offsetModifierState$;
        var mainSide = mainAxis === "y" ? top : left;
        var altSide = mainAxis === "y" ? bottom : right;
        var len = mainAxis === "y" ? "height" : "width";
        var offset2 = popperOffsets2[mainAxis];
        var min$1 = offset2 + overflow[mainSide];
        var max$1 = offset2 - overflow[altSide];
        var additive = tether ? -popperRect[len] / 2 : 0;
        var minLen = variation === start ? referenceRect[len] : popperRect[len];
        var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
        var arrowElement = state.elements.arrow;
        var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
          width: 0,
          height: 0
        };
        var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
        var arrowPaddingMin = arrowPaddingObject[mainSide];
        var arrowPaddingMax = arrowPaddingObject[altSide];
        var arrowLen = within(0, referenceRect[len], arrowRect[len]);
        var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
        var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
        var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
        var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
        var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
        var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
        var tetherMax = offset2 + maxOffset - offsetModifierValue;
        var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset2, tether ? max(max$1, tetherMax) : max$1);
        popperOffsets2[mainAxis] = preventedOffset;
        data[mainAxis] = preventedOffset - offset2;
      }
      if (checkAltAxis) {
        var _offsetModifierState$2;
        var _mainSide = mainAxis === "x" ? top : left;
        var _altSide = mainAxis === "x" ? bottom : right;
        var _offset = popperOffsets2[altAxis];
        var _len = altAxis === "y" ? "height" : "width";
        var _min = _offset + overflow[_mainSide];
        var _max = _offset - overflow[_altSide];
        var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
        var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
        var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
        var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
        var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
        popperOffsets2[altAxis] = _preventedOffset;
        data[altAxis] = _preventedOffset - _offset;
      }
      state.modifiersData[name] = data;
    }
    var preventOverflow$1 = {
      name: "preventOverflow",
      enabled: true,
      phase: "main",
      fn: preventOverflow,
      requiresIfExists: ["offset"]
    };
    var toPaddingObject = function toPaddingObject2(padding, state) {
      padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
        placement: state.placement
      })) : padding;
      return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
    };
    function arrow(_ref) {
      var _state$modifiersData$;
      var state = _ref.state, name = _ref.name, options = _ref.options;
      var arrowElement = state.elements.arrow;
      var popperOffsets2 = state.modifiersData.popperOffsets;
      var basePlacement = getBasePlacement(state.placement);
      var axis = getMainAxisFromPlacement(basePlacement);
      var isVertical = [left, right].indexOf(basePlacement) >= 0;
      var len = isVertical ? "height" : "width";
      if (!arrowElement || !popperOffsets2) {
        return;
      }
      var paddingObject = toPaddingObject(options.padding, state);
      var arrowRect = getLayoutRect(arrowElement);
      var minProp = axis === "y" ? top : left;
      var maxProp = axis === "y" ? bottom : right;
      var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
      var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
      var arrowOffsetParent = getOffsetParent(arrowElement);
      var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
      var centerToReference = endDiff / 2 - startDiff / 2;
      var min2 = paddingObject[minProp];
      var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
      var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
      var offset2 = within(min2, center, max2);
      var axisProp = axis;
      state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
    }
    function effect(_ref2) {
      var state = _ref2.state, options = _ref2.options;
      var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
      if (arrowElement == null) {
        return;
      }
      if (typeof arrowElement === "string") {
        arrowElement = state.elements.popper.querySelector(arrowElement);
        if (!arrowElement) {
          return;
        }
      }
      if (!contains(state.elements.popper, arrowElement)) {
        return;
      }
      state.elements.arrow = arrowElement;
    }
    var arrow$1 = {
      name: "arrow",
      enabled: true,
      phase: "main",
      fn: arrow,
      effect,
      requires: ["popperOffsets"],
      requiresIfExists: ["preventOverflow"]
    };
    function getSideOffsets(overflow, rect, preventedOffsets) {
      if (preventedOffsets === void 0) {
        preventedOffsets = {
          x: 0,
          y: 0
        };
      }
      return {
        top: overflow.top - rect.height - preventedOffsets.y,
        right: overflow.right - rect.width + preventedOffsets.x,
        bottom: overflow.bottom - rect.height + preventedOffsets.y,
        left: overflow.left - rect.width - preventedOffsets.x
      };
    }
    function isAnySideFullyClipped(overflow) {
      return [top, right, bottom, left].some(function(side) {
        return overflow[side] >= 0;
      });
    }
    function hide(_ref) {
      var state = _ref.state, name = _ref.name;
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var preventedOffsets = state.modifiersData.preventOverflow;
      var referenceOverflow = detectOverflow(state, {
        elementContext: "reference"
      });
      var popperAltOverflow = detectOverflow(state, {
        altBoundary: true
      });
      var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
      var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
      var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
      var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
      state.modifiersData[name] = {
        referenceClippingOffsets,
        popperEscapeOffsets,
        isReferenceHidden,
        hasPopperEscaped
      };
      state.attributes.popper = Object.assign({}, state.attributes.popper, {
        "data-popper-reference-hidden": isReferenceHidden,
        "data-popper-escaped": hasPopperEscaped
      });
    }
    var hide$1 = {
      name: "hide",
      enabled: true,
      phase: "main",
      requiresIfExists: ["preventOverflow"],
      fn: hide
    };
    var defaultModifiers$1 = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1];
    var createPopper$1 = /* @__PURE__ */ popperGenerator({
      defaultModifiers: defaultModifiers$1
    });
    var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
    var createPopper = /* @__PURE__ */ popperGenerator({
      defaultModifiers
    });
    exports2.applyStyles = applyStyles$1;
    exports2.arrow = arrow$1;
    exports2.computeStyles = computeStyles$1;
    exports2.createPopper = createPopper;
    exports2.createPopperLite = createPopper$1;
    exports2.defaultModifiers = defaultModifiers;
    exports2.detectOverflow = detectOverflow;
    exports2.eventListeners = eventListeners;
    exports2.flip = flip$1;
    exports2.hide = hide$1;
    exports2.offset = offset$1;
    exports2.popperGenerator = popperGenerator;
    exports2.popperOffsets = popperOffsets$1;
    exports2.preventOverflow = preventOverflow$1;
  }
});

// node_modules/@mui/material/node/Portal/Portal.js
var require_Portal = __commonJS({
  "node_modules/@mui/material/node/Portal/Portal.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var ReactDOM2 = _interopRequireWildcard(require_react_dom());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _utils = require_utils();
    function getContainer(container) {
      return typeof container === "function" ? container() : container;
    }
    var Portal = /* @__PURE__ */ React7.forwardRef(function Portal2(props, forwardedRef) {
      const {
        children,
        container,
        disablePortal = false
      } = props;
      const [mountNode, setMountNode] = React7.useState(null);
      const handleRef = (0, _utils.unstable_useForkRef)(/* @__PURE__ */ React7.isValidElement(children) ? (0, _utils.unstable_getReactElementRef)(children) : null, forwardedRef);
      (0, _utils.unstable_useEnhancedEffect)(() => {
        if (!disablePortal) {
          setMountNode(getContainer(container) || document.body);
        }
      }, [container, disablePortal]);
      (0, _utils.unstable_useEnhancedEffect)(() => {
        if (mountNode && !disablePortal) {
          (0, _utils.unstable_setRef)(forwardedRef, mountNode);
          return () => {
            (0, _utils.unstable_setRef)(forwardedRef, null);
          };
        }
        return void 0;
      }, [forwardedRef, mountNode, disablePortal]);
      if (disablePortal) {
        if (/* @__PURE__ */ React7.isValidElement(children)) {
          const newProps = {
            ref: handleRef
          };
          return /* @__PURE__ */ React7.cloneElement(children, newProps);
        }
        return children;
      }
      return mountNode ? /* @__PURE__ */ ReactDOM2.createPortal(children, mountNode) : mountNode;
    });
    define_process_env_default.NODE_ENV !== "production" ? Portal.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * The children to render into the `container`.
       */
      children: _propTypes.default.node,
      /**
       * An HTML element or function that returns one.
       * The `container` will have the portal children appended to it.
       *
       * You can also provide a callback, which is called in a React layout effect.
       * This lets you set the container from a ref, and also makes server-side rendering possible.
       *
       * By default, it uses the body of the top-level document object,
       * so it's simply `document.body` most of the time.
       */
      container: _propTypes.default.oneOfType([_utils.HTMLElementType, _propTypes.default.func]),
      /**
       * The `children` will be under the DOM hierarchy of the parent component.
       * @default false
       */
      disablePortal: _propTypes.default.bool
    } : void 0;
    if (define_process_env_default.NODE_ENV !== "production") {
      Portal["propTypes"] = (0, _utils.exactProp)(Portal.propTypes);
    }
    var _default = exports2.default = Portal;
  }
});

// node_modules/@mui/material/node/Portal/index.js
var require_Portal2 = __commonJS({
  "node_modules/@mui/material/node/Portal/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _Portal.default;
      }
    });
    var _Portal = _interopRequireDefault(require_Portal());
  }
});

// node_modules/@mui/material/node/Popper/popperClasses.js
var require_popperClasses = __commonJS({
  "node_modules/@mui/material/node/Popper/popperClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getPopperUtilityClass = getPopperUtilityClass;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    function getPopperUtilityClass(slot) {
      return (0, _generateUtilityClass.default)("MuiPopper", slot);
    }
    var popperClasses = (0, _generateUtilityClasses.default)("MuiPopper", ["root"]);
    var _default = exports2.default = popperClasses;
  }
});

// node_modules/@mui/material/node/Popper/BasePopper.js
var require_BasePopper = __commonJS({
  "node_modules/@mui/material/node/Popper/BasePopper.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _core = require_popper();
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _useSlotProps = _interopRequireDefault(require_useSlotProps2());
    var _Portal = _interopRequireDefault(require_Portal2());
    var _popperClasses = require_popperClasses();
    var _jsxRuntime = require_jsx_runtime();
    function flipPlacement(placement, direction) {
      if (direction === "ltr") {
        return placement;
      }
      switch (placement) {
        case "bottom-end":
          return "bottom-start";
        case "bottom-start":
          return "bottom-end";
        case "top-end":
          return "top-start";
        case "top-start":
          return "top-end";
        default:
          return placement;
      }
    }
    function resolveAnchorEl(anchorEl) {
      return typeof anchorEl === "function" ? anchorEl() : anchorEl;
    }
    function isHTMLElement(element) {
      return element.nodeType !== void 0;
    }
    function isVirtualElement(element) {
      return !isHTMLElement(element);
    }
    var useUtilityClasses = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"]
      };
      return (0, _composeClasses.default)(slots, _popperClasses.getPopperUtilityClass, classes);
    };
    var defaultPopperOptions = {};
    var PopperTooltip = /* @__PURE__ */ React7.forwardRef(function PopperTooltip2(props, forwardedRef) {
      const {
        anchorEl,
        children,
        direction,
        disablePortal,
        modifiers,
        open,
        placement: initialPlacement,
        popperOptions,
        popperRef: popperRefProp,
        slotProps = {},
        slots = {},
        TransitionProps,
        // @ts-ignore internal logic
        ownerState: ownerStateProp,
        // prevent from spreading to DOM, it can come from the parent component e.g. Select.
        ...other
      } = props;
      const tooltipRef = React7.useRef(null);
      const ownRef = (0, _utils.unstable_useForkRef)(tooltipRef, forwardedRef);
      const popperRef = React7.useRef(null);
      const handlePopperRef = (0, _utils.unstable_useForkRef)(popperRef, popperRefProp);
      const handlePopperRefRef = React7.useRef(handlePopperRef);
      (0, _utils.unstable_useEnhancedEffect)(() => {
        handlePopperRefRef.current = handlePopperRef;
      }, [handlePopperRef]);
      React7.useImperativeHandle(popperRefProp, () => popperRef.current, []);
      const rtlPlacement = flipPlacement(initialPlacement, direction);
      const [placement, setPlacement] = React7.useState(rtlPlacement);
      const [resolvedAnchorElement, setResolvedAnchorElement] = React7.useState(resolveAnchorEl(anchorEl));
      React7.useEffect(() => {
        if (popperRef.current) {
          popperRef.current.forceUpdate();
        }
      });
      React7.useEffect(() => {
        if (anchorEl) {
          setResolvedAnchorElement(resolveAnchorEl(anchorEl));
        }
      }, [anchorEl]);
      (0, _utils.unstable_useEnhancedEffect)(() => {
        if (!resolvedAnchorElement || !open) {
          return void 0;
        }
        const handlePopperUpdate = (data) => {
          setPlacement(data.placement);
        };
        if (define_process_env_default.NODE_ENV !== "production") {
          if (resolvedAnchorElement && isHTMLElement(resolvedAnchorElement) && resolvedAnchorElement.nodeType === 1) {
            const box = resolvedAnchorElement.getBoundingClientRect();
            if (define_process_env_default.NODE_ENV !== "test" && box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
              console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
            }
          }
        }
        let popperModifiers = [{
          name: "preventOverflow",
          options: {
            altBoundary: disablePortal
          }
        }, {
          name: "flip",
          options: {
            altBoundary: disablePortal
          }
        }, {
          name: "onUpdate",
          enabled: true,
          phase: "afterWrite",
          fn: ({
            state
          }) => {
            handlePopperUpdate(state);
          }
        }];
        if (modifiers != null) {
          popperModifiers = popperModifiers.concat(modifiers);
        }
        if (popperOptions && popperOptions.modifiers != null) {
          popperModifiers = popperModifiers.concat(popperOptions.modifiers);
        }
        const popper = (0, _core.createPopper)(resolvedAnchorElement, tooltipRef.current, {
          placement: rtlPlacement,
          ...popperOptions,
          modifiers: popperModifiers
        });
        handlePopperRefRef.current(popper);
        return () => {
          popper.destroy();
          handlePopperRefRef.current(null);
        };
      }, [resolvedAnchorElement, disablePortal, modifiers, open, popperOptions, rtlPlacement]);
      const childProps = {
        placement
      };
      if (TransitionProps !== null) {
        childProps.TransitionProps = TransitionProps;
      }
      const classes = useUtilityClasses(props);
      const Root = slots.root ?? "div";
      const rootProps = (0, _useSlotProps.default)({
        elementType: Root,
        externalSlotProps: slotProps.root,
        externalForwardedProps: other,
        additionalProps: {
          role: "tooltip",
          ref: ownRef
        },
        ownerState: props,
        className: classes.root
      });
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(Root, {
        ...rootProps,
        children: typeof children === "function" ? children(childProps) : children
      });
    });
    var Popper = /* @__PURE__ */ React7.forwardRef(function Popper2(props, forwardedRef) {
      const {
        anchorEl,
        children,
        container: containerProp,
        direction = "ltr",
        disablePortal = false,
        keepMounted = false,
        modifiers,
        open,
        placement = "bottom",
        popperOptions = defaultPopperOptions,
        popperRef,
        style,
        transition = false,
        slotProps = {},
        slots = {},
        ...other
      } = props;
      const [exited, setExited] = React7.useState(true);
      const handleEnter = () => {
        setExited(false);
      };
      const handleExited = () => {
        setExited(true);
      };
      if (!keepMounted && !open && (!transition || exited)) {
        return null;
      }
      let container;
      if (containerProp) {
        container = containerProp;
      } else if (anchorEl) {
        const resolvedAnchorEl = resolveAnchorEl(anchorEl);
        container = resolvedAnchorEl && isHTMLElement(resolvedAnchorEl) ? (0, _utils.unstable_ownerDocument)(resolvedAnchorEl).body : (0, _utils.unstable_ownerDocument)(null).body;
      }
      const display = !open && keepMounted && (!transition || exited) ? "none" : void 0;
      const transitionProps = transition ? {
        in: open,
        onEnter: handleEnter,
        onExited: handleExited
      } : void 0;
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_Portal.default, {
        disablePortal,
        container,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(PopperTooltip, {
          anchorEl,
          direction,
          disablePortal,
          modifiers,
          ref: forwardedRef,
          open: transition ? !exited : open,
          placement,
          popperOptions,
          popperRef,
          slotProps,
          slots,
          ...other,
          style: {
            // Prevents scroll issue, waiting for Popper.js to add this style once initiated.
            position: "fixed",
            // Fix Popper.js display issue
            top: 0,
            left: 0,
            display,
            ...style
          },
          TransitionProps: transitionProps,
          children
        })
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? Popper.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
       * or a function that returns either.
       * It's used to set the position of the popper.
       * The return value will passed as the reference object of the Popper instance.
       */
      anchorEl: (0, _utils.chainPropTypes)(_propTypes.default.oneOfType([_utils.HTMLElementType, _propTypes.default.object, _propTypes.default.func]), (props) => {
        if (props.open) {
          const resolvedAnchorEl = resolveAnchorEl(props.anchorEl);
          if (resolvedAnchorEl && isHTMLElement(resolvedAnchorEl) && resolvedAnchorEl.nodeType === 1) {
            const box = resolvedAnchorEl.getBoundingClientRect();
            if (define_process_env_default.NODE_ENV !== "test" && box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
              return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
            }
          } else if (!resolvedAnchorEl || typeof resolvedAnchorEl.getBoundingClientRect !== "function" || isVirtualElement(resolvedAnchorEl) && resolvedAnchorEl.contextElement != null && resolvedAnchorEl.contextElement.nodeType !== 1) {
            return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "It should be an HTML element instance or a virtualElement ", "(https://popper.js.org/docs/v2/virtual-elements/)."].join("\n"));
          }
        }
        return null;
      }),
      /**
       * Popper render function or node.
       */
      children: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
      /**
       * An HTML element or function that returns one.
       * The `container` will have the portal children appended to it.
       *
       * You can also provide a callback, which is called in a React layout effect.
       * This lets you set the container from a ref, and also makes server-side rendering possible.
       *
       * By default, it uses the body of the top-level document object,
       * so it's simply `document.body` most of the time.
       */
      container: _propTypes.default.oneOfType([_utils.HTMLElementType, _propTypes.default.func]),
      /**
       * Direction of the text.
       * @default 'ltr'
       */
      direction: _propTypes.default.oneOf(["ltr", "rtl"]),
      /**
       * The `children` will be under the DOM hierarchy of the parent component.
       * @default false
       */
      disablePortal: _propTypes.default.bool,
      /**
       * Always keep the children in the DOM.
       * This prop can be useful in SEO situation or
       * when you want to maximize the responsiveness of the Popper.
       * @default false
       */
      keepMounted: _propTypes.default.bool,
      /**
       * Popper.js is based on a "plugin-like" architecture,
       * most of its features are fully encapsulated "modifiers".
       *
       * A modifier is a function that is called each time Popper.js needs to
       * compute the position of the popper.
       * For this reason, modifiers should be very performant to avoid bottlenecks.
       * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
       */
      modifiers: _propTypes.default.arrayOf(_propTypes.default.shape({
        data: _propTypes.default.object,
        effect: _propTypes.default.func,
        enabled: _propTypes.default.bool,
        fn: _propTypes.default.func,
        name: _propTypes.default.any,
        options: _propTypes.default.object,
        phase: _propTypes.default.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
        requires: _propTypes.default.arrayOf(_propTypes.default.string),
        requiresIfExists: _propTypes.default.arrayOf(_propTypes.default.string)
      })),
      /**
       * If `true`, the component is shown.
       */
      open: _propTypes.default.bool.isRequired,
      /**
       * Popper placement.
       * @default 'bottom'
       */
      placement: _propTypes.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
      /**
       * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
       * @default {}
       */
      popperOptions: _propTypes.default.shape({
        modifiers: _propTypes.default.array,
        onFirstUpdate: _propTypes.default.func,
        placement: _propTypes.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
        strategy: _propTypes.default.oneOf(["absolute", "fixed"])
      }),
      /**
       * A ref that points to the used popper instance.
       */
      popperRef: _utils.refType,
      /**
       * The props used for each slot inside the Popper.
       * @default {}
       */
      slotProps: _propTypes.default.shape({
        root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
      }),
      /**
       * The components used for each slot inside the Popper.
       * Either a string to use a HTML element or a component.
       * @default {}
       */
      slots: _propTypes.default.shape({
        root: _propTypes.default.elementType
      }),
      /**
       * Help supporting a react-transition-group/Transition component.
       * @default false
       */
      transition: _propTypes.default.bool
    } : void 0;
    var _default = exports2.default = Popper;
  }
});

// node_modules/@mui/material/node/Popper/Popper.js
var require_Popper = __commonJS({
  "node_modules/@mui/material/node/Popper/Popper.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _RtlProvider = require_RtlProvider();
    var _refType = _interopRequireDefault(require_refType2());
    var _HTMLElementType = _interopRequireDefault(require_HTMLElementType2());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var React7 = _interopRequireWildcard(require_react());
    var _BasePopper = _interopRequireDefault(require_BasePopper());
    var _zeroStyled = require_zero_styled2();
    var _DefaultPropsProvider = require_DefaultPropsProvider4();
    var _jsxRuntime = require_jsx_runtime();
    var PopperRoot = (0, _zeroStyled.styled)(_BasePopper.default, {
      name: "MuiPopper",
      slot: "Root",
      overridesResolver: (props, styles) => styles.root
    })({});
    var Popper = /* @__PURE__ */ React7.forwardRef(function Popper2(inProps, ref) {
      const isRtl = (0, _RtlProvider.useRtl)();
      const props = (0, _DefaultPropsProvider.useDefaultProps)({
        props: inProps,
        name: "MuiPopper"
      });
      const {
        anchorEl,
        component,
        components,
        componentsProps,
        container,
        disablePortal,
        keepMounted,
        modifiers,
        open,
        placement,
        popperOptions,
        popperRef,
        transition,
        slots,
        slotProps,
        ...other
      } = props;
      const RootComponent = slots?.root ?? components?.Root;
      const otherProps = {
        anchorEl,
        container,
        disablePortal,
        keepMounted,
        modifiers,
        open,
        placement,
        popperOptions,
        popperRef,
        transition,
        ...other
      };
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(PopperRoot, {
        as: component,
        direction: isRtl ? "rtl" : "ltr",
        slots: {
          root: RootComponent
        },
        slotProps: slotProps ?? componentsProps,
        ...otherProps,
        ref
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? Popper.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
       * or a function that returns either.
       * It's used to set the position of the popper.
       * The return value will passed as the reference object of the Popper instance.
       */
      anchorEl: _propTypes.default.oneOfType([_HTMLElementType.default, _propTypes.default.object, _propTypes.default.func]),
      /**
       * Popper render function or node.
       */
      children: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: _propTypes.default.elementType,
      /**
       * The components used for each slot inside the Popper.
       * Either a string to use a HTML element or a component.
       *
       * @deprecated use the `slots` prop instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
       * @default {}
       */
      components: _propTypes.default.shape({
        Root: _propTypes.default.elementType
      }),
      /**
       * The props used for each slot inside the Popper.
       *
       * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
       * @default {}
       */
      componentsProps: _propTypes.default.shape({
        root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
      }),
      /**
       * An HTML element or function that returns one.
       * The `container` will have the portal children appended to it.
       *
       * You can also provide a callback, which is called in a React layout effect.
       * This lets you set the container from a ref, and also makes server-side rendering possible.
       *
       * By default, it uses the body of the top-level document object,
       * so it's simply `document.body` most of the time.
       */
      container: _propTypes.default.oneOfType([_HTMLElementType.default, _propTypes.default.func]),
      /**
       * The `children` will be under the DOM hierarchy of the parent component.
       * @default false
       */
      disablePortal: _propTypes.default.bool,
      /**
       * Always keep the children in the DOM.
       * This prop can be useful in SEO situation or
       * when you want to maximize the responsiveness of the Popper.
       * @default false
       */
      keepMounted: _propTypes.default.bool,
      /**
       * Popper.js is based on a "plugin-like" architecture,
       * most of its features are fully encapsulated "modifiers".
       *
       * A modifier is a function that is called each time Popper.js needs to
       * compute the position of the popper.
       * For this reason, modifiers should be very performant to avoid bottlenecks.
       * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
       */
      modifiers: _propTypes.default.arrayOf(_propTypes.default.shape({
        data: _propTypes.default.object,
        effect: _propTypes.default.func,
        enabled: _propTypes.default.bool,
        fn: _propTypes.default.func,
        name: _propTypes.default.any,
        options: _propTypes.default.object,
        phase: _propTypes.default.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
        requires: _propTypes.default.arrayOf(_propTypes.default.string),
        requiresIfExists: _propTypes.default.arrayOf(_propTypes.default.string)
      })),
      /**
       * If `true`, the component is shown.
       */
      open: _propTypes.default.bool.isRequired,
      /**
       * Popper placement.
       * @default 'bottom'
       */
      placement: _propTypes.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
      /**
       * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
       * @default {}
       */
      popperOptions: _propTypes.default.shape({
        modifiers: _propTypes.default.array,
        onFirstUpdate: _propTypes.default.func,
        placement: _propTypes.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
        strategy: _propTypes.default.oneOf(["absolute", "fixed"])
      }),
      /**
       * A ref that points to the used popper instance.
       */
      popperRef: _refType.default,
      /**
       * The props used for each slot inside the Popper.
       * @default {}
       */
      slotProps: _propTypes.default.shape({
        root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
      }),
      /**
       * The components used for each slot inside the Popper.
       * Either a string to use a HTML element or a component.
       * @default {}
       */
      slots: _propTypes.default.shape({
        root: _propTypes.default.elementType
      }),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
      /**
       * Help supporting a react-transition-group/Transition component.
       * @default false
       */
      transition: _propTypes.default.bool
    } : void 0;
    var _default = exports2.default = Popper;
  }
});

// node_modules/@mui/material/node/Popper/index.js
var require_Popper2 = __commonJS({
  "node_modules/@mui/material/node/Popper/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {};
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _Popper.default;
      }
    });
    var _Popper = _interopRequireDefault(require_Popper());
    var _popperClasses = require_popperClasses();
    Object.keys(_popperClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _popperClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _popperClasses[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node/ListSubheader/listSubheaderClasses.js
var require_listSubheaderClasses = __commonJS({
  "node_modules/@mui/material/node/ListSubheader/listSubheaderClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getListSubheaderUtilityClass = getListSubheaderUtilityClass;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    function getListSubheaderUtilityClass(slot) {
      return (0, _generateUtilityClass.default)("MuiListSubheader", slot);
    }
    var listSubheaderClasses = (0, _generateUtilityClasses.default)("MuiListSubheader", ["root", "colorPrimary", "colorInherit", "gutters", "inset", "sticky"]);
    var _default = exports2.default = listSubheaderClasses;
  }
});

// node_modules/@mui/material/node/ListSubheader/ListSubheader.js
var require_ListSubheader = __commonJS({
  "node_modules/@mui/material/node/ListSubheader/ListSubheader.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _clsx = _interopRequireDefault(require_clsx());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _zeroStyled = require_zero_styled2();
    var _memoTheme = _interopRequireDefault(require_memoTheme2());
    var _DefaultPropsProvider = require_DefaultPropsProvider4();
    var _capitalize = _interopRequireDefault(require_capitalize3());
    var _listSubheaderClasses = require_listSubheaderClasses();
    var _jsxRuntime = require_jsx_runtime();
    var useUtilityClasses = (ownerState) => {
      const {
        classes,
        color,
        disableGutters,
        inset,
        disableSticky
      } = ownerState;
      const slots = {
        root: ["root", color !== "default" && `color${(0, _capitalize.default)(color)}`, !disableGutters && "gutters", inset && "inset", !disableSticky && "sticky"]
      };
      return (0, _composeClasses.default)(slots, _listSubheaderClasses.getListSubheaderUtilityClass, classes);
    };
    var ListSubheaderRoot = (0, _zeroStyled.styled)("li", {
      name: "MuiListSubheader",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.color !== "default" && styles[`color${(0, _capitalize.default)(ownerState.color)}`], !ownerState.disableGutters && styles.gutters, ownerState.inset && styles.inset, !ownerState.disableSticky && styles.sticky];
      }
    })((0, _memoTheme.default)(({
      theme: theme2
    }) => ({
      boxSizing: "border-box",
      lineHeight: "48px",
      listStyle: "none",
      color: (theme2.vars || theme2).palette.text.secondary,
      fontFamily: theme2.typography.fontFamily,
      fontWeight: theme2.typography.fontWeightMedium,
      fontSize: theme2.typography.pxToRem(14),
      variants: [{
        props: {
          color: "primary"
        },
        style: {
          color: (theme2.vars || theme2).palette.primary.main
        }
      }, {
        props: {
          color: "inherit"
        },
        style: {
          color: "inherit"
        }
      }, {
        props: ({
          ownerState
        }) => !ownerState.disableGutters,
        style: {
          paddingLeft: 16,
          paddingRight: 16
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.inset,
        style: {
          paddingLeft: 72
        }
      }, {
        props: ({
          ownerState
        }) => !ownerState.disableSticky,
        style: {
          position: "sticky",
          top: 0,
          zIndex: 1,
          backgroundColor: (theme2.vars || theme2).palette.background.paper
        }
      }]
    })));
    var ListSubheader = /* @__PURE__ */ React7.forwardRef(function ListSubheader2(inProps, ref) {
      const props = (0, _DefaultPropsProvider.useDefaultProps)({
        props: inProps,
        name: "MuiListSubheader"
      });
      const {
        className,
        color = "default",
        component = "li",
        disableGutters = false,
        disableSticky = false,
        inset = false,
        ...other
      } = props;
      const ownerState = {
        ...props,
        color,
        component,
        disableGutters,
        disableSticky,
        inset
      };
      const classes = useUtilityClasses(ownerState);
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(ListSubheaderRoot, {
        as: component,
        className: (0, _clsx.default)(classes.root, className),
        ref,
        ownerState,
        ...other
      });
    });
    if (ListSubheader) {
      ListSubheader.muiSkipListHighlight = true;
    }
    define_process_env_default.NODE_ENV !== "production" ? ListSubheader.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * The content of the component.
       */
      children: _propTypes.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      /**
       * @ignore
       */
      className: _propTypes.default.string,
      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       * @default 'default'
       */
      color: _propTypes.default.oneOf(["default", "inherit", "primary"]),
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: _propTypes.default.elementType,
      /**
       * If `true`, the List Subheader will not have gutters.
       * @default false
       */
      disableGutters: _propTypes.default.bool,
      /**
       * If `true`, the List Subheader will not stick to the top during scroll.
       * @default false
       */
      disableSticky: _propTypes.default.bool,
      /**
       * If `true`, the List Subheader is indented.
       * @default false
       */
      inset: _propTypes.default.bool,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
    } : void 0;
    var _default = exports2.default = ListSubheader;
  }
});

// node_modules/@mui/material/node/ListSubheader/index.js
var require_ListSubheader2 = __commonJS({
  "node_modules/@mui/material/node/ListSubheader/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      listSubheaderClasses: true
    };
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _ListSubheader.default;
      }
    });
    Object.defineProperty(exports2, "listSubheaderClasses", {
      enumerable: true,
      get: function() {
        return _listSubheaderClasses.default;
      }
    });
    var _ListSubheader = _interopRequireDefault(require_ListSubheader());
    var _listSubheaderClasses = _interopRequireWildcard(require_listSubheaderClasses());
    Object.keys(_listSubheaderClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _listSubheaderClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _listSubheaderClasses[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node/Paper/paperClasses.js
var require_paperClasses = __commonJS({
  "node_modules/@mui/material/node/Paper/paperClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getPaperUtilityClass = getPaperUtilityClass;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    function getPaperUtilityClass(slot) {
      return (0, _generateUtilityClass.default)("MuiPaper", slot);
    }
    var paperClasses = (0, _generateUtilityClasses.default)("MuiPaper", ["root", "rounded", "outlined", "elevation", "elevation0", "elevation1", "elevation2", "elevation3", "elevation4", "elevation5", "elevation6", "elevation7", "elevation8", "elevation9", "elevation10", "elevation11", "elevation12", "elevation13", "elevation14", "elevation15", "elevation16", "elevation17", "elevation18", "elevation19", "elevation20", "elevation21", "elevation22", "elevation23", "elevation24"]);
    var _default = exports2.default = paperClasses;
  }
});

// node_modules/@mui/material/node/Paper/Paper.js
var require_Paper = __commonJS({
  "node_modules/@mui/material/node/Paper/Paper.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _clsx = _interopRequireDefault(require_clsx());
    var _integerPropType = _interopRequireDefault(require_integerPropType2());
    var _chainPropTypes = _interopRequireDefault(require_chainPropTypes2());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _colorManipulator = require_colorManipulator2();
    var _zeroStyled = require_zero_styled2();
    var _memoTheme = _interopRequireDefault(require_memoTheme2());
    var _DefaultPropsProvider = require_DefaultPropsProvider4();
    var _getOverlayAlpha = _interopRequireDefault(require_getOverlayAlpha());
    var _paperClasses = require_paperClasses();
    var _jsxRuntime = require_jsx_runtime();
    var useUtilityClasses = (ownerState) => {
      const {
        square,
        elevation,
        variant,
        classes
      } = ownerState;
      const slots = {
        root: ["root", variant, !square && "rounded", variant === "elevation" && `elevation${elevation}`]
      };
      return (0, _composeClasses.default)(slots, _paperClasses.getPaperUtilityClass, classes);
    };
    var PaperRoot = (0, _zeroStyled.styled)("div", {
      name: "MuiPaper",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, styles[ownerState.variant], !ownerState.square && styles.rounded, ownerState.variant === "elevation" && styles[`elevation${ownerState.elevation}`]];
      }
    })((0, _memoTheme.default)(({
      theme: theme2
    }) => ({
      backgroundColor: (theme2.vars || theme2).palette.background.paper,
      color: (theme2.vars || theme2).palette.text.primary,
      transition: theme2.transitions.create("box-shadow"),
      variants: [{
        props: ({
          ownerState
        }) => !ownerState.square,
        style: {
          borderRadius: theme2.shape.borderRadius
        }
      }, {
        props: {
          variant: "outlined"
        },
        style: {
          border: `1px solid ${(theme2.vars || theme2).palette.divider}`
        }
      }, {
        props: {
          variant: "elevation"
        },
        style: {
          boxShadow: "var(--Paper-shadow)",
          backgroundImage: "var(--Paper-overlay)"
        }
      }]
    })));
    var Paper = /* @__PURE__ */ React7.forwardRef(function Paper2(inProps, ref) {
      const props = (0, _DefaultPropsProvider.useDefaultProps)({
        props: inProps,
        name: "MuiPaper"
      });
      const theme2 = (0, _zeroStyled.useTheme)();
      const {
        className,
        component = "div",
        elevation = 1,
        square = false,
        variant = "elevation",
        ...other
      } = props;
      const ownerState = {
        ...props,
        component,
        elevation,
        square,
        variant
      };
      const classes = useUtilityClasses(ownerState);
      if (define_process_env_default.NODE_ENV !== "production") {
        if (theme2.shadows[elevation] === void 0) {
          console.error([`MUI: The elevation provided <Paper elevation={${elevation}}> is not available in the theme.`, `Please make sure that \`theme.shadows[${elevation}]\` is defined.`].join("\n"));
        }
      }
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(PaperRoot, {
        as: component,
        ownerState,
        className: (0, _clsx.default)(classes.root, className),
        ref,
        ...other,
        style: {
          ...variant === "elevation" && {
            "--Paper-shadow": (theme2.vars || theme2).shadows[elevation],
            ...theme2.vars && {
              "--Paper-overlay": theme2.vars.overlays?.[elevation]
            },
            ...!theme2.vars && theme2.palette.mode === "dark" && {
              "--Paper-overlay": `linear-gradient(${(0, _colorManipulator.alpha)("#fff", (0, _getOverlayAlpha.default)(elevation))}, ${(0, _colorManipulator.alpha)("#fff", (0, _getOverlayAlpha.default)(elevation))})`
            }
          },
          ...other.style
        }
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? Paper.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * The content of the component.
       */
      children: _propTypes.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      /**
       * @ignore
       */
      className: _propTypes.default.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: _propTypes.default.elementType,
      /**
       * Shadow depth, corresponds to `dp` in the spec.
       * It accepts values between 0 and 24 inclusive.
       * @default 1
       */
      elevation: (0, _chainPropTypes.default)(_integerPropType.default, (props) => {
        const {
          elevation,
          variant
        } = props;
        if (elevation > 0 && variant === "outlined") {
          return new Error(`MUI: Combining \`elevation={${elevation}}\` with \`variant="${variant}"\` has no effect. Either use \`elevation={0}\` or use a different \`variant\`.`);
        }
        return null;
      }),
      /**
       * If `true`, rounded corners are disabled.
       * @default false
       */
      square: _propTypes.default.bool,
      /**
       * @ignore
       */
      style: _propTypes.default.object,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
      /**
       * The variant to use.
       * @default 'elevation'
       */
      variant: _propTypes.default.oneOfType([_propTypes.default.oneOf(["elevation", "outlined"]), _propTypes.default.string])
    } : void 0;
    var _default = exports2.default = Paper;
  }
});

// node_modules/@mui/material/node/Paper/index.js
var require_Paper2 = __commonJS({
  "node_modules/@mui/material/node/Paper/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      paperClasses: true
    };
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _Paper.default;
      }
    });
    Object.defineProperty(exports2, "paperClasses", {
      enumerable: true,
      get: function() {
        return _paperClasses.default;
      }
    });
    var _Paper = _interopRequireDefault(require_Paper());
    var _paperClasses = _interopRequireWildcard(require_paperClasses());
    Object.keys(_paperClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _paperClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _paperClasses[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node/CircularProgress/circularProgressClasses.js
var require_circularProgressClasses = __commonJS({
  "node_modules/@mui/material/node/CircularProgress/circularProgressClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getCircularProgressUtilityClass = getCircularProgressUtilityClass;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    function getCircularProgressUtilityClass(slot) {
      return (0, _generateUtilityClass.default)("MuiCircularProgress", slot);
    }
    var circularProgressClasses = (0, _generateUtilityClasses.default)("MuiCircularProgress", ["root", "determinate", "indeterminate", "colorPrimary", "colorSecondary", "svg", "circle", "circleDeterminate", "circleIndeterminate", "circleDisableShrink"]);
    var _default = exports2.default = circularProgressClasses;
  }
});

// node_modules/@mui/material/node/CircularProgress/CircularProgress.js
var require_CircularProgress = __commonJS({
  "node_modules/@mui/material/node/CircularProgress/CircularProgress.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _clsx = _interopRequireDefault(require_clsx());
    var _chainPropTypes = _interopRequireDefault(require_chainPropTypes2());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _zeroStyled = require_zero_styled2();
    var _memoTheme = _interopRequireDefault(require_memoTheme2());
    var _DefaultPropsProvider = require_DefaultPropsProvider4();
    var _capitalize = _interopRequireDefault(require_capitalize3());
    var _createSimplePaletteValueFilter = _interopRequireDefault(require_createSimplePaletteValueFilter());
    var _circularProgressClasses = require_circularProgressClasses();
    var _jsxRuntime = require_jsx_runtime();
    var SIZE = 44;
    var circularRotateKeyframe = (0, _zeroStyled.keyframes)`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`;
    var circularDashKeyframe = (0, _zeroStyled.keyframes)`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: -126px;
  }
`;
    var rotateAnimation = typeof circularRotateKeyframe !== "string" ? (0, _zeroStyled.css)`
        animation: ${circularRotateKeyframe} 1.4s linear infinite;
      ` : null;
    var dashAnimation = typeof circularDashKeyframe !== "string" ? (0, _zeroStyled.css)`
        animation: ${circularDashKeyframe} 1.4s ease-in-out infinite;
      ` : null;
    var useUtilityClasses = (ownerState) => {
      const {
        classes,
        variant,
        color,
        disableShrink
      } = ownerState;
      const slots = {
        root: ["root", variant, `color${(0, _capitalize.default)(color)}`],
        svg: ["svg"],
        circle: ["circle", `circle${(0, _capitalize.default)(variant)}`, disableShrink && "circleDisableShrink"]
      };
      return (0, _composeClasses.default)(slots, _circularProgressClasses.getCircularProgressUtilityClass, classes);
    };
    var CircularProgressRoot = (0, _zeroStyled.styled)("span", {
      name: "MuiCircularProgress",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, styles[ownerState.variant], styles[`color${(0, _capitalize.default)(ownerState.color)}`]];
      }
    })((0, _memoTheme.default)(({
      theme: theme2
    }) => ({
      display: "inline-block",
      variants: [{
        props: {
          variant: "determinate"
        },
        style: {
          transition: theme2.transitions.create("transform")
        }
      }, {
        props: {
          variant: "indeterminate"
        },
        style: rotateAnimation || {
          animation: `${circularRotateKeyframe} 1.4s linear infinite`
        }
      }, ...Object.entries(theme2.palette).filter((0, _createSimplePaletteValueFilter.default)()).map(([color]) => ({
        props: {
          color
        },
        style: {
          color: (theme2.vars || theme2).palette[color].main
        }
      }))]
    })));
    var CircularProgressSVG = (0, _zeroStyled.styled)("svg", {
      name: "MuiCircularProgress",
      slot: "Svg",
      overridesResolver: (props, styles) => styles.svg
    })({
      display: "block"
      // Keeps the progress centered
    });
    var CircularProgressCircle = (0, _zeroStyled.styled)("circle", {
      name: "MuiCircularProgress",
      slot: "Circle",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.circle, styles[`circle${(0, _capitalize.default)(ownerState.variant)}`], ownerState.disableShrink && styles.circleDisableShrink];
      }
    })((0, _memoTheme.default)(({
      theme: theme2
    }) => ({
      stroke: "currentColor",
      variants: [{
        props: {
          variant: "determinate"
        },
        style: {
          transition: theme2.transitions.create("stroke-dashoffset")
        }
      }, {
        props: {
          variant: "indeterminate"
        },
        style: {
          // Some default value that looks fine waiting for the animation to kicks in.
          strokeDasharray: "80px, 200px",
          strokeDashoffset: 0
          // Add the unit to fix a Edge 16 and below bug.
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.variant === "indeterminate" && !ownerState.disableShrink,
        style: dashAnimation || {
          // At runtime for Pigment CSS, `bufferAnimation` will be null and the generated keyframe will be used.
          animation: `${circularDashKeyframe} 1.4s ease-in-out infinite`
        }
      }]
    })));
    var CircularProgress = /* @__PURE__ */ React7.forwardRef(function CircularProgress2(inProps, ref) {
      const props = (0, _DefaultPropsProvider.useDefaultProps)({
        props: inProps,
        name: "MuiCircularProgress"
      });
      const {
        className,
        color = "primary",
        disableShrink = false,
        size = 40,
        style,
        thickness = 3.6,
        value = 0,
        variant = "indeterminate",
        ...other
      } = props;
      const ownerState = {
        ...props,
        color,
        disableShrink,
        size,
        thickness,
        value,
        variant
      };
      const classes = useUtilityClasses(ownerState);
      const circleStyle = {};
      const rootStyle = {};
      const rootProps = {};
      if (variant === "determinate") {
        const circumference = 2 * Math.PI * ((SIZE - thickness) / 2);
        circleStyle.strokeDasharray = circumference.toFixed(3);
        rootProps["aria-valuenow"] = Math.round(value);
        circleStyle.strokeDashoffset = `${((100 - value) / 100 * circumference).toFixed(3)}px`;
        rootStyle.transform = "rotate(-90deg)";
      }
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(CircularProgressRoot, {
        className: (0, _clsx.default)(classes.root, className),
        style: {
          width: size,
          height: size,
          ...rootStyle,
          ...style
        },
        ownerState,
        ref,
        role: "progressbar",
        ...rootProps,
        ...other,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(CircularProgressSVG, {
          className: classes.svg,
          ownerState,
          viewBox: `${SIZE / 2} ${SIZE / 2} ${SIZE} ${SIZE}`,
          children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(CircularProgressCircle, {
            className: classes.circle,
            style: circleStyle,
            ownerState,
            cx: SIZE,
            cy: SIZE,
            r: (SIZE - thickness) / 2,
            fill: "none",
            strokeWidth: thickness
          })
        })
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? CircularProgress.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      /**
       * @ignore
       */
      className: _propTypes.default.string,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
       * @default 'primary'
       */
      color: _propTypes.default.oneOfType([_propTypes.default.oneOf(["inherit", "primary", "secondary", "error", "info", "success", "warning"]), _propTypes.default.string]),
      /**
       * If `true`, the shrink animation is disabled.
       * This only works if variant is `indeterminate`.
       * @default false
       */
      disableShrink: (0, _chainPropTypes.default)(_propTypes.default.bool, (props) => {
        if (props.disableShrink && props.variant && props.variant !== "indeterminate") {
          return new Error("MUI: You have provided the `disableShrink` prop with a variant other than `indeterminate`. This will have no effect.");
        }
        return null;
      }),
      /**
       * The size of the component.
       * If using a number, the pixel unit is assumed.
       * If using a string, you need to provide the CSS unit, for example '3rem'.
       * @default 40
       */
      size: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      /**
       * @ignore
       */
      style: _propTypes.default.object,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
      /**
       * The thickness of the circle.
       * @default 3.6
       */
      thickness: _propTypes.default.number,
      /**
       * The value of the progress indicator for the determinate variant.
       * Value between 0 and 100.
       * @default 0
       */
      value: _propTypes.default.number,
      /**
       * The variant to use.
       * Use indeterminate when there is no progress value.
       * @default 'indeterminate'
       */
      variant: _propTypes.default.oneOf(["determinate", "indeterminate"])
    } : void 0;
    var _default = exports2.default = CircularProgress;
  }
});

// node_modules/@mui/material/node/CircularProgress/index.js
var require_CircularProgress2 = __commonJS({
  "node_modules/@mui/material/node/CircularProgress/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      circularProgressClasses: true
    };
    Object.defineProperty(exports2, "circularProgressClasses", {
      enumerable: true,
      get: function() {
        return _circularProgressClasses.default;
      }
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _CircularProgress.default;
      }
    });
    var _CircularProgress = _interopRequireDefault(require_CircularProgress());
    var _circularProgressClasses = _interopRequireWildcard(require_circularProgressClasses());
    Object.keys(_circularProgressClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _circularProgressClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _circularProgressClasses[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node/IconButton/iconButtonClasses.js
var require_iconButtonClasses = __commonJS({
  "node_modules/@mui/material/node/IconButton/iconButtonClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getIconButtonUtilityClass = getIconButtonUtilityClass;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    function getIconButtonUtilityClass(slot) {
      return (0, _generateUtilityClass.default)("MuiIconButton", slot);
    }
    var iconButtonClasses = (0, _generateUtilityClasses.default)("MuiIconButton", ["root", "disabled", "colorInherit", "colorPrimary", "colorSecondary", "colorError", "colorInfo", "colorSuccess", "colorWarning", "edgeStart", "edgeEnd", "sizeSmall", "sizeMedium", "sizeLarge", "loading", "loadingIndicator", "loadingWrapper"]);
    var _default = exports2.default = iconButtonClasses;
  }
});

// node_modules/@mui/material/node/IconButton/IconButton.js
var require_IconButton = __commonJS({
  "node_modules/@mui/material/node/IconButton/IconButton.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _clsx = _interopRequireDefault(require_clsx());
    var _chainPropTypes = _interopRequireDefault(require_chainPropTypes2());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _utils = require_utils4();
    var _colorManipulator = require_colorManipulator2();
    var _zeroStyled = require_zero_styled2();
    var _memoTheme = _interopRequireDefault(require_memoTheme2());
    var _createSimplePaletteValueFilter = _interopRequireDefault(require_createSimplePaletteValueFilter());
    var _DefaultPropsProvider = require_DefaultPropsProvider4();
    var _ButtonBase = _interopRequireDefault(require_ButtonBase2());
    var _CircularProgress = _interopRequireDefault(require_CircularProgress2());
    var _capitalize = _interopRequireDefault(require_capitalize3());
    var _iconButtonClasses = _interopRequireWildcard(require_iconButtonClasses());
    var _jsxRuntime = require_jsx_runtime();
    var useUtilityClasses = (ownerState) => {
      const {
        classes,
        disabled,
        color,
        edge,
        size,
        loading
      } = ownerState;
      const slots = {
        root: ["root", loading && "loading", disabled && "disabled", color !== "default" && `color${(0, _capitalize.default)(color)}`, edge && `edge${(0, _capitalize.default)(edge)}`, `size${(0, _capitalize.default)(size)}`],
        loadingIndicator: ["loadingIndicator"],
        loadingWrapper: ["loadingWrapper"]
      };
      return (0, _composeClasses.default)(slots, _iconButtonClasses.getIconButtonUtilityClass, classes);
    };
    var IconButtonRoot = (0, _zeroStyled.styled)(_ButtonBase.default, {
      name: "MuiIconButton",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.loading && styles.loading, ownerState.color !== "default" && styles[`color${(0, _capitalize.default)(ownerState.color)}`], ownerState.edge && styles[`edge${(0, _capitalize.default)(ownerState.edge)}`], styles[`size${(0, _capitalize.default)(ownerState.size)}`]];
      }
    })((0, _memoTheme.default)(({
      theme: theme2
    }) => ({
      textAlign: "center",
      flex: "0 0 auto",
      fontSize: theme2.typography.pxToRem(24),
      padding: 8,
      borderRadius: "50%",
      color: (theme2.vars || theme2).palette.action.active,
      transition: theme2.transitions.create("background-color", {
        duration: theme2.transitions.duration.shortest
      }),
      variants: [{
        props: (props) => !props.disableRipple,
        style: {
          "--IconButton-hoverBg": theme2.vars ? `rgba(${theme2.vars.palette.action.activeChannel} / ${theme2.vars.palette.action.hoverOpacity})` : (0, _colorManipulator.alpha)(theme2.palette.action.active, theme2.palette.action.hoverOpacity),
          "&:hover": {
            backgroundColor: "var(--IconButton-hoverBg)",
            // Reset on touch devices, it doesn't add specificity
            "@media (hover: none)": {
              backgroundColor: "transparent"
            }
          }
        }
      }, {
        props: {
          edge: "start"
        },
        style: {
          marginLeft: -12
        }
      }, {
        props: {
          edge: "start",
          size: "small"
        },
        style: {
          marginLeft: -3
        }
      }, {
        props: {
          edge: "end"
        },
        style: {
          marginRight: -12
        }
      }, {
        props: {
          edge: "end",
          size: "small"
        },
        style: {
          marginRight: -3
        }
      }]
    })), (0, _memoTheme.default)(({
      theme: theme2
    }) => ({
      variants: [{
        props: {
          color: "inherit"
        },
        style: {
          color: "inherit"
        }
      }, ...Object.entries(theme2.palette).filter((0, _createSimplePaletteValueFilter.default)()).map(([color]) => ({
        props: {
          color
        },
        style: {
          color: (theme2.vars || theme2).palette[color].main
        }
      })), ...Object.entries(theme2.palette).filter((0, _createSimplePaletteValueFilter.default)()).map(([color]) => ({
        props: {
          color
        },
        style: {
          "--IconButton-hoverBg": theme2.vars ? `rgba(${(theme2.vars || theme2).palette[color].mainChannel} / ${theme2.vars.palette.action.hoverOpacity})` : (0, _colorManipulator.alpha)((theme2.vars || theme2).palette[color].main, theme2.palette.action.hoverOpacity)
        }
      })), {
        props: {
          size: "small"
        },
        style: {
          padding: 5,
          fontSize: theme2.typography.pxToRem(18)
        }
      }, {
        props: {
          size: "large"
        },
        style: {
          padding: 12,
          fontSize: theme2.typography.pxToRem(28)
        }
      }],
      [`&.${_iconButtonClasses.default.disabled}`]: {
        backgroundColor: "transparent",
        color: (theme2.vars || theme2).palette.action.disabled
      },
      [`&.${_iconButtonClasses.default.loading}`]: {
        color: "transparent"
      }
    })));
    var IconButtonLoadingIndicator = (0, _zeroStyled.styled)("span", {
      name: "MuiIconButton",
      slot: "LoadingIndicator",
      overridesResolver: (props, styles) => styles.loadingIndicator
    })(({
      theme: theme2
    }) => ({
      display: "none",
      position: "absolute",
      visibility: "visible",
      top: "50%",
      left: "50%",
      transform: "translate(-50%, -50%)",
      color: (theme2.vars || theme2).palette.action.disabled,
      variants: [{
        props: {
          loading: true
        },
        style: {
          display: "flex"
        }
      }]
    }));
    var IconButton = /* @__PURE__ */ React7.forwardRef(function IconButton2(inProps, ref) {
      const props = (0, _DefaultPropsProvider.useDefaultProps)({
        props: inProps,
        name: "MuiIconButton"
      });
      const {
        edge = false,
        children,
        className,
        color = "default",
        disabled = false,
        disableFocusRipple = false,
        size = "medium",
        id: idProp,
        loading = null,
        loadingIndicator: loadingIndicatorProp,
        ...other
      } = props;
      const loadingId = (0, _utils.unstable_useId)(idProp);
      const loadingIndicator = loadingIndicatorProp ?? /* @__PURE__ */ (0, _jsxRuntime.jsx)(_CircularProgress.default, {
        "aria-labelledby": loadingId,
        color: "inherit",
        size: 16
      });
      const ownerState = {
        ...props,
        edge,
        color,
        disabled,
        disableFocusRipple,
        loading,
        loadingIndicator,
        size
      };
      const classes = useUtilityClasses(ownerState);
      return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(IconButtonRoot, {
        id: loading ? loadingId : idProp,
        className: (0, _clsx.default)(classes.root, className),
        centerRipple: true,
        focusRipple: !disableFocusRipple,
        disabled: disabled || loading,
        ref,
        ...other,
        ownerState,
        children: [typeof loading === "boolean" && // use plain HTML span to minimize the runtime overhead
        /* @__PURE__ */ (0, _jsxRuntime.jsx)("span", {
          className: classes.loadingWrapper,
          style: {
            display: "contents"
          },
          children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(IconButtonLoadingIndicator, {
            className: classes.loadingIndicator,
            ownerState,
            children: loading && loadingIndicator
          })
        }), children]
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? IconButton.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * The icon to display.
       */
      children: (0, _chainPropTypes.default)(_propTypes.default.node, (props) => {
        const found = React7.Children.toArray(props.children).some((child) => /* @__PURE__ */ React7.isValidElement(child) && child.props.onClick);
        if (found) {
          return new Error(["MUI: You are providing an onClick event listener to a child of a button element.", "Prefer applying it to the IconButton directly.", "This guarantees that the whole <button> will be responsive to click events."].join("\n"));
        }
        return null;
      }),
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      /**
       * @ignore
       */
      className: _propTypes.default.string,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
       * @default 'default'
       */
      color: _propTypes.default.oneOfType([_propTypes.default.oneOf(["inherit", "default", "primary", "secondary", "error", "info", "success", "warning"]), _propTypes.default.string]),
      /**
       * If `true`, the component is disabled.
       * @default false
       */
      disabled: _propTypes.default.bool,
      /**
       * If `true`, the  keyboard focus ripple is disabled.
       * @default false
       */
      disableFocusRipple: _propTypes.default.bool,
      /**
       * If `true`, the ripple effect is disabled.
       *
       * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
       * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
       * @default false
       */
      disableRipple: _propTypes.default.bool,
      /**
       * If given, uses a negative margin to counteract the padding on one
       * side (this is often helpful for aligning the left or right
       * side of the icon with content above or below, without ruining the border
       * size and shape).
       * @default false
       */
      edge: _propTypes.default.oneOf(["end", "start", false]),
      /**
       * @ignore
       */
      id: _propTypes.default.string,
      /**
       * If `true`, the loading indicator is visible and the button is disabled.
       * If `true | false`, the loading wrapper is always rendered before the children to prevent [Google Translation Crash](https://github.com/mui/material-ui/issues/27853).
       * @default null
       */
      loading: _propTypes.default.bool,
      /**
       * Element placed before the children if the button is in loading state.
       * The node should contain an element with `role="progressbar"` with an accessible name.
       * By default, it renders a `CircularProgress` that is labeled by the button itself.
       * @default <CircularProgress color="inherit" size={16} />
       */
      loadingIndicator: _propTypes.default.node,
      /**
       * The size of the component.
       * `small` is equivalent to the dense button styling.
       * @default 'medium'
       */
      size: _propTypes.default.oneOfType([_propTypes.default.oneOf(["small", "medium", "large"]), _propTypes.default.string]),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
    } : void 0;
    var _default = exports2.default = IconButton;
  }
});

// node_modules/@mui/material/node/IconButton/index.js
var require_IconButton2 = __commonJS({
  "node_modules/@mui/material/node/IconButton/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      iconButtonClasses: true
    };
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _IconButton.default;
      }
    });
    Object.defineProperty(exports2, "iconButtonClasses", {
      enumerable: true,
      get: function() {
        return _iconButtonClasses.default;
      }
    });
    var _IconButton = _interopRequireDefault(require_IconButton());
    var _iconButtonClasses = _interopRequireWildcard(require_iconButtonClasses());
    Object.keys(_iconButtonClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _iconButtonClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _iconButtonClasses[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node/internal/svg-icons/Cancel.js
var require_Cancel = __commonJS({
  "node_modules/@mui/material/node/internal/svg-icons/Cancel.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
    var _jsxRuntime = require_jsx_runtime();
    var _default = exports2.default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
      d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
    }), "Cancel");
  }
});

// node_modules/@mui/material/node/Chip/chipClasses.js
var require_chipClasses = __commonJS({
  "node_modules/@mui/material/node/Chip/chipClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getChipUtilityClass = getChipUtilityClass;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    function getChipUtilityClass(slot) {
      return (0, _generateUtilityClass.default)("MuiChip", slot);
    }
    var chipClasses = (0, _generateUtilityClasses.default)("MuiChip", ["root", "sizeSmall", "sizeMedium", "colorDefault", "colorError", "colorInfo", "colorPrimary", "colorSecondary", "colorSuccess", "colorWarning", "disabled", "clickable", "clickableColorPrimary", "clickableColorSecondary", "deletable", "deletableColorPrimary", "deletableColorSecondary", "outlined", "filled", "outlinedPrimary", "outlinedSecondary", "filledPrimary", "filledSecondary", "avatar", "avatarSmall", "avatarMedium", "avatarColorPrimary", "avatarColorSecondary", "icon", "iconSmall", "iconMedium", "iconColorPrimary", "iconColorSecondary", "label", "labelSmall", "labelMedium", "deleteIcon", "deleteIconSmall", "deleteIconMedium", "deleteIconColorPrimary", "deleteIconColorSecondary", "deleteIconOutlinedColorPrimary", "deleteIconOutlinedColorSecondary", "deleteIconFilledColorPrimary", "deleteIconFilledColorSecondary", "focusVisible"]);
    var _default = exports2.default = chipClasses;
  }
});

// node_modules/@mui/material/node/Chip/Chip.js
var require_Chip = __commonJS({
  "node_modules/@mui/material/node/Chip/Chip.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _clsx = _interopRequireDefault(require_clsx());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _colorManipulator = require_colorManipulator2();
    var _Cancel = _interopRequireDefault(require_Cancel());
    var _useForkRef = _interopRequireDefault(require_useForkRef3());
    var _unsupportedProp = _interopRequireDefault(require_unsupportedProp3());
    var _capitalize = _interopRequireDefault(require_capitalize3());
    var _ButtonBase = _interopRequireDefault(require_ButtonBase2());
    var _zeroStyled = require_zero_styled2();
    var _memoTheme = _interopRequireDefault(require_memoTheme2());
    var _createSimplePaletteValueFilter = _interopRequireDefault(require_createSimplePaletteValueFilter());
    var _DefaultPropsProvider = require_DefaultPropsProvider4();
    var _chipClasses = _interopRequireWildcard(require_chipClasses());
    var _jsxRuntime = require_jsx_runtime();
    var useUtilityClasses = (ownerState) => {
      const {
        classes,
        disabled,
        size,
        color,
        iconColor,
        onDelete,
        clickable,
        variant
      } = ownerState;
      const slots = {
        root: ["root", variant, disabled && "disabled", `size${(0, _capitalize.default)(size)}`, `color${(0, _capitalize.default)(color)}`, clickable && "clickable", clickable && `clickableColor${(0, _capitalize.default)(color)}`, onDelete && "deletable", onDelete && `deletableColor${(0, _capitalize.default)(color)}`, `${variant}${(0, _capitalize.default)(color)}`],
        label: ["label", `label${(0, _capitalize.default)(size)}`],
        avatar: ["avatar", `avatar${(0, _capitalize.default)(size)}`, `avatarColor${(0, _capitalize.default)(color)}`],
        icon: ["icon", `icon${(0, _capitalize.default)(size)}`, `iconColor${(0, _capitalize.default)(iconColor)}`],
        deleteIcon: ["deleteIcon", `deleteIcon${(0, _capitalize.default)(size)}`, `deleteIconColor${(0, _capitalize.default)(color)}`, `deleteIcon${(0, _capitalize.default)(variant)}Color${(0, _capitalize.default)(color)}`]
      };
      return (0, _composeClasses.default)(slots, _chipClasses.getChipUtilityClass, classes);
    };
    var ChipRoot = (0, _zeroStyled.styled)("div", {
      name: "MuiChip",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        const {
          color,
          iconColor,
          clickable,
          onDelete,
          size,
          variant
        } = ownerState;
        return [{
          [`& .${_chipClasses.default.avatar}`]: styles.avatar
        }, {
          [`& .${_chipClasses.default.avatar}`]: styles[`avatar${(0, _capitalize.default)(size)}`]
        }, {
          [`& .${_chipClasses.default.avatar}`]: styles[`avatarColor${(0, _capitalize.default)(color)}`]
        }, {
          [`& .${_chipClasses.default.icon}`]: styles.icon
        }, {
          [`& .${_chipClasses.default.icon}`]: styles[`icon${(0, _capitalize.default)(size)}`]
        }, {
          [`& .${_chipClasses.default.icon}`]: styles[`iconColor${(0, _capitalize.default)(iconColor)}`]
        }, {
          [`& .${_chipClasses.default.deleteIcon}`]: styles.deleteIcon
        }, {
          [`& .${_chipClasses.default.deleteIcon}`]: styles[`deleteIcon${(0, _capitalize.default)(size)}`]
        }, {
          [`& .${_chipClasses.default.deleteIcon}`]: styles[`deleteIconColor${(0, _capitalize.default)(color)}`]
        }, {
          [`& .${_chipClasses.default.deleteIcon}`]: styles[`deleteIcon${(0, _capitalize.default)(variant)}Color${(0, _capitalize.default)(color)}`]
        }, styles.root, styles[`size${(0, _capitalize.default)(size)}`], styles[`color${(0, _capitalize.default)(color)}`], clickable && styles.clickable, clickable && color !== "default" && styles[`clickableColor${(0, _capitalize.default)(color)})`], onDelete && styles.deletable, onDelete && color !== "default" && styles[`deletableColor${(0, _capitalize.default)(color)}`], styles[variant], styles[`${variant}${(0, _capitalize.default)(color)}`]];
      }
    })((0, _memoTheme.default)(({
      theme: theme2
    }) => {
      const textColor = theme2.palette.mode === "light" ? theme2.palette.grey[700] : theme2.palette.grey[300];
      return {
        maxWidth: "100%",
        fontFamily: theme2.typography.fontFamily,
        fontSize: theme2.typography.pxToRem(13),
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        height: 32,
        color: (theme2.vars || theme2).palette.text.primary,
        backgroundColor: (theme2.vars || theme2).palette.action.selected,
        borderRadius: 32 / 2,
        whiteSpace: "nowrap",
        transition: theme2.transitions.create(["background-color", "box-shadow"]),
        // reset cursor explicitly in case ButtonBase is used
        cursor: "unset",
        // We disable the focus ring for mouse, touch and keyboard users.
        outline: 0,
        textDecoration: "none",
        border: 0,
        // Remove `button` border
        padding: 0,
        // Remove `button` padding
        verticalAlign: "middle",
        boxSizing: "border-box",
        [`&.${_chipClasses.default.disabled}`]: {
          opacity: (theme2.vars || theme2).palette.action.disabledOpacity,
          pointerEvents: "none"
        },
        [`& .${_chipClasses.default.avatar}`]: {
          marginLeft: 5,
          marginRight: -6,
          width: 24,
          height: 24,
          color: theme2.vars ? theme2.vars.palette.Chip.defaultAvatarColor : textColor,
          fontSize: theme2.typography.pxToRem(12)
        },
        [`& .${_chipClasses.default.avatarColorPrimary}`]: {
          color: (theme2.vars || theme2).palette.primary.contrastText,
          backgroundColor: (theme2.vars || theme2).palette.primary.dark
        },
        [`& .${_chipClasses.default.avatarColorSecondary}`]: {
          color: (theme2.vars || theme2).palette.secondary.contrastText,
          backgroundColor: (theme2.vars || theme2).palette.secondary.dark
        },
        [`& .${_chipClasses.default.avatarSmall}`]: {
          marginLeft: 4,
          marginRight: -4,
          width: 18,
          height: 18,
          fontSize: theme2.typography.pxToRem(10)
        },
        [`& .${_chipClasses.default.icon}`]: {
          marginLeft: 5,
          marginRight: -6
        },
        [`& .${_chipClasses.default.deleteIcon}`]: {
          WebkitTapHighlightColor: "transparent",
          color: theme2.vars ? `rgba(${theme2.vars.palette.text.primaryChannel} / 0.26)` : (0, _colorManipulator.alpha)(theme2.palette.text.primary, 0.26),
          fontSize: 22,
          cursor: "pointer",
          margin: "0 5px 0 -6px",
          "&:hover": {
            color: theme2.vars ? `rgba(${theme2.vars.palette.text.primaryChannel} / 0.4)` : (0, _colorManipulator.alpha)(theme2.palette.text.primary, 0.4)
          }
        },
        variants: [{
          props: {
            size: "small"
          },
          style: {
            height: 24,
            [`& .${_chipClasses.default.icon}`]: {
              fontSize: 18,
              marginLeft: 4,
              marginRight: -4
            },
            [`& .${_chipClasses.default.deleteIcon}`]: {
              fontSize: 16,
              marginRight: 4,
              marginLeft: -4
            }
          }
        }, ...Object.entries(theme2.palette).filter((0, _createSimplePaletteValueFilter.default)(["contrastText"])).map(([color]) => {
          return {
            props: {
              color
            },
            style: {
              backgroundColor: (theme2.vars || theme2).palette[color].main,
              color: (theme2.vars || theme2).palette[color].contrastText,
              [`& .${_chipClasses.default.deleteIcon}`]: {
                color: theme2.vars ? `rgba(${theme2.vars.palette[color].contrastTextChannel} / 0.7)` : (0, _colorManipulator.alpha)(theme2.palette[color].contrastText, 0.7),
                "&:hover, &:active": {
                  color: (theme2.vars || theme2).palette[color].contrastText
                }
              }
            }
          };
        }), {
          props: (props) => props.iconColor === props.color,
          style: {
            [`& .${_chipClasses.default.icon}`]: {
              color: theme2.vars ? theme2.vars.palette.Chip.defaultIconColor : textColor
            }
          }
        }, {
          props: (props) => props.iconColor === props.color && props.color !== "default",
          style: {
            [`& .${_chipClasses.default.icon}`]: {
              color: "inherit"
            }
          }
        }, {
          props: {
            onDelete: true
          },
          style: {
            [`&.${_chipClasses.default.focusVisible}`]: {
              backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.action.selectedChannel} / calc(${theme2.vars.palette.action.selectedOpacity} + ${theme2.vars.palette.action.focusOpacity}))` : (0, _colorManipulator.alpha)(theme2.palette.action.selected, theme2.palette.action.selectedOpacity + theme2.palette.action.focusOpacity)
            }
          }
        }, ...Object.entries(theme2.palette).filter((0, _createSimplePaletteValueFilter.default)(["dark"])).map(([color]) => {
          return {
            props: {
              color,
              onDelete: true
            },
            style: {
              [`&.${_chipClasses.default.focusVisible}`]: {
                background: (theme2.vars || theme2).palette[color].dark
              }
            }
          };
        }), {
          props: {
            clickable: true
          },
          style: {
            userSelect: "none",
            WebkitTapHighlightColor: "transparent",
            cursor: "pointer",
            "&:hover": {
              backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.action.selectedChannel} / calc(${theme2.vars.palette.action.selectedOpacity} + ${theme2.vars.palette.action.hoverOpacity}))` : (0, _colorManipulator.alpha)(theme2.palette.action.selected, theme2.palette.action.selectedOpacity + theme2.palette.action.hoverOpacity)
            },
            [`&.${_chipClasses.default.focusVisible}`]: {
              backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.action.selectedChannel} / calc(${theme2.vars.palette.action.selectedOpacity} + ${theme2.vars.palette.action.focusOpacity}))` : (0, _colorManipulator.alpha)(theme2.palette.action.selected, theme2.palette.action.selectedOpacity + theme2.palette.action.focusOpacity)
            },
            "&:active": {
              boxShadow: (theme2.vars || theme2).shadows[1]
            }
          }
        }, ...Object.entries(theme2.palette).filter((0, _createSimplePaletteValueFilter.default)(["dark"])).map(([color]) => ({
          props: {
            color,
            clickable: true
          },
          style: {
            [`&:hover, &.${_chipClasses.default.focusVisible}`]: {
              backgroundColor: (theme2.vars || theme2).palette[color].dark
            }
          }
        })), {
          props: {
            variant: "outlined"
          },
          style: {
            backgroundColor: "transparent",
            border: theme2.vars ? `1px solid ${theme2.vars.palette.Chip.defaultBorder}` : `1px solid ${theme2.palette.mode === "light" ? theme2.palette.grey[400] : theme2.palette.grey[700]}`,
            [`&.${_chipClasses.default.clickable}:hover`]: {
              backgroundColor: (theme2.vars || theme2).palette.action.hover
            },
            [`&.${_chipClasses.default.focusVisible}`]: {
              backgroundColor: (theme2.vars || theme2).palette.action.focus
            },
            [`& .${_chipClasses.default.avatar}`]: {
              marginLeft: 4
            },
            [`& .${_chipClasses.default.avatarSmall}`]: {
              marginLeft: 2
            },
            [`& .${_chipClasses.default.icon}`]: {
              marginLeft: 4
            },
            [`& .${_chipClasses.default.iconSmall}`]: {
              marginLeft: 2
            },
            [`& .${_chipClasses.default.deleteIcon}`]: {
              marginRight: 5
            },
            [`& .${_chipClasses.default.deleteIconSmall}`]: {
              marginRight: 3
            }
          }
        }, ...Object.entries(theme2.palette).filter((0, _createSimplePaletteValueFilter.default)()).map(([color]) => ({
          props: {
            variant: "outlined",
            color
          },
          style: {
            color: (theme2.vars || theme2).palette[color].main,
            border: `1px solid ${theme2.vars ? `rgba(${theme2.vars.palette[color].mainChannel} / 0.7)` : (0, _colorManipulator.alpha)(theme2.palette[color].main, 0.7)}`,
            [`&.${_chipClasses.default.clickable}:hover`]: {
              backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette[color].mainChannel} / ${theme2.vars.palette.action.hoverOpacity})` : (0, _colorManipulator.alpha)(theme2.palette[color].main, theme2.palette.action.hoverOpacity)
            },
            [`&.${_chipClasses.default.focusVisible}`]: {
              backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette[color].mainChannel} / ${theme2.vars.palette.action.focusOpacity})` : (0, _colorManipulator.alpha)(theme2.palette[color].main, theme2.palette.action.focusOpacity)
            },
            [`& .${_chipClasses.default.deleteIcon}`]: {
              color: theme2.vars ? `rgba(${theme2.vars.palette[color].mainChannel} / 0.7)` : (0, _colorManipulator.alpha)(theme2.palette[color].main, 0.7),
              "&:hover, &:active": {
                color: (theme2.vars || theme2).palette[color].main
              }
            }
          }
        }))]
      };
    }));
    var ChipLabel = (0, _zeroStyled.styled)("span", {
      name: "MuiChip",
      slot: "Label",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        const {
          size
        } = ownerState;
        return [styles.label, styles[`label${(0, _capitalize.default)(size)}`]];
      }
    })({
      overflow: "hidden",
      textOverflow: "ellipsis",
      paddingLeft: 12,
      paddingRight: 12,
      whiteSpace: "nowrap",
      variants: [{
        props: {
          variant: "outlined"
        },
        style: {
          paddingLeft: 11,
          paddingRight: 11
        }
      }, {
        props: {
          size: "small"
        },
        style: {
          paddingLeft: 8,
          paddingRight: 8
        }
      }, {
        props: {
          size: "small",
          variant: "outlined"
        },
        style: {
          paddingLeft: 7,
          paddingRight: 7
        }
      }]
    });
    function isDeleteKeyboardEvent(keyboardEvent) {
      return keyboardEvent.key === "Backspace" || keyboardEvent.key === "Delete";
    }
    var Chip = /* @__PURE__ */ React7.forwardRef(function Chip2(inProps, ref) {
      const props = (0, _DefaultPropsProvider.useDefaultProps)({
        props: inProps,
        name: "MuiChip"
      });
      const {
        avatar: avatarProp,
        className,
        clickable: clickableProp,
        color = "default",
        component: ComponentProp,
        deleteIcon: deleteIconProp,
        disabled = false,
        icon: iconProp,
        label,
        onClick,
        onDelete,
        onKeyDown,
        onKeyUp,
        size = "medium",
        variant = "filled",
        tabIndex,
        skipFocusWhenDisabled = false,
        // TODO v6: Rename to `focusableWhenDisabled`.
        ...other
      } = props;
      const chipRef = React7.useRef(null);
      const handleRef = (0, _useForkRef.default)(chipRef, ref);
      const handleDeleteIconClick = (event) => {
        event.stopPropagation();
        if (onDelete) {
          onDelete(event);
        }
      };
      const handleKeyDown = (event) => {
        if (event.currentTarget === event.target && isDeleteKeyboardEvent(event)) {
          event.preventDefault();
        }
        if (onKeyDown) {
          onKeyDown(event);
        }
      };
      const handleKeyUp = (event) => {
        if (event.currentTarget === event.target) {
          if (onDelete && isDeleteKeyboardEvent(event)) {
            onDelete(event);
          }
        }
        if (onKeyUp) {
          onKeyUp(event);
        }
      };
      const clickable = clickableProp !== false && onClick ? true : clickableProp;
      const component = clickable || onDelete ? _ButtonBase.default : ComponentProp || "div";
      const ownerState = {
        ...props,
        component,
        disabled,
        size,
        color,
        iconColor: /* @__PURE__ */ React7.isValidElement(iconProp) ? iconProp.props.color || color : color,
        onDelete: !!onDelete,
        clickable,
        variant
      };
      const classes = useUtilityClasses(ownerState);
      const moreProps = component === _ButtonBase.default ? {
        component: ComponentProp || "div",
        focusVisibleClassName: classes.focusVisible,
        ...onDelete && {
          disableRipple: true
        }
      } : {};
      let deleteIcon = null;
      if (onDelete) {
        deleteIcon = deleteIconProp && /* @__PURE__ */ React7.isValidElement(deleteIconProp) ? /* @__PURE__ */ React7.cloneElement(deleteIconProp, {
          className: (0, _clsx.default)(deleteIconProp.props.className, classes.deleteIcon),
          onClick: handleDeleteIconClick
        }) : /* @__PURE__ */ (0, _jsxRuntime.jsx)(_Cancel.default, {
          className: (0, _clsx.default)(classes.deleteIcon),
          onClick: handleDeleteIconClick
        });
      }
      let avatar = null;
      if (avatarProp && /* @__PURE__ */ React7.isValidElement(avatarProp)) {
        avatar = /* @__PURE__ */ React7.cloneElement(avatarProp, {
          className: (0, _clsx.default)(classes.avatar, avatarProp.props.className)
        });
      }
      let icon = null;
      if (iconProp && /* @__PURE__ */ React7.isValidElement(iconProp)) {
        icon = /* @__PURE__ */ React7.cloneElement(iconProp, {
          className: (0, _clsx.default)(classes.icon, iconProp.props.className)
        });
      }
      if (define_process_env_default.NODE_ENV !== "production") {
        if (avatar && icon) {
          console.error("MUI: The Chip component can not handle the avatar and the icon prop at the same time. Pick one.");
        }
      }
      return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(ChipRoot, {
        as: component,
        className: (0, _clsx.default)(classes.root, className),
        disabled: clickable && disabled ? true : void 0,
        onClick,
        onKeyDown: handleKeyDown,
        onKeyUp: handleKeyUp,
        ref: handleRef,
        tabIndex: skipFocusWhenDisabled && disabled ? -1 : tabIndex,
        ownerState,
        ...moreProps,
        ...other,
        children: [avatar || icon, /* @__PURE__ */ (0, _jsxRuntime.jsx)(ChipLabel, {
          className: (0, _clsx.default)(classes.label),
          ownerState,
          children: label
        }), deleteIcon]
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? Chip.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * The Avatar element to display.
       */
      avatar: _propTypes.default.element,
      /**
       * This prop isn't supported.
       * Use the `component` prop if you need to change the children structure.
       */
      children: _unsupportedProp.default,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      /**
       * @ignore
       */
      className: _propTypes.default.string,
      /**
       * If `true`, the chip will appear clickable, and will raise when pressed,
       * even if the onClick prop is not defined.
       * If `false`, the chip will not appear clickable, even if onClick prop is defined.
       * This can be used, for example,
       * along with the component prop to indicate an anchor Chip is clickable.
       * Note: this controls the UI and does not affect the onClick event.
       */
      clickable: _propTypes.default.bool,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
       * @default 'default'
       */
      color: _propTypes.default.oneOfType([_propTypes.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), _propTypes.default.string]),
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: _propTypes.default.elementType,
      /**
       * Override the default delete icon element. Shown only if `onDelete` is set.
       */
      deleteIcon: _propTypes.default.element,
      /**
       * If `true`, the component is disabled.
       * @default false
       */
      disabled: _propTypes.default.bool,
      /**
       * Icon element.
       */
      icon: _propTypes.default.element,
      /**
       * The content of the component.
       */
      label: _propTypes.default.node,
      /**
       * @ignore
       */
      onClick: _propTypes.default.func,
      /**
       * Callback fired when the delete icon is clicked.
       * If set, the delete icon will be shown.
       */
      onDelete: _propTypes.default.func,
      /**
       * @ignore
       */
      onKeyDown: _propTypes.default.func,
      /**
       * @ignore
       */
      onKeyUp: _propTypes.default.func,
      /**
       * The size of the component.
       * @default 'medium'
       */
      size: _propTypes.default.oneOfType([_propTypes.default.oneOf(["medium", "small"]), _propTypes.default.string]),
      /**
       * If `true`, allows the disabled chip to escape focus.
       * If `false`, allows the disabled chip to receive focus.
       * @default false
       */
      skipFocusWhenDisabled: _propTypes.default.bool,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
      /**
       * @ignore
       */
      tabIndex: _propTypes.default.number,
      /**
       * The variant to use.
       * @default 'filled'
       */
      variant: _propTypes.default.oneOfType([_propTypes.default.oneOf(["filled", "outlined"]), _propTypes.default.string])
    } : void 0;
    var _default = exports2.default = Chip;
  }
});

// node_modules/@mui/material/node/Chip/index.js
var require_Chip2 = __commonJS({
  "node_modules/@mui/material/node/Chip/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      chipClasses: true
    };
    Object.defineProperty(exports2, "chipClasses", {
      enumerable: true,
      get: function() {
        return _chipClasses.default;
      }
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _Chip.default;
      }
    });
    var _Chip = _interopRequireDefault(require_Chip());
    var _chipClasses = _interopRequireWildcard(require_chipClasses());
    Object.keys(_chipClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _chipClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _chipClasses[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node/TextareaAutosize/TextareaAutosize.js
var require_TextareaAutosize = __commonJS({
  "node_modules/@mui/material/node/TextareaAutosize/TextareaAutosize.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _utils = require_utils();
    var _jsxRuntime = require_jsx_runtime();
    function getStyleValue(value) {
      return parseInt(value, 10) || 0;
    }
    var styles = {
      shadow: {
        // Visibility needed to hide the extra text area on iPads
        visibility: "hidden",
        // Remove from the content flow
        position: "absolute",
        // Ignore the scrollbar width
        overflow: "hidden",
        height: 0,
        top: 0,
        left: 0,
        // Create a new layer, increase the isolation of the computed values
        transform: "translateZ(0)"
      }
    };
    function isObjectEmpty(object) {
      for (const _ in object) {
        return false;
      }
      return true;
    }
    function isEmpty(obj) {
      return isObjectEmpty(obj) || obj.outerHeightStyle === 0 && !obj.overflowing;
    }
    var TextareaAutosize = /* @__PURE__ */ React7.forwardRef(function TextareaAutosize2(props, forwardedRef) {
      const {
        onChange,
        maxRows,
        minRows = 1,
        style,
        value,
        ...other
      } = props;
      const {
        current: isControlled
      } = React7.useRef(value != null);
      const textareaRef = React7.useRef(null);
      const handleRef = (0, _utils.unstable_useForkRef)(forwardedRef, textareaRef);
      const heightRef = React7.useRef(null);
      const hiddenTextareaRef = React7.useRef(null);
      const calculateTextareaStyles = React7.useCallback(() => {
        const textarea = textareaRef.current;
        const hiddenTextarea = hiddenTextareaRef.current;
        if (!textarea || !hiddenTextarea) {
          return void 0;
        }
        const containerWindow = (0, _utils.unstable_ownerWindow)(textarea);
        const computedStyle = containerWindow.getComputedStyle(textarea);
        if (computedStyle.width === "0px") {
          return {
            outerHeightStyle: 0,
            overflowing: false
          };
        }
        hiddenTextarea.style.width = computedStyle.width;
        hiddenTextarea.value = textarea.value || props.placeholder || "x";
        if (hiddenTextarea.value.slice(-1) === "\n") {
          hiddenTextarea.value += " ";
        }
        const boxSizing = computedStyle.boxSizing;
        const padding = getStyleValue(computedStyle.paddingBottom) + getStyleValue(computedStyle.paddingTop);
        const border = getStyleValue(computedStyle.borderBottomWidth) + getStyleValue(computedStyle.borderTopWidth);
        const innerHeight = hiddenTextarea.scrollHeight;
        hiddenTextarea.value = "x";
        const singleRowHeight = hiddenTextarea.scrollHeight;
        let outerHeight = innerHeight;
        if (minRows) {
          outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
        }
        if (maxRows) {
          outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
        }
        outerHeight = Math.max(outerHeight, singleRowHeight);
        const outerHeightStyle = outerHeight + (boxSizing === "border-box" ? padding + border : 0);
        const overflowing = Math.abs(outerHeight - innerHeight) <= 1;
        return {
          outerHeightStyle,
          overflowing
        };
      }, [maxRows, minRows, props.placeholder]);
      const didHeightChange = (0, _utils.unstable_useEventCallback)(() => {
        const textarea = textareaRef.current;
        const textareaStyles = calculateTextareaStyles();
        if (!textarea || !textareaStyles || isEmpty(textareaStyles)) {
          return false;
        }
        const outerHeightStyle = textareaStyles.outerHeightStyle;
        return heightRef.current != null && heightRef.current !== outerHeightStyle;
      });
      const syncHeight = React7.useCallback(() => {
        const textarea = textareaRef.current;
        const textareaStyles = calculateTextareaStyles();
        if (!textarea || !textareaStyles || isEmpty(textareaStyles)) {
          return;
        }
        const outerHeightStyle = textareaStyles.outerHeightStyle;
        if (heightRef.current !== outerHeightStyle) {
          heightRef.current = outerHeightStyle;
          textarea.style.height = `${outerHeightStyle}px`;
        }
        textarea.style.overflow = textareaStyles.overflowing ? "hidden" : "";
      }, [calculateTextareaStyles]);
      const frameRef = React7.useRef(-1);
      (0, _utils.unstable_useEnhancedEffect)(() => {
        const debouncedHandleResize = (0, _utils.unstable_debounce)(syncHeight);
        const textarea = textareaRef?.current;
        if (!textarea) {
          return void 0;
        }
        const containerWindow = (0, _utils.unstable_ownerWindow)(textarea);
        containerWindow.addEventListener("resize", debouncedHandleResize);
        let resizeObserver;
        if (typeof ResizeObserver !== "undefined") {
          resizeObserver = new ResizeObserver(() => {
            if (didHeightChange()) {
              resizeObserver.unobserve(textarea);
              cancelAnimationFrame(frameRef.current);
              syncHeight();
              frameRef.current = requestAnimationFrame(() => {
                resizeObserver.observe(textarea);
              });
            }
          });
          resizeObserver.observe(textarea);
        }
        return () => {
          debouncedHandleResize.clear();
          cancelAnimationFrame(frameRef.current);
          containerWindow.removeEventListener("resize", debouncedHandleResize);
          if (resizeObserver) {
            resizeObserver.disconnect();
          }
        };
      }, [calculateTextareaStyles, syncHeight, didHeightChange]);
      (0, _utils.unstable_useEnhancedEffect)(() => {
        syncHeight();
      });
      const handleChange = (event) => {
        if (!isControlled) {
          syncHeight();
        }
        if (onChange) {
          onChange(event);
        }
      };
      return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(React7.Fragment, {
        children: [/* @__PURE__ */ (0, _jsxRuntime.jsx)("textarea", {
          value,
          onChange: handleChange,
          ref: handleRef,
          rows: minRows,
          style,
          ...other
        }), /* @__PURE__ */ (0, _jsxRuntime.jsx)("textarea", {
          "aria-hidden": true,
          className: props.className,
          readOnly: true,
          ref: hiddenTextareaRef,
          tabIndex: -1,
          style: {
            ...styles.shadow,
            ...style,
            paddingTop: 0,
            paddingBottom: 0
          }
        })]
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? TextareaAutosize.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * @ignore
       */
      className: _propTypes.default.string,
      /**
       * Maximum number of rows to display.
       */
      maxRows: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      /**
       * Minimum number of rows to display.
       * @default 1
       */
      minRows: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      /**
       * @ignore
       */
      onChange: _propTypes.default.func,
      /**
       * @ignore
       */
      placeholder: _propTypes.default.string,
      /**
       * @ignore
       */
      style: _propTypes.default.object,
      /**
       * @ignore
       */
      value: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.string), _propTypes.default.number, _propTypes.default.string])
    } : void 0;
    var _default = exports2.default = TextareaAutosize;
  }
});

// node_modules/@mui/material/node/TextareaAutosize/index.js
var require_TextareaAutosize2 = __commonJS({
  "node_modules/@mui/material/node/TextareaAutosize/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _TextareaAutosize.default;
      }
    });
    var _TextareaAutosize = _interopRequireDefault(require_TextareaAutosize());
  }
});

// node_modules/@mui/material/node/utils/isHostComponent.js
var require_isHostComponent5 = __commonJS({
  "node_modules/@mui/material/node/utils/isHostComponent.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    function isHostComponent(element) {
      return typeof element === "string";
    }
    var _default = exports2.default = isHostComponent;
  }
});

// node_modules/@mui/material/node/FormControl/formControlState.js
var require_formControlState = __commonJS({
  "node_modules/@mui/material/node/FormControl/formControlState.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = formControlState;
    function formControlState({
      props,
      states,
      muiFormControl
    }) {
      return states.reduce((acc, state) => {
        acc[state] = props[state];
        if (muiFormControl) {
          if (typeof props[state] === "undefined") {
            acc[state] = muiFormControl[state];
          }
        }
        return acc;
      }, {});
    }
  }
});

// node_modules/@mui/material/node/InputBase/utils.js
var require_utils6 = __commonJS({
  "node_modules/@mui/material/node/InputBase/utils.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.hasValue = hasValue;
    exports2.isAdornedStart = isAdornedStart;
    exports2.isFilled = isFilled;
    function hasValue(value) {
      return value != null && !(Array.isArray(value) && value.length === 0);
    }
    function isFilled(obj, SSR = false) {
      return obj && (hasValue(obj.value) && obj.value !== "" || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== "");
    }
    function isAdornedStart(obj) {
      return obj.startAdornment;
    }
  }
});

// node_modules/@mui/material/node/InputBase/inputBaseClasses.js
var require_inputBaseClasses = __commonJS({
  "node_modules/@mui/material/node/InputBase/inputBaseClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getInputBaseUtilityClass = getInputBaseUtilityClass;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    function getInputBaseUtilityClass(slot) {
      return (0, _generateUtilityClass.default)("MuiInputBase", slot);
    }
    var inputBaseClasses = (0, _generateUtilityClasses.default)("MuiInputBase", ["root", "formControl", "focused", "disabled", "adornedStart", "adornedEnd", "error", "sizeSmall", "multiline", "colorSecondary", "fullWidth", "hiddenLabel", "readOnly", "input", "inputSizeSmall", "inputMultiline", "inputTypeSearch", "inputAdornedStart", "inputAdornedEnd", "inputHiddenLabel"]);
    var _default = exports2.default = inputBaseClasses;
  }
});

// node_modules/@mui/material/node/InputBase/InputBase.js
var require_InputBase = __commonJS({
  "node_modules/@mui/material/node/InputBase/InputBase.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.rootOverridesResolver = exports2.inputOverridesResolver = exports2.default = exports2.InputBaseRoot = exports2.InputBaseInput = void 0;
    var _formatMuiErrorMessage2 = _interopRequireDefault(require_formatMuiErrorMessage2());
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _clsx = _interopRequireDefault(require_clsx());
    var _elementTypeAcceptingRef = _interopRequireDefault(require_elementTypeAcceptingRef2());
    var _refType = _interopRequireDefault(require_refType2());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _TextareaAutosize = _interopRequireDefault(require_TextareaAutosize2());
    var _isHostComponent = _interopRequireDefault(require_isHostComponent5());
    var _formControlState = _interopRequireDefault(require_formControlState());
    var _FormControlContext = _interopRequireDefault(require_FormControlContext());
    var _useFormControl = _interopRequireDefault(require_useFormControl());
    var _zeroStyled = require_zero_styled2();
    var _memoTheme = _interopRequireDefault(require_memoTheme2());
    var _DefaultPropsProvider = require_DefaultPropsProvider4();
    var _capitalize = _interopRequireDefault(require_capitalize3());
    var _useForkRef = _interopRequireDefault(require_useForkRef3());
    var _useEnhancedEffect = _interopRequireDefault(require_useEnhancedEffect3());
    var _utils = require_utils6();
    var _inputBaseClasses = _interopRequireWildcard(require_inputBaseClasses());
    var _jsxRuntime = require_jsx_runtime();
    var _InputGlobalStyles;
    var rootOverridesResolver = (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, ownerState.formControl && styles.formControl, ownerState.startAdornment && styles.adornedStart, ownerState.endAdornment && styles.adornedEnd, ownerState.error && styles.error, ownerState.size === "small" && styles.sizeSmall, ownerState.multiline && styles.multiline, ownerState.color && styles[`color${(0, _capitalize.default)(ownerState.color)}`], ownerState.fullWidth && styles.fullWidth, ownerState.hiddenLabel && styles.hiddenLabel];
    };
    exports2.rootOverridesResolver = rootOverridesResolver;
    var inputOverridesResolver = (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.input, ownerState.size === "small" && styles.inputSizeSmall, ownerState.multiline && styles.inputMultiline, ownerState.type === "search" && styles.inputTypeSearch, ownerState.startAdornment && styles.inputAdornedStart, ownerState.endAdornment && styles.inputAdornedEnd, ownerState.hiddenLabel && styles.inputHiddenLabel];
    };
    exports2.inputOverridesResolver = inputOverridesResolver;
    var useUtilityClasses = (ownerState) => {
      const {
        classes,
        color,
        disabled,
        error,
        endAdornment,
        focused,
        formControl,
        fullWidth,
        hiddenLabel,
        multiline,
        readOnly,
        size,
        startAdornment,
        type
      } = ownerState;
      const slots = {
        root: ["root", `color${(0, _capitalize.default)(color)}`, disabled && "disabled", error && "error", fullWidth && "fullWidth", focused && "focused", formControl && "formControl", size && size !== "medium" && `size${(0, _capitalize.default)(size)}`, multiline && "multiline", startAdornment && "adornedStart", endAdornment && "adornedEnd", hiddenLabel && "hiddenLabel", readOnly && "readOnly"],
        input: ["input", disabled && "disabled", type === "search" && "inputTypeSearch", multiline && "inputMultiline", size === "small" && "inputSizeSmall", hiddenLabel && "inputHiddenLabel", startAdornment && "inputAdornedStart", endAdornment && "inputAdornedEnd", readOnly && "readOnly"]
      };
      return (0, _composeClasses.default)(slots, _inputBaseClasses.getInputBaseUtilityClass, classes);
    };
    var InputBaseRoot = exports2.InputBaseRoot = (0, _zeroStyled.styled)("div", {
      name: "MuiInputBase",
      slot: "Root",
      overridesResolver: rootOverridesResolver
    })((0, _memoTheme.default)(({
      theme: theme2
    }) => ({
      ...theme2.typography.body1,
      color: (theme2.vars || theme2).palette.text.primary,
      lineHeight: "1.4375em",
      // 23px
      boxSizing: "border-box",
      // Prevent padding issue with fullWidth.
      position: "relative",
      cursor: "text",
      display: "inline-flex",
      alignItems: "center",
      [`&.${_inputBaseClasses.default.disabled}`]: {
        color: (theme2.vars || theme2).palette.text.disabled,
        cursor: "default"
      },
      variants: [{
        props: ({
          ownerState
        }) => ownerState.multiline,
        style: {
          padding: "4px 0 5px"
        }
      }, {
        props: ({
          ownerState,
          size
        }) => ownerState.multiline && size === "small",
        style: {
          paddingTop: 1
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.fullWidth,
        style: {
          width: "100%"
        }
      }]
    })));
    var InputBaseInput = exports2.InputBaseInput = (0, _zeroStyled.styled)("input", {
      name: "MuiInputBase",
      slot: "Input",
      overridesResolver: inputOverridesResolver
    })((0, _memoTheme.default)(({
      theme: theme2
    }) => {
      const light = theme2.palette.mode === "light";
      const placeholder = {
        color: "currentColor",
        ...theme2.vars ? {
          opacity: theme2.vars.opacity.inputPlaceholder
        } : {
          opacity: light ? 0.42 : 0.5
        },
        transition: theme2.transitions.create("opacity", {
          duration: theme2.transitions.duration.shorter
        })
      };
      const placeholderHidden = {
        opacity: "0 !important"
      };
      const placeholderVisible = theme2.vars ? {
        opacity: theme2.vars.opacity.inputPlaceholder
      } : {
        opacity: light ? 0.42 : 0.5
      };
      return {
        font: "inherit",
        letterSpacing: "inherit",
        color: "currentColor",
        padding: "4px 0 5px",
        border: 0,
        boxSizing: "content-box",
        background: "none",
        height: "1.4375em",
        // Reset 23pxthe native input line-height
        margin: 0,
        // Reset for Safari
        WebkitTapHighlightColor: "transparent",
        display: "block",
        // Make the flex item shrink with Firefox
        minWidth: 0,
        width: "100%",
        "&::-webkit-input-placeholder": placeholder,
        "&::-moz-placeholder": placeholder,
        // Firefox 19+
        "&::-ms-input-placeholder": placeholder,
        // Edge
        "&:focus": {
          outline: 0
        },
        // Reset Firefox invalid required input style
        "&:invalid": {
          boxShadow: "none"
        },
        "&::-webkit-search-decoration": {
          // Remove the padding when type=search.
          WebkitAppearance: "none"
        },
        // Show and hide the placeholder logic
        [`label[data-shrink=false] + .${_inputBaseClasses.default.formControl} &`]: {
          "&::-webkit-input-placeholder": placeholderHidden,
          "&::-moz-placeholder": placeholderHidden,
          // Firefox 19+
          "&::-ms-input-placeholder": placeholderHidden,
          // Edge
          "&:focus::-webkit-input-placeholder": placeholderVisible,
          "&:focus::-moz-placeholder": placeholderVisible,
          // Firefox 19+
          "&:focus::-ms-input-placeholder": placeholderVisible
          // Edge
        },
        [`&.${_inputBaseClasses.default.disabled}`]: {
          opacity: 1,
          // Reset iOS opacity
          WebkitTextFillColor: (theme2.vars || theme2).palette.text.disabled
          // Fix opacity Safari bug
        },
        variants: [{
          props: ({
            ownerState
          }) => !ownerState.disableInjectingGlobalStyles,
          style: {
            animationName: "mui-auto-fill-cancel",
            animationDuration: "10ms",
            "&:-webkit-autofill": {
              animationDuration: "5000s",
              animationName: "mui-auto-fill"
            }
          }
        }, {
          props: {
            size: "small"
          },
          style: {
            paddingTop: 1
          }
        }, {
          props: ({
            ownerState
          }) => ownerState.multiline,
          style: {
            height: "auto",
            resize: "none",
            padding: 0,
            paddingTop: 0
          }
        }, {
          props: {
            type: "search"
          },
          style: {
            MozAppearance: "textfield"
            // Improve type search style.
          }
        }]
      };
    }));
    var InputGlobalStyles = (0, _zeroStyled.globalCss)({
      "@keyframes mui-auto-fill": {
        from: {
          display: "block"
        }
      },
      "@keyframes mui-auto-fill-cancel": {
        from: {
          display: "block"
        }
      }
    });
    var InputBase = /* @__PURE__ */ React7.forwardRef(function InputBase2(inProps, ref) {
      const props = (0, _DefaultPropsProvider.useDefaultProps)({
        props: inProps,
        name: "MuiInputBase"
      });
      const {
        "aria-describedby": ariaDescribedby,
        autoComplete,
        autoFocus,
        className,
        color,
        components = {},
        componentsProps = {},
        defaultValue,
        disabled,
        disableInjectingGlobalStyles,
        endAdornment,
        error,
        fullWidth = false,
        id,
        inputComponent = "input",
        inputProps: inputPropsProp = {},
        inputRef: inputRefProp,
        margin,
        maxRows,
        minRows,
        multiline = false,
        name,
        onBlur,
        onChange,
        onClick,
        onFocus,
        onKeyDown,
        onKeyUp,
        placeholder,
        readOnly,
        renderSuffix,
        rows,
        size,
        slotProps = {},
        slots = {},
        startAdornment,
        type = "text",
        value: valueProp,
        ...other
      } = props;
      const value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;
      const {
        current: isControlled
      } = React7.useRef(value != null);
      const inputRef = React7.useRef();
      const handleInputRefWarning = React7.useCallback((instance) => {
        if (define_process_env_default.NODE_ENV !== "production") {
          if (instance && instance.nodeName !== "INPUT" && !instance.focus) {
            console.error(["MUI: You have provided a `inputComponent` to the input component", "that does not correctly handle the `ref` prop.", "Make sure the `ref` prop is called with a HTMLInputElement."].join("\n"));
          }
        }
      }, []);
      const handleInputRef = (0, _useForkRef.default)(inputRef, inputRefProp, inputPropsProp.ref, handleInputRefWarning);
      const [focused, setFocused] = React7.useState(false);
      const muiFormControl = (0, _useFormControl.default)();
      if (define_process_env_default.NODE_ENV !== "production") {
        React7.useEffect(() => {
          if (muiFormControl) {
            return muiFormControl.registerEffect();
          }
          return void 0;
        }, [muiFormControl]);
      }
      const fcs = (0, _formControlState.default)({
        props,
        muiFormControl,
        states: ["color", "disabled", "error", "hiddenLabel", "size", "required", "filled"]
      });
      fcs.focused = muiFormControl ? muiFormControl.focused : focused;
      React7.useEffect(() => {
        if (!muiFormControl && disabled && focused) {
          setFocused(false);
          if (onBlur) {
            onBlur();
          }
        }
      }, [muiFormControl, disabled, focused, onBlur]);
      const onFilled = muiFormControl && muiFormControl.onFilled;
      const onEmpty = muiFormControl && muiFormControl.onEmpty;
      const checkDirty = React7.useCallback((obj) => {
        if ((0, _utils.isFilled)(obj)) {
          if (onFilled) {
            onFilled();
          }
        } else if (onEmpty) {
          onEmpty();
        }
      }, [onFilled, onEmpty]);
      (0, _useEnhancedEffect.default)(() => {
        if (isControlled) {
          checkDirty({
            value
          });
        }
      }, [value, checkDirty, isControlled]);
      const handleFocus = (event) => {
        if (onFocus) {
          onFocus(event);
        }
        if (inputPropsProp.onFocus) {
          inputPropsProp.onFocus(event);
        }
        if (muiFormControl && muiFormControl.onFocus) {
          muiFormControl.onFocus(event);
        } else {
          setFocused(true);
        }
      };
      const handleBlur = (event) => {
        if (onBlur) {
          onBlur(event);
        }
        if (inputPropsProp.onBlur) {
          inputPropsProp.onBlur(event);
        }
        if (muiFormControl && muiFormControl.onBlur) {
          muiFormControl.onBlur(event);
        } else {
          setFocused(false);
        }
      };
      const handleChange = (event, ...args) => {
        if (!isControlled) {
          const element = event.target || inputRef.current;
          if (element == null) {
            throw new Error(define_process_env_default.NODE_ENV !== "production" ? "MUI: Expected valid input target. Did you use a custom `inputComponent` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info." : (0, _formatMuiErrorMessage2.default)(1));
          }
          checkDirty({
            value: element.value
          });
        }
        if (inputPropsProp.onChange) {
          inputPropsProp.onChange(event, ...args);
        }
        if (onChange) {
          onChange(event, ...args);
        }
      };
      React7.useEffect(() => {
        checkDirty(inputRef.current);
      }, []);
      const handleClick = (event) => {
        if (inputRef.current && event.currentTarget === event.target) {
          inputRef.current.focus();
        }
        if (onClick) {
          onClick(event);
        }
      };
      let InputComponent = inputComponent;
      let inputProps = inputPropsProp;
      if (multiline && InputComponent === "input") {
        if (rows) {
          if (define_process_env_default.NODE_ENV !== "production") {
            if (minRows || maxRows) {
              console.warn("MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.");
            }
          }
          inputProps = {
            type: void 0,
            minRows: rows,
            maxRows: rows,
            ...inputProps
          };
        } else {
          inputProps = {
            type: void 0,
            maxRows,
            minRows,
            ...inputProps
          };
        }
        InputComponent = _TextareaAutosize.default;
      }
      const handleAutoFill = (event) => {
        checkDirty(event.animationName === "mui-auto-fill-cancel" ? inputRef.current : {
          value: "x"
        });
      };
      React7.useEffect(() => {
        if (muiFormControl) {
          muiFormControl.setAdornedStart(Boolean(startAdornment));
        }
      }, [muiFormControl, startAdornment]);
      const ownerState = {
        ...props,
        color: fcs.color || "primary",
        disabled: fcs.disabled,
        endAdornment,
        error: fcs.error,
        focused: fcs.focused,
        formControl: muiFormControl,
        fullWidth,
        hiddenLabel: fcs.hiddenLabel,
        multiline,
        size: fcs.size,
        startAdornment,
        type
      };
      const classes = useUtilityClasses(ownerState);
      const Root = slots.root || components.Root || InputBaseRoot;
      const rootProps = slotProps.root || componentsProps.root || {};
      const Input = slots.input || components.Input || InputBaseInput;
      inputProps = {
        ...inputProps,
        ...slotProps.input ?? componentsProps.input
      };
      return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(React7.Fragment, {
        children: [!disableInjectingGlobalStyles && typeof InputGlobalStyles === "function" && // For Emotion/Styled-components, InputGlobalStyles will be a function
        // For Pigment CSS, this has no effect because the InputGlobalStyles will be null.
        (_InputGlobalStyles || (_InputGlobalStyles = /* @__PURE__ */ (0, _jsxRuntime.jsx)(InputGlobalStyles, {}))), /* @__PURE__ */ (0, _jsxRuntime.jsxs)(Root, {
          ...rootProps,
          ref,
          onClick: handleClick,
          ...other,
          ...!(0, _isHostComponent.default)(Root) && {
            ownerState: {
              ...ownerState,
              ...rootProps.ownerState
            }
          },
          className: (0, _clsx.default)(classes.root, rootProps.className, className, readOnly && "MuiInputBase-readOnly"),
          children: [startAdornment, /* @__PURE__ */ (0, _jsxRuntime.jsx)(_FormControlContext.default.Provider, {
            value: null,
            children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(Input, {
              "aria-invalid": fcs.error,
              "aria-describedby": ariaDescribedby,
              autoComplete,
              autoFocus,
              defaultValue,
              disabled: fcs.disabled,
              id,
              onAnimationStart: handleAutoFill,
              name,
              placeholder,
              readOnly,
              required: fcs.required,
              rows,
              value,
              onKeyDown,
              onKeyUp,
              type,
              ...inputProps,
              ...!(0, _isHostComponent.default)(Input) && {
                as: InputComponent,
                ownerState: {
                  ...ownerState,
                  ...inputProps.ownerState
                }
              },
              ref: handleInputRef,
              className: (0, _clsx.default)(classes.input, inputProps.className, readOnly && "MuiInputBase-readOnly"),
              onBlur: handleBlur,
              onChange: handleChange,
              onFocus: handleFocus
            })
          }), endAdornment, renderSuffix ? renderSuffix({
            ...fcs,
            startAdornment
          }) : null]
        })]
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? InputBase.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * @ignore
       */
      "aria-describedby": _propTypes.default.string,
      /**
       * This prop helps users to fill forms faster, especially on mobile devices.
       * The name can be confusing, as it's more like an autofill.
       * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
       */
      autoComplete: _propTypes.default.string,
      /**
       * If `true`, the `input` element is focused during the first mount.
       */
      autoFocus: _propTypes.default.bool,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      /**
       * @ignore
       */
      className: _propTypes.default.string,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
       * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
       */
      color: _propTypes.default.oneOfType([_propTypes.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), _propTypes.default.string]),
      /**
       * The components used for each slot inside.
       *
       * @deprecated use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       *
       * @default {}
       */
      components: _propTypes.default.shape({
        Input: _propTypes.default.elementType,
        Root: _propTypes.default.elementType
      }),
      /**
       * The extra props for the slot components.
       * You can override the existing props or add new ones.
       *
       * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       *
       * @default {}
       */
      componentsProps: _propTypes.default.shape({
        input: _propTypes.default.object,
        root: _propTypes.default.object
      }),
      /**
       * The default value. Use when the component is not controlled.
       */
      defaultValue: _propTypes.default.any,
      /**
       * If `true`, the component is disabled.
       * The prop defaults to the value (`false`) inherited from the parent FormControl component.
       */
      disabled: _propTypes.default.bool,
      /**
       * If `true`, GlobalStyles for the auto-fill keyframes will not be injected/removed on mount/unmount. Make sure to inject them at the top of your application.
       * This option is intended to help with boosting the initial rendering performance if you are loading a big amount of Input components at once.
       * @default false
       */
      disableInjectingGlobalStyles: _propTypes.default.bool,
      /**
       * End `InputAdornment` for this component.
       */
      endAdornment: _propTypes.default.node,
      /**
       * If `true`, the `input` will indicate an error.
       * The prop defaults to the value (`false`) inherited from the parent FormControl component.
       */
      error: _propTypes.default.bool,
      /**
       * If `true`, the `input` will take up the full width of its container.
       * @default false
       */
      fullWidth: _propTypes.default.bool,
      /**
       * The id of the `input` element.
       */
      id: _propTypes.default.string,
      /**
       * The component used for the `input` element.
       * Either a string to use a HTML element or a component.
       * @default 'input'
       */
      inputComponent: _elementTypeAcceptingRef.default,
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       * @default {}
       */
      inputProps: _propTypes.default.object,
      /**
       * Pass a ref to the `input` element.
       */
      inputRef: _refType.default,
      /**
       * If `dense`, will adjust vertical spacing. This is normally obtained via context from
       * FormControl.
       * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
       */
      margin: _propTypes.default.oneOf(["dense", "none"]),
      /**
       * Maximum number of rows to display when multiline option is set to true.
       */
      maxRows: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      /**
       * Minimum number of rows to display when multiline option is set to true.
       */
      minRows: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      /**
       * If `true`, a [TextareaAutosize](https://mui.com/material-ui/react-textarea-autosize/) element is rendered.
       * @default false
       */
      multiline: _propTypes.default.bool,
      /**
       * Name attribute of the `input` element.
       */
      name: _propTypes.default.string,
      /**
       * Callback fired when the `input` is blurred.
       *
       * Notice that the first argument (event) might be undefined.
       */
      onBlur: _propTypes.default.func,
      /**
       * Callback fired when the value is changed.
       *
       * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (string).
       */
      onChange: _propTypes.default.func,
      /**
       * @ignore
       */
      onClick: _propTypes.default.func,
      /**
       * @ignore
       */
      onFocus: _propTypes.default.func,
      /**
       * Callback fired when the `input` doesn't satisfy its constraints.
       */
      onInvalid: _propTypes.default.func,
      /**
       * @ignore
       */
      onKeyDown: _propTypes.default.func,
      /**
       * @ignore
       */
      onKeyUp: _propTypes.default.func,
      /**
       * The short hint displayed in the `input` before the user enters a value.
       */
      placeholder: _propTypes.default.string,
      /**
       * It prevents the user from changing the value of the field
       * (not from interacting with the field).
       */
      readOnly: _propTypes.default.bool,
      /**
       * @ignore
       */
      renderSuffix: _propTypes.default.func,
      /**
       * If `true`, the `input` element is required.
       * The prop defaults to the value (`false`) inherited from the parent FormControl component.
       */
      required: _propTypes.default.bool,
      /**
       * Number of rows to display when multiline option is set to true.
       */
      rows: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      /**
       * The size of the component.
       */
      size: _propTypes.default.oneOfType([_propTypes.default.oneOf(["medium", "small"]), _propTypes.default.string]),
      /**
       * The extra props for the slot components.
       * You can override the existing props or add new ones.
       *
       * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
       *
       * @default {}
       */
      slotProps: _propTypes.default.shape({
        input: _propTypes.default.object,
        root: _propTypes.default.object
      }),
      /**
       * The components used for each slot inside.
       *
       * This prop is an alias for the `components` prop, which will be deprecated in the future.
       *
       * @default {}
       */
      slots: _propTypes.default.shape({
        input: _propTypes.default.elementType,
        root: _propTypes.default.elementType
      }),
      /**
       * Start `InputAdornment` for this component.
       */
      startAdornment: _propTypes.default.node,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
      /**
       * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
       * @default 'text'
       */
      type: _propTypes.default.string,
      /**
       * The value of the `input` element, required for a controlled component.
       */
      value: _propTypes.default.any
    } : void 0;
    var _default = exports2.default = InputBase;
  }
});

// node_modules/@mui/material/node/InputBase/index.js
var require_InputBase2 = __commonJS({
  "node_modules/@mui/material/node/InputBase/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      inputBaseClasses: true
    };
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _InputBase.default;
      }
    });
    Object.defineProperty(exports2, "inputBaseClasses", {
      enumerable: true,
      get: function() {
        return _inputBaseClasses.default;
      }
    });
    var _InputBase = _interopRequireDefault(require_InputBase());
    var _inputBaseClasses = _interopRequireWildcard(require_inputBaseClasses());
    Object.keys(_inputBaseClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _inputBaseClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _inputBaseClasses[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node/Input/inputClasses.js
var require_inputClasses = __commonJS({
  "node_modules/@mui/material/node/Input/inputClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getInputUtilityClass = getInputUtilityClass;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    var _InputBase = require_InputBase2();
    function getInputUtilityClass(slot) {
      return (0, _generateUtilityClass.default)("MuiInput", slot);
    }
    var inputClasses = {
      ..._InputBase.inputBaseClasses,
      ...(0, _generateUtilityClasses.default)("MuiInput", ["root", "underline", "input"])
    };
    var _default = exports2.default = inputClasses;
  }
});

// node_modules/@mui/material/node/OutlinedInput/outlinedInputClasses.js
var require_outlinedInputClasses = __commonJS({
  "node_modules/@mui/material/node/OutlinedInput/outlinedInputClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getOutlinedInputUtilityClass = getOutlinedInputUtilityClass;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    var _InputBase = require_InputBase2();
    function getOutlinedInputUtilityClass(slot) {
      return (0, _generateUtilityClass.default)("MuiOutlinedInput", slot);
    }
    var outlinedInputClasses = {
      ..._InputBase.inputBaseClasses,
      ...(0, _generateUtilityClasses.default)("MuiOutlinedInput", ["root", "notchedOutline", "input"])
    };
    var _default = exports2.default = outlinedInputClasses;
  }
});

// node_modules/@mui/material/node/FilledInput/filledInputClasses.js
var require_filledInputClasses = __commonJS({
  "node_modules/@mui/material/node/FilledInput/filledInputClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getFilledInputUtilityClass = getFilledInputUtilityClass;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    var _InputBase = require_InputBase2();
    function getFilledInputUtilityClass(slot) {
      return (0, _generateUtilityClass.default)("MuiFilledInput", slot);
    }
    var filledInputClasses = {
      ..._InputBase.inputBaseClasses,
      ...(0, _generateUtilityClasses.default)("MuiFilledInput", ["root", "underline", "input", "adornedStart", "adornedEnd", "sizeSmall", "multiline", "hiddenLabel"])
    };
    var _default = exports2.default = filledInputClasses;
  }
});

// node_modules/@mui/material/node/internal/svg-icons/Close.js
var require_Close = __commonJS({
  "node_modules/@mui/material/node/internal/svg-icons/Close.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
    var _jsxRuntime = require_jsx_runtime();
    var _default = exports2.default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
      d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
    }), "Close");
  }
});

// node_modules/@mui/material/node/internal/svg-icons/ArrowDropDown.js
var require_ArrowDropDown = __commonJS({
  "node_modules/@mui/material/node/internal/svg-icons/ArrowDropDown.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
    var _jsxRuntime = require_jsx_runtime();
    var _default = exports2.default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
      d: "M7 10l5 5 5-5z"
    }), "ArrowDropDown");
  }
});

// node_modules/@mui/material/node/Autocomplete/autocompleteClasses.js
var require_autocompleteClasses = __commonJS({
  "node_modules/@mui/material/node/Autocomplete/autocompleteClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getAutocompleteUtilityClass = getAutocompleteUtilityClass;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    function getAutocompleteUtilityClass(slot) {
      return (0, _generateUtilityClass.default)("MuiAutocomplete", slot);
    }
    var autocompleteClasses = (0, _generateUtilityClasses.default)("MuiAutocomplete", ["root", "expanded", "fullWidth", "focused", "focusVisible", "tag", "tagSizeSmall", "tagSizeMedium", "hasPopupIcon", "hasClearIcon", "inputRoot", "input", "inputFocused", "endAdornment", "clearIndicator", "popupIndicator", "popupIndicatorOpen", "popper", "popperDisablePortal", "paper", "listbox", "loading", "noOptions", "option", "groupLabel", "groupUl"]);
    var _default = exports2.default = autocompleteClasses;
  }
});

// node_modules/@mui/material/node/Autocomplete/Autocomplete.js
var require_Autocomplete = __commonJS({
  "node_modules/@mui/material/node/Autocomplete/Autocomplete.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "createFilterOptions", {
      enumerable: true,
      get: function() {
        return _useAutocomplete.createFilterOptions;
      }
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _clsx = _interopRequireDefault(require_clsx());
    var _integerPropType = _interopRequireDefault(require_integerPropType2());
    var _chainPropTypes = _interopRequireDefault(require_chainPropTypes2());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _colorManipulator = require_colorManipulator2();
    var _useAutocomplete = _interopRequireWildcard(require_useAutocomplete2());
    var _Popper = _interopRequireDefault(require_Popper2());
    var _ListSubheader = _interopRequireDefault(require_ListSubheader2());
    var _Paper = _interopRequireDefault(require_Paper2());
    var _IconButton = _interopRequireDefault(require_IconButton2());
    var _Chip = _interopRequireDefault(require_Chip2());
    var _inputClasses = _interopRequireDefault(require_inputClasses());
    var _inputBaseClasses = _interopRequireDefault(require_inputBaseClasses());
    var _outlinedInputClasses = _interopRequireDefault(require_outlinedInputClasses());
    var _filledInputClasses = _interopRequireDefault(require_filledInputClasses());
    var _Close = _interopRequireDefault(require_Close());
    var _ArrowDropDown = _interopRequireDefault(require_ArrowDropDown());
    var _zeroStyled = require_zero_styled2();
    var _memoTheme = _interopRequireDefault(require_memoTheme2());
    var _DefaultPropsProvider = require_DefaultPropsProvider4();
    var _autocompleteClasses = _interopRequireWildcard(require_autocompleteClasses());
    var _capitalize = _interopRequireDefault(require_capitalize3());
    var _useSlot = _interopRequireDefault(require_useSlot());
    var _jsxRuntime = require_jsx_runtime();
    var _ClearIcon;
    var _ArrowDropDownIcon;
    var useUtilityClasses = (ownerState) => {
      const {
        classes,
        disablePortal,
        expanded,
        focused,
        fullWidth,
        hasClearIcon,
        hasPopupIcon,
        inputFocused,
        popupOpen,
        size
      } = ownerState;
      const slots = {
        root: ["root", expanded && "expanded", focused && "focused", fullWidth && "fullWidth", hasClearIcon && "hasClearIcon", hasPopupIcon && "hasPopupIcon"],
        inputRoot: ["inputRoot"],
        input: ["input", inputFocused && "inputFocused"],
        tag: ["tag", `tagSize${(0, _capitalize.default)(size)}`],
        endAdornment: ["endAdornment"],
        clearIndicator: ["clearIndicator"],
        popupIndicator: ["popupIndicator", popupOpen && "popupIndicatorOpen"],
        popper: ["popper", disablePortal && "popperDisablePortal"],
        paper: ["paper"],
        listbox: ["listbox"],
        loading: ["loading"],
        noOptions: ["noOptions"],
        option: ["option"],
        groupLabel: ["groupLabel"],
        groupUl: ["groupUl"]
      };
      return (0, _composeClasses.default)(slots, _autocompleteClasses.getAutocompleteUtilityClass, classes);
    };
    var AutocompleteRoot = (0, _zeroStyled.styled)("div", {
      name: "MuiAutocomplete",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        const {
          fullWidth,
          hasClearIcon,
          hasPopupIcon,
          inputFocused,
          size
        } = ownerState;
        return [{
          [`& .${_autocompleteClasses.default.tag}`]: styles.tag
        }, {
          [`& .${_autocompleteClasses.default.tag}`]: styles[`tagSize${(0, _capitalize.default)(size)}`]
        }, {
          [`& .${_autocompleteClasses.default.inputRoot}`]: styles.inputRoot
        }, {
          [`& .${_autocompleteClasses.default.input}`]: styles.input
        }, {
          [`& .${_autocompleteClasses.default.input}`]: inputFocused && styles.inputFocused
        }, styles.root, fullWidth && styles.fullWidth, hasPopupIcon && styles.hasPopupIcon, hasClearIcon && styles.hasClearIcon];
      }
    })({
      [`&.${_autocompleteClasses.default.focused} .${_autocompleteClasses.default.clearIndicator}`]: {
        visibility: "visible"
      },
      /* Avoid double tap issue on iOS */
      "@media (pointer: fine)": {
        [`&:hover .${_autocompleteClasses.default.clearIndicator}`]: {
          visibility: "visible"
        }
      },
      [`& .${_autocompleteClasses.default.tag}`]: {
        margin: 3,
        maxWidth: "calc(100% - 6px)"
      },
      [`& .${_autocompleteClasses.default.inputRoot}`]: {
        [`.${_autocompleteClasses.default.hasPopupIcon}&, .${_autocompleteClasses.default.hasClearIcon}&`]: {
          paddingRight: 26 + 4
        },
        [`.${_autocompleteClasses.default.hasPopupIcon}.${_autocompleteClasses.default.hasClearIcon}&`]: {
          paddingRight: 52 + 4
        },
        [`& .${_autocompleteClasses.default.input}`]: {
          width: 0,
          minWidth: 30
        }
      },
      [`& .${_inputClasses.default.root}`]: {
        paddingBottom: 1,
        "& .MuiInput-input": {
          padding: "4px 4px 4px 0px"
        }
      },
      [`& .${_inputClasses.default.root}.${_inputBaseClasses.default.sizeSmall}`]: {
        [`& .${_inputClasses.default.input}`]: {
          padding: "2px 4px 3px 0"
        }
      },
      [`& .${_outlinedInputClasses.default.root}`]: {
        padding: 9,
        [`.${_autocompleteClasses.default.hasPopupIcon}&, .${_autocompleteClasses.default.hasClearIcon}&`]: {
          paddingRight: 26 + 4 + 9
        },
        [`.${_autocompleteClasses.default.hasPopupIcon}.${_autocompleteClasses.default.hasClearIcon}&`]: {
          paddingRight: 52 + 4 + 9
        },
        [`& .${_autocompleteClasses.default.input}`]: {
          padding: "7.5px 4px 7.5px 5px"
        },
        [`& .${_autocompleteClasses.default.endAdornment}`]: {
          right: 9
        }
      },
      [`& .${_outlinedInputClasses.default.root}.${_inputBaseClasses.default.sizeSmall}`]: {
        // Don't specify paddingRight, as it overrides the default value set when there is only
        // one of the popup or clear icon as the specificity is equal so the latter one wins
        paddingTop: 6,
        paddingBottom: 6,
        paddingLeft: 6,
        [`& .${_autocompleteClasses.default.input}`]: {
          padding: "2.5px 4px 2.5px 8px"
        }
      },
      [`& .${_filledInputClasses.default.root}`]: {
        paddingTop: 19,
        paddingLeft: 8,
        [`.${_autocompleteClasses.default.hasPopupIcon}&, .${_autocompleteClasses.default.hasClearIcon}&`]: {
          paddingRight: 26 + 4 + 9
        },
        [`.${_autocompleteClasses.default.hasPopupIcon}.${_autocompleteClasses.default.hasClearIcon}&`]: {
          paddingRight: 52 + 4 + 9
        },
        [`& .${_filledInputClasses.default.input}`]: {
          padding: "7px 4px"
        },
        [`& .${_autocompleteClasses.default.endAdornment}`]: {
          right: 9
        }
      },
      [`& .${_filledInputClasses.default.root}.${_inputBaseClasses.default.sizeSmall}`]: {
        paddingBottom: 1,
        [`& .${_filledInputClasses.default.input}`]: {
          padding: "2.5px 4px"
        }
      },
      [`& .${_inputBaseClasses.default.hiddenLabel}`]: {
        paddingTop: 8
      },
      [`& .${_filledInputClasses.default.root}.${_inputBaseClasses.default.hiddenLabel}`]: {
        paddingTop: 0,
        paddingBottom: 0,
        [`& .${_autocompleteClasses.default.input}`]: {
          paddingTop: 16,
          paddingBottom: 17
        }
      },
      [`& .${_filledInputClasses.default.root}.${_inputBaseClasses.default.hiddenLabel}.${_inputBaseClasses.default.sizeSmall}`]: {
        [`& .${_autocompleteClasses.default.input}`]: {
          paddingTop: 8,
          paddingBottom: 9
        }
      },
      [`& .${_autocompleteClasses.default.input}`]: {
        flexGrow: 1,
        textOverflow: "ellipsis",
        opacity: 0
      },
      variants: [{
        props: {
          fullWidth: true
        },
        style: {
          width: "100%"
        }
      }, {
        props: {
          size: "small"
        },
        style: {
          [`& .${_autocompleteClasses.default.tag}`]: {
            margin: 2,
            maxWidth: "calc(100% - 4px)"
          }
        }
      }, {
        props: {
          inputFocused: true
        },
        style: {
          [`& .${_autocompleteClasses.default.input}`]: {
            opacity: 1
          }
        }
      }, {
        props: {
          multiple: true
        },
        style: {
          [`& .${_autocompleteClasses.default.inputRoot}`]: {
            flexWrap: "wrap"
          }
        }
      }]
    });
    var AutocompleteEndAdornment = (0, _zeroStyled.styled)("div", {
      name: "MuiAutocomplete",
      slot: "EndAdornment",
      overridesResolver: (props, styles) => styles.endAdornment
    })({
      // We use a position absolute to support wrapping tags.
      position: "absolute",
      right: 0,
      top: "50%",
      transform: "translate(0, -50%)"
    });
    var AutocompleteClearIndicator = (0, _zeroStyled.styled)(_IconButton.default, {
      name: "MuiAutocomplete",
      slot: "ClearIndicator",
      overridesResolver: (props, styles) => styles.clearIndicator
    })({
      marginRight: -2,
      padding: 4,
      visibility: "hidden"
    });
    var AutocompletePopupIndicator = (0, _zeroStyled.styled)(_IconButton.default, {
      name: "MuiAutocomplete",
      slot: "PopupIndicator",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.popupIndicator, ownerState.popupOpen && styles.popupIndicatorOpen];
      }
    })({
      padding: 2,
      marginRight: -2,
      variants: [{
        props: {
          popupOpen: true
        },
        style: {
          transform: "rotate(180deg)"
        }
      }]
    });
    var AutocompletePopper = (0, _zeroStyled.styled)(_Popper.default, {
      name: "MuiAutocomplete",
      slot: "Popper",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [{
          [`& .${_autocompleteClasses.default.option}`]: styles.option
        }, styles.popper, ownerState.disablePortal && styles.popperDisablePortal];
      }
    })((0, _memoTheme.default)(({
      theme: theme2
    }) => ({
      zIndex: (theme2.vars || theme2).zIndex.modal,
      variants: [{
        props: {
          disablePortal: true
        },
        style: {
          position: "absolute"
        }
      }]
    })));
    var AutocompletePaper = (0, _zeroStyled.styled)(_Paper.default, {
      name: "MuiAutocomplete",
      slot: "Paper",
      overridesResolver: (props, styles) => styles.paper
    })((0, _memoTheme.default)(({
      theme: theme2
    }) => ({
      ...theme2.typography.body1,
      overflow: "auto"
    })));
    var AutocompleteLoading = (0, _zeroStyled.styled)("div", {
      name: "MuiAutocomplete",
      slot: "Loading",
      overridesResolver: (props, styles) => styles.loading
    })((0, _memoTheme.default)(({
      theme: theme2
    }) => ({
      color: (theme2.vars || theme2).palette.text.secondary,
      padding: "14px 16px"
    })));
    var AutocompleteNoOptions = (0, _zeroStyled.styled)("div", {
      name: "MuiAutocomplete",
      slot: "NoOptions",
      overridesResolver: (props, styles) => styles.noOptions
    })((0, _memoTheme.default)(({
      theme: theme2
    }) => ({
      color: (theme2.vars || theme2).palette.text.secondary,
      padding: "14px 16px"
    })));
    var AutocompleteListbox = (0, _zeroStyled.styled)("ul", {
      name: "MuiAutocomplete",
      slot: "Listbox",
      overridesResolver: (props, styles) => styles.listbox
    })((0, _memoTheme.default)(({
      theme: theme2
    }) => ({
      listStyle: "none",
      margin: 0,
      padding: "8px 0",
      maxHeight: "40vh",
      overflow: "auto",
      position: "relative",
      [`& .${_autocompleteClasses.default.option}`]: {
        minHeight: 48,
        display: "flex",
        overflow: "hidden",
        justifyContent: "flex-start",
        alignItems: "center",
        cursor: "pointer",
        paddingTop: 6,
        boxSizing: "border-box",
        outline: "0",
        WebkitTapHighlightColor: "transparent",
        paddingBottom: 6,
        paddingLeft: 16,
        paddingRight: 16,
        [theme2.breakpoints.up("sm")]: {
          minHeight: "auto"
        },
        [`&.${_autocompleteClasses.default.focused}`]: {
          backgroundColor: (theme2.vars || theme2).palette.action.hover,
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        },
        '&[aria-disabled="true"]': {
          opacity: (theme2.vars || theme2).palette.action.disabledOpacity,
          pointerEvents: "none"
        },
        [`&.${_autocompleteClasses.default.focusVisible}`]: {
          backgroundColor: (theme2.vars || theme2).palette.action.focus
        },
        '&[aria-selected="true"]': {
          backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / ${theme2.vars.palette.action.selectedOpacity})` : (0, _colorManipulator.alpha)(theme2.palette.primary.main, theme2.palette.action.selectedOpacity),
          [`&.${_autocompleteClasses.default.focused}`]: {
            backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / calc(${theme2.vars.palette.action.selectedOpacity} + ${theme2.vars.palette.action.hoverOpacity}))` : (0, _colorManipulator.alpha)(theme2.palette.primary.main, theme2.palette.action.selectedOpacity + theme2.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            "@media (hover: none)": {
              backgroundColor: (theme2.vars || theme2).palette.action.selected
            }
          },
          [`&.${_autocompleteClasses.default.focusVisible}`]: {
            backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / calc(${theme2.vars.palette.action.selectedOpacity} + ${theme2.vars.palette.action.focusOpacity}))` : (0, _colorManipulator.alpha)(theme2.palette.primary.main, theme2.palette.action.selectedOpacity + theme2.palette.action.focusOpacity)
          }
        }
      }
    })));
    var AutocompleteGroupLabel = (0, _zeroStyled.styled)(_ListSubheader.default, {
      name: "MuiAutocomplete",
      slot: "GroupLabel",
      overridesResolver: (props, styles) => styles.groupLabel
    })((0, _memoTheme.default)(({
      theme: theme2
    }) => ({
      backgroundColor: (theme2.vars || theme2).palette.background.paper,
      top: -8
    })));
    var AutocompleteGroupUl = (0, _zeroStyled.styled)("ul", {
      name: "MuiAutocomplete",
      slot: "GroupUl",
      overridesResolver: (props, styles) => styles.groupUl
    })({
      padding: 0,
      [`& .${_autocompleteClasses.default.option}`]: {
        paddingLeft: 24
      }
    });
    var Autocomplete2 = /* @__PURE__ */ React7.forwardRef(function Autocomplete3(inProps, ref) {
      const props = (0, _DefaultPropsProvider.useDefaultProps)({
        props: inProps,
        name: "MuiAutocomplete"
      });
      const {
        autoComplete = false,
        autoHighlight = false,
        autoSelect = false,
        blurOnSelect = false,
        ChipProps: ChipPropsProp,
        className,
        clearIcon = _ClearIcon || (_ClearIcon = /* @__PURE__ */ (0, _jsxRuntime.jsx)(_Close.default, {
          fontSize: "small"
        })),
        clearOnBlur = !props.freeSolo,
        clearOnEscape = false,
        clearText = "Clear",
        closeText = "Close",
        componentsProps,
        defaultValue = props.multiple ? [] : null,
        disableClearable = false,
        disableCloseOnSelect = false,
        disabled = false,
        disabledItemsFocusable = false,
        disableListWrap = false,
        disablePortal = false,
        filterOptions,
        filterSelectedOptions = false,
        forcePopupIcon = "auto",
        freeSolo = false,
        fullWidth = false,
        getLimitTagsText = (more) => `+${more}`,
        getOptionDisabled,
        getOptionKey,
        getOptionLabel: getOptionLabelProp,
        isOptionEqualToValue,
        groupBy,
        handleHomeEndKeys = !props.freeSolo,
        id: idProp,
        includeInputInList = false,
        inputValue: inputValueProp,
        limitTags = -1,
        ListboxComponent: ListboxComponentProp,
        ListboxProps: ListboxPropsProp,
        loading = false,
        loadingText = "Loading\u2026",
        multiple = false,
        noOptionsText = "No options",
        onChange,
        onClose,
        onHighlightChange,
        onInputChange,
        onOpen,
        open,
        openOnFocus = false,
        openText = "Open",
        options,
        PaperComponent: PaperComponentProp,
        PopperComponent: PopperComponentProp,
        popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /* @__PURE__ */ (0, _jsxRuntime.jsx)(_ArrowDropDown.default, {})),
        readOnly = false,
        renderGroup: renderGroupProp,
        renderInput,
        renderOption: renderOptionProp,
        renderTags,
        selectOnFocus = !props.freeSolo,
        size = "medium",
        slots = {},
        slotProps = {},
        value: valueProp,
        ...other
      } = props;
      const {
        getRootProps,
        getInputProps,
        getInputLabelProps,
        getPopupIndicatorProps,
        getClearProps,
        getTagProps,
        getListboxProps,
        getOptionProps,
        value,
        dirty,
        expanded,
        id,
        popupOpen,
        focused,
        focusedTag,
        anchorEl,
        setAnchorEl,
        inputValue,
        groupedOptions
      } = (0, _useAutocomplete.default)({
        ...props,
        componentName: "Autocomplete"
      });
      const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;
      const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;
      const {
        onMouseDown: handleInputMouseDown
      } = getInputProps();
      const {
        ref: listboxRef,
        ...otherListboxProps
      } = getListboxProps();
      const defaultGetOptionLabel = (option) => option.label ?? option;
      const getOptionLabel = getOptionLabelProp || defaultGetOptionLabel;
      const ownerState = {
        ...props,
        disablePortal,
        expanded,
        focused,
        fullWidth,
        getOptionLabel,
        hasClearIcon,
        hasPopupIcon,
        inputFocused: focusedTag === -1,
        popupOpen,
        size
      };
      const classes = useUtilityClasses(ownerState);
      const externalForwardedProps = {
        slots: {
          paper: PaperComponentProp,
          popper: PopperComponentProp,
          ...slots
        },
        slotProps: {
          chip: ChipPropsProp,
          listbox: ListboxPropsProp,
          ...componentsProps,
          ...slotProps
        }
      };
      const [ListboxSlot, listboxProps] = (0, _useSlot.default)("listbox", {
        elementType: AutocompleteListbox,
        externalForwardedProps,
        ownerState,
        className: classes.listbox,
        additionalProps: otherListboxProps,
        ref: listboxRef
      });
      const [PaperSlot, paperProps] = (0, _useSlot.default)("paper", {
        elementType: _Paper.default,
        externalForwardedProps,
        ownerState,
        className: classes.paper
      });
      const [PopperSlot, popperProps] = (0, _useSlot.default)("popper", {
        elementType: _Popper.default,
        externalForwardedProps,
        ownerState,
        className: classes.popper,
        additionalProps: {
          disablePortal,
          style: {
            width: anchorEl ? anchorEl.clientWidth : null
          },
          role: "presentation",
          anchorEl,
          open: popupOpen
        }
      });
      let startAdornment;
      if (multiple && value.length > 0) {
        const getCustomizedTagProps = (params) => ({
          className: classes.tag,
          disabled,
          ...getTagProps(params)
        });
        if (renderTags) {
          startAdornment = renderTags(value, getCustomizedTagProps, ownerState);
        } else {
          startAdornment = value.map((option, index) => {
            const {
              key,
              ...customTagProps
            } = getCustomizedTagProps({
              index
            });
            return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_Chip.default, {
              label: getOptionLabel(option),
              size,
              ...customTagProps,
              ...externalForwardedProps.slotProps.chip
            }, key);
          });
        }
      }
      if (limitTags > -1 && Array.isArray(startAdornment)) {
        const more = startAdornment.length - limitTags;
        if (!focused && more > 0) {
          startAdornment = startAdornment.splice(0, limitTags);
          startAdornment.push(/* @__PURE__ */ (0, _jsxRuntime.jsx)("span", {
            className: classes.tag,
            children: getLimitTagsText(more)
          }, startAdornment.length));
        }
      }
      const defaultRenderGroup = (params) => /* @__PURE__ */ (0, _jsxRuntime.jsxs)("li", {
        children: [/* @__PURE__ */ (0, _jsxRuntime.jsx)(AutocompleteGroupLabel, {
          className: classes.groupLabel,
          ownerState,
          component: "div",
          children: params.group
        }), /* @__PURE__ */ (0, _jsxRuntime.jsx)(AutocompleteGroupUl, {
          className: classes.groupUl,
          ownerState,
          children: params.children
        })]
      }, params.key);
      const renderGroup = renderGroupProp || defaultRenderGroup;
      const defaultRenderOption = (props2, option) => {
        const {
          key,
          ...otherProps
        } = props2;
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)("li", {
          ...otherProps,
          children: getOptionLabel(option)
        }, key);
      };
      const renderOption = renderOptionProp || defaultRenderOption;
      const renderListOption = (option, index) => {
        const optionProps = getOptionProps({
          option,
          index
        });
        return renderOption({
          ...optionProps,
          className: classes.option
        }, option, {
          selected: optionProps["aria-selected"],
          index,
          inputValue
        }, ownerState);
      };
      const clearIndicatorSlotProps = externalForwardedProps.slotProps.clearIndicator;
      const popupIndicatorSlotProps = externalForwardedProps.slotProps.popupIndicator;
      return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(React7.Fragment, {
        children: [/* @__PURE__ */ (0, _jsxRuntime.jsx)(AutocompleteRoot, {
          ref,
          className: (0, _clsx.default)(classes.root, className),
          ownerState,
          ...getRootProps(other),
          children: renderInput({
            id,
            disabled,
            fullWidth: true,
            size: size === "small" ? "small" : void 0,
            InputLabelProps: getInputLabelProps(),
            InputProps: {
              ref: setAnchorEl,
              className: classes.inputRoot,
              startAdornment,
              onMouseDown: (event) => {
                if (event.target === event.currentTarget) {
                  handleInputMouseDown(event);
                }
              },
              ...(hasClearIcon || hasPopupIcon) && {
                endAdornment: /* @__PURE__ */ (0, _jsxRuntime.jsxs)(AutocompleteEndAdornment, {
                  className: classes.endAdornment,
                  ownerState,
                  children: [hasClearIcon ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(AutocompleteClearIndicator, {
                    ...getClearProps(),
                    "aria-label": clearText,
                    title: clearText,
                    ownerState,
                    ...clearIndicatorSlotProps,
                    className: (0, _clsx.default)(classes.clearIndicator, clearIndicatorSlotProps?.className),
                    children: clearIcon
                  }) : null, hasPopupIcon ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(AutocompletePopupIndicator, {
                    ...getPopupIndicatorProps(),
                    disabled,
                    "aria-label": popupOpen ? closeText : openText,
                    title: popupOpen ? closeText : openText,
                    ownerState,
                    ...popupIndicatorSlotProps,
                    className: (0, _clsx.default)(classes.popupIndicator, popupIndicatorSlotProps?.className),
                    children: popupIcon
                  }) : null]
                })
              }
            },
            inputProps: {
              className: classes.input,
              disabled,
              readOnly,
              ...getInputProps()
            }
          })
        }), anchorEl ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(AutocompletePopper, {
          as: PopperSlot,
          ...popperProps,
          children: /* @__PURE__ */ (0, _jsxRuntime.jsxs)(AutocompletePaper, {
            as: PaperSlot,
            ...paperProps,
            children: [loading && groupedOptions.length === 0 ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(AutocompleteLoading, {
              className: classes.loading,
              ownerState,
              children: loadingText
            }) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(AutocompleteNoOptions, {
              className: classes.noOptions,
              ownerState,
              role: "presentation",
              onMouseDown: (event) => {
                event.preventDefault();
              },
              children: noOptionsText
            }) : null, groupedOptions.length > 0 ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(ListboxSlot, {
              as: ListboxComponentProp,
              ...listboxProps,
              children: groupedOptions.map((option, index) => {
                if (groupBy) {
                  return renderGroup({
                    key: option.key,
                    group: option.group,
                    children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))
                  });
                }
                return renderListOption(option, index);
              })
            }) : null]
          })
        }) : null]
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? Autocomplete2.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * If `true`, the portion of the selected suggestion that the user hasn't typed,
       * known as the completion string, appears inline after the input cursor in the textbox.
       * The inline completion string is visually highlighted and has a selected state.
       * @default false
       */
      autoComplete: _propTypes.default.bool,
      /**
       * If `true`, the first option is automatically highlighted.
       * @default false
       */
      autoHighlight: _propTypes.default.bool,
      /**
       * If `true`, the selected option becomes the value of the input
       * when the Autocomplete loses focus unless the user chooses
       * a different option or changes the character string in the input.
       *
       * When using the `freeSolo` mode, the typed value will be the input value
       * if the Autocomplete loses focus without highlighting an option.
       * @default false
       */
      autoSelect: _propTypes.default.bool,
      /**
       * Control if the input should be blurred when an option is selected:
       *
       * - `false` the input is not blurred.
       * - `true` the input is always blurred.
       * - `touch` the input is blurred after a touch event.
       * - `mouse` the input is blurred after a mouse event.
       * @default false
       */
      blurOnSelect: _propTypes.default.oneOfType([_propTypes.default.oneOf(["mouse", "touch"]), _propTypes.default.bool]),
      /**
       * Props applied to the [`Chip`](https://mui.com/material-ui/api/chip/) element.
       * @deprecated Use `slotProps.chip` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       */
      ChipProps: _propTypes.default.object,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      /**
       * @ignore
       */
      className: _propTypes.default.string,
      /**
       * The icon to display in place of the default clear icon.
       * @default <ClearIcon fontSize="small" />
       */
      clearIcon: _propTypes.default.node,
      /**
       * If `true`, the input's text is cleared on blur if no value is selected.
       *
       * Set it to `true` if you want to help the user enter a new value.
       * Set it to `false` if you want to help the user resume their search.
       * @default !props.freeSolo
       */
      clearOnBlur: _propTypes.default.bool,
      /**
       * If `true`, clear all values when the user presses escape and the popup is closed.
       * @default false
       */
      clearOnEscape: _propTypes.default.bool,
      /**
       * Override the default text for the *clear* icon button.
       *
       * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
       * @default 'Clear'
       */
      clearText: _propTypes.default.string,
      /**
       * Override the default text for the *close popup* icon button.
       *
       * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
       * @default 'Close'
       */
      closeText: _propTypes.default.string,
      /**
       * The props used for each slot inside.
       * @deprecated Use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       */
      componentsProps: _propTypes.default.shape({
        clearIndicator: _propTypes.default.object,
        paper: _propTypes.default.object,
        popper: _propTypes.default.object,
        popupIndicator: _propTypes.default.object
      }),
      /**
       * The default value. Use when the component is not controlled.
       * @default props.multiple ? [] : null
       */
      defaultValue: (0, _chainPropTypes.default)(_propTypes.default.any, (props) => {
        if (props.multiple && props.defaultValue !== void 0 && !Array.isArray(props.defaultValue)) {
          return new Error(["MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.", `However, ${props.defaultValue} was provided.`].join("\n"));
        }
        return null;
      }),
      /**
       * If `true`, the input can't be cleared.
       * @default false
       */
      disableClearable: _propTypes.default.bool,
      /**
       * If `true`, the popup won't close when a value is selected.
       * @default false
       */
      disableCloseOnSelect: _propTypes.default.bool,
      /**
       * If `true`, the component is disabled.
       * @default false
       */
      disabled: _propTypes.default.bool,
      /**
       * If `true`, will allow focus on disabled items.
       * @default false
       */
      disabledItemsFocusable: _propTypes.default.bool,
      /**
       * If `true`, the list box in the popup will not wrap focus.
       * @default false
       */
      disableListWrap: _propTypes.default.bool,
      /**
       * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.
       * @default false
       */
      disablePortal: _propTypes.default.bool,
      /**
       * A function that determines the filtered options to be rendered on search.
       *
       * @default createFilterOptions()
       * @param {Value[]} options The options to render.
       * @param {object} state The state of the component.
       * @returns {Value[]}
       */
      filterOptions: _propTypes.default.func,
      /**
       * If `true`, hide the selected options from the list box.
       * @default false
       */
      filterSelectedOptions: _propTypes.default.bool,
      /**
       * Force the visibility display of the popup icon.
       * @default 'auto'
       */
      forcePopupIcon: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.bool]),
      /**
       * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.
       * @default false
       */
      freeSolo: _propTypes.default.bool,
      /**
       * If `true`, the input will take up the full width of its container.
       * @default false
       */
      fullWidth: _propTypes.default.bool,
      /**
       * The label to display when the tags are truncated (`limitTags`).
       *
       * @param {number} more The number of truncated tags.
       * @returns {ReactNode}
       * @default (more) => `+${more}`
       */
      getLimitTagsText: _propTypes.default.func,
      /**
       * Used to determine the disabled state for a given option.
       *
       * @param {Value} option The option to test.
       * @returns {boolean}
       */
      getOptionDisabled: _propTypes.default.func,
      /**
       * Used to determine the key for a given option.
       * This can be useful when the labels of options are not unique (since labels are used as keys by default).
       *
       * @param {Value} option The option to get the key for.
       * @returns {string | number}
       */
      getOptionKey: _propTypes.default.func,
      /**
       * Used to determine the string value for a given option.
       * It's used to fill the input (and the list box options if `renderOption` is not provided).
       *
       * If used in free solo mode, it must accept both the type of the options and a string.
       *
       * @param {Value} option
       * @returns {string}
       * @default (option) => option.label ?? option
       */
      getOptionLabel: _propTypes.default.func,
      /**
       * If provided, the options will be grouped under the returned string.
       * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.
       *
       * @param {Value} option The Autocomplete option.
       * @returns {string}
       */
      groupBy: _propTypes.default.func,
      /**
       * If `true`, the component handles the "Home" and "End" keys when the popup is open.
       * It should move focus to the first option and last option, respectively.
       * @default !props.freeSolo
       */
      handleHomeEndKeys: _propTypes.default.bool,
      /**
       * This prop is used to help implement the accessibility logic.
       * If you don't provide an id it will fall back to a randomly generated one.
       */
      id: _propTypes.default.string,
      /**
       * If `true`, the highlight can move to the input.
       * @default false
       */
      includeInputInList: _propTypes.default.bool,
      /**
       * The input value.
       */
      inputValue: _propTypes.default.string,
      /**
       * Used to determine if the option represents the given value.
       * Uses strict equality by default.
       * ⚠️ Both arguments need to be handled, an option can only match with one value.
       *
       * @param {Value} option The option to test.
       * @param {Value} value The value to test against.
       * @returns {boolean}
       */
      isOptionEqualToValue: _propTypes.default.func,
      /**
       * The maximum number of tags that will be visible when not focused.
       * Set `-1` to disable the limit.
       * @default -1
       */
      limitTags: _integerPropType.default,
      /**
       * The component used to render the listbox.
       * @default 'ul'
       * @deprecated Use `slotProps.listbox.component` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       */
      ListboxComponent: _propTypes.default.elementType,
      /**
       * Props applied to the Listbox element.
       * @deprecated Use `slotProps.listbox` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       */
      ListboxProps: _propTypes.default.object,
      /**
       * If `true`, the component is in a loading state.
       * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, for example `options` are empty).
       * @default false
       */
      loading: _propTypes.default.bool,
      /**
       * Text to display when in a loading state.
       *
       * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
       * @default 'Loading…'
       */
      loadingText: _propTypes.default.node,
      /**
       * If `true`, `value` must be an array and the menu will support multiple selections.
       * @default false
       */
      multiple: _propTypes.default.bool,
      /**
       * Text to display when there are no options.
       *
       * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
       * @default 'No options'
       */
      noOptionsText: _propTypes.default.node,
      /**
       * Callback fired when the value changes.
       *
       * @param {React.SyntheticEvent} event The event source of the callback.
       * @param {Value|Value[]} value The new value of the component.
       * @param {string} reason One of "createOption", "selectOption", "removeOption", "blur" or "clear".
       * @param {string} [details]
       */
      onChange: _propTypes.default.func,
      /**
       * Callback fired when the popup requests to be closed.
       * Use in controlled mode (see open).
       *
       * @param {React.SyntheticEvent} event The event source of the callback.
       * @param {string} reason Can be: `"toggleInput"`, `"escape"`, `"selectOption"`, `"removeOption"`, `"blur"`.
       */
      onClose: _propTypes.default.func,
      /**
       * Callback fired when the highlight option changes.
       *
       * @param {React.SyntheticEvent} event The event source of the callback.
       * @param {Value} option The highlighted option.
       * @param {string} reason Can be: `"keyboard"`, `"mouse"`, `"touch"`.
       */
      onHighlightChange: _propTypes.default.func,
      /**
       * Callback fired when the input value changes.
       *
       * @param {React.SyntheticEvent} event The event source of the callback.
       * @param {string} value The new value of the text input.
       * @param {string} reason Can be: `"input"` (user input), `"reset"` (programmatic change), `"clear"`, `"blur"`, `"selectOption"`, `"removeOption"`
       */
      onInputChange: _propTypes.default.func,
      /**
       * @ignore
       */
      onKeyDown: _propTypes.default.func,
      /**
       * Callback fired when the popup requests to be opened.
       * Use in controlled mode (see open).
       *
       * @param {React.SyntheticEvent} event The event source of the callback.
       */
      onOpen: _propTypes.default.func,
      /**
       * If `true`, the component is shown.
       */
      open: _propTypes.default.bool,
      /**
       * If `true`, the popup will open on input focus.
       * @default false
       */
      openOnFocus: _propTypes.default.bool,
      /**
       * Override the default text for the *open popup* icon button.
       *
       * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
       * @default 'Open'
       */
      openText: _propTypes.default.string,
      /**
       * A list of options that will be shown in the Autocomplete.
       */
      options: _propTypes.default.array.isRequired,
      /**
       * The component used to render the body of the popup.
       * @default Paper
       * @deprecated Use `slots.paper` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       */
      PaperComponent: _propTypes.default.elementType,
      /**
       * The component used to position the popup.
       * @default Popper
       * @deprecated Use `slots.popper` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       */
      PopperComponent: _propTypes.default.elementType,
      /**
       * The icon to display in place of the default popup icon.
       * @default <ArrowDropDownIcon />
       */
      popupIcon: _propTypes.default.node,
      /**
       * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.
       * @default false
       */
      readOnly: _propTypes.default.bool,
      /**
       * Render the group.
       *
       * @param {AutocompleteRenderGroupParams} params The group to render.
       * @returns {ReactNode}
       */
      renderGroup: _propTypes.default.func,
      /**
       * Render the input.
       *
       * @param {object} params
       * @returns {ReactNode}
       */
      renderInput: _propTypes.default.func.isRequired,
      /**
       * Render the option, use `getOptionLabel` by default.
       *
       * @param {object} props The props to apply on the li element.
       * @param {Value} option The option to render.
       * @param {object} state The state of each option.
       * @param {object} ownerState The state of the Autocomplete component.
       * @returns {ReactNode}
       */
      renderOption: _propTypes.default.func,
      /**
       * Render the selected value.
       *
       * @param {Value[]} value The `value` provided to the component.
       * @param {function} getTagProps A tag props getter.
       * @param {object} ownerState The state of the Autocomplete component.
       * @returns {ReactNode}
       */
      renderTags: _propTypes.default.func,
      /**
       * If `true`, the input's text is selected on focus.
       * It helps the user clear the selected value.
       * @default !props.freeSolo
       */
      selectOnFocus: _propTypes.default.bool,
      /**
       * The size of the component.
       * @default 'medium'
       */
      size: _propTypes.default.oneOfType([_propTypes.default.oneOf(["small", "medium"]), _propTypes.default.string]),
      /**
       * The props used for each slot inside.
       * @default {}
       */
      slotProps: _propTypes.default.shape({
        chip: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
        clearIndicator: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
        listbox: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
        paper: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
        popper: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
        popupIndicator: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
      }),
      /**
       * The components used for each slot inside.
       * @default {}
       */
      slots: _propTypes.default.shape({
        listbox: _propTypes.default.elementType,
        paper: _propTypes.default.elementType,
        popper: _propTypes.default.elementType
      }),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
      /**
       * The value of the autocomplete.
       *
       * The value must have reference equality with the option in order to be selected.
       * You can customize the equality behavior with the `isOptionEqualToValue` prop.
       */
      value: (0, _chainPropTypes.default)(_propTypes.default.any, (props) => {
        if (props.multiple && props.value !== void 0 && !Array.isArray(props.value)) {
          return new Error(["MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.", `However, ${props.value} was provided.`].join("\n"));
        }
        return null;
      })
    } : void 0;
    var _default = exports2.default = Autocomplete2;
  }
});

// node_modules/@mui/material/node/Autocomplete/index.js
var require_Autocomplete2 = __commonJS({
  "node_modules/@mui/material/node/Autocomplete/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      createFilterOptions: true,
      autocompleteClasses: true
    };
    Object.defineProperty(exports2, "autocompleteClasses", {
      enumerable: true,
      get: function() {
        return _autocompleteClasses.default;
      }
    });
    Object.defineProperty(exports2, "createFilterOptions", {
      enumerable: true,
      get: function() {
        return _Autocomplete.createFilterOptions;
      }
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _Autocomplete.default;
      }
    });
    var _Autocomplete = _interopRequireWildcard(require_Autocomplete());
    var _autocompleteClasses = _interopRequireWildcard(require_autocompleteClasses());
    Object.keys(_autocompleteClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _autocompleteClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _autocompleteClasses[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node/Input/Input.js
var require_Input = __commonJS({
  "node_modules/@mui/material/node/Input/Input.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _deepmerge = _interopRequireDefault(require_deepmerge2());
    var _refType = _interopRequireDefault(require_refType2());
    var _InputBase = _interopRequireDefault(require_InputBase2());
    var _rootShouldForwardProp = _interopRequireDefault(require_rootShouldForwardProp());
    var _zeroStyled = require_zero_styled2();
    var _memoTheme = _interopRequireDefault(require_memoTheme2());
    var _createSimplePaletteValueFilter = _interopRequireDefault(require_createSimplePaletteValueFilter());
    var _DefaultPropsProvider = require_DefaultPropsProvider4();
    var _inputClasses = _interopRequireWildcard(require_inputClasses());
    var _InputBase2 = require_InputBase();
    var _jsxRuntime = require_jsx_runtime();
    var useUtilityClasses = (ownerState) => {
      const {
        classes,
        disableUnderline
      } = ownerState;
      const slots = {
        root: ["root", !disableUnderline && "underline"],
        input: ["input"]
      };
      const composedClasses = (0, _composeClasses.default)(slots, _inputClasses.getInputUtilityClass, classes);
      return {
        ...classes,
        // forward classes to the InputBase
        ...composedClasses
      };
    };
    var InputRoot = (0, _zeroStyled.styled)(_InputBase2.InputBaseRoot, {
      shouldForwardProp: (prop) => (0, _rootShouldForwardProp.default)(prop) || prop === "classes",
      name: "MuiInput",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [...(0, _InputBase2.rootOverridesResolver)(props, styles), !ownerState.disableUnderline && styles.underline];
      }
    })((0, _memoTheme.default)(({
      theme: theme2
    }) => {
      const light = theme2.palette.mode === "light";
      let bottomLineColor = light ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
      if (theme2.vars) {
        bottomLineColor = `rgba(${theme2.vars.palette.common.onBackgroundChannel} / ${theme2.vars.opacity.inputUnderline})`;
      }
      return {
        position: "relative",
        variants: [{
          props: ({
            ownerState
          }) => ownerState.formControl,
          style: {
            "label + &": {
              marginTop: 16
            }
          }
        }, {
          props: ({
            ownerState
          }) => !ownerState.disableUnderline,
          style: {
            "&::after": {
              left: 0,
              bottom: 0,
              content: '""',
              position: "absolute",
              right: 0,
              transform: "scaleX(0)",
              transition: theme2.transitions.create("transform", {
                duration: theme2.transitions.duration.shorter,
                easing: theme2.transitions.easing.easeOut
              }),
              pointerEvents: "none"
              // Transparent to the hover style.
            },
            [`&.${_inputClasses.default.focused}:after`]: {
              // translateX(0) is a workaround for Safari transform scale bug
              // See https://github.com/mui/material-ui/issues/31766
              transform: "scaleX(1) translateX(0)"
            },
            [`&.${_inputClasses.default.error}`]: {
              "&::before, &::after": {
                borderBottomColor: (theme2.vars || theme2).palette.error.main
              }
            },
            "&::before": {
              borderBottom: `1px solid ${bottomLineColor}`,
              left: 0,
              bottom: 0,
              content: '"\\00a0"',
              position: "absolute",
              right: 0,
              transition: theme2.transitions.create("border-bottom-color", {
                duration: theme2.transitions.duration.shorter
              }),
              pointerEvents: "none"
              // Transparent to the hover style.
            },
            [`&:hover:not(.${_inputClasses.default.disabled}, .${_inputClasses.default.error}):before`]: {
              borderBottom: `2px solid ${(theme2.vars || theme2).palette.text.primary}`,
              // Reset on touch devices, it doesn't add specificity
              "@media (hover: none)": {
                borderBottom: `1px solid ${bottomLineColor}`
              }
            },
            [`&.${_inputClasses.default.disabled}:before`]: {
              borderBottomStyle: "dotted"
            }
          }
        }, ...Object.entries(theme2.palette).filter((0, _createSimplePaletteValueFilter.default)()).map(([color]) => ({
          props: {
            color,
            disableUnderline: false
          },
          style: {
            "&::after": {
              borderBottom: `2px solid ${(theme2.vars || theme2).palette[color].main}`
            }
          }
        }))]
      };
    }));
    var InputInput = (0, _zeroStyled.styled)(_InputBase2.InputBaseInput, {
      name: "MuiInput",
      slot: "Input",
      overridesResolver: _InputBase2.inputOverridesResolver
    })({});
    var Input = /* @__PURE__ */ React7.forwardRef(function Input2(inProps, ref) {
      const props = (0, _DefaultPropsProvider.useDefaultProps)({
        props: inProps,
        name: "MuiInput"
      });
      const {
        disableUnderline = false,
        components = {},
        componentsProps: componentsPropsProp,
        fullWidth = false,
        inputComponent = "input",
        multiline = false,
        slotProps,
        slots = {},
        type = "text",
        ...other
      } = props;
      const classes = useUtilityClasses(props);
      const ownerState = {
        disableUnderline
      };
      const inputComponentsProps = {
        root: {
          ownerState
        }
      };
      const componentsProps = slotProps ?? componentsPropsProp ? (0, _deepmerge.default)(slotProps ?? componentsPropsProp, inputComponentsProps) : inputComponentsProps;
      const RootSlot = slots.root ?? components.Root ?? InputRoot;
      const InputSlot = slots.input ?? components.Input ?? InputInput;
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_InputBase.default, {
        slots: {
          root: RootSlot,
          input: InputSlot
        },
        slotProps: componentsProps,
        fullWidth,
        inputComponent,
        multiline,
        ref,
        type,
        ...other,
        classes
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? Input.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * This prop helps users to fill forms faster, especially on mobile devices.
       * The name can be confusing, as it's more like an autofill.
       * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
       */
      autoComplete: _propTypes.default.string,
      /**
       * If `true`, the `input` element is focused during the first mount.
       */
      autoFocus: _propTypes.default.bool,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
       * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
       */
      color: _propTypes.default.oneOfType([_propTypes.default.oneOf(["primary", "secondary"]), _propTypes.default.string]),
      /**
       * The components used for each slot inside.
       *
       * @deprecated use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       *
       * @default {}
       */
      components: _propTypes.default.shape({
        Input: _propTypes.default.elementType,
        Root: _propTypes.default.elementType
      }),
      /**
       * The extra props for the slot components.
       * You can override the existing props or add new ones.
       *
       * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       *
       * @default {}
       */
      componentsProps: _propTypes.default.shape({
        input: _propTypes.default.object,
        root: _propTypes.default.object
      }),
      /**
       * The default value. Use when the component is not controlled.
       */
      defaultValue: _propTypes.default.any,
      /**
       * If `true`, the component is disabled.
       * The prop defaults to the value (`false`) inherited from the parent FormControl component.
       */
      disabled: _propTypes.default.bool,
      /**
       * If `true`, the `input` will not have an underline.
       * @default false
       */
      disableUnderline: _propTypes.default.bool,
      /**
       * End `InputAdornment` for this component.
       */
      endAdornment: _propTypes.default.node,
      /**
       * If `true`, the `input` will indicate an error.
       * The prop defaults to the value (`false`) inherited from the parent FormControl component.
       */
      error: _propTypes.default.bool,
      /**
       * If `true`, the `input` will take up the full width of its container.
       * @default false
       */
      fullWidth: _propTypes.default.bool,
      /**
       * The id of the `input` element.
       */
      id: _propTypes.default.string,
      /**
       * The component used for the `input` element.
       * Either a string to use a HTML element or a component.
       * @default 'input'
       */
      inputComponent: _propTypes.default.elementType,
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       * @default {}
       */
      inputProps: _propTypes.default.object,
      /**
       * Pass a ref to the `input` element.
       */
      inputRef: _refType.default,
      /**
       * If `dense`, will adjust vertical spacing. This is normally obtained via context from
       * FormControl.
       * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
       */
      margin: _propTypes.default.oneOf(["dense", "none"]),
      /**
       * Maximum number of rows to display when multiline option is set to true.
       */
      maxRows: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      /**
       * Minimum number of rows to display when multiline option is set to true.
       */
      minRows: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      /**
       * If `true`, a [TextareaAutosize](https://mui.com/material-ui/react-textarea-autosize/) element is rendered.
       * @default false
       */
      multiline: _propTypes.default.bool,
      /**
       * Name attribute of the `input` element.
       */
      name: _propTypes.default.string,
      /**
       * Callback fired when the value is changed.
       *
       * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (string).
       */
      onChange: _propTypes.default.func,
      /**
       * The short hint displayed in the `input` before the user enters a value.
       */
      placeholder: _propTypes.default.string,
      /**
       * It prevents the user from changing the value of the field
       * (not from interacting with the field).
       */
      readOnly: _propTypes.default.bool,
      /**
       * If `true`, the `input` element is required.
       * The prop defaults to the value (`false`) inherited from the parent FormControl component.
       */
      required: _propTypes.default.bool,
      /**
       * Number of rows to display when multiline option is set to true.
       */
      rows: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      /**
       * The extra props for the slot components.
       * You can override the existing props or add new ones.
       *
       * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
       *
       * @default {}
       */
      slotProps: _propTypes.default.shape({
        input: _propTypes.default.object,
        root: _propTypes.default.object
      }),
      /**
       * The components used for each slot inside.
       *
       * This prop is an alias for the `components` prop, which will be deprecated in the future.
       *
       * @default {}
       */
      slots: _propTypes.default.shape({
        input: _propTypes.default.elementType,
        root: _propTypes.default.elementType
      }),
      /**
       * Start `InputAdornment` for this component.
       */
      startAdornment: _propTypes.default.node,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
      /**
       * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
       * @default 'text'
       */
      type: _propTypes.default.string,
      /**
       * The value of the `input` element, required for a controlled component.
       */
      value: _propTypes.default.any
    } : void 0;
    Input.muiName = "Input";
    var _default = exports2.default = Input;
  }
});

// node_modules/@mui/material/node/Input/index.js
var require_Input2 = __commonJS({
  "node_modules/@mui/material/node/Input/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      inputClasses: true
    };
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _Input.default;
      }
    });
    Object.defineProperty(exports2, "inputClasses", {
      enumerable: true,
      get: function() {
        return _inputClasses.default;
      }
    });
    var _Input = _interopRequireDefault(require_Input());
    var _inputClasses = _interopRequireWildcard(require_inputClasses());
    Object.keys(_inputClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _inputClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _inputClasses[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node/FilledInput/FilledInput.js
var require_FilledInput = __commonJS({
  "node_modules/@mui/material/node/FilledInput/FilledInput.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _deepmerge = _interopRequireDefault(require_deepmerge2());
    var _refType = _interopRequireDefault(require_refType2());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _InputBase = _interopRequireDefault(require_InputBase2());
    var _rootShouldForwardProp = _interopRequireDefault(require_rootShouldForwardProp());
    var _zeroStyled = require_zero_styled2();
    var _memoTheme = _interopRequireDefault(require_memoTheme2());
    var _createSimplePaletteValueFilter = _interopRequireDefault(require_createSimplePaletteValueFilter());
    var _DefaultPropsProvider = require_DefaultPropsProvider4();
    var _filledInputClasses = _interopRequireWildcard(require_filledInputClasses());
    var _InputBase2 = require_InputBase();
    var _utils = require_utils4();
    var _jsxRuntime = require_jsx_runtime();
    var useUtilityClasses = (ownerState) => {
      const {
        classes,
        disableUnderline,
        startAdornment,
        endAdornment,
        size,
        hiddenLabel,
        multiline
      } = ownerState;
      const slots = {
        root: ["root", !disableUnderline && "underline", startAdornment && "adornedStart", endAdornment && "adornedEnd", size === "small" && `size${(0, _utils.capitalize)(size)}`, hiddenLabel && "hiddenLabel", multiline && "multiline"],
        input: ["input"]
      };
      const composedClasses = (0, _composeClasses.default)(slots, _filledInputClasses.getFilledInputUtilityClass, classes);
      return {
        ...classes,
        // forward classes to the InputBase
        ...composedClasses
      };
    };
    var FilledInputRoot = (0, _zeroStyled.styled)(_InputBase2.InputBaseRoot, {
      shouldForwardProp: (prop) => (0, _rootShouldForwardProp.default)(prop) || prop === "classes",
      name: "MuiFilledInput",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [...(0, _InputBase2.rootOverridesResolver)(props, styles), !ownerState.disableUnderline && styles.underline];
      }
    })((0, _memoTheme.default)(({
      theme: theme2
    }) => {
      const light = theme2.palette.mode === "light";
      const bottomLineColor = light ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
      const backgroundColor = light ? "rgba(0, 0, 0, 0.06)" : "rgba(255, 255, 255, 0.09)";
      const hoverBackground = light ? "rgba(0, 0, 0, 0.09)" : "rgba(255, 255, 255, 0.13)";
      const disabledBackground = light ? "rgba(0, 0, 0, 0.12)" : "rgba(255, 255, 255, 0.12)";
      return {
        position: "relative",
        backgroundColor: theme2.vars ? theme2.vars.palette.FilledInput.bg : backgroundColor,
        borderTopLeftRadius: (theme2.vars || theme2).shape.borderRadius,
        borderTopRightRadius: (theme2.vars || theme2).shape.borderRadius,
        transition: theme2.transitions.create("background-color", {
          duration: theme2.transitions.duration.shorter,
          easing: theme2.transitions.easing.easeOut
        }),
        "&:hover": {
          backgroundColor: theme2.vars ? theme2.vars.palette.FilledInput.hoverBg : hoverBackground,
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            backgroundColor: theme2.vars ? theme2.vars.palette.FilledInput.bg : backgroundColor
          }
        },
        [`&.${_filledInputClasses.default.focused}`]: {
          backgroundColor: theme2.vars ? theme2.vars.palette.FilledInput.bg : backgroundColor
        },
        [`&.${_filledInputClasses.default.disabled}`]: {
          backgroundColor: theme2.vars ? theme2.vars.palette.FilledInput.disabledBg : disabledBackground
        },
        variants: [{
          props: ({
            ownerState
          }) => !ownerState.disableUnderline,
          style: {
            "&::after": {
              left: 0,
              bottom: 0,
              content: '""',
              position: "absolute",
              right: 0,
              transform: "scaleX(0)",
              transition: theme2.transitions.create("transform", {
                duration: theme2.transitions.duration.shorter,
                easing: theme2.transitions.easing.easeOut
              }),
              pointerEvents: "none"
              // Transparent to the hover style.
            },
            [`&.${_filledInputClasses.default.focused}:after`]: {
              // translateX(0) is a workaround for Safari transform scale bug
              // See https://github.com/mui/material-ui/issues/31766
              transform: "scaleX(1) translateX(0)"
            },
            [`&.${_filledInputClasses.default.error}`]: {
              "&::before, &::after": {
                borderBottomColor: (theme2.vars || theme2).palette.error.main
              }
            },
            "&::before": {
              borderBottom: `1px solid ${theme2.vars ? `rgba(${theme2.vars.palette.common.onBackgroundChannel} / ${theme2.vars.opacity.inputUnderline})` : bottomLineColor}`,
              left: 0,
              bottom: 0,
              content: '"\\00a0"',
              position: "absolute",
              right: 0,
              transition: theme2.transitions.create("border-bottom-color", {
                duration: theme2.transitions.duration.shorter
              }),
              pointerEvents: "none"
              // Transparent to the hover style.
            },
            [`&:hover:not(.${_filledInputClasses.default.disabled}, .${_filledInputClasses.default.error}):before`]: {
              borderBottom: `1px solid ${(theme2.vars || theme2).palette.text.primary}`
            },
            [`&.${_filledInputClasses.default.disabled}:before`]: {
              borderBottomStyle: "dotted"
            }
          }
        }, ...Object.entries(theme2.palette).filter((0, _createSimplePaletteValueFilter.default)()).map(([color]) => ({
          props: {
            disableUnderline: false,
            color
          },
          style: {
            "&::after": {
              borderBottom: `2px solid ${(theme2.vars || theme2).palette[color]?.main}`
            }
          }
        })), {
          props: ({
            ownerState
          }) => ownerState.startAdornment,
          style: {
            paddingLeft: 12
          }
        }, {
          props: ({
            ownerState
          }) => ownerState.endAdornment,
          style: {
            paddingRight: 12
          }
        }, {
          props: ({
            ownerState
          }) => ownerState.multiline,
          style: {
            padding: "25px 12px 8px"
          }
        }, {
          props: ({
            ownerState,
            size
          }) => ownerState.multiline && size === "small",
          style: {
            paddingTop: 21,
            paddingBottom: 4
          }
        }, {
          props: ({
            ownerState
          }) => ownerState.multiline && ownerState.hiddenLabel,
          style: {
            paddingTop: 16,
            paddingBottom: 17
          }
        }, {
          props: ({
            ownerState
          }) => ownerState.multiline && ownerState.hiddenLabel && ownerState.size === "small",
          style: {
            paddingTop: 8,
            paddingBottom: 9
          }
        }]
      };
    }));
    var FilledInputInput = (0, _zeroStyled.styled)(_InputBase2.InputBaseInput, {
      name: "MuiFilledInput",
      slot: "Input",
      overridesResolver: _InputBase2.inputOverridesResolver
    })((0, _memoTheme.default)(({
      theme: theme2
    }) => ({
      paddingTop: 25,
      paddingRight: 12,
      paddingBottom: 8,
      paddingLeft: 12,
      ...!theme2.vars && {
        "&:-webkit-autofill": {
          WebkitBoxShadow: theme2.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
          WebkitTextFillColor: theme2.palette.mode === "light" ? null : "#fff",
          caretColor: theme2.palette.mode === "light" ? null : "#fff",
          borderTopLeftRadius: "inherit",
          borderTopRightRadius: "inherit"
        }
      },
      ...theme2.vars && {
        "&:-webkit-autofill": {
          borderTopLeftRadius: "inherit",
          borderTopRightRadius: "inherit"
        },
        [theme2.getColorSchemeSelector("dark")]: {
          "&:-webkit-autofill": {
            WebkitBoxShadow: "0 0 0 100px #266798 inset",
            WebkitTextFillColor: "#fff",
            caretColor: "#fff"
          }
        }
      },
      variants: [{
        props: {
          size: "small"
        },
        style: {
          paddingTop: 21,
          paddingBottom: 4
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.hiddenLabel,
        style: {
          paddingTop: 16,
          paddingBottom: 17
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.startAdornment,
        style: {
          paddingLeft: 0
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.endAdornment,
        style: {
          paddingRight: 0
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.hiddenLabel && ownerState.size === "small",
        style: {
          paddingTop: 8,
          paddingBottom: 9
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.multiline,
        style: {
          paddingTop: 0,
          paddingBottom: 0,
          paddingLeft: 0,
          paddingRight: 0
        }
      }]
    })));
    var FilledInput = /* @__PURE__ */ React7.forwardRef(function FilledInput2(inProps, ref) {
      const props = (0, _DefaultPropsProvider.useDefaultProps)({
        props: inProps,
        name: "MuiFilledInput"
      });
      const {
        disableUnderline = false,
        components = {},
        componentsProps: componentsPropsProp,
        fullWidth = false,
        hiddenLabel,
        // declare here to prevent spreading to DOM
        inputComponent = "input",
        multiline = false,
        slotProps,
        slots = {},
        type = "text",
        ...other
      } = props;
      const ownerState = {
        ...props,
        disableUnderline,
        fullWidth,
        inputComponent,
        multiline,
        type
      };
      const classes = useUtilityClasses(props);
      const filledInputComponentsProps = {
        root: {
          ownerState
        },
        input: {
          ownerState
        }
      };
      const componentsProps = slotProps ?? componentsPropsProp ? (0, _deepmerge.default)(filledInputComponentsProps, slotProps ?? componentsPropsProp) : filledInputComponentsProps;
      const RootSlot = slots.root ?? components.Root ?? FilledInputRoot;
      const InputSlot = slots.input ?? components.Input ?? FilledInputInput;
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_InputBase.default, {
        slots: {
          root: RootSlot,
          input: InputSlot
        },
        slotProps: componentsProps,
        fullWidth,
        inputComponent,
        multiline,
        ref,
        type,
        ...other,
        classes
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? FilledInput.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * This prop helps users to fill forms faster, especially on mobile devices.
       * The name can be confusing, as it's more like an autofill.
       * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
       */
      autoComplete: _propTypes.default.string,
      /**
       * If `true`, the `input` element is focused during the first mount.
       */
      autoFocus: _propTypes.default.bool,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
       * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
       */
      color: _propTypes.default.oneOfType([_propTypes.default.oneOf(["primary", "secondary"]), _propTypes.default.string]),
      /**
       * The components used for each slot inside.
       *
       * @deprecated use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       *
       * @default {}
       */
      components: _propTypes.default.shape({
        Input: _propTypes.default.elementType,
        Root: _propTypes.default.elementType
      }),
      /**
       * The extra props for the slot components.
       * You can override the existing props or add new ones.
       *
       * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       *
       * @default {}
       */
      componentsProps: _propTypes.default.shape({
        input: _propTypes.default.object,
        root: _propTypes.default.object
      }),
      /**
       * The default value. Use when the component is not controlled.
       */
      defaultValue: _propTypes.default.any,
      /**
       * If `true`, the component is disabled.
       * The prop defaults to the value (`false`) inherited from the parent FormControl component.
       */
      disabled: _propTypes.default.bool,
      /**
       * If `true`, the input will not have an underline.
       * @default false
       */
      disableUnderline: _propTypes.default.bool,
      /**
       * End `InputAdornment` for this component.
       */
      endAdornment: _propTypes.default.node,
      /**
       * If `true`, the `input` will indicate an error.
       * The prop defaults to the value (`false`) inherited from the parent FormControl component.
       */
      error: _propTypes.default.bool,
      /**
       * If `true`, the `input` will take up the full width of its container.
       * @default false
       */
      fullWidth: _propTypes.default.bool,
      /**
       * If `true`, the label is hidden.
       * This is used to increase density for a `FilledInput`.
       * Be sure to add `aria-label` to the `input` element.
       * @default false
       */
      hiddenLabel: _propTypes.default.bool,
      /**
       * The id of the `input` element.
       */
      id: _propTypes.default.string,
      /**
       * The component used for the `input` element.
       * Either a string to use a HTML element or a component.
       * @default 'input'
       */
      inputComponent: _propTypes.default.elementType,
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       * @default {}
       */
      inputProps: _propTypes.default.object,
      /**
       * Pass a ref to the `input` element.
       */
      inputRef: _refType.default,
      /**
       * If `dense`, will adjust vertical spacing. This is normally obtained via context from
       * FormControl.
       * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
       */
      margin: _propTypes.default.oneOf(["dense", "none"]),
      /**
       * Maximum number of rows to display when multiline option is set to true.
       */
      maxRows: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      /**
       * Minimum number of rows to display when multiline option is set to true.
       */
      minRows: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      /**
       * If `true`, a [TextareaAutosize](https://mui.com/material-ui/react-textarea-autosize/) element is rendered.
       * @default false
       */
      multiline: _propTypes.default.bool,
      /**
       * Name attribute of the `input` element.
       */
      name: _propTypes.default.string,
      /**
       * Callback fired when the value is changed.
       *
       * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (string).
       */
      onChange: _propTypes.default.func,
      /**
       * The short hint displayed in the `input` before the user enters a value.
       */
      placeholder: _propTypes.default.string,
      /**
       * It prevents the user from changing the value of the field
       * (not from interacting with the field).
       */
      readOnly: _propTypes.default.bool,
      /**
       * If `true`, the `input` element is required.
       * The prop defaults to the value (`false`) inherited from the parent FormControl component.
       */
      required: _propTypes.default.bool,
      /**
       * Number of rows to display when multiline option is set to true.
       */
      rows: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      /**
       * The extra props for the slot components.
       * You can override the existing props or add new ones.
       *
       * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
       *
       * @default {}
       */
      slotProps: _propTypes.default.shape({
        input: _propTypes.default.object,
        root: _propTypes.default.object
      }),
      /**
       * The components used for each slot inside.
       *
       * This prop is an alias for the `components` prop, which will be deprecated in the future.
       *
       * @default {}
       */
      slots: _propTypes.default.shape({
        input: _propTypes.default.elementType,
        root: _propTypes.default.elementType
      }),
      /**
       * Start `InputAdornment` for this component.
       */
      startAdornment: _propTypes.default.node,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
      /**
       * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
       * @default 'text'
       */
      type: _propTypes.default.string,
      /**
       * The value of the `input` element, required for a controlled component.
       */
      value: _propTypes.default.any
    } : void 0;
    FilledInput.muiName = "Input";
    var _default = exports2.default = FilledInput;
  }
});

// node_modules/@mui/material/node/FilledInput/index.js
var require_FilledInput2 = __commonJS({
  "node_modules/@mui/material/node/FilledInput/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      filledInputClasses: true
    };
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _FilledInput.default;
      }
    });
    Object.defineProperty(exports2, "filledInputClasses", {
      enumerable: true,
      get: function() {
        return _filledInputClasses.default;
      }
    });
    var _FilledInput = _interopRequireDefault(require_FilledInput());
    var _filledInputClasses = _interopRequireWildcard(require_filledInputClasses());
    Object.keys(_filledInputClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _filledInputClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _filledInputClasses[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node/OutlinedInput/NotchedOutline.js
var require_NotchedOutline = __commonJS({
  "node_modules/@mui/material/node/OutlinedInput/NotchedOutline.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = NotchedOutline;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _rootShouldForwardProp = _interopRequireDefault(require_rootShouldForwardProp());
    var _zeroStyled = require_zero_styled2();
    var _memoTheme = _interopRequireDefault(require_memoTheme2());
    var _jsxRuntime = require_jsx_runtime();
    var _span;
    var NotchedOutlineRoot = (0, _zeroStyled.styled)("fieldset", {
      shouldForwardProp: _rootShouldForwardProp.default
    })({
      textAlign: "left",
      position: "absolute",
      bottom: 0,
      right: 0,
      top: -5,
      left: 0,
      margin: 0,
      padding: "0 8px",
      pointerEvents: "none",
      borderRadius: "inherit",
      borderStyle: "solid",
      borderWidth: 1,
      overflow: "hidden",
      minWidth: "0%"
    });
    var NotchedOutlineLegend = (0, _zeroStyled.styled)("legend", {
      shouldForwardProp: _rootShouldForwardProp.default
    })((0, _memoTheme.default)(({
      theme: theme2
    }) => ({
      float: "unset",
      // Fix conflict with bootstrap
      width: "auto",
      // Fix conflict with bootstrap
      overflow: "hidden",
      // Fix Horizontal scroll when label too long
      variants: [{
        props: ({
          ownerState
        }) => !ownerState.withLabel,
        style: {
          padding: 0,
          lineHeight: "11px",
          // sync with `height` in `legend` styles
          transition: theme2.transitions.create("width", {
            duration: 150,
            easing: theme2.transitions.easing.easeOut
          })
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.withLabel,
        style: {
          display: "block",
          // Fix conflict with normalize.css and sanitize.css
          padding: 0,
          height: 11,
          // sync with `lineHeight` in `legend` styles
          fontSize: "0.75em",
          visibility: "hidden",
          maxWidth: 0.01,
          transition: theme2.transitions.create("max-width", {
            duration: 50,
            easing: theme2.transitions.easing.easeOut
          }),
          whiteSpace: "nowrap",
          "& > span": {
            paddingLeft: 5,
            paddingRight: 5,
            display: "inline-block",
            opacity: 0,
            visibility: "visible"
          }
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.withLabel && ownerState.notched,
        style: {
          maxWidth: "100%",
          transition: theme2.transitions.create("max-width", {
            duration: 100,
            easing: theme2.transitions.easing.easeOut,
            delay: 50
          })
        }
      }]
    })));
    function NotchedOutline(props) {
      const {
        children,
        classes,
        className,
        label,
        notched,
        ...other
      } = props;
      const withLabel = label != null && label !== "";
      const ownerState = {
        ...props,
        notched,
        withLabel
      };
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(NotchedOutlineRoot, {
        "aria-hidden": true,
        className,
        ownerState,
        ...other,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(NotchedOutlineLegend, {
          ownerState,
          children: withLabel ? /* @__PURE__ */ (0, _jsxRuntime.jsx)("span", {
            children: label
          }) : (
            // notranslate needed while Google Translate will not fix zero-width space issue
            _span || (_span = /* @__PURE__ */ (0, _jsxRuntime.jsx)("span", {
              className: "notranslate",
              "aria-hidden": true,
              children: "\u200B"
            }))
          )
        })
      });
    }
    define_process_env_default.NODE_ENV !== "production" ? NotchedOutline.propTypes = {
      /**
       * The content of the component.
       */
      children: _propTypes.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      /**
       * @ignore
       */
      className: _propTypes.default.string,
      /**
       * The label.
       */
      label: _propTypes.default.node,
      /**
       * If `true`, the outline is notched to accommodate the label.
       */
      notched: _propTypes.default.bool.isRequired,
      /**
       * @ignore
       */
      style: _propTypes.default.object
    } : void 0;
  }
});

// node_modules/@mui/material/node/OutlinedInput/OutlinedInput.js
var require_OutlinedInput = __commonJS({
  "node_modules/@mui/material/node/OutlinedInput/OutlinedInput.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _refType = _interopRequireDefault(require_refType2());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _NotchedOutline = _interopRequireDefault(require_NotchedOutline());
    var _useFormControl = _interopRequireDefault(require_useFormControl());
    var _formControlState = _interopRequireDefault(require_formControlState());
    var _rootShouldForwardProp = _interopRequireDefault(require_rootShouldForwardProp());
    var _zeroStyled = require_zero_styled2();
    var _memoTheme = _interopRequireDefault(require_memoTheme2());
    var _createSimplePaletteValueFilter = _interopRequireDefault(require_createSimplePaletteValueFilter());
    var _DefaultPropsProvider = require_DefaultPropsProvider4();
    var _outlinedInputClasses = _interopRequireWildcard(require_outlinedInputClasses());
    var _InputBase = _interopRequireWildcard(require_InputBase());
    var _jsxRuntime = require_jsx_runtime();
    var useUtilityClasses = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        notchedOutline: ["notchedOutline"],
        input: ["input"]
      };
      const composedClasses = (0, _composeClasses.default)(slots, _outlinedInputClasses.getOutlinedInputUtilityClass, classes);
      return {
        ...classes,
        // forward classes to the InputBase
        ...composedClasses
      };
    };
    var OutlinedInputRoot = (0, _zeroStyled.styled)(_InputBase.InputBaseRoot, {
      shouldForwardProp: (prop) => (0, _rootShouldForwardProp.default)(prop) || prop === "classes",
      name: "MuiOutlinedInput",
      slot: "Root",
      overridesResolver: _InputBase.rootOverridesResolver
    })((0, _memoTheme.default)(({
      theme: theme2
    }) => {
      const borderColor = theme2.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
      return {
        position: "relative",
        borderRadius: (theme2.vars || theme2).shape.borderRadius,
        [`&:hover .${_outlinedInputClasses.default.notchedOutline}`]: {
          borderColor: (theme2.vars || theme2).palette.text.primary
        },
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          [`&:hover .${_outlinedInputClasses.default.notchedOutline}`]: {
            borderColor: theme2.vars ? `rgba(${theme2.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor
          }
        },
        [`&.${_outlinedInputClasses.default.focused} .${_outlinedInputClasses.default.notchedOutline}`]: {
          borderWidth: 2
        },
        variants: [...Object.entries(theme2.palette).filter((0, _createSimplePaletteValueFilter.default)()).map(([color]) => ({
          props: {
            color
          },
          style: {
            [`&.${_outlinedInputClasses.default.focused} .${_outlinedInputClasses.default.notchedOutline}`]: {
              borderColor: (theme2.vars || theme2).palette[color].main
            }
          }
        })), {
          props: {},
          // to overide the above style
          style: {
            [`&.${_outlinedInputClasses.default.error} .${_outlinedInputClasses.default.notchedOutline}`]: {
              borderColor: (theme2.vars || theme2).palette.error.main
            },
            [`&.${_outlinedInputClasses.default.disabled} .${_outlinedInputClasses.default.notchedOutline}`]: {
              borderColor: (theme2.vars || theme2).palette.action.disabled
            }
          }
        }, {
          props: ({
            ownerState
          }) => ownerState.startAdornment,
          style: {
            paddingLeft: 14
          }
        }, {
          props: ({
            ownerState
          }) => ownerState.endAdornment,
          style: {
            paddingRight: 14
          }
        }, {
          props: ({
            ownerState
          }) => ownerState.multiline,
          style: {
            padding: "16.5px 14px"
          }
        }, {
          props: ({
            ownerState,
            size
          }) => ownerState.multiline && size === "small",
          style: {
            padding: "8.5px 14px"
          }
        }]
      };
    }));
    var NotchedOutlineRoot = (0, _zeroStyled.styled)(_NotchedOutline.default, {
      name: "MuiOutlinedInput",
      slot: "NotchedOutline",
      overridesResolver: (props, styles) => styles.notchedOutline
    })((0, _memoTheme.default)(({
      theme: theme2
    }) => {
      const borderColor = theme2.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
      return {
        borderColor: theme2.vars ? `rgba(${theme2.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor
      };
    }));
    var OutlinedInputInput = (0, _zeroStyled.styled)(_InputBase.InputBaseInput, {
      name: "MuiOutlinedInput",
      slot: "Input",
      overridesResolver: _InputBase.inputOverridesResolver
    })((0, _memoTheme.default)(({
      theme: theme2
    }) => ({
      padding: "16.5px 14px",
      ...!theme2.vars && {
        "&:-webkit-autofill": {
          WebkitBoxShadow: theme2.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
          WebkitTextFillColor: theme2.palette.mode === "light" ? null : "#fff",
          caretColor: theme2.palette.mode === "light" ? null : "#fff",
          borderRadius: "inherit"
        }
      },
      ...theme2.vars && {
        "&:-webkit-autofill": {
          borderRadius: "inherit"
        },
        [theme2.getColorSchemeSelector("dark")]: {
          "&:-webkit-autofill": {
            WebkitBoxShadow: "0 0 0 100px #266798 inset",
            WebkitTextFillColor: "#fff",
            caretColor: "#fff"
          }
        }
      },
      variants: [{
        props: {
          size: "small"
        },
        style: {
          padding: "8.5px 14px"
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.multiline,
        style: {
          padding: 0
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.startAdornment,
        style: {
          paddingLeft: 0
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.endAdornment,
        style: {
          paddingRight: 0
        }
      }]
    })));
    var OutlinedInput = /* @__PURE__ */ React7.forwardRef(function OutlinedInput2(inProps, ref) {
      var _React$Fragment;
      const props = (0, _DefaultPropsProvider.useDefaultProps)({
        props: inProps,
        name: "MuiOutlinedInput"
      });
      const {
        components = {},
        fullWidth = false,
        inputComponent = "input",
        label,
        multiline = false,
        notched,
        slots = {},
        type = "text",
        ...other
      } = props;
      const classes = useUtilityClasses(props);
      const muiFormControl = (0, _useFormControl.default)();
      const fcs = (0, _formControlState.default)({
        props,
        muiFormControl,
        states: ["color", "disabled", "error", "focused", "hiddenLabel", "size", "required"]
      });
      const ownerState = {
        ...props,
        color: fcs.color || "primary",
        disabled: fcs.disabled,
        error: fcs.error,
        focused: fcs.focused,
        formControl: muiFormControl,
        fullWidth,
        hiddenLabel: fcs.hiddenLabel,
        multiline,
        size: fcs.size,
        type
      };
      const RootSlot = slots.root ?? components.Root ?? OutlinedInputRoot;
      const InputSlot = slots.input ?? components.Input ?? OutlinedInputInput;
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_InputBase.default, {
        slots: {
          root: RootSlot,
          input: InputSlot
        },
        renderSuffix: (state) => /* @__PURE__ */ (0, _jsxRuntime.jsx)(NotchedOutlineRoot, {
          ownerState,
          className: classes.notchedOutline,
          label: label != null && label !== "" && fcs.required ? _React$Fragment || (_React$Fragment = /* @__PURE__ */ (0, _jsxRuntime.jsxs)(React7.Fragment, {
            children: [label, "\u2009", "*"]
          })) : label,
          notched: typeof notched !== "undefined" ? notched : Boolean(state.startAdornment || state.filled || state.focused)
        }),
        fullWidth,
        inputComponent,
        multiline,
        ref,
        type,
        ...other,
        classes: {
          ...classes,
          notchedOutline: null
        }
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? OutlinedInput.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * This prop helps users to fill forms faster, especially on mobile devices.
       * The name can be confusing, as it's more like an autofill.
       * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
       */
      autoComplete: _propTypes.default.string,
      /**
       * If `true`, the `input` element is focused during the first mount.
       */
      autoFocus: _propTypes.default.bool,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
       * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
       */
      color: _propTypes.default.oneOfType([_propTypes.default.oneOf(["primary", "secondary"]), _propTypes.default.string]),
      /**
       * The components used for each slot inside.
       *
       * @deprecated use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       *
       * @default {}
       */
      components: _propTypes.default.shape({
        Input: _propTypes.default.elementType,
        Root: _propTypes.default.elementType
      }),
      /**
       * The default value. Use when the component is not controlled.
       */
      defaultValue: _propTypes.default.any,
      /**
       * If `true`, the component is disabled.
       * The prop defaults to the value (`false`) inherited from the parent FormControl component.
       */
      disabled: _propTypes.default.bool,
      /**
       * End `InputAdornment` for this component.
       */
      endAdornment: _propTypes.default.node,
      /**
       * If `true`, the `input` will indicate an error.
       * The prop defaults to the value (`false`) inherited from the parent FormControl component.
       */
      error: _propTypes.default.bool,
      /**
       * If `true`, the `input` will take up the full width of its container.
       * @default false
       */
      fullWidth: _propTypes.default.bool,
      /**
       * The id of the `input` element.
       */
      id: _propTypes.default.string,
      /**
       * The component used for the `input` element.
       * Either a string to use a HTML element or a component.
       * @default 'input'
       */
      inputComponent: _propTypes.default.elementType,
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       * @default {}
       */
      inputProps: _propTypes.default.object,
      /**
       * Pass a ref to the `input` element.
       */
      inputRef: _refType.default,
      /**
       * The label of the `input`. It is only used for layout. The actual labelling
       * is handled by `InputLabel`.
       */
      label: _propTypes.default.node,
      /**
       * If `dense`, will adjust vertical spacing. This is normally obtained via context from
       * FormControl.
       * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
       */
      margin: _propTypes.default.oneOf(["dense", "none"]),
      /**
       * Maximum number of rows to display when multiline option is set to true.
       */
      maxRows: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      /**
       * Minimum number of rows to display when multiline option is set to true.
       */
      minRows: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      /**
       * If `true`, a [TextareaAutosize](https://mui.com/material-ui/react-textarea-autosize/) element is rendered.
       * @default false
       */
      multiline: _propTypes.default.bool,
      /**
       * Name attribute of the `input` element.
       */
      name: _propTypes.default.string,
      /**
       * If `true`, the outline is notched to accommodate the label.
       */
      notched: _propTypes.default.bool,
      /**
       * Callback fired when the value is changed.
       *
       * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (string).
       */
      onChange: _propTypes.default.func,
      /**
       * The short hint displayed in the `input` before the user enters a value.
       */
      placeholder: _propTypes.default.string,
      /**
       * It prevents the user from changing the value of the field
       * (not from interacting with the field).
       */
      readOnly: _propTypes.default.bool,
      /**
       * If `true`, the `input` element is required.
       * The prop defaults to the value (`false`) inherited from the parent FormControl component.
       */
      required: _propTypes.default.bool,
      /**
       * Number of rows to display when multiline option is set to true.
       */
      rows: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      /**
       * The components used for each slot inside.
       *
       * This prop is an alias for the `components` prop, which will be deprecated in the future.
       *
       * @default {}
       */
      slots: _propTypes.default.shape({
        input: _propTypes.default.elementType,
        root: _propTypes.default.elementType
      }),
      /**
       * Start `InputAdornment` for this component.
       */
      startAdornment: _propTypes.default.node,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
      /**
       * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
       * @default 'text'
       */
      type: _propTypes.default.string,
      /**
       * The value of the `input` element, required for a controlled component.
       */
      value: _propTypes.default.any
    } : void 0;
    OutlinedInput.muiName = "Input";
    var _default = exports2.default = OutlinedInput;
  }
});

// node_modules/@mui/material/node/OutlinedInput/index.js
var require_OutlinedInput2 = __commonJS({
  "node_modules/@mui/material/node/OutlinedInput/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      outlinedInputClasses: true
    };
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _OutlinedInput.default;
      }
    });
    Object.defineProperty(exports2, "outlinedInputClasses", {
      enumerable: true,
      get: function() {
        return _outlinedInputClasses.default;
      }
    });
    var _OutlinedInput = _interopRequireDefault(require_OutlinedInput());
    var _outlinedInputClasses = _interopRequireWildcard(require_outlinedInputClasses());
    Object.keys(_outlinedInputClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _outlinedInputClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _outlinedInputClasses[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node/FormLabel/formLabelClasses.js
var require_formLabelClasses = __commonJS({
  "node_modules/@mui/material/node/FormLabel/formLabelClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getFormLabelUtilityClasses = getFormLabelUtilityClasses;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    function getFormLabelUtilityClasses(slot) {
      return (0, _generateUtilityClass.default)("MuiFormLabel", slot);
    }
    var formLabelClasses = (0, _generateUtilityClasses.default)("MuiFormLabel", ["root", "colorSecondary", "focused", "disabled", "error", "filled", "required", "asterisk"]);
    var _default = exports2.default = formLabelClasses;
  }
});

// node_modules/@mui/material/node/FormLabel/FormLabel.js
var require_FormLabel = __commonJS({
  "node_modules/@mui/material/node/FormLabel/FormLabel.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = exports2.FormLabelRoot = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _clsx = _interopRequireDefault(require_clsx());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _formControlState = _interopRequireDefault(require_formControlState());
    var _useFormControl = _interopRequireDefault(require_useFormControl());
    var _capitalize = _interopRequireDefault(require_capitalize3());
    var _zeroStyled = require_zero_styled2();
    var _memoTheme = _interopRequireDefault(require_memoTheme2());
    var _createSimplePaletteValueFilter = _interopRequireDefault(require_createSimplePaletteValueFilter());
    var _DefaultPropsProvider = require_DefaultPropsProvider4();
    var _formLabelClasses = _interopRequireWildcard(require_formLabelClasses());
    var _jsxRuntime = require_jsx_runtime();
    var useUtilityClasses = (ownerState) => {
      const {
        classes,
        color,
        focused,
        disabled,
        error,
        filled,
        required
      } = ownerState;
      const slots = {
        root: ["root", `color${(0, _capitalize.default)(color)}`, disabled && "disabled", error && "error", filled && "filled", focused && "focused", required && "required"],
        asterisk: ["asterisk", error && "error"]
      };
      return (0, _composeClasses.default)(slots, _formLabelClasses.getFormLabelUtilityClasses, classes);
    };
    var FormLabelRoot = exports2.FormLabelRoot = (0, _zeroStyled.styled)("label", {
      name: "MuiFormLabel",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.color === "secondary" && styles.colorSecondary, ownerState.filled && styles.filled];
      }
    })((0, _memoTheme.default)(({
      theme: theme2
    }) => ({
      color: (theme2.vars || theme2).palette.text.secondary,
      ...theme2.typography.body1,
      lineHeight: "1.4375em",
      padding: 0,
      position: "relative",
      variants: [...Object.entries(theme2.palette).filter((0, _createSimplePaletteValueFilter.default)()).map(([color]) => ({
        props: {
          color
        },
        style: {
          [`&.${_formLabelClasses.default.focused}`]: {
            color: (theme2.vars || theme2).palette[color].main
          }
        }
      })), {
        props: {},
        style: {
          [`&.${_formLabelClasses.default.disabled}`]: {
            color: (theme2.vars || theme2).palette.text.disabled
          },
          [`&.${_formLabelClasses.default.error}`]: {
            color: (theme2.vars || theme2).palette.error.main
          }
        }
      }]
    })));
    var AsteriskComponent = (0, _zeroStyled.styled)("span", {
      name: "MuiFormLabel",
      slot: "Asterisk",
      overridesResolver: (props, styles) => styles.asterisk
    })((0, _memoTheme.default)(({
      theme: theme2
    }) => ({
      [`&.${_formLabelClasses.default.error}`]: {
        color: (theme2.vars || theme2).palette.error.main
      }
    })));
    var FormLabel = /* @__PURE__ */ React7.forwardRef(function FormLabel2(inProps, ref) {
      const props = (0, _DefaultPropsProvider.useDefaultProps)({
        props: inProps,
        name: "MuiFormLabel"
      });
      const {
        children,
        className,
        color,
        component = "label",
        disabled,
        error,
        filled,
        focused,
        required,
        ...other
      } = props;
      const muiFormControl = (0, _useFormControl.default)();
      const fcs = (0, _formControlState.default)({
        props,
        muiFormControl,
        states: ["color", "required", "focused", "disabled", "error", "filled"]
      });
      const ownerState = {
        ...props,
        color: fcs.color || "primary",
        component,
        disabled: fcs.disabled,
        error: fcs.error,
        filled: fcs.filled,
        focused: fcs.focused,
        required: fcs.required
      };
      const classes = useUtilityClasses(ownerState);
      return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(FormLabelRoot, {
        as: component,
        ownerState,
        className: (0, _clsx.default)(classes.root, className),
        ref,
        ...other,
        children: [children, fcs.required && /* @__PURE__ */ (0, _jsxRuntime.jsxs)(AsteriskComponent, {
          ownerState,
          "aria-hidden": true,
          className: classes.asterisk,
          children: ["\u2009", "*"]
        })]
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? FormLabel.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * The content of the component.
       */
      children: _propTypes.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      /**
       * @ignore
       */
      className: _propTypes.default.string,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
       */
      color: _propTypes.default.oneOfType([_propTypes.default.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), _propTypes.default.string]),
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: _propTypes.default.elementType,
      /**
       * If `true`, the label should be displayed in a disabled state.
       */
      disabled: _propTypes.default.bool,
      /**
       * If `true`, the label is displayed in an error state.
       */
      error: _propTypes.default.bool,
      /**
       * If `true`, the label should use filled classes key.
       */
      filled: _propTypes.default.bool,
      /**
       * If `true`, the input of this label is focused (used by `FormGroup` components).
       */
      focused: _propTypes.default.bool,
      /**
       * If `true`, the label will indicate that the `input` is required.
       */
      required: _propTypes.default.bool,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
    } : void 0;
    var _default = exports2.default = FormLabel;
  }
});

// node_modules/@mui/material/node/FormLabel/index.js
var require_FormLabel2 = __commonJS({
  "node_modules/@mui/material/node/FormLabel/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      formLabelClasses: true
    };
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _FormLabel.default;
      }
    });
    Object.defineProperty(exports2, "formLabelClasses", {
      enumerable: true,
      get: function() {
        return _formLabelClasses.default;
      }
    });
    var _FormLabel = _interopRequireWildcard(require_FormLabel());
    Object.keys(_FormLabel).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _FormLabel[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _FormLabel[key];
        }
      });
    });
    var _formLabelClasses = _interopRequireWildcard(require_formLabelClasses());
    Object.keys(_formLabelClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _formLabelClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _formLabelClasses[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node/InputLabel/inputLabelClasses.js
var require_inputLabelClasses = __commonJS({
  "node_modules/@mui/material/node/InputLabel/inputLabelClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getInputLabelUtilityClasses = getInputLabelUtilityClasses;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    function getInputLabelUtilityClasses(slot) {
      return (0, _generateUtilityClass.default)("MuiInputLabel", slot);
    }
    var inputLabelClasses = (0, _generateUtilityClasses.default)("MuiInputLabel", ["root", "focused", "disabled", "error", "required", "asterisk", "formControl", "sizeSmall", "shrink", "animated", "standard", "filled", "outlined"]);
    var _default = exports2.default = inputLabelClasses;
  }
});

// node_modules/@mui/material/node/InputLabel/InputLabel.js
var require_InputLabel = __commonJS({
  "node_modules/@mui/material/node/InputLabel/InputLabel.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _clsx = _interopRequireDefault(require_clsx());
    var _formControlState = _interopRequireDefault(require_formControlState());
    var _useFormControl = _interopRequireDefault(require_useFormControl());
    var _FormLabel = _interopRequireWildcard(require_FormLabel2());
    var _capitalize = _interopRequireDefault(require_capitalize3());
    var _rootShouldForwardProp = _interopRequireDefault(require_rootShouldForwardProp());
    var _zeroStyled = require_zero_styled2();
    var _memoTheme = _interopRequireDefault(require_memoTheme2());
    var _DefaultPropsProvider = require_DefaultPropsProvider4();
    var _inputLabelClasses = require_inputLabelClasses();
    var _jsxRuntime = require_jsx_runtime();
    var useUtilityClasses = (ownerState) => {
      const {
        classes,
        formControl,
        size,
        shrink,
        disableAnimation,
        variant,
        required
      } = ownerState;
      const slots = {
        root: ["root", formControl && "formControl", !disableAnimation && "animated", shrink && "shrink", size && size !== "normal" && `size${(0, _capitalize.default)(size)}`, variant],
        asterisk: [required && "asterisk"]
      };
      const composedClasses = (0, _composeClasses.default)(slots, _inputLabelClasses.getInputLabelUtilityClasses, classes);
      return {
        ...classes,
        // forward the focused, disabled, etc. classes to the FormLabel
        ...composedClasses
      };
    };
    var InputLabelRoot = (0, _zeroStyled.styled)(_FormLabel.default, {
      shouldForwardProp: (prop) => (0, _rootShouldForwardProp.default)(prop) || prop === "classes",
      name: "MuiInputLabel",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [{
          [`& .${_FormLabel.formLabelClasses.asterisk}`]: styles.asterisk
        }, styles.root, ownerState.formControl && styles.formControl, ownerState.size === "small" && styles.sizeSmall, ownerState.shrink && styles.shrink, !ownerState.disableAnimation && styles.animated, ownerState.focused && styles.focused, styles[ownerState.variant]];
      }
    })((0, _memoTheme.default)(({
      theme: theme2
    }) => ({
      display: "block",
      transformOrigin: "top left",
      whiteSpace: "nowrap",
      overflow: "hidden",
      textOverflow: "ellipsis",
      maxWidth: "100%",
      variants: [{
        props: ({
          ownerState
        }) => ownerState.formControl,
        style: {
          position: "absolute",
          left: 0,
          top: 0,
          // slight alteration to spec spacing to match visual spec result
          transform: "translate(0, 20px) scale(1)"
        }
      }, {
        props: {
          size: "small"
        },
        style: {
          // Compensation for the `Input.inputSizeSmall` style.
          transform: "translate(0, 17px) scale(1)"
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.shrink,
        style: {
          transform: "translate(0, -1.5px) scale(0.75)",
          transformOrigin: "top left",
          maxWidth: "133%"
        }
      }, {
        props: ({
          ownerState
        }) => !ownerState.disableAnimation,
        style: {
          transition: theme2.transitions.create(["color", "transform", "max-width"], {
            duration: theme2.transitions.duration.shorter,
            easing: theme2.transitions.easing.easeOut
          })
        }
      }, {
        props: {
          variant: "filled"
        },
        style: {
          // Chrome's autofill feature gives the input field a yellow background.
          // Since the input field is behind the label in the HTML tree,
          // the input field is drawn last and hides the label with an opaque background color.
          // zIndex: 1 will raise the label above opaque background-colors of input.
          zIndex: 1,
          pointerEvents: "none",
          transform: "translate(12px, 16px) scale(1)",
          maxWidth: "calc(100% - 24px)"
        }
      }, {
        props: {
          variant: "filled",
          size: "small"
        },
        style: {
          transform: "translate(12px, 13px) scale(1)"
        }
      }, {
        props: ({
          variant,
          ownerState
        }) => variant === "filled" && ownerState.shrink,
        style: {
          userSelect: "none",
          pointerEvents: "auto",
          transform: "translate(12px, 7px) scale(0.75)",
          maxWidth: "calc(133% - 24px)"
        }
      }, {
        props: ({
          variant,
          ownerState,
          size
        }) => variant === "filled" && ownerState.shrink && size === "small",
        style: {
          transform: "translate(12px, 4px) scale(0.75)"
        }
      }, {
        props: {
          variant: "outlined"
        },
        style: {
          // see comment above on filled.zIndex
          zIndex: 1,
          pointerEvents: "none",
          transform: "translate(14px, 16px) scale(1)",
          maxWidth: "calc(100% - 24px)"
        }
      }, {
        props: {
          variant: "outlined",
          size: "small"
        },
        style: {
          transform: "translate(14px, 9px) scale(1)"
        }
      }, {
        props: ({
          variant,
          ownerState
        }) => variant === "outlined" && ownerState.shrink,
        style: {
          userSelect: "none",
          pointerEvents: "auto",
          // Theoretically, we should have (8+5)*2/0.75 = 34px
          // but it feels a better when it bleeds a bit on the left, so 32px.
          maxWidth: "calc(133% - 32px)",
          transform: "translate(14px, -9px) scale(0.75)"
        }
      }]
    })));
    var InputLabel = /* @__PURE__ */ React7.forwardRef(function InputLabel2(inProps, ref) {
      const props = (0, _DefaultPropsProvider.useDefaultProps)({
        name: "MuiInputLabel",
        props: inProps
      });
      const {
        disableAnimation = false,
        margin,
        shrink: shrinkProp,
        variant,
        className,
        ...other
      } = props;
      const muiFormControl = (0, _useFormControl.default)();
      let shrink = shrinkProp;
      if (typeof shrink === "undefined" && muiFormControl) {
        shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;
      }
      const fcs = (0, _formControlState.default)({
        props,
        muiFormControl,
        states: ["size", "variant", "required", "focused"]
      });
      const ownerState = {
        ...props,
        disableAnimation,
        formControl: muiFormControl,
        shrink,
        size: fcs.size,
        variant: fcs.variant,
        required: fcs.required,
        focused: fcs.focused
      };
      const classes = useUtilityClasses(ownerState);
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(InputLabelRoot, {
        "data-shrink": shrink,
        ref,
        className: (0, _clsx.default)(classes.root, className),
        ...other,
        ownerState,
        classes
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? InputLabel.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * The content of the component.
       */
      children: _propTypes.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      /**
       * @ignore
       */
      className: _propTypes.default.string,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
       */
      color: _propTypes.default.oneOfType([_propTypes.default.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), _propTypes.default.string]),
      /**
       * If `true`, the transition animation is disabled.
       * @default false
       */
      disableAnimation: _propTypes.default.bool,
      /**
       * If `true`, the component is disabled.
       */
      disabled: _propTypes.default.bool,
      /**
       * If `true`, the label is displayed in an error state.
       */
      error: _propTypes.default.bool,
      /**
       * If `true`, the `input` of this label is focused.
       */
      focused: _propTypes.default.bool,
      /**
       * If `dense`, will adjust vertical spacing. This is normally obtained via context from
       * FormControl.
       */
      margin: _propTypes.default.oneOf(["dense"]),
      /**
       * if `true`, the label will indicate that the `input` is required.
       */
      required: _propTypes.default.bool,
      /**
       * If `true`, the label is shrunk.
       */
      shrink: _propTypes.default.bool,
      /**
       * The size of the component.
       * @default 'normal'
       */
      size: _propTypes.default.oneOfType([_propTypes.default.oneOf(["normal", "small"]), _propTypes.default.string]),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
      /**
       * The variant to use.
       */
      variant: _propTypes.default.oneOf(["filled", "outlined", "standard"])
    } : void 0;
    var _default = exports2.default = InputLabel;
  }
});

// node_modules/@mui/material/node/InputLabel/index.js
var require_InputLabel2 = __commonJS({
  "node_modules/@mui/material/node/InputLabel/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      inputLabelClasses: true
    };
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _InputLabel.default;
      }
    });
    Object.defineProperty(exports2, "inputLabelClasses", {
      enumerable: true,
      get: function() {
        return _inputLabelClasses.default;
      }
    });
    var _InputLabel = _interopRequireDefault(require_InputLabel());
    var _inputLabelClasses = _interopRequireWildcard(require_inputLabelClasses());
    Object.keys(_inputLabelClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _inputLabelClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _inputLabelClasses[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node/FormControl/formControlClasses.js
var require_formControlClasses = __commonJS({
  "node_modules/@mui/material/node/FormControl/formControlClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getFormControlUtilityClasses = getFormControlUtilityClasses;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    function getFormControlUtilityClasses(slot) {
      return (0, _generateUtilityClass.default)("MuiFormControl", slot);
    }
    var formControlClasses = (0, _generateUtilityClasses.default)("MuiFormControl", ["root", "marginNone", "marginNormal", "marginDense", "fullWidth", "disabled"]);
    var _default = exports2.default = formControlClasses;
  }
});

// node_modules/@mui/material/node/FormControl/FormControl.js
var require_FormControl = __commonJS({
  "node_modules/@mui/material/node/FormControl/FormControl.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _clsx = _interopRequireDefault(require_clsx());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _zeroStyled = require_zero_styled2();
    var _DefaultPropsProvider = require_DefaultPropsProvider4();
    var _utils = require_utils6();
    var _capitalize = _interopRequireDefault(require_capitalize3());
    var _isMuiElement = _interopRequireDefault(require_isMuiElement3());
    var _FormControlContext = _interopRequireDefault(require_FormControlContext());
    var _formControlClasses = require_formControlClasses();
    var _jsxRuntime = require_jsx_runtime();
    var useUtilityClasses = (ownerState) => {
      const {
        classes,
        margin,
        fullWidth
      } = ownerState;
      const slots = {
        root: ["root", margin !== "none" && `margin${(0, _capitalize.default)(margin)}`, fullWidth && "fullWidth"]
      };
      return (0, _composeClasses.default)(slots, _formControlClasses.getFormControlUtilityClasses, classes);
    };
    var FormControlRoot = (0, _zeroStyled.styled)("div", {
      name: "MuiFormControl",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, styles[`margin${(0, _capitalize.default)(ownerState.margin)}`], ownerState.fullWidth && styles.fullWidth];
      }
    })({
      display: "inline-flex",
      flexDirection: "column",
      position: "relative",
      // Reset fieldset default style.
      minWidth: 0,
      padding: 0,
      margin: 0,
      border: 0,
      verticalAlign: "top",
      // Fix alignment issue on Safari.
      variants: [{
        props: {
          margin: "normal"
        },
        style: {
          marginTop: 16,
          marginBottom: 8
        }
      }, {
        props: {
          margin: "dense"
        },
        style: {
          marginTop: 8,
          marginBottom: 4
        }
      }, {
        props: {
          fullWidth: true
        },
        style: {
          width: "100%"
        }
      }]
    });
    var FormControl = /* @__PURE__ */ React7.forwardRef(function FormControl2(inProps, ref) {
      const props = (0, _DefaultPropsProvider.useDefaultProps)({
        props: inProps,
        name: "MuiFormControl"
      });
      const {
        children,
        className,
        color = "primary",
        component = "div",
        disabled = false,
        error = false,
        focused: visuallyFocused,
        fullWidth = false,
        hiddenLabel = false,
        margin = "none",
        required = false,
        size = "medium",
        variant = "outlined",
        ...other
      } = props;
      const ownerState = {
        ...props,
        color,
        component,
        disabled,
        error,
        fullWidth,
        hiddenLabel,
        margin,
        required,
        size,
        variant
      };
      const classes = useUtilityClasses(ownerState);
      const [adornedStart, setAdornedStart] = React7.useState(() => {
        let initialAdornedStart = false;
        if (children) {
          React7.Children.forEach(children, (child) => {
            if (!(0, _isMuiElement.default)(child, ["Input", "Select"])) {
              return;
            }
            const input = (0, _isMuiElement.default)(child, ["Select"]) ? child.props.input : child;
            if (input && (0, _utils.isAdornedStart)(input.props)) {
              initialAdornedStart = true;
            }
          });
        }
        return initialAdornedStart;
      });
      const [filled, setFilled] = React7.useState(() => {
        let initialFilled = false;
        if (children) {
          React7.Children.forEach(children, (child) => {
            if (!(0, _isMuiElement.default)(child, ["Input", "Select"])) {
              return;
            }
            if ((0, _utils.isFilled)(child.props, true) || (0, _utils.isFilled)(child.props.inputProps, true)) {
              initialFilled = true;
            }
          });
        }
        return initialFilled;
      });
      const [focusedState, setFocused] = React7.useState(false);
      if (disabled && focusedState) {
        setFocused(false);
      }
      const focused = visuallyFocused !== void 0 && !disabled ? visuallyFocused : focusedState;
      let registerEffect;
      const registeredInput = React7.useRef(false);
      if (define_process_env_default.NODE_ENV !== "production") {
        registerEffect = () => {
          if (registeredInput.current) {
            console.error(["MUI: There are multiple `InputBase` components inside a FormControl.", "This creates visual inconsistencies, only use one `InputBase`."].join("\n"));
          }
          registeredInput.current = true;
          return () => {
            registeredInput.current = false;
          };
        };
      }
      const onFilled = React7.useCallback(() => {
        setFilled(true);
      }, []);
      const onEmpty = React7.useCallback(() => {
        setFilled(false);
      }, []);
      const childContext = React7.useMemo(() => {
        return {
          adornedStart,
          setAdornedStart,
          color,
          disabled,
          error,
          filled,
          focused,
          fullWidth,
          hiddenLabel,
          size,
          onBlur: () => {
            setFocused(false);
          },
          onFocus: () => {
            setFocused(true);
          },
          onEmpty,
          onFilled,
          registerEffect,
          required,
          variant
        };
      }, [adornedStart, color, disabled, error, filled, focused, fullWidth, hiddenLabel, registerEffect, onEmpty, onFilled, required, size, variant]);
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_FormControlContext.default.Provider, {
        value: childContext,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(FormControlRoot, {
          as: component,
          ownerState,
          className: (0, _clsx.default)(classes.root, className),
          ref,
          ...other,
          children
        })
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? FormControl.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * The content of the component.
       */
      children: _propTypes.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      /**
       * @ignore
       */
      className: _propTypes.default.string,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
       * @default 'primary'
       */
      color: _propTypes.default.oneOfType([_propTypes.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), _propTypes.default.string]),
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: _propTypes.default.elementType,
      /**
       * If `true`, the label, input and helper text should be displayed in a disabled state.
       * @default false
       */
      disabled: _propTypes.default.bool,
      /**
       * If `true`, the label is displayed in an error state.
       * @default false
       */
      error: _propTypes.default.bool,
      /**
       * If `true`, the component is displayed in focused state.
       */
      focused: _propTypes.default.bool,
      /**
       * If `true`, the component will take up the full width of its container.
       * @default false
       */
      fullWidth: _propTypes.default.bool,
      /**
       * If `true`, the label is hidden.
       * This is used to increase density for a `FilledInput`.
       * Be sure to add `aria-label` to the `input` element.
       * @default false
       */
      hiddenLabel: _propTypes.default.bool,
      /**
       * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
       * @default 'none'
       */
      margin: _propTypes.default.oneOf(["dense", "none", "normal"]),
      /**
       * If `true`, the label will indicate that the `input` is required.
       * @default false
       */
      required: _propTypes.default.bool,
      /**
       * The size of the component.
       * @default 'medium'
       */
      size: _propTypes.default.oneOfType([_propTypes.default.oneOf(["medium", "small"]), _propTypes.default.string]),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
      /**
       * The variant to use.
       * @default 'outlined'
       */
      variant: _propTypes.default.oneOf(["filled", "outlined", "standard"])
    } : void 0;
    var _default = exports2.default = FormControl;
  }
});

// node_modules/@mui/material/node/FormControl/index.js
var require_FormControl2 = __commonJS({
  "node_modules/@mui/material/node/FormControl/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      useFormControl: true,
      formControlClasses: true
    };
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _FormControl.default;
      }
    });
    Object.defineProperty(exports2, "formControlClasses", {
      enumerable: true,
      get: function() {
        return _formControlClasses.default;
      }
    });
    Object.defineProperty(exports2, "useFormControl", {
      enumerable: true,
      get: function() {
        return _useFormControl.default;
      }
    });
    var _FormControl = _interopRequireDefault(require_FormControl());
    var _useFormControl = _interopRequireDefault(require_useFormControl());
    var _formControlClasses = _interopRequireWildcard(require_formControlClasses());
    Object.keys(_formControlClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _formControlClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _formControlClasses[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node/FormHelperText/formHelperTextClasses.js
var require_formHelperTextClasses = __commonJS({
  "node_modules/@mui/material/node/FormHelperText/formHelperTextClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getFormHelperTextUtilityClasses = getFormHelperTextUtilityClasses;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    function getFormHelperTextUtilityClasses(slot) {
      return (0, _generateUtilityClass.default)("MuiFormHelperText", slot);
    }
    var formHelperTextClasses = (0, _generateUtilityClasses.default)("MuiFormHelperText", ["root", "error", "disabled", "sizeSmall", "sizeMedium", "contained", "focused", "filled", "required"]);
    var _default = exports2.default = formHelperTextClasses;
  }
});

// node_modules/@mui/material/node/FormHelperText/FormHelperText.js
var require_FormHelperText = __commonJS({
  "node_modules/@mui/material/node/FormHelperText/FormHelperText.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _clsx = _interopRequireDefault(require_clsx());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _formControlState = _interopRequireDefault(require_formControlState());
    var _useFormControl = _interopRequireDefault(require_useFormControl());
    var _zeroStyled = require_zero_styled2();
    var _memoTheme = _interopRequireDefault(require_memoTheme2());
    var _DefaultPropsProvider = require_DefaultPropsProvider4();
    var _capitalize = _interopRequireDefault(require_capitalize3());
    var _formHelperTextClasses = _interopRequireWildcard(require_formHelperTextClasses());
    var _jsxRuntime = require_jsx_runtime();
    var _span;
    var useUtilityClasses = (ownerState) => {
      const {
        classes,
        contained,
        size,
        disabled,
        error,
        filled,
        focused,
        required
      } = ownerState;
      const slots = {
        root: ["root", disabled && "disabled", error && "error", size && `size${(0, _capitalize.default)(size)}`, contained && "contained", focused && "focused", filled && "filled", required && "required"]
      };
      return (0, _composeClasses.default)(slots, _formHelperTextClasses.getFormHelperTextUtilityClasses, classes);
    };
    var FormHelperTextRoot = (0, _zeroStyled.styled)("p", {
      name: "MuiFormHelperText",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.size && styles[`size${(0, _capitalize.default)(ownerState.size)}`], ownerState.contained && styles.contained, ownerState.filled && styles.filled];
      }
    })((0, _memoTheme.default)(({
      theme: theme2
    }) => ({
      color: (theme2.vars || theme2).palette.text.secondary,
      ...theme2.typography.caption,
      textAlign: "left",
      marginTop: 3,
      marginRight: 0,
      marginBottom: 0,
      marginLeft: 0,
      [`&.${_formHelperTextClasses.default.disabled}`]: {
        color: (theme2.vars || theme2).palette.text.disabled
      },
      [`&.${_formHelperTextClasses.default.error}`]: {
        color: (theme2.vars || theme2).palette.error.main
      },
      variants: [{
        props: {
          size: "small"
        },
        style: {
          marginTop: 4
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.contained,
        style: {
          marginLeft: 14,
          marginRight: 14
        }
      }]
    })));
    var FormHelperText = /* @__PURE__ */ React7.forwardRef(function FormHelperText2(inProps, ref) {
      const props = (0, _DefaultPropsProvider.useDefaultProps)({
        props: inProps,
        name: "MuiFormHelperText"
      });
      const {
        children,
        className,
        component = "p",
        disabled,
        error,
        filled,
        focused,
        margin,
        required,
        variant,
        ...other
      } = props;
      const muiFormControl = (0, _useFormControl.default)();
      const fcs = (0, _formControlState.default)({
        props,
        muiFormControl,
        states: ["variant", "size", "disabled", "error", "filled", "focused", "required"]
      });
      const ownerState = {
        ...props,
        component,
        contained: fcs.variant === "filled" || fcs.variant === "outlined",
        variant: fcs.variant,
        size: fcs.size,
        disabled: fcs.disabled,
        error: fcs.error,
        filled: fcs.filled,
        focused: fcs.focused,
        required: fcs.required
      };
      delete ownerState.ownerState;
      const classes = useUtilityClasses(ownerState);
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(FormHelperTextRoot, {
        as: component,
        className: (0, _clsx.default)(classes.root, className),
        ref,
        ...other,
        ownerState,
        children: children === " " ? (
          // notranslate needed while Google Translate will not fix zero-width space issue
          _span || (_span = /* @__PURE__ */ (0, _jsxRuntime.jsx)("span", {
            className: "notranslate",
            "aria-hidden": true,
            children: "\u200B"
          }))
        ) : children
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? FormHelperText.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * The content of the component.
       *
       * If `' '` is provided, the component reserves one line height for displaying a future message.
       */
      children: _propTypes.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      /**
       * @ignore
       */
      className: _propTypes.default.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: _propTypes.default.elementType,
      /**
       * If `true`, the helper text should be displayed in a disabled state.
       */
      disabled: _propTypes.default.bool,
      /**
       * If `true`, helper text should be displayed in an error state.
       */
      error: _propTypes.default.bool,
      /**
       * If `true`, the helper text should use filled classes key.
       */
      filled: _propTypes.default.bool,
      /**
       * If `true`, the helper text should use focused classes key.
       */
      focused: _propTypes.default.bool,
      /**
       * If `dense`, will adjust vertical spacing. This is normally obtained via context from
       * FormControl.
       */
      margin: _propTypes.default.oneOf(["dense"]),
      /**
       * If `true`, the helper text should use required classes key.
       */
      required: _propTypes.default.bool,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
      /**
       * The variant to use.
       */
      variant: _propTypes.default.oneOfType([_propTypes.default.oneOf(["filled", "outlined", "standard"]), _propTypes.default.string])
    } : void 0;
    var _default = exports2.default = FormHelperText;
  }
});

// node_modules/@mui/material/node/FormHelperText/index.js
var require_FormHelperText2 = __commonJS({
  "node_modules/@mui/material/node/FormHelperText/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      formHelperTextClasses: true
    };
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _FormHelperText.default;
      }
    });
    Object.defineProperty(exports2, "formHelperTextClasses", {
      enumerable: true,
      get: function() {
        return _formHelperTextClasses.default;
      }
    });
    var _FormHelperText = _interopRequireDefault(require_FormHelperText());
    var _formHelperTextClasses = _interopRequireWildcard(require_formHelperTextClasses());
    Object.keys(_formHelperTextClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _formHelperTextClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _formHelperTextClasses[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node/List/ListContext.js
var require_ListContext = __commonJS({
  "node_modules/@mui/material/node/List/ListContext.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var ListContext = /* @__PURE__ */ React7.createContext({});
    if (define_process_env_default.NODE_ENV !== "production") {
      ListContext.displayName = "ListContext";
    }
    var _default = exports2.default = ListContext;
  }
});

// node_modules/@mui/material/node/List/listClasses.js
var require_listClasses = __commonJS({
  "node_modules/@mui/material/node/List/listClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getListUtilityClass = getListUtilityClass;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    function getListUtilityClass(slot) {
      return (0, _generateUtilityClass.default)("MuiList", slot);
    }
    var listClasses = (0, _generateUtilityClasses.default)("MuiList", ["root", "padding", "dense", "subheader"]);
    var _default = exports2.default = listClasses;
  }
});

// node_modules/@mui/material/node/List/List.js
var require_List = __commonJS({
  "node_modules/@mui/material/node/List/List.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _clsx = _interopRequireDefault(require_clsx());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _zeroStyled = require_zero_styled2();
    var _DefaultPropsProvider = require_DefaultPropsProvider4();
    var _ListContext = _interopRequireDefault(require_ListContext());
    var _listClasses = require_listClasses();
    var _jsxRuntime = require_jsx_runtime();
    var useUtilityClasses = (ownerState) => {
      const {
        classes,
        disablePadding,
        dense,
        subheader
      } = ownerState;
      const slots = {
        root: ["root", !disablePadding && "padding", dense && "dense", subheader && "subheader"]
      };
      return (0, _composeClasses.default)(slots, _listClasses.getListUtilityClass, classes);
    };
    var ListRoot = (0, _zeroStyled.styled)("ul", {
      name: "MuiList",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, !ownerState.disablePadding && styles.padding, ownerState.dense && styles.dense, ownerState.subheader && styles.subheader];
      }
    })({
      listStyle: "none",
      margin: 0,
      padding: 0,
      position: "relative",
      variants: [{
        props: ({
          ownerState
        }) => !ownerState.disablePadding,
        style: {
          paddingTop: 8,
          paddingBottom: 8
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.subheader,
        style: {
          paddingTop: 0
        }
      }]
    });
    var List2 = /* @__PURE__ */ React7.forwardRef(function List3(inProps, ref) {
      const props = (0, _DefaultPropsProvider.useDefaultProps)({
        props: inProps,
        name: "MuiList"
      });
      const {
        children,
        className,
        component = "ul",
        dense = false,
        disablePadding = false,
        subheader,
        ...other
      } = props;
      const context = React7.useMemo(() => ({
        dense
      }), [dense]);
      const ownerState = {
        ...props,
        component,
        dense,
        disablePadding
      };
      const classes = useUtilityClasses(ownerState);
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_ListContext.default.Provider, {
        value: context,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsxs)(ListRoot, {
          as: component,
          className: (0, _clsx.default)(classes.root, className),
          ref,
          ownerState,
          ...other,
          children: [subheader, children]
        })
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? List2.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * The content of the component.
       */
      children: _propTypes.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      /**
       * @ignore
       */
      className: _propTypes.default.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: _propTypes.default.elementType,
      /**
       * If `true`, compact vertical padding designed for keyboard and mouse input is used for
       * the list and list items.
       * The prop is available to descendant components as the `dense` context.
       * @default false
       */
      dense: _propTypes.default.bool,
      /**
       * If `true`, vertical padding is removed from the list.
       * @default false
       */
      disablePadding: _propTypes.default.bool,
      /**
       * The content of the subheader, normally `ListSubheader`.
       */
      subheader: _propTypes.default.node,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
    } : void 0;
    var _default = exports2.default = List2;
  }
});

// node_modules/@mui/material/node/List/index.js
var require_List2 = __commonJS({
  "node_modules/@mui/material/node/List/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      listClasses: true
    };
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _List.default;
      }
    });
    Object.defineProperty(exports2, "listClasses", {
      enumerable: true,
      get: function() {
        return _listClasses.default;
      }
    });
    var _List = _interopRequireDefault(require_List());
    var _listClasses = _interopRequireWildcard(require_listClasses());
    Object.keys(_listClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _listClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _listClasses[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node/utils/getScrollbarSize.js
var require_getScrollbarSize5 = __commonJS({
  "node_modules/@mui/material/node/utils/getScrollbarSize.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _getScrollbarSize = _interopRequireDefault(require_getScrollbarSize2());
    var _default = exports2.default = _getScrollbarSize.default;
  }
});

// node_modules/@mui/material/node/MenuList/MenuList.js
var require_MenuList = __commonJS({
  "node_modules/@mui/material/node/MenuList/MenuList.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _reactIs = require_react_is3();
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _ownerDocument = _interopRequireDefault(require_ownerDocument3());
    var _List = _interopRequireDefault(require_List2());
    var _getScrollbarSize = _interopRequireDefault(require_getScrollbarSize5());
    var _useForkRef = _interopRequireDefault(require_useForkRef3());
    var _useEnhancedEffect = _interopRequireDefault(require_useEnhancedEffect3());
    var _utils = require_utils4();
    var _jsxRuntime = require_jsx_runtime();
    function nextItem(list, item, disableListWrap) {
      if (list === item) {
        return list.firstChild;
      }
      if (item && item.nextElementSibling) {
        return item.nextElementSibling;
      }
      return disableListWrap ? null : list.firstChild;
    }
    function previousItem(list, item, disableListWrap) {
      if (list === item) {
        return disableListWrap ? list.firstChild : list.lastChild;
      }
      if (item && item.previousElementSibling) {
        return item.previousElementSibling;
      }
      return disableListWrap ? null : list.lastChild;
    }
    function textCriteriaMatches(nextFocus, textCriteria) {
      if (textCriteria === void 0) {
        return true;
      }
      let text = nextFocus.innerText;
      if (text === void 0) {
        text = nextFocus.textContent;
      }
      text = text.trim().toLowerCase();
      if (text.length === 0) {
        return false;
      }
      if (textCriteria.repeating) {
        return text[0] === textCriteria.keys[0];
      }
      return text.startsWith(textCriteria.keys.join(""));
    }
    function moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {
      let wrappedOnce = false;
      let nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);
      while (nextFocus) {
        if (nextFocus === list.firstChild) {
          if (wrappedOnce) {
            return false;
          }
          wrappedOnce = true;
        }
        const nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute("aria-disabled") === "true";
        if (!nextFocus.hasAttribute("tabindex") || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) {
          nextFocus = traversalFunction(list, nextFocus, disableListWrap);
        } else {
          nextFocus.focus();
          return true;
        }
      }
      return false;
    }
    var MenuList = /* @__PURE__ */ React7.forwardRef(function MenuList2(props, ref) {
      const {
        // private
        // eslint-disable-next-line react/prop-types
        actions,
        autoFocus = false,
        autoFocusItem = false,
        children,
        className,
        disabledItemsFocusable = false,
        disableListWrap = false,
        onKeyDown,
        variant = "selectedMenu",
        ...other
      } = props;
      const listRef = React7.useRef(null);
      const textCriteriaRef = React7.useRef({
        keys: [],
        repeating: true,
        previousKeyMatched: true,
        lastTime: null
      });
      (0, _useEnhancedEffect.default)(() => {
        if (autoFocus) {
          listRef.current.focus();
        }
      }, [autoFocus]);
      React7.useImperativeHandle(actions, () => ({
        adjustStyleForScrollbar: (containerElement, {
          direction
        }) => {
          const noExplicitWidth = !listRef.current.style.width;
          if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
            const scrollbarSize = `${(0, _getScrollbarSize.default)((0, _utils.ownerWindow)(containerElement))}px`;
            listRef.current.style[direction === "rtl" ? "paddingLeft" : "paddingRight"] = scrollbarSize;
            listRef.current.style.width = `calc(100% + ${scrollbarSize})`;
          }
          return listRef.current;
        }
      }), []);
      const handleKeyDown = (event) => {
        const list = listRef.current;
        const key = event.key;
        const isModifierKeyPressed = event.ctrlKey || event.metaKey || event.altKey;
        if (isModifierKeyPressed) {
          if (onKeyDown) {
            onKeyDown(event);
          }
          return;
        }
        const currentFocus = (0, _ownerDocument.default)(list).activeElement;
        if (key === "ArrowDown") {
          event.preventDefault();
          moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem);
        } else if (key === "ArrowUp") {
          event.preventDefault();
          moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem);
        } else if (key === "Home") {
          event.preventDefault();
          moveFocus(list, null, disableListWrap, disabledItemsFocusable, nextItem);
        } else if (key === "End") {
          event.preventDefault();
          moveFocus(list, null, disableListWrap, disabledItemsFocusable, previousItem);
        } else if (key.length === 1) {
          const criteria = textCriteriaRef.current;
          const lowerKey = key.toLowerCase();
          const currTime = performance.now();
          if (criteria.keys.length > 0) {
            if (currTime - criteria.lastTime > 500) {
              criteria.keys = [];
              criteria.repeating = true;
              criteria.previousKeyMatched = true;
            } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {
              criteria.repeating = false;
            }
          }
          criteria.lastTime = currTime;
          criteria.keys.push(lowerKey);
          const keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);
          if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus(list, currentFocus, false, disabledItemsFocusable, nextItem, criteria))) {
            event.preventDefault();
          } else {
            criteria.previousKeyMatched = false;
          }
        }
        if (onKeyDown) {
          onKeyDown(event);
        }
      };
      const handleRef = (0, _useForkRef.default)(listRef, ref);
      let activeItemIndex = -1;
      React7.Children.forEach(children, (child, index) => {
        if (!/* @__PURE__ */ React7.isValidElement(child)) {
          if (activeItemIndex === index) {
            activeItemIndex += 1;
            if (activeItemIndex >= children.length) {
              activeItemIndex = -1;
            }
          }
          return;
        }
        if (define_process_env_default.NODE_ENV !== "production") {
          if ((0, _reactIs.isFragment)(child)) {
            console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
          }
        }
        if (!child.props.disabled) {
          if (variant === "selectedMenu" && child.props.selected) {
            activeItemIndex = index;
          } else if (activeItemIndex === -1) {
            activeItemIndex = index;
          }
        }
        if (activeItemIndex === index && (child.props.disabled || child.props.muiSkipListHighlight || child.type.muiSkipListHighlight)) {
          activeItemIndex += 1;
          if (activeItemIndex >= children.length) {
            activeItemIndex = -1;
          }
        }
      });
      const items = React7.Children.map(children, (child, index) => {
        if (index === activeItemIndex) {
          const newChildProps = {};
          if (autoFocusItem) {
            newChildProps.autoFocus = true;
          }
          if (child.props.tabIndex === void 0 && variant === "selectedMenu") {
            newChildProps.tabIndex = 0;
          }
          return /* @__PURE__ */ React7.cloneElement(child, newChildProps);
        }
        return child;
      });
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_List.default, {
        role: "menu",
        ref: handleRef,
        className,
        onKeyDown: handleKeyDown,
        tabIndex: autoFocus ? 0 : -1,
        ...other,
        children: items
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? MenuList.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * If `true`, will focus the `[role="menu"]` container and move into tab order.
       * @default false
       */
      autoFocus: _propTypes.default.bool,
      /**
       * If `true`, will focus the first menuitem if `variant="menu"` or selected item
       * if `variant="selectedMenu"`.
       * @default false
       */
      autoFocusItem: _propTypes.default.bool,
      /**
       * MenuList contents, normally `MenuItem`s.
       */
      children: _propTypes.default.node,
      /**
       * @ignore
       */
      className: _propTypes.default.string,
      /**
       * If `true`, will allow focus on disabled items.
       * @default false
       */
      disabledItemsFocusable: _propTypes.default.bool,
      /**
       * If `true`, the menu items will not wrap focus.
       * @default false
       */
      disableListWrap: _propTypes.default.bool,
      /**
       * @ignore
       */
      onKeyDown: _propTypes.default.func,
      /**
       * The variant to use. Use `menu` to prevent selected items from impacting the initial focus
       * and the vertical alignment relative to the anchor element.
       * @default 'selectedMenu'
       */
      variant: _propTypes.default.oneOf(["menu", "selectedMenu"])
    } : void 0;
    var _default = exports2.default = MenuList;
  }
});

// node_modules/@mui/material/node/MenuList/index.js
var require_MenuList2 = __commonJS({
  "node_modules/@mui/material/node/MenuList/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _MenuList.default;
      }
    });
    var _MenuList = _interopRequireDefault(require_MenuList());
  }
});

// node_modules/@mui/material/node/Grow/Grow.js
var require_Grow = __commonJS({
  "node_modules/@mui/material/node/Grow/Grow.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _useTimeout = _interopRequireDefault(require_useTimeout2());
    var _elementAcceptingRef = _interopRequireDefault(require_elementAcceptingRef2());
    var _getReactElementRef = _interopRequireDefault(require_getReactElementRef2());
    var _reactTransitionGroup = require_cjs();
    var _zeroStyled = require_zero_styled2();
    var _utils = require_utils3();
    var _useForkRef = _interopRequireDefault(require_useForkRef3());
    var _jsxRuntime = require_jsx_runtime();
    function getScale(value) {
      return `scale(${value}, ${value ** 2})`;
    }
    var styles = {
      entering: {
        opacity: 1,
        transform: getScale(1)
      },
      entered: {
        opacity: 1,
        transform: "none"
      }
    };
    var isWebKit154 = typeof navigator !== "undefined" && /^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent) && /(os |version\/)15(.|_)4/i.test(navigator.userAgent);
    var Grow = /* @__PURE__ */ React7.forwardRef(function Grow2(props, ref) {
      const {
        addEndListener,
        appear = true,
        children,
        easing,
        in: inProp,
        onEnter,
        onEntered,
        onEntering,
        onExit,
        onExited,
        onExiting,
        style,
        timeout = "auto",
        // eslint-disable-next-line react/prop-types
        TransitionComponent = _reactTransitionGroup.Transition,
        ...other
      } = props;
      const timer = (0, _useTimeout.default)();
      const autoTimeout = React7.useRef();
      const theme2 = (0, _zeroStyled.useTheme)();
      const nodeRef = React7.useRef(null);
      const handleRef = (0, _useForkRef.default)(nodeRef, (0, _getReactElementRef.default)(children), ref);
      const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
        if (callback) {
          const node2 = nodeRef.current;
          if (maybeIsAppearing === void 0) {
            callback(node2);
          } else {
            callback(node2, maybeIsAppearing);
          }
        }
      };
      const handleEntering = normalizedTransitionCallback(onEntering);
      const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
        (0, _utils.reflow)(node2);
        const {
          duration: transitionDuration,
          delay,
          easing: transitionTimingFunction
        } = (0, _utils.getTransitionProps)({
          style,
          timeout,
          easing
        }, {
          mode: "enter"
        });
        let duration;
        if (timeout === "auto") {
          duration = theme2.transitions.getAutoHeightDuration(node2.clientHeight);
          autoTimeout.current = duration;
        } else {
          duration = transitionDuration;
        }
        node2.style.transition = [theme2.transitions.create("opacity", {
          duration,
          delay
        }), theme2.transitions.create("transform", {
          duration: isWebKit154 ? duration : duration * 0.666,
          delay,
          easing: transitionTimingFunction
        })].join(",");
        if (onEnter) {
          onEnter(node2, isAppearing);
        }
      });
      const handleEntered = normalizedTransitionCallback(onEntered);
      const handleExiting = normalizedTransitionCallback(onExiting);
      const handleExit = normalizedTransitionCallback((node2) => {
        const {
          duration: transitionDuration,
          delay,
          easing: transitionTimingFunction
        } = (0, _utils.getTransitionProps)({
          style,
          timeout,
          easing
        }, {
          mode: "exit"
        });
        let duration;
        if (timeout === "auto") {
          duration = theme2.transitions.getAutoHeightDuration(node2.clientHeight);
          autoTimeout.current = duration;
        } else {
          duration = transitionDuration;
        }
        node2.style.transition = [theme2.transitions.create("opacity", {
          duration,
          delay
        }), theme2.transitions.create("transform", {
          duration: isWebKit154 ? duration : duration * 0.666,
          delay: isWebKit154 ? delay : delay || duration * 0.333,
          easing: transitionTimingFunction
        })].join(",");
        node2.style.opacity = 0;
        node2.style.transform = getScale(0.75);
        if (onExit) {
          onExit(node2);
        }
      });
      const handleExited = normalizedTransitionCallback(onExited);
      const handleAddEndListener = (next2) => {
        if (timeout === "auto") {
          timer.start(autoTimeout.current || 0, next2);
        }
        if (addEndListener) {
          addEndListener(nodeRef.current, next2);
        }
      };
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(TransitionComponent, {
        appear,
        in: inProp,
        nodeRef,
        onEnter: handleEnter,
        onEntered: handleEntered,
        onEntering: handleEntering,
        onExit: handleExit,
        onExited: handleExited,
        onExiting: handleExiting,
        addEndListener: handleAddEndListener,
        timeout: timeout === "auto" ? null : timeout,
        ...other,
        children: (state, {
          ownerState,
          ...restChildProps
        }) => {
          return /* @__PURE__ */ React7.cloneElement(children, {
            style: {
              opacity: 0,
              transform: getScale(0.75),
              visibility: state === "exited" && !inProp ? "hidden" : void 0,
              ...styles[state],
              ...style,
              ...children.props.style
            },
            ref: handleRef,
            ...restChildProps
          });
        }
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? Grow.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * Add a custom transition end trigger. Called with the transitioning DOM
       * node and a done callback. Allows for more fine grained transition end
       * logic. Note: Timeouts are still used as a fallback if provided.
       */
      addEndListener: _propTypes.default.func,
      /**
       * Perform the enter transition when it first mounts if `in` is also `true`.
       * Set this to `false` to disable this behavior.
       * @default true
       */
      appear: _propTypes.default.bool,
      /**
       * A single child content element.
       */
      children: _elementAcceptingRef.default.isRequired,
      /**
       * The transition timing function.
       * You may specify a single easing or a object containing enter and exit values.
       */
      easing: _propTypes.default.oneOfType([_propTypes.default.shape({
        enter: _propTypes.default.string,
        exit: _propTypes.default.string
      }), _propTypes.default.string]),
      /**
       * If `true`, the component will transition in.
       */
      in: _propTypes.default.bool,
      /**
       * @ignore
       */
      onEnter: _propTypes.default.func,
      /**
       * @ignore
       */
      onEntered: _propTypes.default.func,
      /**
       * @ignore
       */
      onEntering: _propTypes.default.func,
      /**
       * @ignore
       */
      onExit: _propTypes.default.func,
      /**
       * @ignore
       */
      onExited: _propTypes.default.func,
      /**
       * @ignore
       */
      onExiting: _propTypes.default.func,
      /**
       * @ignore
       */
      style: _propTypes.default.object,
      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       *
       * Set to 'auto' to automatically calculate transition time based on height.
       * @default 'auto'
       */
      timeout: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.shape({
        appear: _propTypes.default.number,
        enter: _propTypes.default.number,
        exit: _propTypes.default.number
      })])
    } : void 0;
    if (Grow) {
      Grow.muiSupportAuto = true;
    }
    var _default = exports2.default = Grow;
  }
});

// node_modules/@mui/material/node/Grow/index.js
var require_Grow2 = __commonJS({
  "node_modules/@mui/material/node/Grow/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _Grow.default;
      }
    });
    var _Grow = _interopRequireDefault(require_Grow());
  }
});

// node_modules/@mui/material/node/Modal/ModalManager.js
var require_ModalManager = __commonJS({
  "node_modules/@mui/material/node/Modal/ModalManager.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.ModalManager = void 0;
    exports2.ariaHidden = ariaHidden;
    var _utils = require_utils();
    function isOverflowing(container) {
      const doc = (0, _utils.unstable_ownerDocument)(container);
      if (doc.body === container) {
        return (0, _utils.unstable_ownerWindow)(container).innerWidth > doc.documentElement.clientWidth;
      }
      return container.scrollHeight > container.clientHeight;
    }
    function ariaHidden(element, hide) {
      if (hide) {
        element.setAttribute("aria-hidden", "true");
      } else {
        element.removeAttribute("aria-hidden");
      }
    }
    function getPaddingRight(element) {
      return parseInt((0, _utils.unstable_ownerWindow)(element).getComputedStyle(element).paddingRight, 10) || 0;
    }
    function isAriaHiddenForbiddenOnElement(element) {
      const forbiddenTagNames = ["TEMPLATE", "SCRIPT", "STYLE", "LINK", "MAP", "META", "NOSCRIPT", "PICTURE", "COL", "COLGROUP", "PARAM", "SLOT", "SOURCE", "TRACK"];
      const isForbiddenTagName = forbiddenTagNames.includes(element.tagName);
      const isInputHidden = element.tagName === "INPUT" && element.getAttribute("type") === "hidden";
      return isForbiddenTagName || isInputHidden;
    }
    function ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude, hide) {
      const blacklist = [mountElement, currentElement, ...elementsToExclude];
      [].forEach.call(container.children, (element) => {
        const isNotExcludedElement = !blacklist.includes(element);
        const isNotForbiddenElement = !isAriaHiddenForbiddenOnElement(element);
        if (isNotExcludedElement && isNotForbiddenElement) {
          ariaHidden(element, hide);
        }
      });
    }
    function findIndexOf(items, callback) {
      let idx = -1;
      items.some((item, index) => {
        if (callback(item)) {
          idx = index;
          return true;
        }
        return false;
      });
      return idx;
    }
    function handleContainer(containerInfo, props) {
      const restoreStyle = [];
      const container = containerInfo.container;
      if (!props.disableScrollLock) {
        if (isOverflowing(container)) {
          const scrollbarSize = (0, _utils.unstable_getScrollbarSize)((0, _utils.unstable_ownerWindow)(container));
          restoreStyle.push({
            value: container.style.paddingRight,
            property: "padding-right",
            el: container
          });
          container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`;
          const fixedElements2 = (0, _utils.unstable_ownerDocument)(container).querySelectorAll(".mui-fixed");
          [].forEach.call(fixedElements2, (element) => {
            restoreStyle.push({
              value: element.style.paddingRight,
              property: "padding-right",
              el: element
            });
            element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;
          });
        }
        let scrollContainer;
        if (container.parentNode instanceof DocumentFragment) {
          scrollContainer = (0, _utils.unstable_ownerDocument)(container).body;
        } else {
          const parent = container.parentElement;
          const containerWindow = (0, _utils.unstable_ownerWindow)(container);
          scrollContainer = parent?.nodeName === "HTML" && containerWindow.getComputedStyle(parent).overflowY === "scroll" ? parent : container;
        }
        restoreStyle.push({
          value: scrollContainer.style.overflow,
          property: "overflow",
          el: scrollContainer
        }, {
          value: scrollContainer.style.overflowX,
          property: "overflow-x",
          el: scrollContainer
        }, {
          value: scrollContainer.style.overflowY,
          property: "overflow-y",
          el: scrollContainer
        });
        scrollContainer.style.overflow = "hidden";
      }
      const restore = () => {
        restoreStyle.forEach(({
          value,
          el,
          property
        }) => {
          if (value) {
            el.style.setProperty(property, value);
          } else {
            el.style.removeProperty(property);
          }
        });
      };
      return restore;
    }
    function getHiddenSiblings(container) {
      const hiddenSiblings = [];
      [].forEach.call(container.children, (element) => {
        if (element.getAttribute("aria-hidden") === "true") {
          hiddenSiblings.push(element);
        }
      });
      return hiddenSiblings;
    }
    var ModalManager = class {
      constructor() {
        this.modals = [];
        this.containers = [];
      }
      add(modal, container) {
        let modalIndex = this.modals.indexOf(modal);
        if (modalIndex !== -1) {
          return modalIndex;
        }
        modalIndex = this.modals.length;
        this.modals.push(modal);
        if (modal.modalRef) {
          ariaHidden(modal.modalRef, false);
        }
        const hiddenSiblings = getHiddenSiblings(container);
        ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);
        const containerIndex = findIndexOf(this.containers, (item) => item.container === container);
        if (containerIndex !== -1) {
          this.containers[containerIndex].modals.push(modal);
          return modalIndex;
        }
        this.containers.push({
          modals: [modal],
          container,
          restore: null,
          hiddenSiblings
        });
        return modalIndex;
      }
      mount(modal, props) {
        const containerIndex = findIndexOf(this.containers, (item) => item.modals.includes(modal));
        const containerInfo = this.containers[containerIndex];
        if (!containerInfo.restore) {
          containerInfo.restore = handleContainer(containerInfo, props);
        }
      }
      remove(modal, ariaHiddenState = true) {
        const modalIndex = this.modals.indexOf(modal);
        if (modalIndex === -1) {
          return modalIndex;
        }
        const containerIndex = findIndexOf(this.containers, (item) => item.modals.includes(modal));
        const containerInfo = this.containers[containerIndex];
        containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
        this.modals.splice(modalIndex, 1);
        if (containerInfo.modals.length === 0) {
          if (containerInfo.restore) {
            containerInfo.restore();
          }
          if (modal.modalRef) {
            ariaHidden(modal.modalRef, ariaHiddenState);
          }
          ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
          this.containers.splice(containerIndex, 1);
        } else {
          const nextTop = containerInfo.modals[containerInfo.modals.length - 1];
          if (nextTop.modalRef) {
            ariaHidden(nextTop.modalRef, false);
          }
        }
        return modalIndex;
      }
      isTopModal(modal) {
        return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
      }
    };
    exports2.ModalManager = ModalManager;
  }
});

// node_modules/@mui/material/node/Unstable_TrapFocus/FocusTrap.js
var require_FocusTrap = __commonJS({
  "node_modules/@mui/material/node/Unstable_TrapFocus/FocusTrap.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _utils = require_utils();
    var _jsxRuntime = require_jsx_runtime();
    var candidatesSelector = ["input", "select", "textarea", "a[href]", "button", "[tabindex]", "audio[controls]", "video[controls]", '[contenteditable]:not([contenteditable="false"])'].join(",");
    function getTabIndex(node2) {
      const tabindexAttr = parseInt(node2.getAttribute("tabindex") || "", 10);
      if (!Number.isNaN(tabindexAttr)) {
        return tabindexAttr;
      }
      if (node2.contentEditable === "true" || (node2.nodeName === "AUDIO" || node2.nodeName === "VIDEO" || node2.nodeName === "DETAILS") && node2.getAttribute("tabindex") === null) {
        return 0;
      }
      return node2.tabIndex;
    }
    function isNonTabbableRadio(node2) {
      if (node2.tagName !== "INPUT" || node2.type !== "radio") {
        return false;
      }
      if (!node2.name) {
        return false;
      }
      const getRadio = (selector) => node2.ownerDocument.querySelector(`input[type="radio"]${selector}`);
      let roving = getRadio(`[name="${node2.name}"]:checked`);
      if (!roving) {
        roving = getRadio(`[name="${node2.name}"]`);
      }
      return roving !== node2;
    }
    function isNodeMatchingSelectorFocusable(node2) {
      if (node2.disabled || node2.tagName === "INPUT" && node2.type === "hidden" || isNonTabbableRadio(node2)) {
        return false;
      }
      return true;
    }
    function defaultGetTabbable(root) {
      const regularTabNodes = [];
      const orderedTabNodes = [];
      Array.from(root.querySelectorAll(candidatesSelector)).forEach((node2, i) => {
        const nodeTabIndex = getTabIndex(node2);
        if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node2)) {
          return;
        }
        if (nodeTabIndex === 0) {
          regularTabNodes.push(node2);
        } else {
          orderedTabNodes.push({
            documentOrder: i,
            tabIndex: nodeTabIndex,
            node: node2
          });
        }
      });
      return orderedTabNodes.sort((a, b) => a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex).map((a) => a.node).concat(regularTabNodes);
    }
    function defaultIsEnabled() {
      return true;
    }
    function FocusTrap(props) {
      const {
        children,
        disableAutoFocus = false,
        disableEnforceFocus = false,
        disableRestoreFocus = false,
        getTabbable = defaultGetTabbable,
        isEnabled = defaultIsEnabled,
        open
      } = props;
      const ignoreNextEnforceFocus = React7.useRef(false);
      const sentinelStart = React7.useRef(null);
      const sentinelEnd = React7.useRef(null);
      const nodeToRestore = React7.useRef(null);
      const reactFocusEventTarget = React7.useRef(null);
      const activated = React7.useRef(false);
      const rootRef = React7.useRef(null);
      const handleRef = (0, _utils.unstable_useForkRef)((0, _utils.unstable_getReactElementRef)(children), rootRef);
      const lastKeydown = React7.useRef(null);
      React7.useEffect(() => {
        if (!open || !rootRef.current) {
          return;
        }
        activated.current = !disableAutoFocus;
      }, [disableAutoFocus, open]);
      React7.useEffect(() => {
        if (!open || !rootRef.current) {
          return;
        }
        const doc = (0, _utils.unstable_ownerDocument)(rootRef.current);
        if (!rootRef.current.contains(doc.activeElement)) {
          if (!rootRef.current.hasAttribute("tabIndex")) {
            if (define_process_env_default.NODE_ENV !== "production") {
              console.error(["MUI: The modal content node does not accept focus.", 'For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".'].join("\n"));
            }
            rootRef.current.setAttribute("tabIndex", "-1");
          }
          if (activated.current) {
            rootRef.current.focus();
          }
        }
        return () => {
          if (!disableRestoreFocus) {
            if (nodeToRestore.current && nodeToRestore.current.focus) {
              ignoreNextEnforceFocus.current = true;
              nodeToRestore.current.focus();
            }
            nodeToRestore.current = null;
          }
        };
      }, [open]);
      React7.useEffect(() => {
        if (!open || !rootRef.current) {
          return;
        }
        const doc = (0, _utils.unstable_ownerDocument)(rootRef.current);
        const loopFocus = (nativeEvent) => {
          lastKeydown.current = nativeEvent;
          if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== "Tab") {
            return;
          }
          if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
            ignoreNextEnforceFocus.current = true;
            if (sentinelEnd.current) {
              sentinelEnd.current.focus();
            }
          }
        };
        const contain = () => {
          const rootElement = rootRef.current;
          if (rootElement === null) {
            return;
          }
          if (!doc.hasFocus() || !isEnabled() || ignoreNextEnforceFocus.current) {
            ignoreNextEnforceFocus.current = false;
            return;
          }
          if (rootElement.contains(doc.activeElement)) {
            return;
          }
          if (disableEnforceFocus && doc.activeElement !== sentinelStart.current && doc.activeElement !== sentinelEnd.current) {
            return;
          }
          if (doc.activeElement !== reactFocusEventTarget.current) {
            reactFocusEventTarget.current = null;
          } else if (reactFocusEventTarget.current !== null) {
            return;
          }
          if (!activated.current) {
            return;
          }
          let tabbable = [];
          if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {
            tabbable = getTabbable(rootRef.current);
          }
          if (tabbable.length > 0) {
            const isShiftTab = Boolean(lastKeydown.current?.shiftKey && lastKeydown.current?.key === "Tab");
            const focusNext = tabbable[0];
            const focusPrevious = tabbable[tabbable.length - 1];
            if (typeof focusNext !== "string" && typeof focusPrevious !== "string") {
              if (isShiftTab) {
                focusPrevious.focus();
              } else {
                focusNext.focus();
              }
            }
          } else {
            rootElement.focus();
          }
        };
        doc.addEventListener("focusin", contain);
        doc.addEventListener("keydown", loopFocus, true);
        const interval = setInterval(() => {
          if (doc.activeElement && doc.activeElement.tagName === "BODY") {
            contain();
          }
        }, 50);
        return () => {
          clearInterval(interval);
          doc.removeEventListener("focusin", contain);
          doc.removeEventListener("keydown", loopFocus, true);
        };
      }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);
      const onFocus = (event) => {
        if (nodeToRestore.current === null) {
          nodeToRestore.current = event.relatedTarget;
        }
        activated.current = true;
        reactFocusEventTarget.current = event.target;
        const childrenPropsHandler = children.props.onFocus;
        if (childrenPropsHandler) {
          childrenPropsHandler(event);
        }
      };
      const handleFocusSentinel = (event) => {
        if (nodeToRestore.current === null) {
          nodeToRestore.current = event.relatedTarget;
        }
        activated.current = true;
      };
      return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(React7.Fragment, {
        children: [/* @__PURE__ */ (0, _jsxRuntime.jsx)("div", {
          tabIndex: open ? 0 : -1,
          onFocus: handleFocusSentinel,
          ref: sentinelStart,
          "data-testid": "sentinelStart"
        }), /* @__PURE__ */ React7.cloneElement(children, {
          ref: handleRef,
          onFocus
        }), /* @__PURE__ */ (0, _jsxRuntime.jsx)("div", {
          tabIndex: open ? 0 : -1,
          onFocus: handleFocusSentinel,
          ref: sentinelEnd,
          "data-testid": "sentinelEnd"
        })]
      });
    }
    define_process_env_default.NODE_ENV !== "production" ? FocusTrap.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * A single child content element.
       */
      children: _utils.elementAcceptingRef,
      /**
       * If `true`, the focus trap will not automatically shift focus to itself when it opens, and
       * replace it to the last focused element when it closes.
       * This also works correctly with any focus trap children that have the `disableAutoFocus` prop.
       *
       * Generally this should never be set to `true` as it makes the focus trap less
       * accessible to assistive technologies, like screen readers.
       * @default false
       */
      disableAutoFocus: _propTypes.default.bool,
      /**
       * If `true`, the focus trap will not prevent focus from leaving the focus trap while open.
       *
       * Generally this should never be set to `true` as it makes the focus trap less
       * accessible to assistive technologies, like screen readers.
       * @default false
       */
      disableEnforceFocus: _propTypes.default.bool,
      /**
       * If `true`, the focus trap will not restore focus to previously focused element once
       * focus trap is hidden or unmounted.
       * @default false
       */
      disableRestoreFocus: _propTypes.default.bool,
      /**
       * Returns an array of ordered tabbable nodes (i.e. in tab order) within the root.
       * For instance, you can provide the "tabbable" npm dependency.
       * @param {HTMLElement} root
       */
      getTabbable: _propTypes.default.func,
      /**
       * This prop extends the `open` prop.
       * It allows to toggle the open state without having to wait for a rerender when changing the `open` prop.
       * This prop should be memoized.
       * It can be used to support multiple focus trap mounted at the same time.
       * @default function defaultIsEnabled(): boolean {
       *   return true;
       * }
       */
      isEnabled: _propTypes.default.func,
      /**
       * If `true`, focus is locked.
       */
      open: _propTypes.default.bool.isRequired
    } : void 0;
    if (define_process_env_default.NODE_ENV !== "production") {
      FocusTrap["propTypes"] = (0, _utils.exactProp)(FocusTrap.propTypes);
    }
    var _default = exports2.default = FocusTrap;
  }
});

// node_modules/@mui/material/node/Unstable_TrapFocus/index.js
var require_Unstable_TrapFocus = __commonJS({
  "node_modules/@mui/material/node/Unstable_TrapFocus/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _FocusTrap.default;
      }
    });
    var _FocusTrap = _interopRequireDefault(require_FocusTrap());
  }
});

// node_modules/@mui/material/node/Fade/Fade.js
var require_Fade = __commonJS({
  "node_modules/@mui/material/node/Fade/Fade.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _reactTransitionGroup = require_cjs();
    var _elementAcceptingRef = _interopRequireDefault(require_elementAcceptingRef2());
    var _getReactElementRef = _interopRequireDefault(require_getReactElementRef2());
    var _zeroStyled = require_zero_styled2();
    var _utils = require_utils3();
    var _useForkRef = _interopRequireDefault(require_useForkRef3());
    var _jsxRuntime = require_jsx_runtime();
    var styles = {
      entering: {
        opacity: 1
      },
      entered: {
        opacity: 1
      }
    };
    var Fade = /* @__PURE__ */ React7.forwardRef(function Fade2(props, ref) {
      const theme2 = (0, _zeroStyled.useTheme)();
      const defaultTimeout = {
        enter: theme2.transitions.duration.enteringScreen,
        exit: theme2.transitions.duration.leavingScreen
      };
      const {
        addEndListener,
        appear = true,
        children,
        easing,
        in: inProp,
        onEnter,
        onEntered,
        onEntering,
        onExit,
        onExited,
        onExiting,
        style,
        timeout = defaultTimeout,
        // eslint-disable-next-line react/prop-types
        TransitionComponent = _reactTransitionGroup.Transition,
        ...other
      } = props;
      const enableStrictModeCompat = true;
      const nodeRef = React7.useRef(null);
      const handleRef = (0, _useForkRef.default)(nodeRef, (0, _getReactElementRef.default)(children), ref);
      const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
        if (callback) {
          const node2 = nodeRef.current;
          if (maybeIsAppearing === void 0) {
            callback(node2);
          } else {
            callback(node2, maybeIsAppearing);
          }
        }
      };
      const handleEntering = normalizedTransitionCallback(onEntering);
      const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
        (0, _utils.reflow)(node2);
        const transitionProps = (0, _utils.getTransitionProps)({
          style,
          timeout,
          easing
        }, {
          mode: "enter"
        });
        node2.style.webkitTransition = theme2.transitions.create("opacity", transitionProps);
        node2.style.transition = theme2.transitions.create("opacity", transitionProps);
        if (onEnter) {
          onEnter(node2, isAppearing);
        }
      });
      const handleEntered = normalizedTransitionCallback(onEntered);
      const handleExiting = normalizedTransitionCallback(onExiting);
      const handleExit = normalizedTransitionCallback((node2) => {
        const transitionProps = (0, _utils.getTransitionProps)({
          style,
          timeout,
          easing
        }, {
          mode: "exit"
        });
        node2.style.webkitTransition = theme2.transitions.create("opacity", transitionProps);
        node2.style.transition = theme2.transitions.create("opacity", transitionProps);
        if (onExit) {
          onExit(node2);
        }
      });
      const handleExited = normalizedTransitionCallback(onExited);
      const handleAddEndListener = (next2) => {
        if (addEndListener) {
          addEndListener(nodeRef.current, next2);
        }
      };
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(TransitionComponent, {
        appear,
        in: inProp,
        nodeRef: enableStrictModeCompat ? nodeRef : void 0,
        onEnter: handleEnter,
        onEntered: handleEntered,
        onEntering: handleEntering,
        onExit: handleExit,
        onExited: handleExited,
        onExiting: handleExiting,
        addEndListener: handleAddEndListener,
        timeout,
        ...other,
        children: (state, {
          ownerState,
          ...restChildProps
        }) => {
          return /* @__PURE__ */ React7.cloneElement(children, {
            style: {
              opacity: 0,
              visibility: state === "exited" && !inProp ? "hidden" : void 0,
              ...styles[state],
              ...style,
              ...children.props.style
            },
            ref: handleRef,
            ...restChildProps
          });
        }
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? Fade.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * Add a custom transition end trigger. Called with the transitioning DOM
       * node and a done callback. Allows for more fine grained transition end
       * logic. Note: Timeouts are still used as a fallback if provided.
       */
      addEndListener: _propTypes.default.func,
      /**
       * Perform the enter transition when it first mounts if `in` is also `true`.
       * Set this to `false` to disable this behavior.
       * @default true
       */
      appear: _propTypes.default.bool,
      /**
       * A single child content element.
       */
      children: _elementAcceptingRef.default.isRequired,
      /**
       * The transition timing function.
       * You may specify a single easing or a object containing enter and exit values.
       */
      easing: _propTypes.default.oneOfType([_propTypes.default.shape({
        enter: _propTypes.default.string,
        exit: _propTypes.default.string
      }), _propTypes.default.string]),
      /**
       * If `true`, the component will transition in.
       */
      in: _propTypes.default.bool,
      /**
       * @ignore
       */
      onEnter: _propTypes.default.func,
      /**
       * @ignore
       */
      onEntered: _propTypes.default.func,
      /**
       * @ignore
       */
      onEntering: _propTypes.default.func,
      /**
       * @ignore
       */
      onExit: _propTypes.default.func,
      /**
       * @ignore
       */
      onExited: _propTypes.default.func,
      /**
       * @ignore
       */
      onExiting: _propTypes.default.func,
      /**
       * @ignore
       */
      style: _propTypes.default.object,
      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       * @default {
       *   enter: theme.transitions.duration.enteringScreen,
       *   exit: theme.transitions.duration.leavingScreen,
       * }
       */
      timeout: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
        appear: _propTypes.default.number,
        enter: _propTypes.default.number,
        exit: _propTypes.default.number
      })])
    } : void 0;
    var _default = exports2.default = Fade;
  }
});

// node_modules/@mui/material/node/Fade/index.js
var require_Fade2 = __commonJS({
  "node_modules/@mui/material/node/Fade/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _Fade.default;
      }
    });
    var _Fade = _interopRequireDefault(require_Fade());
  }
});

// node_modules/@mui/material/node/Backdrop/backdropClasses.js
var require_backdropClasses = __commonJS({
  "node_modules/@mui/material/node/Backdrop/backdropClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getBackdropUtilityClass = getBackdropUtilityClass;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    function getBackdropUtilityClass(slot) {
      return (0, _generateUtilityClass.default)("MuiBackdrop", slot);
    }
    var backdropClasses = (0, _generateUtilityClasses.default)("MuiBackdrop", ["root", "invisible"]);
    var _default = exports2.default = backdropClasses;
  }
});

// node_modules/@mui/material/node/Backdrop/Backdrop.js
var require_Backdrop = __commonJS({
  "node_modules/@mui/material/node/Backdrop/Backdrop.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _clsx = _interopRequireDefault(require_clsx());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _zeroStyled = require_zero_styled2();
    var _DefaultPropsProvider = require_DefaultPropsProvider4();
    var _useSlot = _interopRequireDefault(require_useSlot());
    var _Fade = _interopRequireDefault(require_Fade2());
    var _backdropClasses = require_backdropClasses();
    var _jsxRuntime = require_jsx_runtime();
    var useUtilityClasses = (ownerState) => {
      const {
        classes,
        invisible
      } = ownerState;
      const slots = {
        root: ["root", invisible && "invisible"]
      };
      return (0, _composeClasses.default)(slots, _backdropClasses.getBackdropUtilityClass, classes);
    };
    var BackdropRoot = (0, _zeroStyled.styled)("div", {
      name: "MuiBackdrop",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.invisible && styles.invisible];
      }
    })({
      position: "fixed",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      right: 0,
      bottom: 0,
      top: 0,
      left: 0,
      backgroundColor: "rgba(0, 0, 0, 0.5)",
      WebkitTapHighlightColor: "transparent",
      variants: [{
        props: {
          invisible: true
        },
        style: {
          backgroundColor: "transparent"
        }
      }]
    });
    var Backdrop = /* @__PURE__ */ React7.forwardRef(function Backdrop2(inProps, ref) {
      const props = (0, _DefaultPropsProvider.useDefaultProps)({
        props: inProps,
        name: "MuiBackdrop"
      });
      const {
        children,
        className,
        component = "div",
        invisible = false,
        open,
        components = {},
        componentsProps = {},
        slotProps = {},
        slots = {},
        TransitionComponent: TransitionComponentProp,
        transitionDuration,
        ...other
      } = props;
      const ownerState = {
        ...props,
        component,
        invisible
      };
      const classes = useUtilityClasses(ownerState);
      const backwardCompatibleSlots = {
        transition: TransitionComponentProp,
        root: components.Root,
        ...slots
      };
      const backwardCompatibleSlotProps = {
        ...componentsProps,
        ...slotProps
      };
      const externalForwardedProps = {
        slots: backwardCompatibleSlots,
        slotProps: backwardCompatibleSlotProps
      };
      const [RootSlot, rootProps] = (0, _useSlot.default)("root", {
        elementType: BackdropRoot,
        externalForwardedProps,
        className: (0, _clsx.default)(classes.root, className),
        ownerState
      });
      const [TransitionSlot, transitionProps] = (0, _useSlot.default)("transition", {
        elementType: _Fade.default,
        externalForwardedProps,
        ownerState
      });
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(TransitionSlot, {
        in: open,
        timeout: transitionDuration,
        ...other,
        ...transitionProps,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(RootSlot, {
          "aria-hidden": true,
          ...rootProps,
          classes,
          ref,
          children
        })
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? Backdrop.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * The content of the component.
       */
      children: _propTypes.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      /**
       * @ignore
       */
      className: _propTypes.default.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: _propTypes.default.elementType,
      /**
       * The components used for each slot inside.
       *
       * @deprecated Use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       *
       * @default {}
       */
      components: _propTypes.default.shape({
        Root: _propTypes.default.elementType
      }),
      /**
       * The extra props for the slot components.
       * You can override the existing props or add new ones.
       *
       * @deprecated Use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       *
       * @default {}
       */
      componentsProps: _propTypes.default.shape({
        root: _propTypes.default.object
      }),
      /**
       * If `true`, the backdrop is invisible.
       * It can be used when rendering a popover or a custom select component.
       * @default false
       */
      invisible: _propTypes.default.bool,
      /**
       * If `true`, the component is shown.
       */
      open: _propTypes.default.bool.isRequired,
      /**
       * The props used for each slot inside.
       * @default {}
       */
      slotProps: _propTypes.default.shape({
        root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
        transition: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
      }),
      /**
       * The components used for each slot inside.
       * @default {}
       */
      slots: _propTypes.default.shape({
        root: _propTypes.default.elementType,
        transition: _propTypes.default.elementType
      }),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
      /**
       * The component used for the transition.
       * [Follow this guide](https://mui.com/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
       * @default Fade
       * @deprecated Use `slots.transition` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       */
      TransitionComponent: _propTypes.default.elementType,
      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       */
      transitionDuration: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
        appear: _propTypes.default.number,
        enter: _propTypes.default.number,
        exit: _propTypes.default.number
      })])
    } : void 0;
    var _default = exports2.default = Backdrop;
  }
});

// node_modules/@mui/material/node/Backdrop/index.js
var require_Backdrop2 = __commonJS({
  "node_modules/@mui/material/node/Backdrop/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      backdropClasses: true
    };
    Object.defineProperty(exports2, "backdropClasses", {
      enumerable: true,
      get: function() {
        return _backdropClasses.default;
      }
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _Backdrop.default;
      }
    });
    var _Backdrop = _interopRequireDefault(require_Backdrop());
    var _backdropClasses = _interopRequireWildcard(require_backdropClasses());
    Object.keys(_backdropClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _backdropClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _backdropClasses[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node/Modal/useModal.js
var require_useModal = __commonJS({
  "node_modules/@mui/material/node/Modal/useModal.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _extractEventHandlers = _interopRequireDefault(require_extractEventHandlers2());
    var _ModalManager = require_ModalManager();
    function getContainer(container) {
      return typeof container === "function" ? container() : container;
    }
    function getHasTransition(children) {
      return children ? children.props.hasOwnProperty("in") : false;
    }
    var noop = () => {
    };
    var manager = new _ModalManager.ModalManager();
    function useModal(parameters) {
      const {
        container,
        disableEscapeKeyDown = false,
        disableScrollLock = false,
        closeAfterTransition = false,
        onTransitionEnter,
        onTransitionExited,
        children,
        onClose,
        open,
        rootRef
      } = parameters;
      const modal = React7.useRef({});
      const mountNodeRef = React7.useRef(null);
      const modalRef = React7.useRef(null);
      const handleRef = (0, _utils.unstable_useForkRef)(modalRef, rootRef);
      const [exited, setExited] = React7.useState(!open);
      const hasTransition = getHasTransition(children);
      let ariaHiddenProp = true;
      if (parameters["aria-hidden"] === "false" || parameters["aria-hidden"] === false) {
        ariaHiddenProp = false;
      }
      const getDoc = () => (0, _utils.unstable_ownerDocument)(mountNodeRef.current);
      const getModal = () => {
        modal.current.modalRef = modalRef.current;
        modal.current.mount = mountNodeRef.current;
        return modal.current;
      };
      const handleMounted = () => {
        manager.mount(getModal(), {
          disableScrollLock
        });
        if (modalRef.current) {
          modalRef.current.scrollTop = 0;
        }
      };
      const handleOpen = (0, _utils.unstable_useEventCallback)(() => {
        const resolvedContainer = getContainer(container) || getDoc().body;
        manager.add(getModal(), resolvedContainer);
        if (modalRef.current) {
          handleMounted();
        }
      });
      const isTopModal = () => manager.isTopModal(getModal());
      const handlePortalRef = (0, _utils.unstable_useEventCallback)((node2) => {
        mountNodeRef.current = node2;
        if (!node2) {
          return;
        }
        if (open && isTopModal()) {
          handleMounted();
        } else if (modalRef.current) {
          (0, _ModalManager.ariaHidden)(modalRef.current, ariaHiddenProp);
        }
      });
      const handleClose = React7.useCallback(() => {
        manager.remove(getModal(), ariaHiddenProp);
      }, [ariaHiddenProp]);
      React7.useEffect(() => {
        return () => {
          handleClose();
        };
      }, [handleClose]);
      React7.useEffect(() => {
        if (open) {
          handleOpen();
        } else if (!hasTransition || !closeAfterTransition) {
          handleClose();
        }
      }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);
      const createHandleKeyDown = (otherHandlers) => (event) => {
        otherHandlers.onKeyDown?.(event);
        if (event.key !== "Escape" || event.which === 229 || // Wait until IME is settled.
        !isTopModal()) {
          return;
        }
        if (!disableEscapeKeyDown) {
          event.stopPropagation();
          if (onClose) {
            onClose(event, "escapeKeyDown");
          }
        }
      };
      const createHandleBackdropClick = (otherHandlers) => (event) => {
        otherHandlers.onClick?.(event);
        if (event.target !== event.currentTarget) {
          return;
        }
        if (onClose) {
          onClose(event, "backdropClick");
        }
      };
      const getRootProps = (otherHandlers = {}) => {
        const propsEventHandlers = (0, _extractEventHandlers.default)(parameters);
        delete propsEventHandlers.onTransitionEnter;
        delete propsEventHandlers.onTransitionExited;
        const externalEventHandlers = {
          ...propsEventHandlers,
          ...otherHandlers
        };
        return {
          /*
           * Marking an element with the role presentation indicates to assistive technology
           * that this element should be ignored; it exists to support the web application and
           * is not meant for humans to interact with directly.
           * https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/no-static-element-interactions.md
           */
          role: "presentation",
          ...externalEventHandlers,
          onKeyDown: createHandleKeyDown(externalEventHandlers),
          ref: handleRef
        };
      };
      const getBackdropProps = (otherHandlers = {}) => {
        const externalEventHandlers = otherHandlers;
        return {
          "aria-hidden": true,
          ...externalEventHandlers,
          onClick: createHandleBackdropClick(externalEventHandlers),
          open
        };
      };
      const getTransitionProps = () => {
        const handleEnter = () => {
          setExited(false);
          if (onTransitionEnter) {
            onTransitionEnter();
          }
        };
        const handleExited = () => {
          setExited(true);
          if (onTransitionExited) {
            onTransitionExited();
          }
          if (closeAfterTransition) {
            handleClose();
          }
        };
        return {
          onEnter: (0, _utils.unstable_createChainedFunction)(handleEnter, children?.props.onEnter ?? noop),
          onExited: (0, _utils.unstable_createChainedFunction)(handleExited, children?.props.onExited ?? noop)
        };
      };
      return {
        getRootProps,
        getBackdropProps,
        getTransitionProps,
        rootRef: handleRef,
        portalRef: handlePortalRef,
        isTopModal,
        exited,
        hasTransition
      };
    }
    var _default = exports2.default = useModal;
  }
});

// node_modules/@mui/material/node/Modal/modalClasses.js
var require_modalClasses = __commonJS({
  "node_modules/@mui/material/node/Modal/modalClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getModalUtilityClass = getModalUtilityClass;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    function getModalUtilityClass(slot) {
      return (0, _generateUtilityClass.default)("MuiModal", slot);
    }
    var modalClasses = (0, _generateUtilityClasses.default)("MuiModal", ["root", "hidden", "backdrop"]);
    var _default = exports2.default = modalClasses;
  }
});

// node_modules/@mui/material/node/Modal/Modal.js
var require_Modal = __commonJS({
  "node_modules/@mui/material/node/Modal/Modal.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _clsx = _interopRequireDefault(require_clsx());
    var _HTMLElementType = _interopRequireDefault(require_HTMLElementType2());
    var _elementAcceptingRef = _interopRequireDefault(require_elementAcceptingRef2());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _Unstable_TrapFocus = _interopRequireDefault(require_Unstable_TrapFocus());
    var _Portal = _interopRequireDefault(require_Portal2());
    var _zeroStyled = require_zero_styled2();
    var _memoTheme = _interopRequireDefault(require_memoTheme2());
    var _DefaultPropsProvider = require_DefaultPropsProvider4();
    var _Backdrop = _interopRequireDefault(require_Backdrop2());
    var _useModal = _interopRequireDefault(require_useModal());
    var _modalClasses = require_modalClasses();
    var _useSlot = _interopRequireDefault(require_useSlot());
    var _jsxRuntime = require_jsx_runtime();
    var useUtilityClasses = (ownerState) => {
      const {
        open,
        exited,
        classes
      } = ownerState;
      const slots = {
        root: ["root", !open && exited && "hidden"],
        backdrop: ["backdrop"]
      };
      return (0, _composeClasses.default)(slots, _modalClasses.getModalUtilityClass, classes);
    };
    var ModalRoot = (0, _zeroStyled.styled)("div", {
      name: "MuiModal",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, !ownerState.open && ownerState.exited && styles.hidden];
      }
    })((0, _memoTheme.default)(({
      theme: theme2
    }) => ({
      position: "fixed",
      zIndex: (theme2.vars || theme2).zIndex.modal,
      right: 0,
      bottom: 0,
      top: 0,
      left: 0,
      variants: [{
        props: ({
          ownerState
        }) => !ownerState.open && ownerState.exited,
        style: {
          visibility: "hidden"
        }
      }]
    })));
    var ModalBackdrop = (0, _zeroStyled.styled)(_Backdrop.default, {
      name: "MuiModal",
      slot: "Backdrop",
      overridesResolver: (props, styles) => {
        return styles.backdrop;
      }
    })({
      zIndex: -1
    });
    var Modal = /* @__PURE__ */ React7.forwardRef(function Modal2(inProps, ref) {
      const props = (0, _DefaultPropsProvider.useDefaultProps)({
        name: "MuiModal",
        props: inProps
      });
      const {
        BackdropComponent = ModalBackdrop,
        BackdropProps,
        classes: classesProp,
        className,
        closeAfterTransition = false,
        children,
        container,
        component,
        components = {},
        componentsProps = {},
        disableAutoFocus = false,
        disableEnforceFocus = false,
        disableEscapeKeyDown = false,
        disablePortal = false,
        disableRestoreFocus = false,
        disableScrollLock = false,
        hideBackdrop = false,
        keepMounted = false,
        onBackdropClick,
        onClose,
        onTransitionEnter,
        onTransitionExited,
        open,
        slotProps = {},
        slots = {},
        // eslint-disable-next-line react/prop-types
        theme: theme2,
        ...other
      } = props;
      const propsWithDefaults = {
        ...props,
        closeAfterTransition,
        disableAutoFocus,
        disableEnforceFocus,
        disableEscapeKeyDown,
        disablePortal,
        disableRestoreFocus,
        disableScrollLock,
        hideBackdrop,
        keepMounted
      };
      const {
        getRootProps,
        getBackdropProps,
        getTransitionProps,
        portalRef,
        isTopModal,
        exited,
        hasTransition
      } = (0, _useModal.default)({
        ...propsWithDefaults,
        rootRef: ref
      });
      const ownerState = {
        ...propsWithDefaults,
        exited
      };
      const classes = useUtilityClasses(ownerState);
      const childProps = {};
      if (children.props.tabIndex === void 0) {
        childProps.tabIndex = "-1";
      }
      if (hasTransition) {
        const {
          onEnter,
          onExited
        } = getTransitionProps();
        childProps.onEnter = onEnter;
        childProps.onExited = onExited;
      }
      const externalForwardedProps = {
        slots: {
          root: components.Root,
          backdrop: components.Backdrop,
          ...slots
        },
        slotProps: {
          ...componentsProps,
          ...slotProps
        }
      };
      const [RootSlot, rootProps] = (0, _useSlot.default)("root", {
        ref,
        elementType: ModalRoot,
        externalForwardedProps: {
          ...externalForwardedProps,
          ...other,
          component
        },
        getSlotProps: getRootProps,
        ownerState,
        className: (0, _clsx.default)(className, classes?.root, !ownerState.open && ownerState.exited && classes?.hidden)
      });
      const [BackdropSlot, backdropProps] = (0, _useSlot.default)("backdrop", {
        ref: BackdropProps?.ref,
        elementType: BackdropComponent,
        externalForwardedProps,
        shouldForwardComponentProp: true,
        additionalProps: BackdropProps,
        getSlotProps: (otherHandlers) => {
          return getBackdropProps({
            ...otherHandlers,
            onClick: (event) => {
              if (onBackdropClick) {
                onBackdropClick(event);
              }
              if (otherHandlers?.onClick) {
                otherHandlers.onClick(event);
              }
            }
          });
        },
        className: (0, _clsx.default)(BackdropProps?.className, classes?.backdrop),
        ownerState
      });
      if (!keepMounted && !open && (!hasTransition || exited)) {
        return null;
      }
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_Portal.default, {
        ref: portalRef,
        container,
        disablePortal,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsxs)(RootSlot, {
          ...rootProps,
          children: [!hideBackdrop && BackdropComponent ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(BackdropSlot, {
            ...backdropProps
          }) : null, /* @__PURE__ */ (0, _jsxRuntime.jsx)(_Unstable_TrapFocus.default, {
            disableEnforceFocus,
            disableAutoFocus,
            disableRestoreFocus,
            isEnabled: isTopModal,
            open,
            children: /* @__PURE__ */ React7.cloneElement(children, childProps)
          })]
        })
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? Modal.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * A backdrop component. This prop enables custom backdrop rendering.
       * @deprecated Use `slots.backdrop` instead. While this prop currently works, it will be removed in the next major version.
       * Use the `slots.backdrop` prop to make your application ready for the next version of Material UI.
       * @default styled(Backdrop, {
       *   name: 'MuiModal',
       *   slot: 'Backdrop',
       *   overridesResolver: (props, styles) => {
       *     return styles.backdrop;
       *   },
       * })({
       *   zIndex: -1,
       * })
       */
      BackdropComponent: _propTypes.default.elementType,
      /**
       * Props applied to the [`Backdrop`](https://mui.com/material-ui/api/backdrop/) element.
       * @deprecated Use `slotProps.backdrop` instead.
       */
      BackdropProps: _propTypes.default.object,
      /**
       * A single child content element.
       */
      children: _elementAcceptingRef.default.isRequired,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      /**
       * @ignore
       */
      className: _propTypes.default.string,
      /**
       * When set to true the Modal waits until a nested Transition is completed before closing.
       * @default false
       */
      closeAfterTransition: _propTypes.default.bool,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: _propTypes.default.elementType,
      /**
       * The components used for each slot inside.
       *
       * @deprecated Use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       *
       * @default {}
       */
      components: _propTypes.default.shape({
        Backdrop: _propTypes.default.elementType,
        Root: _propTypes.default.elementType
      }),
      /**
       * The extra props for the slot components.
       * You can override the existing props or add new ones.
       *
       * @deprecated Use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       *
       * @default {}
       */
      componentsProps: _propTypes.default.shape({
        backdrop: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
        root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
      }),
      /**
       * An HTML element or function that returns one.
       * The `container` will have the portal children appended to it.
       *
       * You can also provide a callback, which is called in a React layout effect.
       * This lets you set the container from a ref, and also makes server-side rendering possible.
       *
       * By default, it uses the body of the top-level document object,
       * so it's simply `document.body` most of the time.
       */
      container: _propTypes.default.oneOfType([_HTMLElementType.default, _propTypes.default.func]),
      /**
       * If `true`, the modal will not automatically shift focus to itself when it opens, and
       * replace it to the last focused element when it closes.
       * This also works correctly with any modal children that have the `disableAutoFocus` prop.
       *
       * Generally this should never be set to `true` as it makes the modal less
       * accessible to assistive technologies, like screen readers.
       * @default false
       */
      disableAutoFocus: _propTypes.default.bool,
      /**
       * If `true`, the modal will not prevent focus from leaving the modal while open.
       *
       * Generally this should never be set to `true` as it makes the modal less
       * accessible to assistive technologies, like screen readers.
       * @default false
       */
      disableEnforceFocus: _propTypes.default.bool,
      /**
       * If `true`, hitting escape will not fire the `onClose` callback.
       * @default false
       */
      disableEscapeKeyDown: _propTypes.default.bool,
      /**
       * The `children` will be under the DOM hierarchy of the parent component.
       * @default false
       */
      disablePortal: _propTypes.default.bool,
      /**
       * If `true`, the modal will not restore focus to previously focused element once
       * modal is hidden or unmounted.
       * @default false
       */
      disableRestoreFocus: _propTypes.default.bool,
      /**
       * Disable the scroll lock behavior.
       * @default false
       */
      disableScrollLock: _propTypes.default.bool,
      /**
       * If `true`, the backdrop is not rendered.
       * @default false
       */
      hideBackdrop: _propTypes.default.bool,
      /**
       * Always keep the children in the DOM.
       * This prop can be useful in SEO situation or
       * when you want to maximize the responsiveness of the Modal.
       * @default false
       */
      keepMounted: _propTypes.default.bool,
      /**
       * Callback fired when the backdrop is clicked.
       * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
       */
      onBackdropClick: _propTypes.default.func,
      /**
       * Callback fired when the component requests to be closed.
       * The `reason` parameter can optionally be used to control the response to `onClose`.
       *
       * @param {object} event The event source of the callback.
       * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
       */
      onClose: _propTypes.default.func,
      /**
       * A function called when a transition enters.
       */
      onTransitionEnter: _propTypes.default.func,
      /**
       * A function called when a transition has exited.
       */
      onTransitionExited: _propTypes.default.func,
      /**
       * If `true`, the component is shown.
       */
      open: _propTypes.default.bool.isRequired,
      /**
       * The props used for each slot inside the Modal.
       * @default {}
       */
      slotProps: _propTypes.default.shape({
        backdrop: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
        root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
      }),
      /**
       * The components used for each slot inside the Modal.
       * Either a string to use a HTML element or a component.
       * @default {}
       */
      slots: _propTypes.default.shape({
        backdrop: _propTypes.default.elementType,
        root: _propTypes.default.elementType
      }),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
    } : void 0;
    var _default = exports2.default = Modal;
  }
});

// node_modules/@mui/material/node/Modal/index.js
var require_Modal2 = __commonJS({
  "node_modules/@mui/material/node/Modal/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      ModalManager: true,
      modalClasses: true
    };
    Object.defineProperty(exports2, "ModalManager", {
      enumerable: true,
      get: function() {
        return _ModalManager.ModalManager;
      }
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _Modal.default;
      }
    });
    Object.defineProperty(exports2, "modalClasses", {
      enumerable: true,
      get: function() {
        return _modalClasses.default;
      }
    });
    var _ModalManager = require_ModalManager();
    var _Modal = _interopRequireDefault(require_Modal());
    var _modalClasses = _interopRequireWildcard(require_modalClasses());
    Object.keys(_modalClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _modalClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _modalClasses[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node/Popover/popoverClasses.js
var require_popoverClasses = __commonJS({
  "node_modules/@mui/material/node/Popover/popoverClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getPopoverUtilityClass = getPopoverUtilityClass;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    function getPopoverUtilityClass(slot) {
      return (0, _generateUtilityClass.default)("MuiPopover", slot);
    }
    var popoverClasses = (0, _generateUtilityClasses.default)("MuiPopover", ["root", "paper"]);
    var _default = exports2.default = popoverClasses;
  }
});

// node_modules/@mui/material/node/Popover/Popover.js
var require_Popover = __commonJS({
  "node_modules/@mui/material/node/Popover/Popover.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = exports2.PopoverRoot = exports2.PopoverPaper = void 0;
    exports2.getOffsetLeft = getOffsetLeft;
    exports2.getOffsetTop = getOffsetTop;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _clsx = _interopRequireDefault(require_clsx());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _HTMLElementType = _interopRequireDefault(require_HTMLElementType2());
    var _refType = _interopRequireDefault(require_refType2());
    var _elementTypeAcceptingRef = _interopRequireDefault(require_elementTypeAcceptingRef2());
    var _integerPropType = _interopRequireDefault(require_integerPropType2());
    var _chainPropTypes = _interopRequireDefault(require_chainPropTypes2());
    var _isHostComponent = _interopRequireDefault(require_isHostComponent5());
    var _zeroStyled = require_zero_styled2();
    var _DefaultPropsProvider = require_DefaultPropsProvider4();
    var _debounce = _interopRequireDefault(require_debounce3());
    var _ownerDocument = _interopRequireDefault(require_ownerDocument3());
    var _ownerWindow = _interopRequireDefault(require_ownerWindow3());
    var _Grow = _interopRequireDefault(require_Grow2());
    var _Modal = _interopRequireDefault(require_Modal2());
    var _Paper = _interopRequireDefault(require_Paper2());
    var _popoverClasses = require_popoverClasses();
    var _useSlot = _interopRequireDefault(require_useSlot());
    var _utils = require_utils4();
    var _jsxRuntime = require_jsx_runtime();
    function getOffsetTop(rect, vertical) {
      let offset = 0;
      if (typeof vertical === "number") {
        offset = vertical;
      } else if (vertical === "center") {
        offset = rect.height / 2;
      } else if (vertical === "bottom") {
        offset = rect.height;
      }
      return offset;
    }
    function getOffsetLeft(rect, horizontal) {
      let offset = 0;
      if (typeof horizontal === "number") {
        offset = horizontal;
      } else if (horizontal === "center") {
        offset = rect.width / 2;
      } else if (horizontal === "right") {
        offset = rect.width;
      }
      return offset;
    }
    function getTransformOriginValue(transformOrigin) {
      return [transformOrigin.horizontal, transformOrigin.vertical].map((n) => typeof n === "number" ? `${n}px` : n).join(" ");
    }
    function resolveAnchorEl(anchorEl) {
      return typeof anchorEl === "function" ? anchorEl() : anchorEl;
    }
    var useUtilityClasses = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        paper: ["paper"]
      };
      return (0, _composeClasses.default)(slots, _popoverClasses.getPopoverUtilityClass, classes);
    };
    var PopoverRoot = exports2.PopoverRoot = (0, _zeroStyled.styled)(_Modal.default, {
      name: "MuiPopover",
      slot: "Root",
      overridesResolver: (props, styles) => styles.root
    })({});
    var PopoverPaper = exports2.PopoverPaper = (0, _zeroStyled.styled)(_Paper.default, {
      name: "MuiPopover",
      slot: "Paper",
      overridesResolver: (props, styles) => styles.paper
    })({
      position: "absolute",
      overflowY: "auto",
      overflowX: "hidden",
      // So we see the popover when it's empty.
      // It's most likely on issue on userland.
      minWidth: 16,
      minHeight: 16,
      maxWidth: "calc(100% - 32px)",
      maxHeight: "calc(100% - 32px)",
      // We disable the focus ring for mouse, touch and keyboard users.
      outline: 0
    });
    var Popover = /* @__PURE__ */ React7.forwardRef(function Popover2(inProps, ref) {
      const props = (0, _DefaultPropsProvider.useDefaultProps)({
        props: inProps,
        name: "MuiPopover"
      });
      const {
        action,
        anchorEl,
        anchorOrigin = {
          vertical: "top",
          horizontal: "left"
        },
        anchorPosition,
        anchorReference = "anchorEl",
        children,
        className,
        container: containerProp,
        elevation = 8,
        marginThreshold = 16,
        open,
        PaperProps: PaperPropsProp = {},
        // TODO: remove in v7
        slots = {},
        slotProps = {},
        transformOrigin = {
          vertical: "top",
          horizontal: "left"
        },
        TransitionComponent,
        // TODO: remove in v7
        transitionDuration: transitionDurationProp = "auto",
        TransitionProps = {},
        // TODO: remove in v7
        disableScrollLock = false,
        ...other
      } = props;
      const paperRef = React7.useRef();
      const ownerState = {
        ...props,
        anchorOrigin,
        anchorReference,
        elevation,
        marginThreshold,
        transformOrigin,
        TransitionComponent,
        transitionDuration: transitionDurationProp,
        TransitionProps
      };
      const classes = useUtilityClasses(ownerState);
      const getAnchorOffset = React7.useCallback(() => {
        if (anchorReference === "anchorPosition") {
          if (define_process_env_default.NODE_ENV !== "production") {
            if (!anchorPosition) {
              console.error('MUI: You need to provide a `anchorPosition` prop when using <Popover anchorReference="anchorPosition" />.');
            }
          }
          return anchorPosition;
        }
        const resolvedAnchorEl = resolveAnchorEl(anchorEl);
        const anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : (0, _ownerDocument.default)(paperRef.current).body;
        const anchorRect = anchorElement.getBoundingClientRect();
        if (define_process_env_default.NODE_ENV !== "production") {
          const box = anchorElement.getBoundingClientRect();
          if (define_process_env_default.NODE_ENV !== "test" && box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        }
        return {
          top: anchorRect.top + getOffsetTop(anchorRect, anchorOrigin.vertical),
          left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)
        };
      }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]);
      const getTransformOrigin = React7.useCallback((elemRect) => {
        return {
          vertical: getOffsetTop(elemRect, transformOrigin.vertical),
          horizontal: getOffsetLeft(elemRect, transformOrigin.horizontal)
        };
      }, [transformOrigin.horizontal, transformOrigin.vertical]);
      const getPositioningStyle = React7.useCallback((element) => {
        const elemRect = {
          width: element.offsetWidth,
          height: element.offsetHeight
        };
        const elemTransformOrigin = getTransformOrigin(elemRect);
        if (anchorReference === "none") {
          return {
            top: null,
            left: null,
            transformOrigin: getTransformOriginValue(elemTransformOrigin)
          };
        }
        const anchorOffset = getAnchorOffset();
        let top = anchorOffset.top - elemTransformOrigin.vertical;
        let left = anchorOffset.left - elemTransformOrigin.horizontal;
        const bottom = top + elemRect.height;
        const right = left + elemRect.width;
        const containerWindow = (0, _ownerWindow.default)(resolveAnchorEl(anchorEl));
        const heightThreshold = containerWindow.innerHeight - marginThreshold;
        const widthThreshold = containerWindow.innerWidth - marginThreshold;
        if (marginThreshold !== null && top < marginThreshold) {
          const diff = top - marginThreshold;
          top -= diff;
          elemTransformOrigin.vertical += diff;
        } else if (marginThreshold !== null && bottom > heightThreshold) {
          const diff = bottom - heightThreshold;
          top -= diff;
          elemTransformOrigin.vertical += diff;
        }
        if (define_process_env_default.NODE_ENV !== "production") {
          if (elemRect.height > heightThreshold && elemRect.height && heightThreshold) {
            console.error(["MUI: The popover component is too tall.", `Some part of it can not be seen on the screen (${elemRect.height - heightThreshold}px).`, "Please consider adding a `max-height` to improve the user-experience."].join("\n"));
          }
        }
        if (marginThreshold !== null && left < marginThreshold) {
          const diff = left - marginThreshold;
          left -= diff;
          elemTransformOrigin.horizontal += diff;
        } else if (right > widthThreshold) {
          const diff = right - widthThreshold;
          left -= diff;
          elemTransformOrigin.horizontal += diff;
        }
        return {
          top: `${Math.round(top)}px`,
          left: `${Math.round(left)}px`,
          transformOrigin: getTransformOriginValue(elemTransformOrigin)
        };
      }, [anchorEl, anchorReference, getAnchorOffset, getTransformOrigin, marginThreshold]);
      const [isPositioned, setIsPositioned] = React7.useState(open);
      const setPositioningStyles = React7.useCallback(() => {
        const element = paperRef.current;
        if (!element) {
          return;
        }
        const positioning = getPositioningStyle(element);
        if (positioning.top !== null) {
          element.style.setProperty("top", positioning.top);
        }
        if (positioning.left !== null) {
          element.style.left = positioning.left;
        }
        element.style.transformOrigin = positioning.transformOrigin;
        setIsPositioned(true);
      }, [getPositioningStyle]);
      React7.useEffect(() => {
        if (disableScrollLock) {
          window.addEventListener("scroll", setPositioningStyles);
        }
        return () => window.removeEventListener("scroll", setPositioningStyles);
      }, [anchorEl, disableScrollLock, setPositioningStyles]);
      const handleEntering = () => {
        setPositioningStyles();
      };
      const handleExited = () => {
        setIsPositioned(false);
      };
      React7.useEffect(() => {
        if (open) {
          setPositioningStyles();
        }
      });
      React7.useImperativeHandle(action, () => open ? {
        updatePosition: () => {
          setPositioningStyles();
        }
      } : null, [open, setPositioningStyles]);
      React7.useEffect(() => {
        if (!open) {
          return void 0;
        }
        const handleResize = (0, _debounce.default)(() => {
          setPositioningStyles();
        });
        const containerWindow = (0, _ownerWindow.default)(resolveAnchorEl(anchorEl));
        containerWindow.addEventListener("resize", handleResize);
        return () => {
          handleResize.clear();
          containerWindow.removeEventListener("resize", handleResize);
        };
      }, [anchorEl, open, setPositioningStyles]);
      let transitionDuration = transitionDurationProp;
      const externalForwardedProps = {
        slots: {
          transition: TransitionComponent,
          ...slots
        },
        slotProps: {
          transition: TransitionProps,
          paper: PaperPropsProp,
          ...slotProps
        }
      };
      const [TransitionSlot, transitionSlotProps] = (0, _useSlot.default)("transition", {
        elementType: _Grow.default,
        externalForwardedProps,
        ownerState,
        getSlotProps: (handlers) => ({
          ...handlers,
          onEntering: (element, isAppearing) => {
            handlers.onEntering?.(element, isAppearing);
            handleEntering();
          },
          onExited: (element) => {
            handlers.onExited?.(element);
            handleExited();
          }
        }),
        additionalProps: {
          appear: true,
          in: open
        }
      });
      if (transitionDurationProp === "auto" && !TransitionSlot.muiSupportAuto) {
        transitionDuration = void 0;
      }
      const container = containerProp || (anchorEl ? (0, _ownerDocument.default)(resolveAnchorEl(anchorEl)).body : void 0);
      const [RootSlot, {
        slots: rootSlotsProp,
        slotProps: rootSlotPropsProp,
        ...rootProps
      }] = (0, _useSlot.default)("root", {
        ref,
        elementType: PopoverRoot,
        externalForwardedProps: {
          ...externalForwardedProps,
          ...other
        },
        shouldForwardComponentProp: true,
        additionalProps: {
          slots: {
            backdrop: slots.backdrop
          },
          slotProps: {
            backdrop: (0, _utils.mergeSlotProps)(typeof slotProps.backdrop === "function" ? slotProps.backdrop(ownerState) : slotProps.backdrop, {
              invisible: true
            })
          },
          container,
          open
        },
        ownerState,
        className: (0, _clsx.default)(classes.root, className)
      });
      const [PaperSlot, paperProps] = (0, _useSlot.default)("paper", {
        ref: paperRef,
        className: classes.paper,
        elementType: PopoverPaper,
        externalForwardedProps,
        shouldForwardComponentProp: true,
        additionalProps: {
          elevation,
          style: isPositioned ? void 0 : {
            opacity: 0
          }
        },
        ownerState
      });
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(RootSlot, {
        ...rootProps,
        ...!(0, _isHostComponent.default)(RootSlot) && {
          slots: rootSlotsProp,
          slotProps: rootSlotPropsProp,
          disableScrollLock
        },
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(TransitionSlot, {
          ...transitionSlotProps,
          timeout: transitionDuration,
          children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(PaperSlot, {
            ...paperProps,
            children
          })
        })
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? Popover.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * A ref for imperative actions.
       * It currently only supports updatePosition() action.
       */
      action: _refType.default,
      /**
       * An HTML element, [PopoverVirtualElement](https://mui.com/material-ui/react-popover/#virtual-element),
       * or a function that returns either.
       * It's used to set the position of the popover.
       */
      anchorEl: (0, _chainPropTypes.default)(_propTypes.default.oneOfType([_HTMLElementType.default, _propTypes.default.func]), (props) => {
        if (props.open && (!props.anchorReference || props.anchorReference === "anchorEl")) {
          const resolvedAnchorEl = resolveAnchorEl(props.anchorEl);
          if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
            const box = resolvedAnchorEl.getBoundingClientRect();
            if (define_process_env_default.NODE_ENV !== "test" && box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
              return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
            }
          } else {
            return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", `It should be an Element or PopoverVirtualElement instance but it's \`${resolvedAnchorEl}\` instead.`].join("\n"));
          }
        }
        return null;
      }),
      /**
       * This is the point on the anchor where the popover's
       * `anchorEl` will attach to. This is not used when the
       * anchorReference is 'anchorPosition'.
       *
       * Options:
       * vertical: [top, center, bottom];
       * horizontal: [left, center, right].
       * @default {
       *   vertical: 'top',
       *   horizontal: 'left',
       * }
       */
      anchorOrigin: _propTypes.default.shape({
        horizontal: _propTypes.default.oneOfType([_propTypes.default.oneOf(["center", "left", "right"]), _propTypes.default.number]).isRequired,
        vertical: _propTypes.default.oneOfType([_propTypes.default.oneOf(["bottom", "center", "top"]), _propTypes.default.number]).isRequired
      }),
      /**
       * This is the position that may be used to set the position of the popover.
       * The coordinates are relative to the application's client area.
       */
      anchorPosition: _propTypes.default.shape({
        left: _propTypes.default.number.isRequired,
        top: _propTypes.default.number.isRequired
      }),
      /**
       * This determines which anchor prop to refer to when setting
       * the position of the popover.
       * @default 'anchorEl'
       */
      anchorReference: _propTypes.default.oneOf(["anchorEl", "anchorPosition", "none"]),
      /**
       * A backdrop component. This prop enables custom backdrop rendering.
       * @deprecated Use `slots.backdrop` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       * @default styled(Backdrop, {
       *   name: 'MuiModal',
       *   slot: 'Backdrop',
       *   overridesResolver: (props, styles) => {
       *     return styles.backdrop;
       *   },
       * })({
       *   zIndex: -1,
       * })
       */
      BackdropComponent: _propTypes.default.elementType,
      /**
       * Props applied to the [`Backdrop`](/material-ui/api/backdrop/) element.
       * @deprecated Use `slotProps.backdrop` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       */
      BackdropProps: _propTypes.default.object,
      /**
       * The content of the component.
       */
      children: _propTypes.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      /**
       * @ignore
       */
      className: _propTypes.default.string,
      /**
       * An HTML element, component instance, or function that returns either.
       * The `container` will passed to the Modal component.
       *
       * By default, it uses the body of the anchorEl's top-level document object,
       * so it's simply `document.body` most of the time.
       */
      container: _propTypes.default.oneOfType([_HTMLElementType.default, _propTypes.default.func]),
      /**
       * Disable the scroll lock behavior.
       * @default false
       */
      disableScrollLock: _propTypes.default.bool,
      /**
       * The elevation of the popover.
       * @default 8
       */
      elevation: _integerPropType.default,
      /**
       * Specifies how close to the edge of the window the popover can appear.
       * If null, the popover will not be constrained by the window.
       * @default 16
       */
      marginThreshold: _propTypes.default.number,
      /**
       * Callback fired when the component requests to be closed.
       * The `reason` parameter can optionally be used to control the response to `onClose`.
       */
      onClose: _propTypes.default.func,
      /**
       * If `true`, the component is shown.
       */
      open: _propTypes.default.bool.isRequired,
      /**
       * Props applied to the [`Paper`](https://mui.com/material-ui/api/paper/) element.
       *
       * This prop is an alias for `slotProps.paper` and will be overriden by it if both are used.
       * @deprecated Use `slotProps.paper` instead.
       *
       * @default {}
       */
      PaperProps: _propTypes.default.shape({
        component: _elementTypeAcceptingRef.default
      }),
      /**
       * The props used for each slot inside.
       * @default {}
       */
      slotProps: _propTypes.default.shape({
        backdrop: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
        paper: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
        root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
        transition: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
      }),
      /**
       * The components used for each slot inside.
       * @default {}
       */
      slots: _propTypes.default.shape({
        backdrop: _propTypes.default.elementType,
        paper: _propTypes.default.elementType,
        root: _propTypes.default.elementType,
        transition: _propTypes.default.elementType
      }),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
      /**
       * This is the point on the popover which
       * will attach to the anchor's origin.
       *
       * Options:
       * vertical: [top, center, bottom, x(px)];
       * horizontal: [left, center, right, x(px)].
       * @default {
       *   vertical: 'top',
       *   horizontal: 'left',
       * }
       */
      transformOrigin: _propTypes.default.shape({
        horizontal: _propTypes.default.oneOfType([_propTypes.default.oneOf(["center", "left", "right"]), _propTypes.default.number]).isRequired,
        vertical: _propTypes.default.oneOfType([_propTypes.default.oneOf(["bottom", "center", "top"]), _propTypes.default.number]).isRequired
      }),
      /**
       * The component used for the transition.
       * [Follow this guide](https://mui.com/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
       * @deprecated use the `slots.transition` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       * @default Grow
       */
      TransitionComponent: _propTypes.default.elementType,
      /**
       * Set to 'auto' to automatically calculate transition time based on height.
       * @default 'auto'
       */
      transitionDuration: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.shape({
        appear: _propTypes.default.number,
        enter: _propTypes.default.number,
        exit: _propTypes.default.number
      })]),
      /**
       * Props applied to the transition element.
       * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
       * @deprecated use the `slotProps.transition` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       * @default {}
       */
      TransitionProps: _propTypes.default.object
    } : void 0;
    var _default = exports2.default = Popover;
  }
});

// node_modules/@mui/material/node/Popover/index.js
var require_Popover2 = __commonJS({
  "node_modules/@mui/material/node/Popover/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      popoverClasses: true
    };
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _Popover.default;
      }
    });
    Object.defineProperty(exports2, "popoverClasses", {
      enumerable: true,
      get: function() {
        return _popoverClasses.default;
      }
    });
    var _Popover = _interopRequireWildcard(require_Popover());
    Object.keys(_Popover).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _Popover[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _Popover[key];
        }
      });
    });
    var _popoverClasses = _interopRequireWildcard(require_popoverClasses());
    Object.keys(_popoverClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _popoverClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _popoverClasses[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node/Menu/menuClasses.js
var require_menuClasses = __commonJS({
  "node_modules/@mui/material/node/Menu/menuClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getMenuUtilityClass = getMenuUtilityClass;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    function getMenuUtilityClass(slot) {
      return (0, _generateUtilityClass.default)("MuiMenu", slot);
    }
    var menuClasses = (0, _generateUtilityClasses.default)("MuiMenu", ["root", "paper", "list"]);
    var _default = exports2.default = menuClasses;
  }
});

// node_modules/@mui/material/node/Menu/Menu.js
var require_Menu = __commonJS({
  "node_modules/@mui/material/node/Menu/Menu.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = exports2.MenuPaper = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _reactIs = require_react_is3();
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _clsx = _interopRequireDefault(require_clsx());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _HTMLElementType = _interopRequireDefault(require_HTMLElementType2());
    var _RtlProvider = require_RtlProvider();
    var _useSlotProps = _interopRequireDefault(require_useSlotProps2());
    var _MenuList = _interopRequireDefault(require_MenuList2());
    var _Popover = _interopRequireWildcard(require_Popover2());
    var _rootShouldForwardProp = _interopRequireDefault(require_rootShouldForwardProp());
    var _zeroStyled = require_zero_styled2();
    var _DefaultPropsProvider = require_DefaultPropsProvider4();
    var _menuClasses = require_menuClasses();
    var _useSlot = _interopRequireDefault(require_useSlot());
    var _jsxRuntime = require_jsx_runtime();
    var RTL_ORIGIN = {
      vertical: "top",
      horizontal: "right"
    };
    var LTR_ORIGIN = {
      vertical: "top",
      horizontal: "left"
    };
    var useUtilityClasses = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        paper: ["paper"],
        list: ["list"]
      };
      return (0, _composeClasses.default)(slots, _menuClasses.getMenuUtilityClass, classes);
    };
    var MenuRoot = (0, _zeroStyled.styled)(_Popover.default, {
      shouldForwardProp: (prop) => (0, _rootShouldForwardProp.default)(prop) || prop === "classes",
      name: "MuiMenu",
      slot: "Root",
      overridesResolver: (props, styles) => styles.root
    })({});
    var MenuPaper = exports2.MenuPaper = (0, _zeroStyled.styled)(_Popover.PopoverPaper, {
      name: "MuiMenu",
      slot: "Paper",
      overridesResolver: (props, styles) => styles.paper
    })({
      // specZ: The maximum height of a simple menu should be one or more rows less than the view
      // height. This ensures a tappable area outside of the simple menu with which to dismiss
      // the menu.
      maxHeight: "calc(100% - 96px)",
      // Add iOS momentum scrolling for iOS < 13.0
      WebkitOverflowScrolling: "touch"
    });
    var MenuMenuList = (0, _zeroStyled.styled)(_MenuList.default, {
      name: "MuiMenu",
      slot: "List",
      overridesResolver: (props, styles) => styles.list
    })({
      // We disable the focus ring for mouse, touch and keyboard users.
      outline: 0
    });
    var Menu = /* @__PURE__ */ React7.forwardRef(function Menu2(inProps, ref) {
      const props = (0, _DefaultPropsProvider.useDefaultProps)({
        props: inProps,
        name: "MuiMenu"
      });
      const {
        autoFocus = true,
        children,
        className,
        disableAutoFocusItem = false,
        MenuListProps = {},
        onClose,
        open,
        PaperProps = {},
        PopoverClasses,
        transitionDuration = "auto",
        TransitionProps: {
          onEntering,
          ...TransitionProps
        } = {},
        variant = "selectedMenu",
        slots = {},
        slotProps = {},
        ...other
      } = props;
      const isRtl = (0, _RtlProvider.useRtl)();
      const ownerState = {
        ...props,
        autoFocus,
        disableAutoFocusItem,
        MenuListProps,
        onEntering,
        PaperProps,
        transitionDuration,
        TransitionProps,
        variant
      };
      const classes = useUtilityClasses(ownerState);
      const autoFocusItem = autoFocus && !disableAutoFocusItem && open;
      const menuListActionsRef = React7.useRef(null);
      const handleEntering = (element, isAppearing) => {
        if (menuListActionsRef.current) {
          menuListActionsRef.current.adjustStyleForScrollbar(element, {
            direction: isRtl ? "rtl" : "ltr"
          });
        }
        if (onEntering) {
          onEntering(element, isAppearing);
        }
      };
      const handleListKeyDown = (event) => {
        if (event.key === "Tab") {
          event.preventDefault();
          if (onClose) {
            onClose(event, "tabKeyDown");
          }
        }
      };
      let activeItemIndex = -1;
      React7.Children.map(children, (child, index) => {
        if (!/* @__PURE__ */ React7.isValidElement(child)) {
          return;
        }
        if (define_process_env_default.NODE_ENV !== "production") {
          if ((0, _reactIs.isFragment)(child)) {
            console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
          }
        }
        if (!child.props.disabled) {
          if (variant === "selectedMenu" && child.props.selected) {
            activeItemIndex = index;
          } else if (activeItemIndex === -1) {
            activeItemIndex = index;
          }
        }
      });
      const externalForwardedProps = {
        slots,
        slotProps: {
          list: MenuListProps,
          transition: TransitionProps,
          paper: PaperProps,
          ...slotProps
        }
      };
      const rootSlotProps = (0, _useSlotProps.default)({
        elementType: slots.root,
        externalSlotProps: slotProps.root,
        ownerState,
        className: [classes.root, className]
      });
      const [PaperSlot, paperSlotProps] = (0, _useSlot.default)("paper", {
        className: classes.paper,
        elementType: MenuPaper,
        externalForwardedProps,
        shouldForwardComponentProp: true,
        ownerState
      });
      const [ListSlot, listSlotProps] = (0, _useSlot.default)("list", {
        className: (0, _clsx.default)(classes.list, MenuListProps.className),
        elementType: MenuMenuList,
        shouldForwardComponentProp: true,
        externalForwardedProps,
        getSlotProps: (handlers) => ({
          ...handlers,
          onKeyDown: (event) => {
            handleListKeyDown(event);
            handlers.onKeyDown?.(event);
          }
        }),
        ownerState
      });
      const resolvedTransitionProps = typeof externalForwardedProps.slotProps.transition === "function" ? externalForwardedProps.slotProps.transition(ownerState) : externalForwardedProps.slotProps.transition;
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(MenuRoot, {
        onClose,
        anchorOrigin: {
          vertical: "bottom",
          horizontal: isRtl ? "right" : "left"
        },
        transformOrigin: isRtl ? RTL_ORIGIN : LTR_ORIGIN,
        slots: {
          root: slots.root,
          paper: PaperSlot,
          backdrop: slots.backdrop,
          ...slots.transition && {
            // TODO: pass `slots.transition` directly once `TransitionComponent` is removed from Popover
            transition: slots.transition
          }
        },
        slotProps: {
          root: rootSlotProps,
          paper: paperSlotProps,
          backdrop: typeof slotProps.backdrop === "function" ? slotProps.backdrop(ownerState) : slotProps.backdrop,
          transition: {
            ...resolvedTransitionProps,
            onEntering: (...args) => {
              handleEntering(...args);
              resolvedTransitionProps?.onEntering?.(...args);
            }
          }
        },
        open,
        ref,
        transitionDuration,
        ownerState,
        ...other,
        classes: PopoverClasses,
        children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(ListSlot, {
          actions: menuListActionsRef,
          autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),
          autoFocusItem,
          variant,
          ...listSlotProps,
          children
        })
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? Menu.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * An HTML element, or a function that returns one.
       * It's used to set the position of the menu.
       */
      anchorEl: _propTypes.default.oneOfType([_HTMLElementType.default, _propTypes.default.func]),
      /**
       * If `true` (Default) will focus the `[role="menu"]` if no focusable child is found. Disabled
       * children are not focusable. If you set this prop to `false` focus will be placed
       * on the parent modal container. This has severe accessibility implications
       * and should only be considered if you manage focus otherwise.
       * @default true
       */
      autoFocus: _propTypes.default.bool,
      /**
       * Menu contents, normally `MenuItem`s.
       */
      children: _propTypes.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      /**
       * @ignore
       */
      className: _propTypes.default.string,
      /**
       * When opening the menu will not focus the active item but the `[role="menu"]`
       * unless `autoFocus` is also set to `false`. Not using the default means not
       * following WAI-ARIA authoring practices. Please be considerate about possible
       * accessibility implications.
       * @default false
       */
      disableAutoFocusItem: _propTypes.default.bool,
      /**
       * Props applied to the [`MenuList`](https://mui.com/material-ui/api/menu-list/) element.
       * @deprecated use the `slotProps.list` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       * @default {}
       */
      MenuListProps: _propTypes.default.object,
      /**
       * Callback fired when the component requests to be closed.
       *
       * @param {object} event The event source of the callback.
       * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`, `"tabKeyDown"`.
       */
      onClose: _propTypes.default.func,
      /**
       * If `true`, the component is shown.
       */
      open: _propTypes.default.bool.isRequired,
      /**
       * @ignore
       */
      PaperProps: _propTypes.default.object,
      /**
       * `classes` prop applied to the [`Popover`](https://mui.com/material-ui/api/popover/) element.
       */
      PopoverClasses: _propTypes.default.object,
      /**
       * The props used for each slot inside.
       * @default {}
       */
      slotProps: _propTypes.default.shape({
        backdrop: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
        list: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
        paper: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
        root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
        transition: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
      }),
      /**
       * The components used for each slot inside.
       * @default {}
       */
      slots: _propTypes.default.shape({
        backdrop: _propTypes.default.elementType,
        list: _propTypes.default.elementType,
        paper: _propTypes.default.elementType,
        root: _propTypes.default.elementType,
        transition: _propTypes.default.elementType
      }),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
      /**
       * The length of the transition in `ms`, or 'auto'
       * @default 'auto'
       */
      transitionDuration: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.shape({
        appear: _propTypes.default.number,
        enter: _propTypes.default.number,
        exit: _propTypes.default.number
      })]),
      /**
       * Props applied to the transition element.
       * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
       * @deprecated use the `slotProps.transition` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       * @default {}
       */
      TransitionProps: _propTypes.default.object,
      /**
       * The variant to use. Use `menu` to prevent selected items from impacting the initial focus.
       * @default 'selectedMenu'
       */
      variant: _propTypes.default.oneOf(["menu", "selectedMenu"])
    } : void 0;
    var _default = exports2.default = Menu;
  }
});

// node_modules/@mui/material/node/NativeSelect/nativeSelectClasses.js
var require_nativeSelectClasses = __commonJS({
  "node_modules/@mui/material/node/NativeSelect/nativeSelectClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getNativeSelectUtilityClasses = getNativeSelectUtilityClasses;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    function getNativeSelectUtilityClasses(slot) {
      return (0, _generateUtilityClass.default)("MuiNativeSelect", slot);
    }
    var nativeSelectClasses = (0, _generateUtilityClasses.default)("MuiNativeSelect", ["root", "select", "multiple", "filled", "outlined", "standard", "disabled", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput", "error"]);
    var _default = exports2.default = nativeSelectClasses;
  }
});

// node_modules/@mui/material/node/NativeSelect/NativeSelectInput.js
var require_NativeSelectInput = __commonJS({
  "node_modules/@mui/material/node/NativeSelect/NativeSelectInput.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = exports2.StyledSelectSelect = exports2.StyledSelectIcon = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _clsx = _interopRequireDefault(require_clsx());
    var _refType = _interopRequireDefault(require_refType2());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _capitalize = _interopRequireDefault(require_capitalize3());
    var _nativeSelectClasses = _interopRequireWildcard(require_nativeSelectClasses());
    var _zeroStyled = require_zero_styled2();
    var _rootShouldForwardProp = _interopRequireDefault(require_rootShouldForwardProp());
    var _jsxRuntime = require_jsx_runtime();
    var useUtilityClasses = (ownerState) => {
      const {
        classes,
        variant,
        disabled,
        multiple,
        open,
        error
      } = ownerState;
      const slots = {
        select: ["select", variant, disabled && "disabled", multiple && "multiple", error && "error"],
        icon: ["icon", `icon${(0, _capitalize.default)(variant)}`, open && "iconOpen", disabled && "disabled"]
      };
      return (0, _composeClasses.default)(slots, _nativeSelectClasses.getNativeSelectUtilityClasses, classes);
    };
    var StyledSelectSelect = exports2.StyledSelectSelect = (0, _zeroStyled.styled)("select")(({
      theme: theme2
    }) => ({
      // Reset
      MozAppearance: "none",
      // Reset
      WebkitAppearance: "none",
      // When interacting quickly, the text can end up selected.
      // Native select can't be selected either.
      userSelect: "none",
      // Reset
      borderRadius: 0,
      cursor: "pointer",
      "&:focus": {
        // Reset Chrome style
        borderRadius: 0
      },
      [`&.${_nativeSelectClasses.default.disabled}`]: {
        cursor: "default"
      },
      "&[multiple]": {
        height: "auto"
      },
      "&:not([multiple]) option, &:not([multiple]) optgroup": {
        backgroundColor: (theme2.vars || theme2).palette.background.paper
      },
      variants: [{
        props: ({
          ownerState
        }) => ownerState.variant !== "filled" && ownerState.variant !== "outlined",
        style: {
          // Bump specificity to allow extending custom inputs
          "&&&": {
            paddingRight: 24,
            minWidth: 16
            // So it doesn't collapse.
          }
        }
      }, {
        props: {
          variant: "filled"
        },
        style: {
          "&&&": {
            paddingRight: 32
          }
        }
      }, {
        props: {
          variant: "outlined"
        },
        style: {
          borderRadius: (theme2.vars || theme2).shape.borderRadius,
          "&:focus": {
            borderRadius: (theme2.vars || theme2).shape.borderRadius
            // Reset the reset for Chrome style
          },
          "&&&": {
            paddingRight: 32
          }
        }
      }]
    }));
    var NativeSelectSelect = (0, _zeroStyled.styled)(StyledSelectSelect, {
      name: "MuiNativeSelect",
      slot: "Select",
      shouldForwardProp: _rootShouldForwardProp.default,
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.select, styles[ownerState.variant], ownerState.error && styles.error, {
          [`&.${_nativeSelectClasses.default.multiple}`]: styles.multiple
        }];
      }
    })({});
    var StyledSelectIcon = exports2.StyledSelectIcon = (0, _zeroStyled.styled)("svg")(({
      theme: theme2
    }) => ({
      // We use a position absolute over a flexbox in order to forward the pointer events
      // to the input and to support wrapping tags..
      position: "absolute",
      right: 0,
      // Center vertically, height is 1em
      top: "calc(50% - .5em)",
      // Don't block pointer events on the select under the icon.
      pointerEvents: "none",
      color: (theme2.vars || theme2).palette.action.active,
      [`&.${_nativeSelectClasses.default.disabled}`]: {
        color: (theme2.vars || theme2).palette.action.disabled
      },
      variants: [{
        props: ({
          ownerState
        }) => ownerState.open,
        style: {
          transform: "rotate(180deg)"
        }
      }, {
        props: {
          variant: "filled"
        },
        style: {
          right: 7
        }
      }, {
        props: {
          variant: "outlined"
        },
        style: {
          right: 7
        }
      }]
    }));
    var NativeSelectIcon = (0, _zeroStyled.styled)(StyledSelectIcon, {
      name: "MuiNativeSelect",
      slot: "Icon",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.icon, ownerState.variant && styles[`icon${(0, _capitalize.default)(ownerState.variant)}`], ownerState.open && styles.iconOpen];
      }
    })({});
    var NativeSelectInput = /* @__PURE__ */ React7.forwardRef(function NativeSelectInput2(props, ref) {
      const {
        className,
        disabled,
        error,
        IconComponent,
        inputRef,
        variant = "standard",
        ...other
      } = props;
      const ownerState = {
        ...props,
        disabled,
        variant,
        error
      };
      const classes = useUtilityClasses(ownerState);
      return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(React7.Fragment, {
        children: [/* @__PURE__ */ (0, _jsxRuntime.jsx)(NativeSelectSelect, {
          ownerState,
          className: (0, _clsx.default)(classes.select, className),
          disabled,
          ref: inputRef || ref,
          ...other
        }), props.multiple ? null : /* @__PURE__ */ (0, _jsxRuntime.jsx)(NativeSelectIcon, {
          as: IconComponent,
          ownerState,
          className: classes.icon
        })]
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? NativeSelectInput.propTypes = {
      /**
       * The option elements to populate the select with.
       * Can be some `<option>` elements.
       */
      children: _propTypes.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      /**
       * The CSS class name of the select element.
       */
      className: _propTypes.default.string,
      /**
       * If `true`, the select is disabled.
       */
      disabled: _propTypes.default.bool,
      /**
       * If `true`, the `select input` will indicate an error.
       */
      error: _propTypes.default.bool,
      /**
       * The icon that displays the arrow.
       */
      IconComponent: _propTypes.default.elementType.isRequired,
      /**
       * Use that prop to pass a ref to the native select element.
       * @deprecated
       */
      inputRef: _refType.default,
      /**
       * @ignore
       */
      multiple: _propTypes.default.bool,
      /**
       * Name attribute of the `select` or hidden `input` element.
       */
      name: _propTypes.default.string,
      /**
       * Callback fired when a menu item is selected.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (string).
       */
      onChange: _propTypes.default.func,
      /**
       * The input value.
       */
      value: _propTypes.default.any,
      /**
       * The variant to use.
       */
      variant: _propTypes.default.oneOf(["standard", "outlined", "filled"])
    } : void 0;
    var _default = exports2.default = NativeSelectInput;
  }
});

// node_modules/@mui/material/node/Select/selectClasses.js
var require_selectClasses = __commonJS({
  "node_modules/@mui/material/node/Select/selectClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getSelectUtilityClasses = getSelectUtilityClasses;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    function getSelectUtilityClasses(slot) {
      return (0, _generateUtilityClass.default)("MuiSelect", slot);
    }
    var selectClasses = (0, _generateUtilityClasses.default)("MuiSelect", ["root", "select", "multiple", "filled", "outlined", "standard", "disabled", "focused", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput", "error"]);
    var _default = exports2.default = selectClasses;
  }
});

// node_modules/@mui/material/node/Select/SelectInput.js
var require_SelectInput = __commonJS({
  "node_modules/@mui/material/node/Select/SelectInput.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _formatMuiErrorMessage2 = _interopRequireDefault(require_formatMuiErrorMessage2());
    var React7 = _interopRequireWildcard(require_react());
    var _reactIs = require_react_is3();
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _clsx = _interopRequireDefault(require_clsx());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _useId = _interopRequireDefault(require_useId2());
    var _refType = _interopRequireDefault(require_refType2());
    var _ownerDocument = _interopRequireDefault(require_ownerDocument3());
    var _capitalize = _interopRequireDefault(require_capitalize3());
    var _Menu = _interopRequireDefault(require_Menu());
    var _NativeSelectInput = require_NativeSelectInput();
    var _utils = require_utils6();
    var _zeroStyled = require_zero_styled2();
    var _slotShouldForwardProp = _interopRequireDefault(require_slotShouldForwardProp());
    var _useForkRef = _interopRequireDefault(require_useForkRef3());
    var _useControlled = _interopRequireDefault(require_useControlled3());
    var _selectClasses = _interopRequireWildcard(require_selectClasses());
    var _jsxRuntime = require_jsx_runtime();
    var _span;
    var SelectSelect = (0, _zeroStyled.styled)(_NativeSelectInput.StyledSelectSelect, {
      name: "MuiSelect",
      slot: "Select",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [
          // Win specificity over the input base
          {
            [`&.${_selectClasses.default.select}`]: styles.select
          },
          {
            [`&.${_selectClasses.default.select}`]: styles[ownerState.variant]
          },
          {
            [`&.${_selectClasses.default.error}`]: styles.error
          },
          {
            [`&.${_selectClasses.default.multiple}`]: styles.multiple
          }
        ];
      }
    })({
      // Win specificity over the input base
      [`&.${_selectClasses.default.select}`]: {
        height: "auto",
        // Resets for multiple select with chips
        minHeight: "1.4375em",
        // Required for select\text-field height consistency
        textOverflow: "ellipsis",
        whiteSpace: "nowrap",
        overflow: "hidden"
      }
    });
    var SelectIcon = (0, _zeroStyled.styled)(_NativeSelectInput.StyledSelectIcon, {
      name: "MuiSelect",
      slot: "Icon",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.icon, ownerState.variant && styles[`icon${(0, _capitalize.default)(ownerState.variant)}`], ownerState.open && styles.iconOpen];
      }
    })({});
    var SelectNativeInput = (0, _zeroStyled.styled)("input", {
      shouldForwardProp: (prop) => (0, _slotShouldForwardProp.default)(prop) && prop !== "classes",
      name: "MuiSelect",
      slot: "NativeInput",
      overridesResolver: (props, styles) => styles.nativeInput
    })({
      bottom: 0,
      left: 0,
      position: "absolute",
      opacity: 0,
      pointerEvents: "none",
      width: "100%",
      boxSizing: "border-box"
    });
    function areEqualValues(a, b) {
      if (typeof b === "object" && b !== null) {
        return a === b;
      }
      return String(a) === String(b);
    }
    function isEmpty(display) {
      return display == null || typeof display === "string" && !display.trim();
    }
    var useUtilityClasses = (ownerState) => {
      const {
        classes,
        variant,
        disabled,
        multiple,
        open,
        error
      } = ownerState;
      const slots = {
        select: ["select", variant, disabled && "disabled", multiple && "multiple", error && "error"],
        icon: ["icon", `icon${(0, _capitalize.default)(variant)}`, open && "iconOpen", disabled && "disabled"],
        nativeInput: ["nativeInput"]
      };
      return (0, _composeClasses.default)(slots, _selectClasses.getSelectUtilityClasses, classes);
    };
    var SelectInput = /* @__PURE__ */ React7.forwardRef(function SelectInput2(props, ref) {
      const {
        "aria-describedby": ariaDescribedby,
        "aria-label": ariaLabel,
        autoFocus,
        autoWidth,
        children,
        className,
        defaultOpen,
        defaultValue,
        disabled,
        displayEmpty,
        error = false,
        IconComponent,
        inputRef: inputRefProp,
        labelId,
        MenuProps = {},
        multiple,
        name,
        onBlur,
        onChange,
        onClose,
        onFocus,
        onOpen,
        open: openProp,
        readOnly,
        renderValue,
        required,
        SelectDisplayProps = {},
        tabIndex: tabIndexProp,
        // catching `type` from Input which makes no sense for SelectInput
        type,
        value: valueProp,
        variant = "standard",
        ...other
      } = props;
      const [value, setValueState] = (0, _useControlled.default)({
        controlled: valueProp,
        default: defaultValue,
        name: "Select"
      });
      const [openState, setOpenState] = (0, _useControlled.default)({
        controlled: openProp,
        default: defaultOpen,
        name: "Select"
      });
      const inputRef = React7.useRef(null);
      const displayRef = React7.useRef(null);
      const [displayNode, setDisplayNode] = React7.useState(null);
      const {
        current: isOpenControlled
      } = React7.useRef(openProp != null);
      const [menuMinWidthState, setMenuMinWidthState] = React7.useState();
      const handleRef = (0, _useForkRef.default)(ref, inputRefProp);
      const handleDisplayRef = React7.useCallback((node2) => {
        displayRef.current = node2;
        if (node2) {
          setDisplayNode(node2);
        }
      }, []);
      const anchorElement = displayNode?.parentNode;
      React7.useImperativeHandle(handleRef, () => ({
        focus: () => {
          displayRef.current.focus();
        },
        node: inputRef.current,
        value
      }), [value]);
      React7.useEffect(() => {
        if (defaultOpen && openState && displayNode && !isOpenControlled) {
          setMenuMinWidthState(autoWidth ? null : anchorElement.clientWidth);
          displayRef.current.focus();
        }
      }, [displayNode, autoWidth]);
      React7.useEffect(() => {
        if (autoFocus) {
          displayRef.current.focus();
        }
      }, [autoFocus]);
      React7.useEffect(() => {
        if (!labelId) {
          return void 0;
        }
        const label = (0, _ownerDocument.default)(displayRef.current).getElementById(labelId);
        if (label) {
          const handler = () => {
            if (getSelection().isCollapsed) {
              displayRef.current.focus();
            }
          };
          label.addEventListener("click", handler);
          return () => {
            label.removeEventListener("click", handler);
          };
        }
        return void 0;
      }, [labelId]);
      const update = (open2, event) => {
        if (open2) {
          if (onOpen) {
            onOpen(event);
          }
        } else if (onClose) {
          onClose(event);
        }
        if (!isOpenControlled) {
          setMenuMinWidthState(autoWidth ? null : anchorElement.clientWidth);
          setOpenState(open2);
        }
      };
      const handleMouseDown = (event) => {
        if (event.button !== 0) {
          return;
        }
        event.preventDefault();
        displayRef.current.focus();
        update(true, event);
      };
      const handleClose = (event) => {
        update(false, event);
      };
      const childrenArray = React7.Children.toArray(children);
      const handleChange = (event) => {
        const child = childrenArray.find((childItem) => childItem.props.value === event.target.value);
        if (child === void 0) {
          return;
        }
        setValueState(child.props.value);
        if (onChange) {
          onChange(event, child);
        }
      };
      const handleItemClick = (child) => (event) => {
        let newValue;
        if (!event.currentTarget.hasAttribute("tabindex")) {
          return;
        }
        if (multiple) {
          newValue = Array.isArray(value) ? value.slice() : [];
          const itemIndex = value.indexOf(child.props.value);
          if (itemIndex === -1) {
            newValue.push(child.props.value);
          } else {
            newValue.splice(itemIndex, 1);
          }
        } else {
          newValue = child.props.value;
        }
        if (child.props.onClick) {
          child.props.onClick(event);
        }
        if (value !== newValue) {
          setValueState(newValue);
          if (onChange) {
            const nativeEvent = event.nativeEvent || event;
            const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
            Object.defineProperty(clonedEvent, "target", {
              writable: true,
              value: {
                value: newValue,
                name
              }
            });
            onChange(clonedEvent, child);
          }
        }
        if (!multiple) {
          update(false, event);
        }
      };
      const handleKeyDown = (event) => {
        if (!readOnly) {
          const validKeys = [
            " ",
            "ArrowUp",
            "ArrowDown",
            // The native select doesn't respond to enter on macOS, but it's recommended by
            // https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-select-only/
            "Enter"
          ];
          if (validKeys.includes(event.key)) {
            event.preventDefault();
            update(true, event);
          }
        }
      };
      const open = displayNode !== null && openState;
      const handleBlur = (event) => {
        if (!open && onBlur) {
          Object.defineProperty(event, "target", {
            writable: true,
            value: {
              value,
              name
            }
          });
          onBlur(event);
        }
      };
      delete other["aria-invalid"];
      let display;
      let displaySingle;
      const displayMultiple = [];
      let computeDisplay = false;
      let foundMatch = false;
      if ((0, _utils.isFilled)({
        value
      }) || displayEmpty) {
        if (renderValue) {
          display = renderValue(value);
        } else {
          computeDisplay = true;
        }
      }
      const items = childrenArray.map((child) => {
        if (!/* @__PURE__ */ React7.isValidElement(child)) {
          return null;
        }
        if (define_process_env_default.NODE_ENV !== "production") {
          if ((0, _reactIs.isFragment)(child)) {
            console.error(["MUI: The Select component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
          }
        }
        let selected;
        if (multiple) {
          if (!Array.isArray(value)) {
            throw new Error(define_process_env_default.NODE_ENV !== "production" ? "MUI: The `value` prop must be an array when using the `Select` component with `multiple`." : (0, _formatMuiErrorMessage2.default)(2));
          }
          selected = value.some((v) => areEqualValues(v, child.props.value));
          if (selected && computeDisplay) {
            displayMultiple.push(child.props.children);
          }
        } else {
          selected = areEqualValues(value, child.props.value);
          if (selected && computeDisplay) {
            displaySingle = child.props.children;
          }
        }
        if (selected) {
          foundMatch = true;
        }
        return /* @__PURE__ */ React7.cloneElement(child, {
          "aria-selected": selected ? "true" : "false",
          onClick: handleItemClick(child),
          onKeyUp: (event) => {
            if (event.key === " ") {
              event.preventDefault();
            }
            if (child.props.onKeyUp) {
              child.props.onKeyUp(event);
            }
          },
          role: "option",
          selected,
          value: void 0,
          // The value is most likely not a valid HTML attribute.
          "data-value": child.props.value
          // Instead, we provide it as a data attribute.
        });
      });
      if (define_process_env_default.NODE_ENV !== "production") {
        React7.useEffect(() => {
          if (!foundMatch && !multiple && value !== "") {
            const values = childrenArray.map((child) => child.props.value);
            console.warn([`MUI: You have provided an out-of-range value \`${value}\` for the select ${name ? `(name="${name}") ` : ""}component.`, "Consider providing a value that matches one of the available options or ''.", `The available values are ${values.filter((x) => x != null).map((x) => `\`${x}\``).join(", ") || '""'}.`].join("\n"));
          }
        }, [foundMatch, childrenArray, multiple, name, value]);
      }
      if (computeDisplay) {
        if (multiple) {
          if (displayMultiple.length === 0) {
            display = null;
          } else {
            display = displayMultiple.reduce((output, child, index) => {
              output.push(child);
              if (index < displayMultiple.length - 1) {
                output.push(", ");
              }
              return output;
            }, []);
          }
        } else {
          display = displaySingle;
        }
      }
      let menuMinWidth = menuMinWidthState;
      if (!autoWidth && isOpenControlled && displayNode) {
        menuMinWidth = anchorElement.clientWidth;
      }
      let tabIndex;
      if (typeof tabIndexProp !== "undefined") {
        tabIndex = tabIndexProp;
      } else {
        tabIndex = disabled ? null : 0;
      }
      const buttonId = SelectDisplayProps.id || (name ? `mui-component-select-${name}` : void 0);
      const ownerState = {
        ...props,
        variant,
        value,
        open,
        error
      };
      const classes = useUtilityClasses(ownerState);
      const paperProps = {
        ...MenuProps.PaperProps,
        ...MenuProps.slotProps?.paper
      };
      const listboxId = (0, _useId.default)();
      return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(React7.Fragment, {
        children: [/* @__PURE__ */ (0, _jsxRuntime.jsx)(SelectSelect, {
          as: "div",
          ref: handleDisplayRef,
          tabIndex,
          role: "combobox",
          "aria-controls": open ? listboxId : void 0,
          "aria-disabled": disabled ? "true" : void 0,
          "aria-expanded": open ? "true" : "false",
          "aria-haspopup": "listbox",
          "aria-label": ariaLabel,
          "aria-labelledby": [labelId, buttonId].filter(Boolean).join(" ") || void 0,
          "aria-describedby": ariaDescribedby,
          "aria-required": required ? "true" : void 0,
          "aria-invalid": error ? "true" : void 0,
          onKeyDown: handleKeyDown,
          onMouseDown: disabled || readOnly ? null : handleMouseDown,
          onBlur: handleBlur,
          onFocus,
          ...SelectDisplayProps,
          ownerState,
          className: (0, _clsx.default)(SelectDisplayProps.className, classes.select, className),
          id: buttonId,
          children: isEmpty(display) ? (
            // notranslate needed while Google Translate will not fix zero-width space issue
            _span || (_span = /* @__PURE__ */ (0, _jsxRuntime.jsx)("span", {
              className: "notranslate",
              "aria-hidden": true,
              children: "\u200B"
            }))
          ) : display
        }), /* @__PURE__ */ (0, _jsxRuntime.jsx)(SelectNativeInput, {
          "aria-invalid": error,
          value: Array.isArray(value) ? value.join(",") : value,
          name,
          ref: inputRef,
          "aria-hidden": true,
          onChange: handleChange,
          tabIndex: -1,
          disabled,
          className: classes.nativeInput,
          autoFocus,
          required,
          ...other,
          ownerState
        }), /* @__PURE__ */ (0, _jsxRuntime.jsx)(SelectIcon, {
          as: IconComponent,
          className: classes.icon,
          ownerState
        }), /* @__PURE__ */ (0, _jsxRuntime.jsx)(_Menu.default, {
          id: `menu-${name || ""}`,
          anchorEl: anchorElement,
          open,
          onClose: handleClose,
          anchorOrigin: {
            vertical: "bottom",
            horizontal: "center"
          },
          transformOrigin: {
            vertical: "top",
            horizontal: "center"
          },
          ...MenuProps,
          slotProps: {
            ...MenuProps.slotProps,
            list: {
              "aria-labelledby": labelId,
              role: "listbox",
              "aria-multiselectable": multiple ? "true" : void 0,
              disableListWrap: true,
              id: listboxId,
              ...MenuProps.MenuListProps
            },
            paper: {
              ...paperProps,
              style: {
                minWidth: menuMinWidth,
                ...paperProps != null ? paperProps.style : null
              }
            }
          },
          children: items
        })]
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? SelectInput.propTypes = {
      /**
       * @ignore
       */
      "aria-describedby": _propTypes.default.string,
      /**
       * @ignore
       */
      "aria-label": _propTypes.default.string,
      /**
       * @ignore
       */
      autoFocus: _propTypes.default.bool,
      /**
       * If `true`, the width of the popover will automatically be set according to the items inside the
       * menu, otherwise it will be at least the width of the select input.
       */
      autoWidth: _propTypes.default.bool,
      /**
       * The option elements to populate the select with.
       * Can be some `<MenuItem>` elements.
       */
      children: _propTypes.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      /**
       * The CSS class name of the select element.
       */
      className: _propTypes.default.string,
      /**
       * If `true`, the component is toggled on mount. Use when the component open state is not controlled.
       * You can only use it when the `native` prop is `false` (default).
       */
      defaultOpen: _propTypes.default.bool,
      /**
       * The default value. Use when the component is not controlled.
       */
      defaultValue: _propTypes.default.any,
      /**
       * If `true`, the select is disabled.
       */
      disabled: _propTypes.default.bool,
      /**
       * If `true`, the selected item is displayed even if its value is empty.
       */
      displayEmpty: _propTypes.default.bool,
      /**
       * If `true`, the `select input` will indicate an error.
       */
      error: _propTypes.default.bool,
      /**
       * The icon that displays the arrow.
       */
      IconComponent: _propTypes.default.elementType.isRequired,
      /**
       * Imperative handle implementing `{ value: T, node: HTMLElement, focus(): void }`
       * Equivalent to `ref`
       */
      inputRef: _refType.default,
      /**
       * The ID of an element that acts as an additional label. The Select will
       * be labelled by the additional label and the selected value.
       */
      labelId: _propTypes.default.string,
      /**
       * Props applied to the [`Menu`](/material-ui/api/menu/) element.
       */
      MenuProps: _propTypes.default.object,
      /**
       * If `true`, `value` must be an array and the menu will support multiple selections.
       */
      multiple: _propTypes.default.bool,
      /**
       * Name attribute of the `select` or hidden `input` element.
       */
      name: _propTypes.default.string,
      /**
       * @ignore
       */
      onBlur: _propTypes.default.func,
      /**
       * Callback fired when a menu item is selected.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (any).
       * @param {object} [child] The react element that was selected.
       */
      onChange: _propTypes.default.func,
      /**
       * Callback fired when the component requests to be closed.
       * Use in controlled mode (see open).
       *
       * @param {object} event The event source of the callback.
       */
      onClose: _propTypes.default.func,
      /**
       * @ignore
       */
      onFocus: _propTypes.default.func,
      /**
       * Callback fired when the component requests to be opened.
       * Use in controlled mode (see open).
       *
       * @param {object} event The event source of the callback.
       */
      onOpen: _propTypes.default.func,
      /**
       * If `true`, the component is shown.
       */
      open: _propTypes.default.bool,
      /**
       * @ignore
       */
      readOnly: _propTypes.default.bool,
      /**
       * Render the selected value.
       *
       * @param {any} value The `value` provided to the component.
       * @returns {ReactNode}
       */
      renderValue: _propTypes.default.func,
      /**
       * If `true`, the component is required.
       */
      required: _propTypes.default.bool,
      /**
       * Props applied to the clickable div element.
       */
      SelectDisplayProps: _propTypes.default.object,
      /**
       * @ignore
       */
      tabIndex: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      /**
       * @ignore
       */
      type: _propTypes.default.any,
      /**
       * The input value.
       */
      value: _propTypes.default.any,
      /**
       * The variant to use.
       */
      variant: _propTypes.default.oneOf(["standard", "outlined", "filled"])
    } : void 0;
    var _default = exports2.default = SelectInput;
  }
});

// node_modules/@mui/material/node/Select/Select.js
var require_Select = __commonJS({
  "node_modules/@mui/material/node/Select/Select.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _clsx = _interopRequireDefault(require_clsx());
    var _deepmerge = _interopRequireDefault(require_deepmerge2());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _getReactElementRef = _interopRequireDefault(require_getReactElementRef2());
    var _SelectInput = _interopRequireDefault(require_SelectInput());
    var _formControlState = _interopRequireDefault(require_formControlState());
    var _useFormControl = _interopRequireDefault(require_useFormControl());
    var _ArrowDropDown = _interopRequireDefault(require_ArrowDropDown());
    var _Input = _interopRequireDefault(require_Input2());
    var _NativeSelectInput = _interopRequireDefault(require_NativeSelectInput());
    var _FilledInput = _interopRequireDefault(require_FilledInput2());
    var _OutlinedInput = _interopRequireDefault(require_OutlinedInput2());
    var _DefaultPropsProvider = require_DefaultPropsProvider4();
    var _useForkRef = _interopRequireDefault(require_useForkRef3());
    var _zeroStyled = require_zero_styled2();
    var _rootShouldForwardProp = _interopRequireDefault(require_rootShouldForwardProp());
    var _selectClasses = require_selectClasses();
    var _jsxRuntime = require_jsx_runtime();
    var useUtilityClasses = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"]
      };
      const composedClasses = (0, _composeClasses.default)(slots, _selectClasses.getSelectUtilityClasses, classes);
      return {
        ...classes,
        ...composedClasses
      };
    };
    var styledRootConfig = {
      name: "MuiSelect",
      overridesResolver: (props, styles) => styles.root,
      shouldForwardProp: (prop) => (0, _rootShouldForwardProp.default)(prop) && prop !== "variant",
      slot: "Root"
    };
    var StyledInput = (0, _zeroStyled.styled)(_Input.default, styledRootConfig)("");
    var StyledOutlinedInput = (0, _zeroStyled.styled)(_OutlinedInput.default, styledRootConfig)("");
    var StyledFilledInput = (0, _zeroStyled.styled)(_FilledInput.default, styledRootConfig)("");
    var Select = /* @__PURE__ */ React7.forwardRef(function Select2(inProps, ref) {
      const props = (0, _DefaultPropsProvider.useDefaultProps)({
        name: "MuiSelect",
        props: inProps
      });
      const {
        autoWidth = false,
        children,
        classes: classesProp = {},
        className,
        defaultOpen = false,
        displayEmpty = false,
        IconComponent = _ArrowDropDown.default,
        id,
        input,
        inputProps,
        label,
        labelId,
        MenuProps,
        multiple = false,
        native = false,
        onClose,
        onOpen,
        open,
        renderValue,
        SelectDisplayProps,
        variant: variantProp = "outlined",
        ...other
      } = props;
      const inputComponent = native ? _NativeSelectInput.default : _SelectInput.default;
      const muiFormControl = (0, _useFormControl.default)();
      const fcs = (0, _formControlState.default)({
        props,
        muiFormControl,
        states: ["variant", "error"]
      });
      const variant = fcs.variant || variantProp;
      const ownerState = {
        ...props,
        variant,
        classes: classesProp
      };
      const classes = useUtilityClasses(ownerState);
      const {
        root,
        ...restOfClasses
      } = classes;
      const InputComponent = input || {
        standard: /* @__PURE__ */ (0, _jsxRuntime.jsx)(StyledInput, {
          ownerState
        }),
        outlined: /* @__PURE__ */ (0, _jsxRuntime.jsx)(StyledOutlinedInput, {
          label,
          ownerState
        }),
        filled: /* @__PURE__ */ (0, _jsxRuntime.jsx)(StyledFilledInput, {
          ownerState
        })
      }[variant];
      const inputComponentRef = (0, _useForkRef.default)(ref, (0, _getReactElementRef.default)(InputComponent));
      return /* @__PURE__ */ (0, _jsxRuntime.jsx)(React7.Fragment, {
        children: /* @__PURE__ */ React7.cloneElement(InputComponent, {
          // Most of the logic is implemented in `SelectInput`.
          // The `Select` component is a simple API wrapper to expose something better to play with.
          inputComponent,
          inputProps: {
            children,
            error: fcs.error,
            IconComponent,
            variant,
            type: void 0,
            // We render a select. We can ignore the type provided by the `Input`.
            multiple,
            ...native ? {
              id
            } : {
              autoWidth,
              defaultOpen,
              displayEmpty,
              labelId,
              MenuProps,
              onClose,
              onOpen,
              open,
              renderValue,
              SelectDisplayProps: {
                id,
                ...SelectDisplayProps
              }
            },
            ...inputProps,
            classes: inputProps ? (0, _deepmerge.default)(restOfClasses, inputProps.classes) : restOfClasses,
            ...input ? input.props.inputProps : {}
          },
          ...(multiple && native || displayEmpty) && variant === "outlined" ? {
            notched: true
          } : {},
          ref: inputComponentRef,
          className: (0, _clsx.default)(InputComponent.props.className, className, classes.root),
          // If a custom input is provided via 'input' prop, do not allow 'variant' to be propagated to it's root element. See https://github.com/mui/material-ui/issues/33894.
          ...!input && {
            variant
          },
          ...other
        })
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? Select.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * If `true`, the width of the popover will automatically be set according to the items inside the
       * menu, otherwise it will be at least the width of the select input.
       * @default false
       */
      autoWidth: _propTypes.default.bool,
      /**
       * The option elements to populate the select with.
       * Can be some `MenuItem` when `native` is false and `option` when `native` is true.
       *
       * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.
       */
      children: _propTypes.default.node,
      /**
       * Override or extend the styles applied to the component.
       * @default {}
       */
      classes: _propTypes.default.object,
      /**
       * @ignore
       */
      className: _propTypes.default.string,
      /**
       * If `true`, the component is initially open. Use when the component open state is not controlled (i.e. the `open` prop is not defined).
       * You can only use it when the `native` prop is `false` (default).
       * @default false
       */
      defaultOpen: _propTypes.default.bool,
      /**
       * The default value. Use when the component is not controlled.
       */
      defaultValue: _propTypes.default.any,
      /**
       * If `true`, a value is displayed even if no items are selected.
       *
       * In order to display a meaningful value, a function can be passed to the `renderValue` prop which
       * returns the value to be displayed when no items are selected.
       *
       * ⚠️ When using this prop, make sure the label doesn't overlap with the empty displayed value.
       * The label should either be hidden or forced to a shrunk state.
       * @default false
       */
      displayEmpty: _propTypes.default.bool,
      /**
       * The icon that displays the arrow.
       * @default ArrowDropDownIcon
       */
      IconComponent: _propTypes.default.elementType,
      /**
       * The `id` of the wrapper element or the `select` element when `native`.
       */
      id: _propTypes.default.string,
      /**
       * An `Input` element; does not have to be a material-ui specific `Input`.
       */
      input: _propTypes.default.element,
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       * When `native` is `true`, the attributes are applied on the `select` element.
       */
      inputProps: _propTypes.default.object,
      /**
       * See [OutlinedInput#label](https://mui.com/material-ui/api/outlined-input/#props)
       */
      label: _propTypes.default.node,
      /**
       * The ID of an element that acts as an additional label. The Select will
       * be labelled by the additional label and the selected value.
       */
      labelId: _propTypes.default.string,
      /**
       * Props applied to the [`Menu`](https://mui.com/material-ui/api/menu/) element.
       */
      MenuProps: _propTypes.default.object,
      /**
       * If `true`, `value` must be an array and the menu will support multiple selections.
       * @default false
       */
      multiple: _propTypes.default.bool,
      /**
       * If `true`, the component uses a native `select` element.
       * @default false
       */
      native: _propTypes.default.bool,
      /**
       * Callback fired when a menu item is selected.
       *
       * @param {SelectChangeEvent<Value>} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (any).
       * **Warning**: This is a generic event, not a change event, unless the change event is caused by browser autofill.
       * @param {object} [child] The react element that was selected when `native` is `false` (default).
       */
      onChange: _propTypes.default.func,
      /**
       * Callback fired when the component requests to be closed.
       * Use it in either controlled (see the `open` prop), or uncontrolled mode (to detect when the Select collapses).
       *
       * @param {object} event The event source of the callback.
       */
      onClose: _propTypes.default.func,
      /**
       * Callback fired when the component requests to be opened.
       * Use it in either controlled (see the `open` prop), or uncontrolled mode (to detect when the Select expands).
       *
       * @param {object} event The event source of the callback.
       */
      onOpen: _propTypes.default.func,
      /**
       * If `true`, the component is shown.
       * You can only use it when the `native` prop is `false` (default).
       */
      open: _propTypes.default.bool,
      /**
       * Render the selected value.
       * You can only use it when the `native` prop is `false` (default).
       *
       * @param {any} value The `value` provided to the component.
       * @returns {ReactNode}
       */
      renderValue: _propTypes.default.func,
      /**
       * Props applied to the clickable div element.
       */
      SelectDisplayProps: _propTypes.default.object,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
      /**
       * The `input` value. Providing an empty string will select no options.
       * Set to an empty string `''` if you don't want any of the available options to be selected.
       *
       * If the value is an object it must have reference equality with the option in order to be selected.
       * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.
       */
      value: _propTypes.default.oneOfType([_propTypes.default.oneOf([""]), _propTypes.default.any]),
      /**
       * The variant to use.
       * @default 'outlined'
       */
      variant: _propTypes.default.oneOf(["filled", "outlined", "standard"])
    } : void 0;
    Select.muiName = "Select";
    var _default = exports2.default = Select;
  }
});

// node_modules/@mui/material/node/Select/index.js
var require_Select2 = __commonJS({
  "node_modules/@mui/material/node/Select/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      selectClasses: true
    };
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _Select.default;
      }
    });
    Object.defineProperty(exports2, "selectClasses", {
      enumerable: true,
      get: function() {
        return _selectClasses.default;
      }
    });
    var _Select = _interopRequireDefault(require_Select());
    var _selectClasses = _interopRequireWildcard(require_selectClasses());
    Object.keys(_selectClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _selectClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _selectClasses[key];
        }
      });
    });
  }
});

// node_modules/@mui/material/node/TextField/textFieldClasses.js
var require_textFieldClasses = __commonJS({
  "node_modules/@mui/material/node/TextField/textFieldClasses.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.getTextFieldUtilityClass = getTextFieldUtilityClass;
    var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
    var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
    function getTextFieldUtilityClass(slot) {
      return (0, _generateUtilityClass.default)("MuiTextField", slot);
    }
    var textFieldClasses = (0, _generateUtilityClasses.default)("MuiTextField", ["root"]);
    var _default = exports2.default = textFieldClasses;
  }
});

// node_modules/@mui/material/node/TextField/TextField.js
var require_TextField = __commonJS({
  "node_modules/@mui/material/node/TextField/TextField.js"(exports2) {
    "use strict";
    "use client";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault().default;
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var React7 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _clsx = _interopRequireDefault(require_clsx());
    var _composeClasses = _interopRequireDefault(require_composeClasses2());
    var _useId = _interopRequireDefault(require_useId2());
    var _refType = _interopRequireDefault(require_refType2());
    var _zeroStyled = require_zero_styled2();
    var _DefaultPropsProvider = require_DefaultPropsProvider4();
    var _Input = _interopRequireDefault(require_Input2());
    var _FilledInput = _interopRequireDefault(require_FilledInput2());
    var _OutlinedInput = _interopRequireDefault(require_OutlinedInput2());
    var _InputLabel = _interopRequireDefault(require_InputLabel2());
    var _FormControl = _interopRequireDefault(require_FormControl2());
    var _FormHelperText = _interopRequireDefault(require_FormHelperText2());
    var _Select = _interopRequireDefault(require_Select2());
    var _textFieldClasses = require_textFieldClasses();
    var _useSlot = _interopRequireDefault(require_useSlot());
    var _jsxRuntime = require_jsx_runtime();
    var variantComponent = {
      standard: _Input.default,
      filled: _FilledInput.default,
      outlined: _OutlinedInput.default
    };
    var useUtilityClasses = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"]
      };
      return (0, _composeClasses.default)(slots, _textFieldClasses.getTextFieldUtilityClass, classes);
    };
    var TextFieldRoot = (0, _zeroStyled.styled)(_FormControl.default, {
      name: "MuiTextField",
      slot: "Root",
      overridesResolver: (props, styles) => styles.root
    })({});
    var TextField2 = /* @__PURE__ */ React7.forwardRef(function TextField3(inProps, ref) {
      const props = (0, _DefaultPropsProvider.useDefaultProps)({
        props: inProps,
        name: "MuiTextField"
      });
      const {
        autoComplete,
        autoFocus = false,
        children,
        className,
        color = "primary",
        defaultValue,
        disabled = false,
        error = false,
        FormHelperTextProps: FormHelperTextPropsProp,
        fullWidth = false,
        helperText,
        id: idOverride,
        InputLabelProps: InputLabelPropsProp,
        inputProps: inputPropsProp,
        InputProps: InputPropsProp,
        inputRef,
        label,
        maxRows,
        minRows,
        multiline = false,
        name,
        onBlur,
        onChange,
        onFocus,
        placeholder,
        required = false,
        rows,
        select = false,
        SelectProps: SelectPropsProp,
        slots = {},
        slotProps = {},
        type,
        value,
        variant = "outlined",
        ...other
      } = props;
      const ownerState = {
        ...props,
        autoFocus,
        color,
        disabled,
        error,
        fullWidth,
        multiline,
        required,
        select,
        variant
      };
      const classes = useUtilityClasses(ownerState);
      if (define_process_env_default.NODE_ENV !== "production") {
        if (select && !children) {
          console.error("MUI: `children` must be passed when using the `TextField` component with `select`.");
        }
      }
      const id = (0, _useId.default)(idOverride);
      const helperTextId = helperText && id ? `${id}-helper-text` : void 0;
      const inputLabelId = label && id ? `${id}-label` : void 0;
      const InputComponent = variantComponent[variant];
      const externalForwardedProps = {
        slots,
        slotProps: {
          input: InputPropsProp,
          inputLabel: InputLabelPropsProp,
          htmlInput: inputPropsProp,
          formHelperText: FormHelperTextPropsProp,
          select: SelectPropsProp,
          ...slotProps
        }
      };
      const inputAdditionalProps = {};
      const inputLabelSlotProps = externalForwardedProps.slotProps.inputLabel;
      if (variant === "outlined") {
        if (inputLabelSlotProps && typeof inputLabelSlotProps.shrink !== "undefined") {
          inputAdditionalProps.notched = inputLabelSlotProps.shrink;
        }
        inputAdditionalProps.label = label;
      }
      if (select) {
        if (!SelectPropsProp || !SelectPropsProp.native) {
          inputAdditionalProps.id = void 0;
        }
        inputAdditionalProps["aria-describedby"] = void 0;
      }
      const [RootSlot, rootProps] = (0, _useSlot.default)("root", {
        elementType: TextFieldRoot,
        shouldForwardComponentProp: true,
        externalForwardedProps: {
          ...externalForwardedProps,
          ...other
        },
        ownerState,
        className: (0, _clsx.default)(classes.root, className),
        ref,
        additionalProps: {
          disabled,
          error,
          fullWidth,
          required,
          color,
          variant
        }
      });
      const [InputSlot, inputProps] = (0, _useSlot.default)("input", {
        elementType: InputComponent,
        externalForwardedProps,
        additionalProps: inputAdditionalProps,
        ownerState
      });
      const [InputLabelSlot, inputLabelProps] = (0, _useSlot.default)("inputLabel", {
        elementType: _InputLabel.default,
        externalForwardedProps,
        ownerState
      });
      const [HtmlInputSlot, htmlInputProps] = (0, _useSlot.default)("htmlInput", {
        elementType: "input",
        externalForwardedProps,
        ownerState
      });
      const [FormHelperTextSlot, formHelperTextProps] = (0, _useSlot.default)("formHelperText", {
        elementType: _FormHelperText.default,
        externalForwardedProps,
        ownerState
      });
      const [SelectSlot, selectProps] = (0, _useSlot.default)("select", {
        elementType: _Select.default,
        externalForwardedProps,
        ownerState
      });
      const InputElement = /* @__PURE__ */ (0, _jsxRuntime.jsx)(InputSlot, {
        "aria-describedby": helperTextId,
        autoComplete,
        autoFocus,
        defaultValue,
        fullWidth,
        multiline,
        name,
        rows,
        maxRows,
        minRows,
        type,
        value,
        id,
        inputRef,
        onBlur,
        onChange,
        onFocus,
        placeholder,
        inputProps: htmlInputProps,
        slots: {
          input: slots.htmlInput ? HtmlInputSlot : void 0
        },
        ...inputProps
      });
      return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(RootSlot, {
        ...rootProps,
        children: [label != null && label !== "" && /* @__PURE__ */ (0, _jsxRuntime.jsx)(InputLabelSlot, {
          htmlFor: id,
          id: inputLabelId,
          ...inputLabelProps,
          children: label
        }), select ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(SelectSlot, {
          "aria-describedby": helperTextId,
          id,
          labelId: inputLabelId,
          value,
          input: InputElement,
          ...selectProps,
          children
        }) : InputElement, helperText && /* @__PURE__ */ (0, _jsxRuntime.jsx)(FormHelperTextSlot, {
          id: helperTextId,
          ...formHelperTextProps,
          children: helperText
        })]
      });
    });
    define_process_env_default.NODE_ENV !== "production" ? TextField2.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * This prop helps users to fill forms faster, especially on mobile devices.
       * The name can be confusing, as it's more like an autofill.
       * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
       */
      autoComplete: _propTypes.default.string,
      /**
       * If `true`, the `input` element is focused during the first mount.
       * @default false
       */
      autoFocus: _propTypes.default.bool,
      /**
       * @ignore
       */
      children: _propTypes.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: _propTypes.default.object,
      /**
       * @ignore
       */
      className: _propTypes.default.string,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
       * @default 'primary'
       */
      color: _propTypes.default.oneOfType([_propTypes.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), _propTypes.default.string]),
      /**
       * The default value. Use when the component is not controlled.
       */
      defaultValue: _propTypes.default.any,
      /**
       * If `true`, the component is disabled.
       * @default false
       */
      disabled: _propTypes.default.bool,
      /**
       * If `true`, the label is displayed in an error state.
       * @default false
       */
      error: _propTypes.default.bool,
      /**
       * Props applied to the [`FormHelperText`](https://mui.com/material-ui/api/form-helper-text/) element.
       * @deprecated Use `slotProps.formHelperText` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       */
      FormHelperTextProps: _propTypes.default.object,
      /**
       * If `true`, the input will take up the full width of its container.
       * @default false
       */
      fullWidth: _propTypes.default.bool,
      /**
       * The helper text content.
       */
      helperText: _propTypes.default.node,
      /**
       * The id of the `input` element.
       * Use this prop to make `label` and `helperText` accessible for screen readers.
       */
      id: _propTypes.default.string,
      /**
       * Props applied to the [`InputLabel`](https://mui.com/material-ui/api/input-label/) element.
       * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.
       * @deprecated Use `slotProps.inputLabel` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       */
      InputLabelProps: _propTypes.default.object,
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       * @deprecated Use `slotProps.htmlInput` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       */
      inputProps: _propTypes.default.object,
      /**
       * Props applied to the Input element.
       * It will be a [`FilledInput`](https://mui.com/material-ui/api/filled-input/),
       * [`OutlinedInput`](https://mui.com/material-ui/api/outlined-input/) or [`Input`](https://mui.com/material-ui/api/input/)
       * component depending on the `variant` prop value.
       * @deprecated Use `slotProps.input` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       */
      InputProps: _propTypes.default.object,
      /**
       * Pass a ref to the `input` element.
       */
      inputRef: _refType.default,
      /**
       * The label content.
       */
      label: _propTypes.default.node,
      /**
       * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
       * @default 'none'
       */
      margin: _propTypes.default.oneOf(["dense", "none", "normal"]),
      /**
       * Maximum number of rows to display when multiline option is set to true.
       */
      maxRows: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      /**
       * Minimum number of rows to display when multiline option is set to true.
       */
      minRows: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      /**
       * If `true`, a `textarea` element is rendered instead of an input.
       * @default false
       */
      multiline: _propTypes.default.bool,
      /**
       * Name attribute of the `input` element.
       */
      name: _propTypes.default.string,
      /**
       * @ignore
       */
      onBlur: _propTypes.default.func,
      /**
       * Callback fired when the value is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (string).
       */
      onChange: _propTypes.default.func,
      /**
       * @ignore
       */
      onFocus: _propTypes.default.func,
      /**
       * The short hint displayed in the `input` before the user enters a value.
       */
      placeholder: _propTypes.default.string,
      /**
       * If `true`, the label is displayed as required and the `input` element is required.
       * @default false
       */
      required: _propTypes.default.bool,
      /**
       * Number of rows to display when multiline option is set to true.
       */
      rows: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      /**
       * Render a [`Select`](https://mui.com/material-ui/api/select/) element while passing the Input element to `Select` as `input` parameter.
       * If this option is set you must pass the options of the select as children.
       * @default false
       */
      select: _propTypes.default.bool,
      /**
       * Props applied to the [`Select`](https://mui.com/material-ui/api/select/) element.
       * @deprecated Use `slotProps.select` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       */
      SelectProps: _propTypes.default.object,
      /**
       * The size of the component.
       * @default 'medium'
       */
      size: _propTypes.default.oneOfType([_propTypes.default.oneOf(["medium", "small"]), _propTypes.default.string]),
      /**
       * The props used for each slot inside.
       * @default {}
       */
      slotProps: _propTypes.default.shape({
        formHelperText: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
        htmlInput: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
        input: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
        inputLabel: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
        select: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
      }),
      /**
       * The components used for each slot inside.
       * @default {}
       */
      slots: _propTypes.default.shape({
        formHelperText: _propTypes.default.elementType,
        htmlInput: _propTypes.default.elementType,
        input: _propTypes.default.elementType,
        inputLabel: _propTypes.default.elementType,
        root: _propTypes.default.elementType,
        select: _propTypes.default.elementType
      }),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
      /**
       * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
       */
      type: _propTypes.default.string,
      /**
       * The value of the `input` element, required for a controlled component.
       */
      value: _propTypes.default.any,
      /**
       * The variant to use.
       * @default 'outlined'
       */
      variant: _propTypes.default.oneOf(["filled", "outlined", "standard"])
    } : void 0;
    var _default = exports2.default = TextField2;
  }
});

// node_modules/@mui/material/node/TextField/index.js
var require_TextField2 = __commonJS({
  "node_modules/@mui/material/node/TextField/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      textFieldClasses: true
    };
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _TextField.default;
      }
    });
    Object.defineProperty(exports2, "textFieldClasses", {
      enumerable: true,
      get: function() {
        return _textFieldClasses.default;
      }
    });
    var _TextField = _interopRequireDefault(require_TextField());
    var _textFieldClasses = _interopRequireWildcard(require_textFieldClasses());
    Object.keys(_textFieldClasses).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _textFieldClasses[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _textFieldClasses[key];
        }
      });
    });
  }
});

// src/App.tsx
init_define_process_env();
var React6 = __toESM(require_react());
var import_client = __toESM(require_client());

// src/Tree.tsx
init_define_process_env();
var React5 = __toESM(require_react());
var import_Box = __toESM(require_Box4());
var import_RichTreeView = __toESM(require_RichTreeView2());

// src/vscodeApi.ts
init_define_process_env();
var vscode = typeof acquireVsCodeApi !== "undefined" ? acquireVsCodeApi() : null;
var vscodeApi_default = vscode;

// src/Tree.tsx
var import_TreeItem2 = __toESM(require_TreeItem23());
var import_Typography = __toESM(require_Typography2());
var import_hooks = __toESM(require_hooks());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var treeNodeRefs = /* @__PURE__ */ new Map();
function NarrativeLabel({ sentence, className }) {
  const parseTechDoc = (text = "") => {
    const references = [];
    const sections = [];
    let lastIndex = 0;
    const pattern = /\{"([^"}]+)"}\[cell\s*(\d+(?:[-,]\d+)*)\]/g;
    let match2;
    while ((match2 = pattern.exec(text)) !== null) {
      sections.push(text.slice(lastIndex, match2.index));
      const rawCells = match2[2].trim();
      let cellList;
      if (rawCells.includes("-")) {
        const [start, end] = rawCells.split("-").map(Number);
        cellList = Array.from({ length: end - start + 1 }, (_, i) => start + i);
      } else {
        cellList = rawCells.split(",").map((n) => parseInt(n.trim(), 10));
      }
      const firstCell = cellList[0];
      references.push({
        content: match2[1].trim(),
        cell: firstCell
      });
      lastIndex = pattern.lastIndex;
    }
    sections.push(text.slice(lastIndex));
    return { parts: sections, references };
  };
  const handleCellClick = (cellIndex) => {
    console.log("Cell reference clicked:", cellIndex);
    vscodeApi_default?.postMessage({ type: "selectCell", index: cellIndex });
  };
  const renderContent = () => {
    const { parts, references } = parseTechDoc(sentence);
    return parts.map((section, index) => /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(React5.Fragment, { children: [
      section,
      index < references.length && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        "span",
        {
          onClick: () => handleCellClick(references[index].cell),
          style: { color: "#f0acb4", cursor: "pointer" },
          children: references[index].content.replace(/^['"]|['"]$/g, "")
        }
      )
    ] }, index));
  };
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", { className, children: renderContent() });
}
var CustomTreeItem = React5.forwardRef(function CustomTreeItem2(props, ref) {
  const innerRef = React5.useRef(null);
  React5.useEffect(() => {
    if (innerRef.current) {
      treeNodeRefs.set(props.itemId, innerRef.current);
    }
    return () => {
      treeNodeRefs.delete(props.itemId);
    };
  }, [props.itemId]);
  const { publicAPI } = (0, import_hooks.useTreeItem2Utils)({
    itemId: props.itemId,
    children: props.children
  });
  const item = publicAPI.getItem(props.itemId);
  const finalRef = (el) => {
    innerRef.current = el;
    if (typeof ref === "function") ref(el);
    else if (ref) ref.current = el;
  };
  if (item?.isNarrative) {
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_TreeItem2.TreeItem2,
      {
        ...props,
        ref: finalRef,
        slots: { label: NarrativeLabel },
        slotProps: {
          label: { sentence: item.sentence || "" }
        }
      }
    );
  }
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_TreeItem2.TreeItem2, { ...props, ref: finalRef });
});
var treeItemMap = /* @__PURE__ */ new Map();
var convertToTreeViewItems = (json, narrativeMapping, parentId = "") => {
  const seenSentences = /* @__PURE__ */ new Set();
  return json.groups.map((group, groupIndex) => {
    const groupId = `${parentId}group-${groupIndex}`;
    const groupNode = {
      id: groupId,
      label: group.name,
      children: group.subgroups.map((subgroup, subgroupIndex) => {
        const subgroupId = `${groupId}-subgroup-${subgroupIndex}`;
        const subgroupSentences = subgroup.cells.flatMap(
          (cell) => (narrativeMapping[cell] || []).filter((sentence) => {
            if (seenSentences.has(sentence)) return false;
            seenSentences.add(sentence);
            return true;
          }).map((sentence, i) => {
            const node2 = {
              id: `${subgroupId}-narrative-${cell}-${i}`,
              label: sentence,
              cellIndex: cell,
              isNarrative: true,
              sentence
            };
            treeItemMap.set(node2.id, node2);
            return node2;
          })
        );
        const subgroupNode = {
          id: subgroupId,
          label: subgroup.name,
          children: subgroupSentences
        };
        treeItemMap.set(subgroupId, subgroupNode);
        return subgroupNode;
      })
    };
    treeItemMap.set(groupId, groupNode);
    return groupNode;
  });
};
function collectExpandableIds(items) {
  const parents = /* @__PURE__ */ new Set();
  function walk(nodes, path) {
    for (const node2 of nodes) {
      const myPath = [...path, node2.id];
      if (node2.isNarrative) {
        for (let i = 0; i < path.length; i++) {
          parents.add(path[i]);
        }
      }
      if (node2.children) {
        walk(node2.children, myPath);
      }
    }
  }
  walk(items, []);
  return Array.from(parents);
}
function BasicRichTreeView({
  data,
  narrativeMapping,
  variableSummary
}) {
  console.log("narrative mapping", narrativeMapping);
  const items = React5.useMemo(
    () => convertToTreeViewItems(data, narrativeMapping),
    [data, narrativeMapping]
  );
  console.log("converted items", items);
  const [expandedIds, setExpandedIds] = React5.useState(
    () => collectExpandableIds(items)
  );
  const [selectedId, setSelectedId] = React5.useState("");
  React5.useEffect(() => {
    setExpandedIds(collectExpandableIds(items));
  }, [items]);
  React5.useEffect(() => {
    if (selectedId && treeNodeRefs.has(selectedId)) {
      const el = treeNodeRefs.get(selectedId);
      el.scrollIntoView({ behavior: "smooth", block: "center" });
    }
  }, [selectedId]);
  const handleNodeSelect = (event, nodeId) => {
    if (nodeId.includes("-narrative-")) return;
    const node2 = treeItemMap.get(nodeId);
    if (!node2 || Array.isArray(node2.children) && node2.children.length > 0)
      return;
    let cellIndex;
    const subMatch = nodeId.match(/^group-(\d+)-subgroup-(\d+)/);
    if (subMatch) {
      const [, g, s] = subMatch.map(Number);
      const cells = data.groups[g].subgroups[s].cells;
      if (cells.length > 0) cellIndex = cells[0];
    }
    if (cellIndex !== void 0) {
      vscodeApi_default?.postMessage({ type: "selectCell", index: cellIndex });
    }
  };
  React5.useEffect(() => {
    const handler = (event) => {
      const msg = event.data;
      if (msg.type === "expandNode") {
        const idx = msg.index;
        let groupId;
        let subgroupId;
        for (let g = 0; g < data.groups.length; g++) {
          for (let s = 0; s < data.groups[g].subgroups.length; s++) {
            if (data.groups[g].subgroups[s].cells.includes(idx)) {
              groupId = `group-${g}`;
              subgroupId = `group-${g}-subgroup-${s}`;
              break;
            }
          }
          if (subgroupId) break;
        }
        if (groupId && subgroupId) {
          setExpandedIds((prev2) => {
            const newIds = new Set(prev2);
            newIds.add(groupId);
            newIds.add(subgroupId);
            return Array.from(newIds);
          });
          setSelectedId(subgroupId);
        }
      }
    };
    window.addEventListener("message", handler);
    return () => window.removeEventListener("message", handler);
  }, [data.groups]);
  console.log("expanded", expandedIds);
  const headingText = variableSummary || data.narrative;
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_Box.default, { sx: { minWidth: 250 }, children: [
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_Typography.default,
      {
        variant: "body2",
        sx: {
          px: "12px",
          py: "4px",
          fontStyle: "italic",
          color: "white",
          fontSize: "12px !important"
        },
        children: headingText
      }
    ),
    items.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_RichTreeView.RichTreeView,
      {
        items,
        expandedItems: expandedIds,
        onExpandedItemsChange: (event, newIds) => {
          setExpandedIds(newIds);
        },
        selectedItems: selectedId ?? "",
        onSelectedItemsChange: (e, newSel) => setSelectedId(newSel ?? ""),
        onItemClick: handleNodeSelect,
        slots: { item: CustomTreeItem },
        sx: {
          "& .MuiTreeItem-content.Mui-selected": {
            backgroundColor: "rgba(135, 135, 135, 0.3)"
            // color: 'rgba(0,0,0,0.87)',
          },
          "& .MuiTreeItem-content.Mui-selected:hover": {
            backgroundColor: "rgba(135, 135, 135, 0.25)"
          },
          "& .MuiTreeItem-label": {
            fontSize: "12px !important",
            textAlign: "left"
          }
        }
      }
    ) : /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", { className: "loading-text", children: "Loading notebook data\u2026" })
  ] });
}

// src/Variables.tsx
init_define_process_env();
var import_Autocomplete = __toESM(require_Autocomplete2());
var import_TextField = __toESM(require_TextField2());
var import_react4 = __toESM(require_react());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
window.addEventListener("message", (event) => {
  const message = event.data;
  if (message.type === "sendHoveredVariable") {
    const variable = message.name;
    console.log("clicked variable", variable);
    addVariableToList(variable);
  }
});
function toggleTag(tag, variable) {
  const selected = tag.classList.contains("selected");
  document.querySelectorAll(".variable-tag.selected").forEach((el) => el.classList.remove("selected"));
  if (!selected) {
    tag.classList.add("selected");
    console.log(variable);
    vscodeApi_default?.postMessage({ type: "getVariableSummary", name: variable });
  } else {
    tag.classList.remove("selected");
    vscodeApi_default?.postMessage({ type: "clearTree" });
  }
}
function initTag(variable) {
  const tag = document.createElement("span");
  tag.className = "variable-tag";
  tag.dataset.variable = variable;
  const label = document.createElement("span");
  label.className = "label";
  label.textContent = variable;
  tag.appendChild(label);
  const btn = document.createElement("button");
  btn.className = "pin-btn";
  btn.textContent = "\u2716";
  tag.appendChild(btn);
  label.onclick = () => toggleTag(tag, variable);
  btn.onclick = (e) => {
    e.stopPropagation();
    const selected = tag.classList.contains("selected");
    if (selected) {
      vscodeApi_default?.postMessage({ type: "clearTree" });
    }
    tag.remove();
    if (tag.classList.contains("selected")) {
      tag.classList.remove("selected");
    }
  };
  return tag;
}
function addVariableToList(variable, narrative = true) {
  const container = document.getElementById("variables-list");
  let tag = container.querySelector(
    `span.variable-tag[data-variable="${variable}"]`
  );
  if (!tag) {
    tag = initTag(variable);
    container.prepend(tag);
  }
  if (narrative) {
    toggleTag(tag, variable);
  }
}
function List({
  data
}) {
  console.log("data ok", data);
  const freqMap = (0, import_react4.useMemo)(() => {
    const m = /* @__PURE__ */ new Map();
    data.forEach(({ name, frequency }) => {
      m.set(name, (m.get(name) || 0) + frequency);
    });
    return m;
  }, [data]);
  const top5 = (0, import_react4.useMemo)(
    () => Array.from(freqMap.entries()).sort(([, aFreq], [, bFreq]) => bFreq - aFreq).slice(0, 5).map(([name]) => name),
    [freqMap]
  );
  (0, import_react4.useEffect)(() => {
    const container = document.getElementById("variables-list");
    if (container) {
      container.innerHTML = "";
    }
    top5.forEach((name) => addVariableToList(name, false));
  }, [top5]);
  const names = (0, import_react4.useMemo)(
    () => [...new Set(data.map(({ name }) => name))],
    [data]
  );
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("div", { className: "variables-container", children: [
    /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
      import_Autocomplete.default,
      {
        freeSolo: true,
        options: names,
        openOnFocus: true,
        onChange: (_, value) => {
          if (typeof value === "string" && value) {
            addVariableToList(value);
          }
        },
        sx: {
          width: "calc(100% - 1em)",
          margin: "0.5em",
          "& .MuiOutlinedInput-root": {
            maxHeight: 22,
            backgroundColor: "white",
            "& .MuiOutlinedInput-input": {
              padding: "4px 8px",
              fontSize: 12,
              lineHeight: 1.2
            }
          }
        },
        renderInput: (params) => /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
          import_TextField.default,
          {
            ...params,
            placeholder: "\u{1F50E} Search for variables...",
            size: "small",
            fullWidth: true,
            variant: "outlined"
          }
        ),
        slotProps: {
          listbox: {
            sx: {
              p: 0,
              maxHeight: 200,
              overflowY: "auto",
              "& .MuiAutocomplete-option": {
                py: 0,
                px: 1,
                minHeight: 0,
                height: "1.5em",
                lineHeight: 1.5,
                fontSize: 12
              }
            }
          }
        }
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", { id: "variables-list" })
  ] });
}

// src/App.tsx
var import_styles = __toESM(require_styles());
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var theme = (0, import_styles.createTheme)({
  typography: {
    fontFamily: `'sofia-pro-soft', 'Quicksand', 'Helvetica Neue', sans-serif`,
    fontWeightLight: 300,
    fontWeightRegular: 300,
    fontWeightMedium: 300
  },
  components: {
    MuiCssBaseline: {
      styleOverrides: {
        body: {
          fontWeight: 300
        }
      }
    }
  }
});
function extractCellReferences(text) {
  const sentenceEndRegex = /[.!?](?=\s|$)/g;
  let sentences = [];
  let lastIndex = 0;
  let match2;
  while ((match2 = sentenceEndRegex.exec(text)) !== null) {
    const subText = text.substring(0, match2.index + 1);
    const openBrackets = (subText.match(/\{/g) || []).length;
    const closeBrackets = (subText.match(/\}/g) || []).length;
    if (openBrackets === closeBrackets) {
      sentences.push(text.substring(lastIndex, match2.index + 1).trim());
      lastIndex = match2.index + 1;
    }
  }
  if (lastIndex < text.length) {
    sentences.push(text.substring(lastIndex).trim());
  }
  console.log("sentences after splitting:", sentences);
  const extracted = {};
  const cellRegex = /\{"([^"}]+)"}\[cell\s*(\d+(?:[-,]\d+)*)\]/g;
  for (const sentence of sentences) {
    let match3;
    while ((match3 = cellRegex.exec(sentence)) !== null) {
      console.log("matched cell regex", match3);
      const cellNumbers = match3[2].split(",").map((num) => parseInt(num.trim(), 10));
      console.log("cellNumbers", cellNumbers);
      if (!extracted[cellNumbers[0]]) extracted[cellNumbers[0]] = [];
      extracted[cellNumbers[0]].push(sentence.trim());
    }
  }
  console.log("extracted:", extracted);
  return extracted;
}
function extractFirstSentence(text) {
  const match2 = text.match(/.*?[.?!](\s|$)/);
  if (match2) {
    return match2[0].trim();
  }
  return text.trim();
}
function App() {
  const [variables, setVariables] = React6.useState(null);
  const [tree, setTree] = React6.useState(null);
  const [narrativeMapping, setNarrativeMapping] = React6.useState({});
  const [variableSummary, setVariableSummary] = React6.useState(
    ""
  );
  React6.useEffect(() => {
    const handleMessage = (event) => {
      const message = event.data;
      if (message.command === "fetchVariables") {
        console.log("Received data from TreeViewProvider:", message.data);
        setVariables(message.data);
      }
      if (message.command === "fetchTree") {
        console.log("Received data from TreeViewProvider:", message.data);
        setTree(message.data);
        setNarrativeMapping({});
        setVariableSummary(null);
      }
      if (message.command === "fetchNarrative") {
        console.log("Received data from TreeViewProvider:", message.data);
        setNarrativeMapping(extractCellReferences(message.data));
        setVariableSummary(extractFirstSentence(message.data));
      }
    };
    window.addEventListener("message", handleMessage);
    return () => {
      window.removeEventListener("message", handleMessage);
    };
  }, []);
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_styles.ThemeProvider, { theme, children: /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "notebook-container", children: [
    /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", { className: "top-section", children: variables ? /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(List, { data: variables }) : /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("p", { className: "loading-text", children: "Loading notebook data\u2026" }) }),
    /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", { className: "bottom-section", children: tree ? /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
      BasicRichTreeView,
      {
        data: tree,
        narrativeMapping,
        variableSummary
      }
    ) : /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("p", { className: "loading-text", children: "Loading notebook data\u2026" }) })
  ] }) });
}
(function() {
  const rootElement = document.getElementById("app");
  if (rootElement) {
    const root = import_client.default.createRoot(rootElement);
    root.render(/* @__PURE__ */ (0, import_jsx_runtime3.jsx)(App, {}));
  } else {
    console.error("Root element not found.");
  }
})();
/*! Bundled license information:

react/cjs/react.production.js:
  (**
   * @license React
   * react.production.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.production.js:
  (**
   * @license React
   * scheduler.production.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.production.js:
  (**
   * @license React
   * react-dom.production.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom-client.production.js:
  (**
   * @license React
   * react-dom-client.production.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom-client.development.js:
  (**
   * @license React
   * react-dom-client.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.production.min.js:
  (** @license React v16.13.1
   * react-is.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.production.min.js:
  (** @license React v16.13.1
   * react-is.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

react/cjs/react-jsx-runtime.production.js:
  (**
   * @license React
   * react-jsx-runtime.production.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/styled-engine/node/index.js:
  (**
   * @mui/styled-engine v6.4.11
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.production.js:
  (**
   * @license React
   * react-is.production.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (**
   * @license React
   * react-is.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/utils/index.js:
  (**
   * @mui/utils v6.4.9
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/private-theming/node/index.js:
  (**
   * @mui/private-theming v6.4.9
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/system/index.js:
  (**
   * @mui/system v6.4.11
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/styled-engine/index.js:
  (**
   * @mui/styled-engine v7.0.2
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/utils/index.js:
  (**
   * @mui/utils v7.0.2
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/private-theming/index.js:
  (**
   * @mui/private-theming v7.0.2
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/system/index.js:
  (**
   * @mui/system v7.0.2
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=App.js.map
